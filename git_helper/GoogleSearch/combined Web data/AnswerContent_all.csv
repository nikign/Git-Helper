"Use git add --ignore-errors .This will still give an error for the unreadable file(s), but not a fatal one. The other files will be added.Would it help if you added that file to your .gitignore file?  So all other files would be versioned and that file would get ignored (unless you need it).Just exclude the file. You can add .mysql_history to a .gitignore file, or add it to .git/info/exclude.Adding an entry to .gitignore will propagate the setting with the repo (since .gitignore is stored with the repo); adding it to .git/info/exclude makes it ""personal"" because this file is not propagated with the repo. Either way, .mysql_history will be ignored by git-add and friends.You can read more about ignoring files with Git on this man page.sudo chown $(whoami): .git/objects/ -R; git add --ignore-errors .fixed it for me. The first half fixed ownership, (someone checked-in as root, naughty) and the second half makes errors non-fatal. The second half on its own helped me track down which directory was owned by root."
"Trust the code editors to manipulate your line endings. Auto crlf should be false. Don't let source control get too smart. If don't need to have your source control tool to change your line endings, don't. This will hurt.To reiterate from an accepted answer: ""Unless you can see specific treatment which must deal with native eol, you are better off leaving autocrlf to false.""Also from the progit book at the end of the section on autocrlf:""If you‰Ûªre a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to false""The only other help I can give is that if you take the other route, get familiar with vim -b which will show special characters such as the CR in MSysGit, and git show HEAD:path/to/your/file.txt which should show you the file in the way that git stored it. Set core.whitespace cr-at-eol to have patches and diffs not highlight CRs as possible problematic whitespace.Not worth the hassle. Store as-is.very new to this so setting core.autocrlf to false didn't make too much sense to me. So for other newbies, go to the config file in you .git folder and add:[core]    autocrlf = falseunder the [core] heading.The problem is probably occurring because you set Git to store files internally with crlf with the core.eol setting. When you add a file, Git is warning you it will change it to the internal format.Git works best with lf line endings, so if possible always work with core.eol = lf.This should explain when to use core.autocrlf, Why should I use core.autocrlf=true in Git?You may also want to use core.safecrlf. Check git config --help for details on the settings.The git autodetection of formats works pretty well. Therefore, core.autocrlf=true is a really good idea on Windows.Saying git config --global core.safecrlf=false says to git: Hey, please convert my wrong line endings (LF only) to Windows line endings (CRLF) and do not bother me with it.Therefore, you should really disable core.safecrlf.Longer answer at: http://stackoverflow.com/a/15471083/873282"
"error: insufficient permission for adding an object to repository database .git/objectsThat is your problem. For some reason or another, Git is having trouble writing to .git/objects - typically this means it is owned by another user and doesn't have the proper permissions.Try seeing what permissions the folder currently has by running ls -l .git/objects. Then, you can chmod or chown (or both) as necessary.I hadn't changed any permissions on my files, but I had the same error message and fixed it by changing ownership on the git directory (chown -R user:group .git)."
"Try to do in your folder. ls What do you get ? It seems that README is not found in your folder."
"Repair PermissionsAfter you have identified and fixed the underlying cause (see below), you'll want to repair the permissions:cd /path/to/repo.gitchgrp -R groupname .chmod -R g+rwX .find . -type d -exec chmod g+s '{}' +If you do not fix the underlying cause, the error will keep coming back and you'll have to keep re-running the above commands over and over again.Underlying CausesThe error could be caused by one of the following:The repository isn't configured to be a shared repository (see core.sharedRepository in git help config).  If the output of:git config core.sharedRepositoryis not group or true or 1 or some mask, try running:git config core.sharedRepository groupand then re-run the recursive chmod and chgrp (see ""Repair Permissions"" above).The operating system doesn't interpret a setgid bit on directories as ""all new files and subdirectories should inherit the group owner"".When core.sharedRepository is true or group, Git relies on a feature of GNU operating systems (e.g., every Linux distribution) to ensure that newly created subdirectories are owned by the correct group (the group that all of the repository's users are in).  This feature is documented in the GNU coreutils documentation:... [If] a directory's set-group-ID bit is set, newly created subfiles inherit the same group as the directory, and newly created subdirectories inherit the set-group-ID bit of the parent directory. ... [This mechanism lets] users share files more easily, by lessening the need to use chmod or chown to share new files.However, not all operating systems have this feature (NetBSD is one example).  For those operating systems, you should make sure that all of your Git users have the same default group.  Alternatively, you can make the repository world-writable by running git config core.sharedRepository world (but be careful‰ÛÓthis is less secure).The file system doesn't support the setgid bit (e.g., FAT).  ext2, ext3, ext4 all support the setgid bit.  As far as I know, the file systems that don't support the setgid bit also don't support the concept of group ownership so all files and directories will be owned by the same group anyway (which group is a mount option).  In this case, make sure all Git users are in the group that owns all the files in the file system.Not all of the Git users are in the same group that owns the repository directories.  Make sure the group owner on the directories is correct and that all users are in that group.For Ubuntu (or any Linux)From project root,cd .git/objectsls -alsudo chown -R yourname:yourgroup *You can tell what yourname and yourgroup should be by looking at the permissions on the majority of the output from that ls -al commandNote: remember the star at the end of the sudo lineA good way to debug this is the next time it happens, SSH into the remote repo, cd into the objects folder and do an ls -al.If you see 2-3 files with different user:group ownership than this is the problem.It's happened to me in the past with some legacy scripts access our git repo and usually means a different (unix) user pushed / modified files last and your user doesn't have permissions to overwrite those files. You should create a shared git group that all git-enabled users are in and then recursively chgrp the objects folder and it's contents so that it's group ownership is the shared git group. You should also add a sticky bit on the folder so that all the files created in the folder will always have the group of git.chmod g+s directory-nameUpdate: I didn't know about core.sharedRepository. Good to know, though it probably just does the above.I just wanted to add my solution. I had a repo on OS X that had ownership of root on some directories and Home (which is my user directory) on others which caused the same error listed above.The solution was simple thankfully. From terminal:sudo chown -R Home projectdirectoryThis can easily happen if you ran git init with a different user from the one you are planning to use when pushing changes.If you blindly follow the instructions on [1] this will happen as you probably created the git-user as root and then immediately moved on to git init without changing user in between.[1] http://git-scm.com/book/en/Git-on-the-Server-Setting-Up-the-ServerSolved for me...just this:sudo chmod 777 -R .git/objectssudo chmod -R ug+w .;This has fixed the issue for me. Basically .git/objects file does not had a write permission, the above line grants permission to all the files and folders in the directory.After you add some stuff... commit them and after all finished push it! BANG!! Start all problems... As you should notice there are some differences in the way both new and existent projects were defined. If some other person tries to add/commit/push same files, or content (git keep both as same objects), we will face the following error:$ git pushCounting objects: 31, done.Delta compression using up to 2 threads.Compressing objects: 100% (17/17), done.Writing objects: 100% (21/21), 2.07 KiB | 0 bytes/s, done.Total 21 (delta 12), reused 0 (delta 0)remote: error: insufficient permission for adding an object to repository database ./objects  remote: fatal: failed to write objectTo solve this problem you have to have something in mind operational system's permissions system as you are restricted by it in this case. Tu understand better the problem, go ahead and check your git object's folder (.git/objects). You will probably see something like that:<your user_name>@<the machine name> objects]$ ls -latotal 200drwxr-xr-x 25 <your user_name> <group_name> 2048 Feb 10 09:28 .drwxr-xr-x  3 <his user_name> <group_name> 1024 Feb  3 15:06 ..drwxr-xr-x  2 <his user_name> <group_name> 1024 Jan 31 13:39 02drwxr-xr-x  2 <his user_name> <group_name> 1024 Feb  3 13:24 08*Note that those file's permissions were granted only for your users, no one will never can changed it... *Level       u   g   oPermission rwx r-x ---Binary     111 101 000Octal       7   5   0SOLVING THE PROBLEMIf you have super user permission, you can go forward and change all permissions by yourself using the step two, in any-other case you will need to ask all users with objects created with their users, use the following command to know who they are:$ ls -la | awk '{print $3}' | sort -u <your user_name><his user_name>Now you and all file's owner users will have to change those files permission, doing:$ chmod -R 774 .After that you will need to add a new property that is equivalent to --shared=group done for the new repository, according to the documentation, this make the repository group-writable, do it executing:$ git config core.sharedRepository grouphttps://coderwall.com/p/8b3ksgFor my case none of the suggestions worked. I'm on Windows and this worked for me:Copy the remote repo into another folderShare the folder and give appropriate permissions.Make sure you can access the folder from your local machine. Add this repo as another remote repo in your local repo. (git remote add foo //SERVERNAME/path/to/copied/git)Push to foo. git push foo master. Did it worked? Great! Now delete not-working repo and rename this into whatever it was before. Make sure permissions and share property remains the same."
"chown [ -f ] [ -h ] [ -R ] Owner [ :Group ] { File ... | Directory ... }From the man pageThe chown command changes the owner of the file specified by the File  parameter to the user specified by the Owner parameter. The value  of the Owner parameter can be a user ID or a login name found in the  /etc/passwd file. Optionally, a group can also be specified. The value  of the Group parameter can be a group ID or a group name found in  the /etc/group file.About the -R option-R   Descends directories recursively, changing the ownership for each  file. When a symbolic link is encountered and the link points to a  directory, the ownership of that directory is changed but the directory  is not further transversed.Sochown -R user:christophe /myapp/app/views/reviews/update.js.erbWould change the owner of the update.js.erb file to the user user in the group christophe, which is probably not what you want.In your case changing the owner of the repo to yourself, i.e.sudo chown -R christophe /path/to/your/local/reposhould suffice.If you don't know your user name, you can find it out with the whoami command.1) Make sure you're inside the repository where you're getting the error.2) Get your username by typing `whoami`3) Enter this command sudo chown -R dwain .git/*"
"First in the clone folder you can create a Branch (so the master stay untouched)Git Branch [name]After just copy the file you want (in your old folder) to the clone folder.When you are done, just add / commit your change and Merge your branch into the ""master"" branchIt's  will look to something like this.git add .git commit -m ""Comments""git checkout mastergit merge [new_branch]Try this tutorial from GitHubThat's because you are versioning stuff inside /home/mylogin/gitclone and git tracks everything inside that folder. You cannot track other folders outside of this repository.A solution might be create a submodule, or using a symbolic link using ln -sYou'll have to move all the files from /var/www/myapp to /home/mylogin/gitclone and then do a git add . and then git commit -m ""Your message"".To add some files or folder to your repository, they have to be in the folder you created with ""git clone"". So copy/paste your application in your local git folder and then go in it and do ""git add *"" and then you'll be able to commit to the server with ""git commit -m 'message'"" and finally push the changes to the server with ""git push"""
"You don't want '-u' as it will only add files that you are already tracking.  After a git init you are not tracking anything yet. From the documentation:-u, --update: Only match  against already tracked files in the index rather than the working tree. That means that it will never  stage new files, but that it will stage modified new contents of  tracked files and that it will remove files from the index if the  corresponding files in the working tree have been removed.Use -A (or --all) instead.For your specific problem, when you write '*.pdf' the shell expands that into 4500 files.  That large number of files probably overflows the shell command line input buffer; which leads to the error.   You could do a few things:git add -A               # adds everything at onceorfor file in *.pdf; do git add -A $file; done    # add files one by oneBoth of these suggestions will avoid the command line issue; the first is preferred."
"This is the result of a change that was made to msys Git in December 2014.On Windows' default filesystems, FAT and NTFS, DOS-style 8.3 file names are  supported for backwards compatibility. That means that there are multiple  ways to reference the same file. For example, the file  credential-cache--daemon.c can also be accessed via CREDEN~1.C (unless  another file has already been mapped to that so-called ""short name"", i.e.  the exact short name is unpredictable).Since this mapping is unpredictable, we need to disallow such file names on  Windows, and while at it, we also exclude other file names incompatible with   Windows' file systems (e.g. NUL, CON, etc).We use the core.protectNTFS guard introduced in the previous commit to make  sure that we prevent such file names only when appropriate.To disable this behaviour, you can run:git config core.protectNTFS falseHowever, since the new behaviour is there to protect you, I‰Ûªd recommendchanging it back after having added your files:git config core.protectNTFS trueOnly disable this protection when you need to add files with tildes in thename or check out branches containing such filenames.In general, I‰Ûªd recommend avoiding such filenames if working ina Windows environment."
"You should not have options (like --all) like after parameters (like filenames). So try switching them around:git add --all *Additionally, if a filename begins with a minus it will be mis-interpreted as an option (a file -Clown looks like options -C -l -o -w -n to programs on the commandline). To mitigate this you can stop option parsing using --:git add --all -- *switches should come before the file list - I'm guessing you have a file named C which the * is expanded to by the shell. Note, however, that with --all you do not need to provide a file list:git add --all"
"Going into terminal and manually committing to git solved the issue. All my further commits in xcode have worked since.git add .git commit -m ""message""The same issue happen to me with the Bolts.framework and Parse.framework. Both were added in the git repo already, so adding them back did not fixed the issue. I had to remove first:cd MyApp/SDK/git rm -r Parse.framework/git rm -r Bolts.framework/The I had to copy them again in the SDK/ folder and adding to git cd MyApp/SDK/ git add . git commit * -m ""Maintenance: Fixed git error unable to index file"""
"This is the error you get when you attempt to rungit commit <file>but <file> hasn't been staged yet; in other words, Git hasn't been told about it, yet. This is most likely what's happening here. Rungit add application/libraries/Funder.phpthen try to commit.The reason why this error happens is pointed in this post: http://stackoverflow.com/a/29485441/2769415Solution:Rename the file back to the original one, then rename it to a different name, then back to the one with the correct capitalization. Git will not throw the bug anymore.Example:Created FOOBar class.Renamed it to FooBar and then got the error.Rename it back to FOOBar.Rename to FooBarTest.Rename to FooBar.Git works now.I had the same problem in Android Studio after renaming some activities. I tried adding (git add) and moving (git mv) the files but never helped and I was getting the same message again and again.Finally I decided to backup the classes in the package that had the problematic file in a separate folder in my HDD, then I removed the files from the original folder and in the terminal I did:rm app/src/main/java/com/path/to/package/with/problematic/files/Then recreated the deleted package via Android Studio and copied and pasted my classes back there. After that I was able to commit without any issues.I had this failing commit scenario due to a renamed directory.This was the originally created directory with a capitalization mistake:application/Templates/lists/index.htmlWithin the IDE, I had agreed to add this file to the existing git repo.In later testing, I discovered I had a case-sensitive path issue with the capitalization of ""Templates"".  Within the IDE, I simply renamed the directory to ""templates"" (changed to lower-case).  I did not record the actual sequence of events around this, but later when my commit failed with the following message, I had a hunch this was this issue.  Apparently, the IDE did not fully handle this case of renaming a directory.The IDE commit error message:  Commit failed with error: pathspec  ""application/templates/lists/index.html"" did not match any file(s)  known to git.After doing some reading, my strategy was to take the file back out and then add it again.  I unstaged the suspect filegit reset HEAD lists/Templates/lists/index.htmlNote, git status only showed the directory here... Not the file.Untracked files:  (use ""git add <file>..."" to include in what will be committed)    lists/templates/Then, I added back with the corrected directory name (I only used the path for the add, following the lead from git status).git add lists/templates/After this, my commit succeeded.  I'm not sure if this was the ideal technique, but it resolved the commit error in my case.Here's a concise answer on the quickest way to resolve this issue. Similar to @cmbind55 post but to the point.Problem: I have added a file that I later renamed.Solution:Un-add the old file namegit reset HEAD oldFileName.fileNow, add the new file namegit add newFileName.fileCommit and be happyi had the same issue with the word ""certificate"" as a package name... when i rename the Package to ""certificates"" it just work... strange .."
"It is possible that a process (like the 7zip one) is still keeping an handle on that specific file, making another process (like git) unable to access/read said file.Try doing that operation again with as many applications closed as you can (or even just after a reboot), in order to see if the error still persists."
"What is a patch?A patch is little more (see below) than a series of instructions: ""add this here"", ""remove that there"", ""change this third thing to a fourth"".  That's why git tells you:The copy of the patch that failed is found in:c:/.../project2/.git/rebase-apply/patchYou can open that patch in your favorite viewer or editor, open the files-to-be-changed in your favorite editor, and ""hand apply"" the patch, using what you know (and git does not) to figure out how ""add this here"" is to be done when the files-to-be-changed now look little or nothing like what they did when they were changed earlier, with those changes delivered to you as a patch.A little moreA three-way merge introduces that ""little more"" information than the plain ""series of instructions"": it tells you what the original version of the file was as well.  If your repository has the original version, your git can compare what you did to a file, to what the patch says to do to the file.As you saw above, if you request the three-way merge, git can't find the ""original version"" in the other repository, so it can't even attempt the three-way merge.  As a result you get no conflict markers, and you must do the patch-application by hand.Using --rejectWhen you have to apply the patch by hand, it's still possible that git can apply most of the patch for you automatically and leave only a few pieces to the entity with the ability to reason about the code (or whatever it is that needs patching).  Adding --reject tells git to do that, and leave the ""inapplicable"" parts of the patch in rejection files.  If you use this option, you must still hand-apply each failing patch, and figure out what to do with the rejected portions.Once you have made the required changes, you can git add the modified files and use git am --continue to tell git to commit the changes and move on to the next patch.What if there's nothing to do?Since we don't have your code, I can't tell if this is the case, but sometimes, you wind up with one of the patches saying things that amount to, e.g., ""fix the spelling of a word on line 42"" when the spelling there was already fixed.In this particular case, you, having looked at the patch and the current code, should say to yourself: ""aha, this patch should just be skipped entirely!""  That's when you use the other advice git already printed:If you prefer to skip this patch, run ""git am --skip"" instead.If you run git am --skip, git will skip over that patch, so that if there were five patches in the mailbox, it will end up adding just four commits, instead of five (or three instead of five if you skip twice, and so on)."
"The first workaround, which seems to work with recent versions of Git (2.3+, Q2+ 2015) is mentioned in grant's more up-to-date answer:Delete the index$ rm .git/indexAdd all$ git add -ACommit$ git commit -aOriginal answer (late 2014)The usual workaround is to:clone again the remote repo into a new local repoadd the changes from the first repo to the second one:$ cd /patH/to/second/cloned/repo$ git --work-tree=/path/to/first/repo add .You can see this error message in read-cache.c, discussed in this patch (""read-cache.c: Ensure unmerged entries are removed ""), and introduced in the Git 2.2 commit.Since this is so recent, it is possible that downgrading Git to 2.1 would be enough to not be affected by that patch.The OP Daniel Toebe adds in the comments:The issue happened on my macbook, which decided to fail on me, and another computer mishap put me way behind on my projects.I believe I encountered this issue because I added and committed changes and then deleted a file that I had just committed. If this sounds similar to your case, I recommend following the below to save re-cloning and manually adding in your changes.I was able to fix this issue by deleting the .git/index file in my repository, similar to what @slider suggested (I believe he mistyped the path).rm .git/indexThen I had to add and commit my local changes againgit add -Agit commit -m ""...""I was then able to push remotely.What is the git index and how is it relevant?What‰Ûªs The Deal With The Git Index?The git ‰ÛÏindex‰Ûù is where you place files you want committed to the git repository.Before you ‰ÛÏcommit‰Ûù (checkin) files to the git repository, you need to first place the files in the git ‰ÛÏindex‰Ûù.I believe that by deleting this file, git will re-index the repo, create a new one and you're good to go. It solves this problem because the local repository is re-indexed without the file I deleted that caused all the fuss.Edit: It seems like this is Mac related (based on comments) so if it helps I'm on OSX 10.10 and git version 2.3.4 installed through brew.rm .git/indexgit resetafter deleting index you need to recreate it by git resetYou can remove Git index file from your project. In the root of your project, run the following command:rm .git/indexAfter that git it work.I try a different solution and it works for me. Below are my options#cd .git#rm index#cd ..#git add ."
"Did you init a local Git repository, into which this remote is supposed to be added?Does your local directory have a .git folder?Try git init.You'll get this error if you try to use a Git command when your current working directory is not within a Git repository. That is because, by default, Git will look for a .git repository directory (inside of the project root?), as pointed out by my answer to ""Git won't show log unless I am in the project directory"":According to the official Linux Kernel Git documentation,  GIT_DIR is [an environment variable] set to look for a .git directory (in the current  working directory?) by default:If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the base of the    repository.You'll either need to cd into the repository/working copy, or you didn't initialize or clone a repository in the first place, in which case you need to initialize a repo in the directory where you want to place the repo:git initor clone a repositorygit clone <remote-url>cd <repository>In command line/CLI, you will get this error if your current directory is NOT the repository. So, you have to first CD into the repo.NOTE: this does not answer to the common problem, which was OP‰Ûªs problem, but to different problem where this error message may come up. I didn‰Ûªt feel like doing new question just to write this answer down, tell me if I should do that instead :PI got to situation, most likely due to some corruption of certain crash I had, that I got this error even when .git did exist.smar@aaeru ~/P/Nominatim> git statusfatal: Not a git repository (or any of the parent directories): .gitsmar@aaeru ~/P/Nominatim [128]> ls .gitCOMMIT_EDITMSG  config*  FETCH_HEAD  HEAD  index  logs/  modules/  objects/  ORIG_HEAD packed-refsSince I didn‰Ûªt have anything that really needed preserving, I just went with dummy way, and did...smar@aaeru ~/P/Nominatim [128]> git initReinitialized existing Git repository in /home/smar/Projektit/Nominatim/.git/Still not working though, as for example git log returns fatal: bad default revision 'HEAD'. Remotes were there though, so I did git fetch --all and then just git reset --hard origin/master to get myself to the state the repo was previously.Note that if there is some uncommitted changes, you can see them with git status, git diff and so on. Then just git diff yourfile > patch before running the reset.At least for me reflog (git reflog) disappeared completely. Hence, if you do the reset, and there was some changes you wanted to prevent, I‰Ûªm not sure you can get them back after reset anymore. So, make sure that you have all changes you can‰Ûªt lose backed up, ultimately by just copying the clone before trying this.This issue occurred to me after I moved the location of a git project on the filesystem. When I ran some git commands the error occurred, e.g.:$ git statusfatal: Not a git repository: /home/rospasta/path_old/gitprojecta/.git/modules/.travisI found in /home/rospasta/path_old/gitprojecta/.travis/.git the absolute path of the old location of the project was written. Manually updating this path of the new location resolved the problem for me.So my issue may or may not be a git problem, but HTH."
"I often have this problem if something has changed, added files to gitignore or something else. Maybe you have to rebuild the index.Updated: added recursive and file param to git rmIn my case this worked:remove cached files (only the paths are removed from the index, not the real files!!!)git rm -r --cached .add all files to the indexgit add .commitgit commit -m ""hopefully fixed pathspec error""UPDATE:If this won't work, try the following:Get a new checkout from your reporemove composer, composer.lock, vendor/ from your .gitignorerun the above suggestion againmove the folders composer, composer.lock, vendor/ outside your repoadd and commit, maybe add with -A to add that the files are deletedadd composer, composer.lock, vendor/ to your .gitignore and commitmove back the folders composer, composer.lock, vendor/ to your repoNow it should be gone from the repo and due to your .gitignore, never will be commited again. Hopefully the pathspec error is gone :)"
"Windows‰Ûª file system is mostly case-insensitive, so you cannot rename a file by just changing its capitalization. Instead, you will have to use a temporary name in between.Try the following from the command line:git mv FOOBar.java FooBar.java.newgit mv FooBar.java.new FooBar.javagit commit -m 'Rename file'I found out a very simple solution to this.Say you need to rename a java package ""Activities"" to ""activities"". This package contains several files and sub-packagesFollow the sequence of stepsRefactor ""Activities"" to ""ActivitiesTemp"" (Shift + F6)Commit and push these changesRefactor again from ""ActivitiesTemp"" to ""activities""Commit and push these changesThats All Folks !Rename the file back to the original one, then rename it to a different name, then back to the one with the correct capitalization. Git will not throw the bug anymore, it's the same solution as Poke pointed out, but using android studio.Example:Created FOOBar class.Renamed it to FooBar and then got the error.Rename it back to FOOBar.Rename to FooBarTest.Rename to FooBar.Git works now.I also faced the almost same situation, in my case I have created a file and added to git (using git add ), after adding to git I have renamed the file. While committing I got the same type error. I solved with the following step use git status to see the staged files you can see your old file in the list - -app/src/main/java/blahblah/FOOBar.java--use git reset to remove file from staging git reset app/src/main/java/blahblah/FOOBar.javaAfter removing from staging you can add your new file git add app/src/main/java/blahblah/FooBar.javaafter this you can commit"
"Assuming you're not doing anything with git at the moment (i.e., not doing a push or pull or running a git script in the repository, for any reason), you could just remove the lock file manually and try again.Also, git expects a ""commit message"" describing your changes. Assuming you don't want an editor to open, you can provide an inline message using the -m option:git commit -m ""Changed this, that, and the other thing"""
"I understand that you want to use your GitHub for Mac GUI, but if you were to commit your changes through the terminal instead, here is what you would do:# Get the status of your working copy:$ git status# On branch Integrating-a-recommendations-textbox# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   assets/app/scripts/templates/popups/recommend.hbs#   modified:   web/wgwt/models.py#   modified:   web/wgwt/views.py## Add each file you want to commit individually:$ git add web/wgwt/models.py# Or add them all at once:$ git add ""*""# Make your commit$ git commit# You can also use the `--all` or `-a` flags during the commit# to add all **tracked/modified** files (but not untracked files)$ git commit -a# To push the new commits to a remote repo, use the following:$ git push <remote-name> head"
"On a ""broken link"" message, you could follow the GitFaq recommendations:back up all your state so that anything you do is re-doable if you corrupt things more!explode any corrupt pack-files  See ""man git-unpack-objects"", and in particular the ""-r"" flag.  Also, please realize that it only unpacks objects that aren't already available, so you need to move the pack-file away from its normal location first (otherwise git-unpack-objects will find all objects that are in the pack-file in the pack-file itself, and not unpack anything at all) replace any broken and/or missing objects  This is the challenging part.  Sometimes (hopefully often!) you can find the missing objects in other copies of the repositories.  At other times, you may need to try to find the data some other way (for example, maybe your checked-out copy contains the file content that when hashed will be the missing object?). make sure everything is happy with ""git fsck --full""repack everything to get back to an efficient state againNotes: missing objects can also be related to alternate (when you share objects between repositories) with git alternates (even though that can be risky).The JGit/Egit eclipse plugin is also known to have a few issues.(Update February 2012: those plugins have come a long way and are now quite stable)I had a similar issue just now. The corruption arose when my laptop did a hard power-off during a git pull. I have a remote backup repository. First I had several object files in .git/objects/??/* that were zero size. After a cp -a backup of the repository, I did this:remove the zero length objectsclone the remote repository into a ../fresh/ repositoryin the broken repository, I did cat ../fresh/.git/objects/pack/pack-*.pack | git unpack-objectsThis filled up the missing objects in the object database. The repository seems to be back up now.I had the same problem. After a lot of hair-pulling, I discovered that it was cause by changed permission to the repository's git files. I have solved it as follows:$ cd .git$ chmod 755 *Done!If you don't have uncommited changes the easiest solution is to delete the local branch:git branch -D [branch name]and then checkout again the remote branch:git checkout -b [branch name] origin/[branch name]I got a similar error in my Homebrew install‰Ûªs Git repository. Rather than restoring all the missing objects one by one, I found it easier to simply delete the .git directory and create it again by re-cloning from Homebrew‰Ûªs public repository. These were my steps:Check what information you have in your Git repository that you won‰Ûªt get by just re-cloning. For me, it was private branches, stashes, and remotes.Convert stashes into real commits by creating a new branch, applying the stash, and committing with something like ‰ÛÏ[WIP]‰Ûù in the name to show that it‰Ûªs a stash.Save branches that are not on the public remote by pushing them to a remote of your own. This could be fork of the repository on GitHub, or just a new Git repository in a different location on your machine.If you have more than one remote, save the output of git remote -v, which contains the names and URLs of your remotes, so you can manually add them back later.Delete your repoistory‰Ûªs .git directory (or rename it to .git-broken and delete it later). On the command-line, this is rm -rf .git.Re-clone the remote directory with git clone https://github.com/Homebrew/homebrew.git or whatever URI.This will have created a new sub-folder homebrew named after the repository. You want just the .git directory from that; your local files are already okay. So mv homebrew/.git .git, and then delete the homebrew folder.Your Git repository should have no errors, since you recreated it from scratch. Now just restore any information you saved in the first step.If you had additional remotes, add them again with git remote add <name> <url>.If you backed up any branches (or stashes converted to branches) to a remote repository, pull them from that repository to your local repository.If you want, you can convert the stash-branches back to stashes by rolling the ‰ÛÏ[WIP]‰Ûù commit with git reset HEAD^ and saving the working directory to a stash again with git stash save <custom-message>.If you run git fsck, you should see no errors:$ git fsckChecking object directories: 100% (256/256), done.Checking objects: 100% (197135/197135), done.Checking connectivity: 197162, done.$And git stash list, git branch, and git remote -v should show the same output as before."
"Git still think mysubmodule is a submodule, because it is recorded in the index with a special mode ""160000"".See ""git submodule update needed only initially?"" for more.To check that, as in in this answer, you can do a: $ git ls-tree HEAD mysubmodule  160000 commit c0f065504bb0e8cfa2b107e975bb9dc5a34b0398  mysubmodule That doesn't depend on the presence of the .gitmodule file, or on the content of mysubmodule.You need to remove that entry from the index first: git rm --cached mysubmoduleThen you can proceed."
"Git is not able to track files outside of the repository, and so when you're doinggit add /Users/dineshkumar/Documents/sampleiosGit tells you just that, literally: the path you're trying to add lies outside of the initialized repository you're in.The term repository is a bit moot so let's make it more clear.Usually you work with Git like this:$ mkdir project; cd project$ git init$ vim upload.php...$ git add upload.php...$ git commitWhen you run git init in a directory (""project"" in our case) Git creates a special subdirectory named "".git"" in it ‰ÛÓ which contains the actual repository data (objects and configuration) ‰ÛÓ and then turns the enclosing directory into a work tree.  The work tree contains the files which you actually edit and submit to Git to build up the next commit.The crucial propety of this design is that only files located in the work tree are managed by Git.  You can't git add a file from somewhere else ‰ÛÓ only from within the work tree.  Consequently, no one calls git add with full paths because this has no sense.I'm not sure where your confusion is rooted.  If you think that the git add command is supposed to copy a file/directory from somewhere into the work tree, you're wrong.  If you were't aware of the work tree and thought that the repository is able to track arbitrary files on a filesystem tree, you're wrong again ‰ÛÓ how would cloning work if this was true?You should make yourself familiar with the idea that git add is not for adding files to the repository, it's rather for adding changes in files into the so-called staging area, from which the next commit is made.  Adding a presently untracked file is just a special case of this ‰ÛÓ this addition is just a whole-file ""change"".Looking at your attempts I might make a guess that you want to turn /Users/dineshkumar/Documents/sampleios into a Git repository.  If this is the case, do$ cd /Users/dineshkumar/Documents/sampleios$ git init$ git add .$ git commitBut before you do that please start with the book as you seem to lack the most basic Git knowledge.assuming your directory /Users/username/Downloads/folder_name/ is within a git-repository (e.g. you are tracking /Users/username/Downloads/), simply do:cd /Users/username/Downloads/git add folder_name/git commitNOTE: i would not recommend tracking the Downloads/ folder, as this is volatile by nature.instead it might make more sense to track Projects/a git workbench repository is a directory that contains a .git folder. to add anything to the repository, it has to be within a repository (that is: in a subdirectory of the repository): you cannot track a folder/file that is outside of a git-repository."
"You must be in a git working directory to run this command.  It is the second answer down in the research link you produced.I am not sure but maybe try/rootinstead ofrootbecausewithout the / it will search root in /home/demo/root."
"First you need to have a local git repository for first_app:cd to /the/dir/with/first_appCreate the git repository with: git init This will create a 'hidden' .git/ directory which (basically) holds all the source controlled files that are checked in.Then git remote add to add the remote you want, then you can push the code to it (or pull from it).You can now think of the 'regular' visible files (the ones that existed in the directory before adding git) as working 'copies'.  The (full) file copies that are actually under .git/ are the ones being managed by source control, i.e. that is 'where' you are committing files 'to'.  So when you add and commit a file it is the .git/ directory that is getting the file. and when you then 'push' it, it goes to the remote.Did you initialize a git repository in your local app?The command is as follows.git init Then you can add an origin, copying it from GitHub."
"To solve the problem, I removed the file from git, then re-added it by doing the following:git rm ""myPathToAFile""git add .git commit -am 'my commit'Hope this helps someone else!I had the same issue. I'm using Windows 7 and my problem was the ""Maximum Path Length Limitation"" (max 260 characters for the path) (see http://msdn.microsoft.com/en-us/library/aa365247%28VS.85%29.aspx#maxpath for more details).My workaround was to shorten the classname a little bit."
"Even if the folder doesn't exist, check the index status:cd libs/OAuthgit ls-files -- functionsIf there is an entry registered in the index, you will need to remove it before being able to add your subrepos as a submodule.(as explained in ""Issue with adding common code as git submodule: ‰ÛÏalready exists in the index‰Ûù"")All this assumes that you are at the root folder of a currently cloned repo, which will act as the parent repo of any submodule you would declare."
"According to your log, it doesn't look like you added your files (to be tracked) before committing.Using git commit -am isn't enough, because it only adds modified files (that is, files that are already part of your repo). You're on your initial commit, so there aren't any files in the index yet.To add (stage) all the files in your current directory, use git add . before you commit. Alternately, use git add <filename1> <filename2> ... to stage individual files for commit.Then you can use git status to verify the files you want to add to your commit are staged to be committed. They should show up as green if they are properly staged (under a heading that says ""Changes to be committed"". Files that are not staged to be committed will show up as red, under a heading that says ""Changes not staged for commit"".More info on git workflow here: https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-RepositoryYou must use git add to add your untracked files.Use the commandgit add ."
"There was a bug in the git which allowed you to add any [.git|GIT] folder under your git project, which was fixed in later git versions.In your case you added a folder named [.git] in one of your project folders, so git experienced problems handling your repository.More info about the bug and the fix can be found here"
"Try adding using git add ""*.php"" ""*.js""As it currently stands, most probably the shell globbing is expanding the character * in a weird fashion, causing the add command to fail."
"When you see this error outside of github, here's a remedy.Got this from:http://mapopa.blogspot.com/2009/10/git-insufficient-permission-for-adding.htmlssh me@myservercd repository/.gitsudo chmod -R g+ws *sudo chgrp -R mygroup *git config core.sharedRepository trueAfter this the git daemon should use the group file permissions when writing to .git/objects.Usually this problem is caused by wrong user and group permissions on your Git servers file-system. The git repository has to be owned by the user and also his group.Example:If your user is called ""git"", his group ""gitgroup"", and the location of the Git repo is: git@mygitserverxyz.com:path/to/repo.gitthen do a: sudo chown -R git:gitgroup path/to/repo.git/This fixed the git insufficient permission error for me.sudo chmod 777 -R .git/objectsNothing of the above worked for me. A couple of hours later I found the reason for the problem:I used a repo url of the typessh://git@example.com/~git/repo.gitUnfortunately I stored a putty session with the name example.com which was configured to login as user myOtherUser. So, while I thought git connects to the host example.com with the User 'git', Git/TortoiseGit has connected to the putty session example.com which uses the User myOtherUser. This leads to the exact same ..insufficient permission.. error (cause both users are in different groups).Solution: Rename the putty session example.com to myOtherUse@example.comchmod should be chown, so the correct line is:sudo chown -R gituser.gituser objectsOddly enough, I had this issue on one clone of the repo I had, but not another I had.  Aside from re-cloning the repo (which a coworker did to successfully get around this issue), I managed to do a ""git reset"" to the commit I had before the failures started.  Then I re-committed the changes, and I was able to push successfully after that.  So despite all the indications there was a problem on the server, in this case it apparently was indicative of some oddity in the local repo.This works:sudo chmod -R gituser.gituser objectsIf you still get this error later after setting the permissions you may need to modify your creation mask. We found our new commits (folders under objects) were still being created with no group write permission, hence only the person who committed them could push into the repository.We fixed this by setting the umask of the SSH users to 002 with an appropriate group shared by all users.e.g. umask 002where the middle 0 is allowing group write by default.After you add some stuff... commit them and after all finished push it! BANG!! Start all problems... As you should notice there are some differences in the way both new and existent projects were defined. If some other person tries to add/commit/push same files, or content (git keep both as same objects), we will face the following error:$ git pushCounting objects: 31, done.Delta compression using up to 2 threads.Compressing objects: 100% (17/17), done.Writing objects: 100% (21/21), 2.07 KiB | 0 bytes/s, done.Total 21 (delta 12), reused 0 (delta 0)remote: error: insufficient permission for adding an object to repository database ./objects  remote: fatal: failed to write objectTo solve this problem you have to have something in mind operational system's permissions system as you are restricted by it in this case. Tu understand better the problem, go ahead and check your git object's folder (.git/objects). You will probably see something like that:<your user_name>@<the machine name> objects]$ ls -latotal 200drwxr-xr-x 25 <your user_name> <group_name> 2048 Feb 10 09:28 .drwxr-xr-x  3 <his user_name> <group_name> 1024 Feb  3 15:06 ..drwxr-xr-x  2 <his user_name> <group_name> 1024 Jan 31 13:39 02drwxr-xr-x  2 <his user_name> <group_name> 1024 Feb  3 13:24 08*Note that those file's permissions were granted only for your users, no one will never can changed it... *Level       u   g   oPermission rwx r-x ---Binary     111 101 000Octal       7   5   0SOLVING THE PROBLEMIf you have super user permission, you can go forward and change all permissions by yourself using the step two, in any-other case you will need to ask all users with objects created with their users, use the following command to know who they are:$ ls -la | awk '{print $3}' | sort -u <your user_name><his user_name>Now you and all file's owner users will have to change those files permission, doing:$ chmod -R 774 .After that you will need to add a new property that is equivalent to --shared=group done for the new repository, according to the documentation, this make the repository group-writable, do it executing:$ git config core.sharedRepository grouphttps://coderwall.com/p/8b3ksgsudo su rootchown -R user:group dirThe dir is your git repo.Then do:git pull origin masterYou'll see changes about commits by others."
"What is currently happening is, that you have a certain set of files, which you have tried merging earlier, but they threw up merge conflicts.Ideally, if one gets a merge conflict, he should resolve them manually, and commit the changes using git add file.name && git commit -m ""removed merge conflicts"".Now, another user has updated the files in question on his repository, and has pushed his changes to the common upstream repo.It so happens, that your merge conflicts from (probably) the last commit were not not resolved, so your files are not merged all right, and hence the U(unmerged) flag for the files.So now, when you do a git pull, git is throwing up the error, because you have some version of the file, which is not correctly resolved.To resolve this, you will have to resolve the merge conflicts in question, and add and commit the changes, before you can do a git pull.Sample reproduction and resolution of the issue:# Note: commands below in format `CUURENT_WORKING_DIRECTORY $ command params`Desktop $ cd testFirst, let us create the repository structuretest $ mkdir repo && cd repo && git init && touch file && git add file && git commit -m ""msg""repo $ cd .. && git clone repo repo_clone && cd repo_clonerepo_clone $ echo ""text2"" >> file && git add file && git commit -m ""msg"" && cd ../reporepo $ echo ""text1"" >> file && git add file && git commit -m ""msg"" && cd ../repo_cloneNow we are in repo_clone, and if you do a git pull, it will throw up conflictsrepo_clone $ git pull origin masterremote: Counting objects: 5, done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From /home/anshulgoyal/Desktop/test/test/repo * branch            master     -> FETCH_HEAD   24d5b2e..1a1aa70  master     -> origin/masterAuto-merging fileCONFLICT (content): Merge conflict in fileAutomatic merge failed; fix conflicts and then commit the result.If we ignore the conflicts in the clone, and make more commits in the original repo now,repo_clone $ cd ../reporepo $ echo ""text1"" >> file && git add file && git commit -m ""msg"" && cd ../repo_cloneAnd then we do a git pull, we getrepo_clone $ git pullU   filePull is not possible because you have unmerged files.Please, fix them up in the work tree, and then use 'git add/rm <file>'as appropriate to mark resolution, or use 'git commit -a'.Note that the file now is in an unmerged state and if we do a git status, we can clearly see the same:repo_clone $ git statusOn branch masterYour branch and 'origin/master' have diverged,and have 1 and 1 different commit each, respectively.  (use ""git pull"" to merge the remote branch into yours)You have unmerged paths.  (fix conflicts and run ""git commit"")Unmerged paths:  (use ""git add <file>..."" to mark resolution)        both modified:      fileSo, to resolve this, we first need to resolve the merge conflict we ignored earlierrepo_clone $ vi fileand set its contents totext2text1text1and then add it and commit the changesrepo_clone $ git add file && git commit -m ""resolved merge conflicts""[master 39c3ba1] resolved merge conflictsYou are attempting to add one more new commits into your local branch while your working directory is not clean.  As a result, Git is refusing to do the pull.  Consider the following diagrams to better visualize the scenario:remote: A <- B <- C <- D local:  A <- B*   (*indicates that you have several files which have been modified but not committed.)There are two options for dealing with this situation.  You can either discard the changes in your files, or retain them.Option one: Throw away the changes You can either use git checkout for each unmerged file, or you can use git reset --hard HEAD to reset all files in your branch to HEAD.  By the way, HEAD in your local branch is B, without an asterisk.  If you choose this option, the diagram becomes:remote: A <- B <- C <- D local: A <- BNow when you pull, you can fast-forward your branch with the changes from master.  After pulling, you branch would look like master:local: A <- B <- C <- DOption two: Retain the changes If you want to keep the changes, you will first want to resolve any merge conflicts in each of the files.  You can open each file in your IDE and look for the following symbols:<<<<<<< HEAD   // your version of the code   =======   // the remote's version of the code   >>>>>>>Git is presenting you with two versions of code.  The code contained within the HEAD markers is the version from your current local branch.  The other version is what is coming from the remote.  Once you have chosen a version of the code (and removed the other code along with the markers), you can add each file to your staging area by typing git add.  The final step is to commit your result by typing git commit -m  with an appropriate message.  At this point, our diagram looks like this:remote: A <- B <- C <- D local: A <- B <- C'Here I have labelled the commit we just made as C' because it is different from the commit C on the remote.  Now, if you try to pull you will get a non-fast forward error.  Git cannot play the changes in remote on your branch, because both your branch and the remote have diverged from the common ancestor commit B.  At this point, if you want to pull you can either do another git merge, or git rebase your branch on the remote.Getting a mastery of Git requires being able to understand and manipulate uni-directional linked lists.  I hope this explanation will get you thinking in the right direction about using Git.Theres a simple solution to it. But for that you will first need to learn the following vimdiffTo remove conficts, you can usegit mergetoolThe above command basically opens local file, mixed file, remote file (3 files in total), for each conflicted file. The local & remote files are just for your reference, and using them you can choose what to include (or not) in the mixed file. And just save and quit the file.You have some files locally that need to be merged before you can pull. You could checkout the files and then pull to overwrite your local files.git checkout app/config/app.php app/config/database.php app/routes.phpgit pull origin master"
"The problem is caused by a .git inside bootstrap-multiselect/, which for some reason was left there by the creator. By browsing to that location and removing the .git, I can now commit the folder, along with all the other files."
"GitHub for Windows does indeed install its own version of Git, but it doesn't add it to the PATH variable, which is easy enough to do. Here's instructions on how to do it:Get the Git URLWe need to get the url of the Git \cmd directory your computer. Git is located here: C:\Users\<user>\AppData\Local\GitHub\PortableGit_<guid>\cmd\git.exeSo on your computer, replace <user> with your user and find out what the <guid> is for your computer. (The guid may change each time GitHub updates PortableGit, but they're working on a solution to that.) Copy it and paste it into a command prompt (right-click > paste to paste in the terminal) to verify that it works. You should see the Git help response that lists common Git commands. If you see The system cannot find the path specified. Then the URL isn‰Ûªt right. Once you have it right, create the link to the directory using this format: ;C:\Users\<user>\AppData\Local\GitHub\PortableGit_<guid>\cmd(Note: \cmd at the end, not \cmd\git.exe anymore!)On my system, it‰Ûªs this, yours will be different:;C:\Users\brenton\AppData\Local\GitHub\PortableGit_7eaa494e16ae7b397b2422033as45d8ff6ac2010\cmdEdit the PATH VariableNavigate to the Environmental Variables Editor (instructions) and find the Path variable in the ‰ÛÏSystem Variables‰Ûù section. Click Edit‰Û_ and paste the URL of Git to the end of that string. Save! It might be easier to pull this into Notepad to do the edit, just make sure you put one semicolon before you paste in the URL. If it doesn't work it‰Ûªs probably because this path got messed up either with a space in there somewhere (should be no spaces around the semicolon) or a semicolon at the end (semicolons should only separate URLs, no semicolon at beginning or end of string). If it worked, you should be able to close & reopen a terminal and type git and it will give you that same git help file. Then installing the Linter should work. (Atom > File > Settings > Packages > Linter)As the other Answers I would like to add one more thing. It is not compulsory that path will be likeC:\Users\<user>\AppData\Local\GitHub\PortableGit_<guid>\bin\git.exeIn my computer I did not found Git there. BUT  git and cmd is located in git.exe C:\Program Files\Git\bin\git.execmdC:\Program Files\Git\cmdTo add into PATH:Right-Click on My ComputerClick Advanced System SettingsClick Environment VariablesThen under System Variables look for the path variable and click editAdd the path to git‰Ûªs bin and cmd at the end of the string like this:;C:\Program Files\Git\bin\git.exe;C:\Program Files\Git\cmdOR;C:\Users\<user>\AppData\Local\GitHub\PortableGit_<guid>\bin;C:\Users\<user>\AppData\Local\GitHub\PortableGit_<guid>\cmdTo verify restart cmd and type git --version in cmdGit‰Ûªs executable is actually located in:C:\Users\<user>\AppData\Local\GitHub\PortableGit_<guid>\bin\git.exeNow that we have located the executable all we have to do is add it to our PATH:Right-Click on My ComputerClick Advanced System SettingsClick Environment VariablesThen under System Variables look for the path variable and click editAdd the path to git‰Ûªs bin and cmd at the end of the string like this:;C:\Users\<user>\AppData\Local\GitHub\PortableGit_<guid>\bin;C:\Users\<user>\AppData\Local\GitHub\PortableGit_<guid>\cmd"
"Try this:git add ""user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003(2).JPG""Otherwise, bash will try to do something with that (2) in the file name.If you removed the file and want to remove it also from Git, you have to call rm instead:git rm ""user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003(2).JPG""Or you can also use git add -u to update files Git already knows about (which will remove the file too).You could also do this:git add user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003\(2\).JPG.  It's the parentheses that are causing problems."
"If I need to do something like that I would normally move that external file or directory into my git repo and symlink it's original location to the new one.mv /home/some/directory /htdocs/directoryln -s /htdocs/directory /home/some/git add ./directoryI use this technique when I am developing a plug-in for an application that I want to keep under version control but have to store in a specific location.git --work-tree=/ add /home/some/directoryI had the same error... Googled it to death... not much came out.Christian's answer worked : git --work-tree=/ add /home/some/directoryBut then ""work-tree"" got me going. Grep all Git docs and came up with ""core.worktree"".I used > git config --global core.worktree /And voila ! I can now add from ""any"" directory in the system.I don't know if it cause problems any other places, I'll try to update as I go along.Hope this help someone someday !(I'm actually finding stuff!)There's a really simple solution to this. Let say you're Git-repo is in /var/data/my-app and you want to add /var/data/public/ to that repo. You can't use 'add' because Git won't add resources outside of the repo's root directory. So.. Solution:Move the /var/data/public/ directory into your Git-repo root (/var/data/my-app).Create a sym-link (symbolic link) inside of /var/data/public to the /var/data/my-app/public folder, using:  ln -s source_file_or_directory virtual_file_or_directoryThen, just add the moved file or directory to Git using git add in the normal fashion. Your Git source control is now tracking the desired file/folder, and your sym-link in the external directory assures that the file/folder is accessible to whatever else!"
"Two problems:1 - You never told Git to start tracking any fileYou write that you rangit initgit commit -m ""first commit""and that, at that stage, you gotnothing added to commit but untracked files present (use ""git add"" to track).Git is telling you that you never told it to start tracking any files in the first place, and it has nothing to take a snapshot of. Therefore, Git creates no commit. Before attempting to commit, you should tell Git (for instance):Hey Git, you see that README.md file idly sitting in my working directory, there? Could you put it under version control for me? I'd like it to go in my first commit/snapshot/revision...For that you need to stage the files of interest, usinggit add README.mdbefore runninggit commit -m ""some descriptive message""2 - You haven't set up the remote repositoryYou then rangit remote add origin https://github.com/VijayNew/NewExample.gitAfter that, your local repository should be able to communicate with the remote repository that resides at the specified URL (https://github.com/VijayNew/NewExample.git)... provided that remote repo actually exists!However, it seems that you never created that remote repo on GitHub in the first place: at the time of writing this answer, if I try to visit the correponding URL, I getBefore attempting to push to that remote repository, you need to make sure that the latter actually exists. So go to GitHub and create the remote repo in question. Then and only then will you be able to successfully push withgit push -u origin masterI'm guessing you didn't run this command after the commit failed so just actually run this to create the remote : git remote add origin https://github.com/VijayNew/NewExample.gitAnd the commit failed because you need to git add some files you want to track."
"I fixed my problem by editing the editor value in the .gitconfig file to match the one suggested by @awayken on this StackOverflow post Git config core.editor -- how to make sublime text the default editor for git on Windows. I'm not sure why, but this seems to have resolved the issue for now.I am also taking the same course from udacity and have the same errors . I figured out that the path in .gitconfig file includes slashes before space but they aren't needed . Go to the .gitconfig file , you will find your path as C:/Program Files/Sublime\\ Text\\ 2/sublime_text.exe . Just remove the slashes and make it C:/Program Files/Sublime Text 2/sublime_text.exe.Now the error of providing message using -m will go away and sublime will open on entering git commit"
"This is a classic issue:(picture from Luis Tubes's blog post)The usual fix is to convert those files yourself, with dos2unix or Swiss File Knife.I have always preferred to keep core.autocrlf to false, which means:git config --global core.autocrlf false$ git config core.autocrlf falseI had the same problem and tried the suggested solution with no success. I had to execute a second command to make it work:$ git config --global core.autocrlf false$ git config --global core.safecrlf falseOne may just try dos2unix:dos2unix [filename]"
"Tryrm -f ./.git/index.lockIn your repository directory. The error message is rather explicit in what causes it.In windows:command prompt from repo directory:cd .gitdel index.lockTry quitting Xcode - since it's a git client, you have to quit Xcode to avoid problems with git on the command line.I was having the same problem. I triedrm -f ./.git/index.lock and the console gave me an error message. Then, I tried rm -Force ./.git/index.lockand that worked.Good Luck!It just happens that I created the git repository with the root user. I deleted the git repository and created it again without sudo and it works.If you are using one of #intelliJ IDEs and receiving this msg (i'm using #webtorm), please notice that this problem can occur because of hiding one of project folders (inside settings), and this can prevent GITfrom merging."
"Git has a limit of 4096 characters for a filename, except on windows when git is compiled with msys. It uses an older version of the windows api and there's a limit of 260 characters for a filename.So as far as I understand this, it's a limitation of msys and not of git. You can read the details here:https://github.com/msysgit/git/pull/110You can circumvent this but using an other git-client on windows.You should be able to run the commandgit config --system core.longpaths trueor add it to one of your git config files manually to turn this functionality on, once your are on a supported version of git. It looks like maybe 1.9.0 and after.This might help :git config core.longpaths true"
"Catch this condition beforehand by checking the exit code of git diff?For example (in shell):git add -Agit diff --quiet --exit-code --cached || git commit -m 'bla'From the git commit man page:--allow-empty    Usually recording a commit that has the exact same tree as its    sole parent commit is a mistake, and the command prevents you    from making such a commit. This option bypassesthe safety, and    is primarily for use by foreign SCM interface scripts.with settings(warn_only=True):  run('git commit ...')This causes fabric to ignore the failure. Has the advantage of not creating empty commits.You can wrap it in a additional layer of with hide('warnings'): to totally suppress output, otherwise you'll get a note in the fabric output that the commit failed (but the fabfile continues to execute)."
"In my case, there was already a .git directory from another imported third-party git repository. I had to removed it, anything worked well.I had the same problem. There was an existing .git repository at the location i wanted to create the new one. I deleted it and created a new one. Now committing works as expected.If you aren't sure if there might be an existing .git at the target location of your repository, do this (on a Unix machine):$> cd <path>$> ls -aef This should show you the hidden files (like .git). Now you have two options: either delete the .git directory$> sudo rm -R .gitor change the owner rights.This is a weird error.It seems to be a permissions error as indicated by git (command line), but persists even if permissions are 777.What worked for me was going into terminal, cding into the directory, and manually adding it to the index.So you would do:cd <WHEREVER-YOUR-PROJECT-IS>/laravel-master/sudo git add vendor/illuminate/remote/Illuminate/Remote/sudo git add vendor/anahkiasen/rocketeer/And then try the GitHub utility again.Let me know if it works!This was annoying me for weeks! I had to keep going into terminal and adding each file and committing from the terminal which isnt as nice as using the app. I finally contacted GitHub support and they advised me that they were aware of the issue and are releasing a fix soon. Open up your terminal or shell and navigate to the repository and enter:git config --local core.safecrlf falseThis will disable the core.safeclrf property for the repository which is causing the issue.That should work :)Note: I am using the Mac version of the GitHub app (A New Hope (180))My silly way to resolve this is to copy every files I needed and deleted the folder, then created a new folder with the same name and copied them back. It actually worked for me. I'm new to github and don't know how to find out the previously existing git file (though I did know it was probably caused by conflict between old and new config files). It's better to learn how github works to use it as a tool better. But for now, if you want to have a quick solution, mine might work for you."
"You generally do not want to include source files for dependencies to your source control system, as these are not part of your project.You should rather add the node_modules folder to the gitignore file and make sure you add all of your dependencies to package.json (say, via npm install --save)Whenever you (or anyone else) want to run the project, say after cloning/forking it or simply pulling the latest commit, you just npm install to download all required dependencies (i.e. let npm handle external dependencies, not git).Let me stress it again, do not track files for external dependencies, that definitely isn't the right way to go."
"I think you mean to use git submodule add <repository> <path>, not git add submodule, which would just add a file named submodule to your index."
"This should be fixed with Git 2.5 (Q2 2015), meaning git commit won't try to include the new file ""intended to be added later"".See commit d95d728 by Nguy‡ÈÉn ThÌÁi Ng‡Èçc Duy (pclouds) (merged in d0c692263)diff-lib.c: adjust position of i-t-a entries in diffProblem:Entries added by ""git add -N"" are reminder for the user so that they don't forget to add them before committing. These entries appear in the index even though they are not real.  Their presence in the index leads to a confusing ""git status"" like this:On branch masterChanges to be committed:        new file:   fooChanges not staged for commit:        modified:   fooIf you do a ""git commit"", ""foo"" will not be included even though  ""status"" reports it as ""to be committed"". Solution:This patch changes the output to becomeOn branch masterChanges not staged for commit:        new file:   foono changes added to commitIn other words:Treat such paths as ""yet to be added to the index but Git already know about them""; ""git diff HEAD"" and ""git diff --cached HEAD"" should not talk about them, and ""git diff"" should show them as new files yet to be added to the index."
"I had exactly the same problem, turns out it was the ""."" git subtree add --prefix ./cs/ControlLibrary/ ControlLibrary master --squashFailed with:error: pathspec './cs/ControlLibrary' did not match any file(s) known to gitbut git subtree add --prefix cs/ControlLibrary/ ControlLibrary master --squashworked just fine :)I am on Windows using ConEmu, not sure if that made any difference"
"The msysgit FAQ on Git cannot create a filedirectory with a long path seems not up to date, as it still links to old msysgit ticket #110. However, according to later ticket #122 the problem has been fixed in msysgit 1.9, thus:Update to msysgit 1.9 (or later)Launch Git BashGot to your Git repository which 'suffers' of long paths issueEnable long paths support with git config core.longpaths trueSo far, it's worked for me very well.Be aware of important notice in comment on the ticket #122don't come back here and complain that it breaks Windows Explorer,  cmd.exe, bash or whatever tools you're using.As someone that has ran into this problem constantly with java repositories on Windows, the best solution is to install Cygwin (https://www.cygwin.com/) and use its git installation under all > devel > git.  The reason this is the best solution I have come across is since Cygwin manages the long path names so other provided commands benefit. Ex: find, cp and rm.  Trust me, the real problem begins when you have to delete path names that are too long in Windows.Or you can edit directly your git config file:edit file : YourRepoFolder -> .git -> config[core]    repositoryformatversion = 0    filemode = false    ...    longpaths = true        <-- (add this line under core section)Try to keep your files closer to the file system root. More details : for technical reasons, Git for Windows cannot create files or directories when the absolute path is longer than 260 characters."
"If the problem is with the index as the staging area for commits (i.e. .git/index), you can simply remove the index (make a backup copy if you want), and then restore index to version in the last commit:On OSX/Linux:rm -f .git/indexgit resetOn Windows:del .git\indexgit reset(The reset command above is the same as  git reset --mixed HEAD)You can alternatively use lower level plumbing git read-tree instead of git reset.If the problem is with index for packfile, you can recover it using git index-pack.You may have accidentally corrupted the .git/index file with a sed on your project root (refactoring perhaps?) with something like:sed -ri -e ""s/$SEACHPATTERN/$REPLACEMENTTEXT/g"" $(grep -Elr ""$SEARCHPATERN"" ""$PROJECTROOT"")to avoid this in the future, just ignore binary files with your grep/sed:sed -ri -e ""s/$SEACHPATTERN/$REPLACEMENTTEXT/g"" $(grep -Elr --binary-files=without-match ""$SEARCHPATERN"" ""$PROJECTROOT"")This sounds like a bad clone. You could try the following to get (possibly?) more information:git fsck --fullIn my case it was nested .git folder in web/ckeditor/kcfindergit status  error: bad index file sha1 signature  fatal: index file corrupt  fatal: 'git status --porcelain' failed in submodule web/ckeditor/kcfinder"
"I'm afraid there's not enough information in your question to be certain about what's going on, since you haven't replied to my follow-up question, but this may be of help in any case.That error means that projectfolder is already staged (""already exists in the index"").  To find out what's going on here, try to list everything in the index under that folder with:git ls-files --stage projectfolderThe first column of that output will tell you what type of object is in the index at projectfolder.  (These look like Unix filemodes, but have special meanings in git.)I suspect that you will see something like:160000 d00cf29f23627fc54eb992dde6a79112677cd86c 0   projectfolder(i.e. a line beginning with 160000), in which case the repository in projectfolder has already been added as a ""gitlink"".  If it doesn't appear in the output of git submodule, and you want to re-add it as a submodule, you can do:git rm --cached projectfolder... to unstage it, and then:git submodule add url_to_repo projectfolder... to add the repository as a submodule.However, it's also possible that you will see many blobs listed (with file modes 100644 and 100755), which would suggest to me that you didn't properly unstage the files in projectfolder before copying the new repository into place.  If that's the case, you can do the following to unstage all of those files:git rm -r --cached projectfolder... and then add the submodule with:git submodule add url_to_repo projectfolderI had the same problem and after hours of looking found the answer. The error I was getting was a little different: <path> already exists and is not a valid git repo (and added here for SEO value)The solution is to NOT create the directory that will house the submodule. The directory will be created as part of the git submodule add command. Also, the  argument is expected to be relative to the parent-repo root, not your working directory, so watch out for that. Solution for the example above:It IS okay to have your parent repo already cloned.Make sure the common_code directory does not exist.cd Repogit submodule add git://url_to_repo projectfolder/common_code/ (Note the required trailing slash.)Sanity restored.I hope this helps someone, as there is very little information to be found elsewhere about this.I got it working by doing it the other way around. Starting with an empty repo, adding the submodule in a new folder called ""projectfolder/common_code"". After that it was possible to add the project code in projectfolder. The details are shown below.In an empty repo type:git submodule add url_to_repo projectfolder/common_codeThat will create the desired folder structure:repo|-- projectfolder    |-- common_codeIt is now possible to add more submodules, and the project code can be added to projectfolder.I can't yet say why it worked this way around and not the other."
"I just ran into this issue as well. I had been added to an existing project. I cloned it and committed a local change. I went to push and got the ERROR: Repository not found. error message. I realized that the person who added me only gave me read-only access to the repo. A quick email to him and I'm able to push. Check to see if you have read-write access.Good luck!I was getting the same errorERROR: Repository not found.   fatal: The remote end hung up unexpectedlyand I had created the repository on Github and cloned it locally.I was able to solve by opening .git/config and removing the [remote ""origin""] section.[remote ""origin""]      url = git@github.com:alexagui/my_project.git     fetch = +refs/heads/*:refs/remotes/origin/*then I ran the following (again)git remote add origin git@github.com:alexagui/my_project.git  git push -u origin masterand this time I was able to push to the repository.I ran into the same issue and I solved it by including my username and password in the repo url:git clone https://myusername:mypassword@github.com/path_to/myRepo.gitI got this error (but before was working). My problem was the missing ssh key binded with the Github account. You can check you current ssh keys with ssh-add -l.If your key is missing, you can add it with ssh-add ~/.ssh/your_keygit remote rm origingit remote add origin <remote url>Had similar issue. The root of the problem was that I followed some online tutorial about adding a new repository to Github. Just go to Github, create a new repo, it will ask you to add a README, don't add it. Create it, and you'll get instructions on how to push.It's similar to the next two lines:git remote add origin https://github.com/YOUR_USER/your-repo.gitgit push -u origin masterIf you belong to a group in Github check that you have Write Access.If you include your username and the repo name we can reasonably help you, at the moment we have no reason to think the repo does actually exist.Additionally, if the repo is private and you don't have access to it, github returns ""Does not exist"" to avoid disclosing the existance of private repos.EDIT: If you're not able to clone it because it's saying it doesn't exist and it's private, it's because you're not sending authentication. Ensure that your public key is added to your keyring, or use HTTP basic auth for the time being.Changing the content of the .git/config file helps as Alex said above. I experienced the same problem and I think it was because I changed my Github username. The local files could not be updated with the changes. So perhaps anytime you change your username you might consider running git remote add origin your_ssh_link_from_githubI hope this helps ;)I had the same problem. My issue was misunderstanding that I had to first create the empty repo on github before pushing to it. Doh! Including this here for anyone else who doesn't realize.You need to check your SSH access as the following: ssh -T git@github.comthis issue was because i don't add the person response on SSH in repository, read more about SSH link-1, link-2.Have experienced the same problem. Everything was working fine for years and then suddenly this error.The problem turns out was that I added a deploy key for another repo to my SSH agent before my user's github SSH key (which I always used to access the repo in question). SSH agent tried the deploy key for another repo first, and GitHub for some totally unexplainable reason was sayingERROR: Repository not found.Once I've removed the deploy key from SSH agent, everything was back to normal.I had this issue and realized I was using a different account from the one whose repo it was. Logging in as the original user resolved the issue.I had a similar problem.  The incorrect credentials were cached in OS X's key-chain.Check out: https://help.github.com/articles/updating-credentials-from-the-osx-keychain"
"The files don't exist, so they cannot be added. Make sure the files have been created first.D:\temp\hi>git initInitialized empty Git repository in D:/temp/hi/.git/D:\temp\hi>dir Volume in drive D is Data Volume Serial Number is 744F-7845 Directory of D:\temp\hi2013-11-25  12:59 AM    <DIR>          .2013-11-25  12:59 AM    <DIR>          ..               0 File(s)              0 bytes               2 Dir(s)  1,331,387,256,832 bytes freeD:\temp\hi>git add hi.txtfatal: pathspec 'hi.txt' did not match any filesD:\temp\hi>echo hello > hi.txtD:\temp\hi>git add hi.txtD:\temp\hi>dir Volume in drive D is Data Volume Serial Number is 744F-7845 Directory of D:\temp\hi2013-11-25  12:59 AM    <DIR>          .2013-11-25  12:59 AM    <DIR>          ..2013-11-25  12:59 AM                 8 hi.txt               1 File(s)              8 bytes               2 Dir(s)  1,331,387,256,832 bytes freeNote: you shouldn't see this particular error message in git 1.9/2.0 (Q1 2014). See commit 64ed07c by Nguy‡ÈÉn ThÌÁi Ng‡Èçc Duy (pclouds):add: don't complain when adding empty project rootThis behavior was added in 07d7bed (add: don't complain when addingempty project root - 2009-04-28, git 1.6.3.2)then broken by 84b8b5d (remove match_pathspec() in favor of match_pathspec_depth() - 2013-07-14, git 1.8.5). Reinstate it.The idea is:We try to warn the user if one of their pathspecs caused no matches, as it may have been a typo. However, we disable the warning if the pathspec points to an existing file, since  that means it is not a typo but simply an empty directory.Unfortunately, the file_exists() test was broken for one special case: the pathspec of the project root is just """".  This patch detects this special case and acts as if the file exists (which it must, since it is the project root).The user-visible effect is that this:$ mkdir repo && cd repo && git init && git add .used to complain like:fatal: pathspec '' did not match any filesbut now is a silent no-op.It is again a silent no-op in upcoming git 1.9/2.0 (Q1 2014)In order to add a file to git it has to exist. git add does not create a file, but tells git to add it to the current branch you are on and track it.Currently, you have no tracked files, as you can see from your git status command. In order to track all files from the my-project directory, do a git add my-project/*. This will add all the files from that directory.Next, if you do not have the desired file.txt, just create a text file and run git status. It should show you that you have an untracked file.txt file, which you can afterwards add to git using git add file.txt."
"Looking at the Git source code (sha1_file.c, function move_temp_to_file()) it looks like Git is failing to rename a temporary file named /opt/www/.git/objects/3f/tmp_obj_XXXXXX (where XXXXXX is six random characters) to /opt/www/.git/objects/3f/ce3587c54a8be14c69b08c6b01f94949b11b47.  This can happen if you don't have permission to delete files in /opt/www/.git/objects/3f.Some things to try:If multiple users accessing the Git repository, you may need to run something like git config core.sharedRepository 0664 (see git help config for details) to ensure that newly created directories and files have proper permissions for all users of the repository.Try running rm -f /opt/www/.git/objects/3f/tmp_obj_* and see if that makes the problem go away.See if you can reproduce the problem outside of Git by doing the following:mkdir -p /opt/www/.git/objects/3fcd /opt/www/.git/objects/3frm -f tmp_obj_* ce3587c54a8be14c69b08c6b01f94949b11b47echo ""testing"" >tmp_obj_abcdefgmv tmp_obj_abcdef ce3587c54a8be14c69b08c6b01f94949b11b47rm -f tmp_obj_abcdefgBe sure to run the above commands the same user that experienced the error.Try recursively chowning and chmoding the objects directory.git add --ignore-errors might be helpfulFrom here:can't add all files to git due to permissionsYou don't have permission to write in /opt/www/.git/objects/3f.The quickest solution is to use the sudo command to execute your command with root privileges.sudo <Your git command>Solved it for me.If you are using visual studio or something similar that is generating the mdf file, simply close VS & retry your git command again. This time it should work."
"Windows command mklink /H ""Link_File_Path"" ""Target_File_Path""Use above command to create a hard link for all your output files. That will work. I did similar stuff for git hooks.Refer this link for more info about mklink http://ss64.com/nt/mklink.html"
"I spend on it lots hours when i call php script to init and commit git.And i Found the work flow should Be:1.git init2.git config user.name ""someone""3.git config user.email ""someone@someplace.com""4.git add *5.git commit -m ""some init msg""If you swap [23] and 1, the config will not work at all.Wish this will do some help.Instead of doing a git pull, you can do:git fetchgit reset --hard origin/masterNeither of those require you to configure your git user name / email.This will destroy any uncommitted local changes / commits, and will leave your HEAD pointing to a commit (not a branch). But neither of those should be a problem for an app server since you shouldn't be making local changes or committing to that repository.If you are using sourcetree: Repository -> Repository Settings --> Advanced --> uncheck ""Use global user settings"" boxworked great for me.Update your bootstrap process to create a ${HOME}/.gitconfig with the proper contents, or to copy an existing one from somewhere."
"I set-up a test to fail. This is what I got:$ git merge newbranchAuto-merging test.txtCONFLICT (content): Merge conflict in test.txtAutomatic merge failed; fix conflicts and then commit the result.$ echo $?1Git returns 0 when it merges correctly, as expected.In short, no. You're going to see exit code 1 for errors, and 0 for success.From a quick grepping of the source, there are some of the expected 127 and 128 for their specific purposes (command not found, errors already reported), and a few unusual codes in a few places, but for run of the mill errors, it's all exit(1).Running git status on a non-git repo returns 128, not 1, which is helpful in quickly determining whether a git repo exists or not.Error 128, with no error message from git, could be a catch-all for ""unexpected problem"".I was getting this on operations that needed to modify files under .git (e.g. ""git checkout -- myfile"" to revert a modified file) by a different user. (In my case ""chmod -R og+w .git"" fixed it; naturally, don't do that unless you understand the security implications for your case!)"
"As it has already been mentioned in che's answer about adding the remote part, which I believe you are still missing.Regarding your edit for adding remote on your local USB drive. First of all you must have a 'bare repository' if you want your repository to be a shared repository i.e. to be able to push/pull/fetch/merge etc..To create a bare/shared repository, go to your desired location. In your case:$ cd /Volumes/500gb/   $ git init --bare myproject.gitSee here for more info on creating bare repositoryOnce you have a bare repository set up in your desired location you can now add it to your working copy as a remote.$ git remote add origin /Volumes/500gb/myproject.gitAnd now you can push your changes to your repository$ git push origin masterYour config file does not include any references to ""origin"" remote. That section looks like this:[remote ""origin""]    url = git@foo.com:repository.git    fetch = +refs/heads/*:refs/remotes/origin/*You need to add the remote using git remote add before you can use it.Here are the instructions from github:touch README.mdgit initgit add README.mdgit commit -m ""first commit""git remote add origin https://github.com/tqisjim/google-oauth.gitgit push -u origin masterHere's what actually worked:touch README.mdgit initgit add README.mdgit commit -m ""first commit""git remote add origin https://github.com/tqisjim/google-oauth.gitgit clone origin masterAfter cloning, then the push command succeeds by prompting for a username and passwordMay be you forgot to run ""git --bare init"" on the remote?That was my problemWhen you create a repository in bitbucket.org, it gives you instructions on how to set up your local directory.  Chances are, you just forgot to run the code:  git remote add origin https://username@bitbucket.org/username/reponame.gitmy case was a little different - unintentionally I have changed owner of git repository (project.git directory in my case), changing owner back to the git user helped"
"The error message leads to the conclusion that you do not have a master branch in your local repository. Either push your main development branch (git push origin my-local-master:master which will rename it to master on github) or make a commit first. You can not push a completely empty repository.I was having the same issue and then smacked myself in the head because I hadn't actually added my project files.git add -Agit commit -am ""message""git push origin masterI had the same issue. I deleted the .git folder then followed the following commands$ git init$ git add .$ git remote add origin git@gitorious.org:project/project.git$ git commit -m ""Initial version""$ git push origin masterI just had the same problem while creating my first Git repository ever. I had a typo in the Git origin remote creation - turns out I didn't capitalize the name of my repository. git remote add origin git@github.com:Odd-engineFirst I removed the old remote using git remote rm originThen I recreated the origin, making sure the name of my origin was typed EXACTLY the same way my origin was spelled. git remote add origin git@github.com:Odd-EngineNo more error! :)I have same issue . it's solved my problem . €¡f you init your git . you have to do on Terminal 1) git add .2)git commit -m ""first commit""For send to bitbucket 3) git push -u origin --all # pushes up the repo and its refs for the first timeI had the same error, as Bombe said I had no local branch named master in my config, although git branch did list a branch named master...To fix it just add this to your .git/config[branch ""master""]    remote = origin    merge = refs/heads/masterKinda hacky but does the jobmake sure you are on a branch, at least in master branchtype:git branchyou should see:ubuntu-user:~/git/turmeric-releng$ git branch* (no branch)masterthen type:git checkout masterthen all your changes will fit in master branch (or the branch u choose)i fixed my problem....not sure what the problem was but using the gitx interface to commit my staged files, then...$ git push origin masterworked...i am having the same problem...created a new folder added in the bort template files...$ git commit -m 'first commit'$ git remote add origin git@github.com:eltonstewart/band-of-strangers.git$ git push origin masterthen i get the same error...error: src refspec master does not match any.  fatal: The remote end hung up unexpectedly  error: failed to push some refs to 'git@github.com:eltonstewart/band-of-strangers.git'error: failed to push some refs to 'git@github.com:{username}/{projectname}.git'Unless you're generalizing the error message, it looks like you literally put git@github.com:{username}/{projectname}.git as your remote Git repo. You should fill in {username} with your GitHub username, and {projectname} with your project's name.To actually resolve the issue I used the following command to stage all my files to the commit.$ git add .$ git commit -m 'Your message here'$ git push origin masterThe problem I had was that the -u command in git add didn't actually add the new files and the git add -A command wasn't supported on my installation of git. Thus as mentioned in this thread the commit I was trying to stage was empty.cd  app git init git status touch  test git add . git commit  -a  -m""message to log "" git commit  -a  -m ""message to log"" git remote add origin  git remote add origin git@git.google.net:cherry git push origin master:refs/heads/mastergit clone git@git.google.net:cherry test1I had same issue. I had mistakenly created directory in machine in lower case. Once changed the case , the problem solved(but wasted my 1.5 hrs :( )Check it out your directory name and remote repo name is same.It looks like this question has a number of answers already, but I'll weigh in with mine since I haven't seen any that address the issue I had.I had this error as well on a brand new github repository. It turns out the user I was pushing from did not have push access. For some reason, this results in an ""ERROR: repository not found"" error instead of some sort of access error.Anyway, I hope this helps the poor soul who runs into the same issue."
"You don't have files named config_files*, as you wan't to add the content of config_files directory you must do : git add config_files/then a git status will show :new file : config_files/file1new file : config_files/file2and so on...then you can commit with :git commit -m ""commit message"""
"It's git commit -m ""commit message"".  You're missing the -m flag.If you're using Windows you need to use double quotesVery Good point using double quotes on windows.  It cost me hours trying to figure out why the single quote didn't work.  Thank you!  One thing I want to mention here from my own experience is it seems you still have to do 'git commit -a' for some reason to be able later on to push to the remote git repo such as 'git push'.  and it's almost no point doing just 'git commit -m ""commit message...""' coz you will type it up in a vi editor again anyway when you do 'git commit -a' on windows.  I think only on windows you need to do 'git commit -a' instead of just 'git commmit -m ""msg""'"
"You did it the wrong way around. You are meant to reset first, to unstage the file, then checkout, to revert local changes.Try this:$ git reset foo/bar.txt$ git checkout foo/bar.txtThis worked perfectly for me:$ git reset -- foo/bar.txt$ git checkout foo/bar.txtgit checkout origin/[branch] .git status// Note dot (.) at the end. And all will be good"
"You need to specify the working directory.subprocess.Popen has a keyword argument to do so:subprocess.Popen([gitPath] + dirList + ['add','.'], cwd='/home/me/workdir')See also Python specify popen working directory via argumentOther than using cwd Popen's argument, you could also use git's flag -C:usage: git [--version] [--help] [-C <path>] [-c name=value]           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]           <command> [<args>]So that it should be something likesubprocess.Popen('git -C <path>'...)"
"Try the following to force git to re-add the submodule:git submodule add --force git://github.com/ShareKit/ShareKit.git Submodules/ShareKitNote the --force after add.If you'd want to remove version handling altogether, simply remove .git and .gitmodules.iveqy's comment did the trick for me, posting it as an answer so that it is more visible.Simply delete the following folder (adjust with your submodule's path):.git/modules/Submodules/ShareKitYou can delete it with rm path -rf under unix, or to be safe just move it to /tmp (it should be erased on next boot, but gives you time to change your mind if you deleted the wrong folder):mv .git/modules/Submodules/ShareKit /tmp/ShareKit-deleted"
"The command line arguments are separated by space. If you want provide an argument with a space in it, you should quote it. So use git commit -m ""initial commit"".I would just like to add-- In windows the commit message should be in double quotes, as I spent about an hour,just to figure out that single quote is not working in windows.Had this happen to me when committing from Xcode 6, after I had added a directory of files and subdirectories to the project folder.  The problem was that, in the Commit sheet, in the left sidebar, I had checkmarked not only the root directory that I had added, but all of its descendants too.  To solve the problem, I checkmarked only the root directory.  This also committed all of the descendants, as desired, with no error.In my case, this error was due to special characters what I was considering double quotes as I copied the command from a web page."
"I had a similar problem. My laptop ran out of battery during a git operation. Boo. I didn't have any backups. (N.B. Ubuntu One is not a backup solution for git; it will helpfully overwrite your sane repository with your corrupted one.)To the git wizards, if this was a bad way to fix it, please leave a comment. It did, however, work for me... at least temporarily. Step 1: Make a backup of .git (in fact I do this in between every step that changes something, but with a new copy-to name, e.g.  .git-old-1, .git-old-2, etc.): cp -a .git .git-oldStep 2: Run git fsck --fullnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullerror: object file .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e is emptyfatal: loose object 8b61d0135d3195966b443f6c73fb68466264c68e (stored in .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e) is corruptStep 3: Remove the empty file. I figured what the heck; its blank anyway. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e rm: remove write-protected regular empty file `.git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e'? yStep 3: Run git fsck again. Continue deleting the empty files. You can also cd into the .git directory and run find . -type f -empty -delete to remove all empty files. Eventually git started telling me it was actually doing something with the object directories: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: object file .git/objects/e0/cbccee33aea970f4887194047141f79a363636 is emptyfatal: loose object e0cbccee33aea970f4887194047141f79a363636 (stored in .git/objects/e0/cbccee33aea970f4887194047141f79a363636) is corruptStep 4: After deleting all of the empty files, I eventually came to git fsck actually running: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: HEAD: invalid sha1 pointer af9fc0c5939eee40f6be2ed66381d74ec2be895ferror: refs/heads/master does not point to a valid object!error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 5: Try git reflog. Fail because my HEAD is broken. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git reflogfatal: bad object HEADStep 6: Google. Find this. Manually get the last two lines of the reflog: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ tail -n 2 .git/logs/refs/heads/masterf2d4c4868ec7719317a8fce9dc18c4f2e00ede04 9f0abf890b113a287e10d56b66dbab66adc1662d Nathan VanHoudnos <nathanvan@gmail.com> 1347306977 -0400  commit: up to p. 24, including correcting spelling of my name9f0abf890b113a287e10d56b66dbab66adc1662d af9fc0c5939eee40f6be2ed66381d74ec2be895f Nathan VanHoudnos <nathanvan@gmail.com> 1347358589 -0400  commit: fixed up to page 28Step 7: Note that from Step 6 we learned that the HEAD is currently pointing to the very last commit. So let's try to just look at the parent commit:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git show 9f0abf890b113a287e10d56b66dbab66adc1662dcommit 9f0abf890b113a287e10d56b66dbab66adc1662dAuthor: Nathan VanHoudnos <nathanvan@XXXXXX>Date:   Mon Sep 10 15:56:17 2012 -0400    up to p. 24, including correcting spelling of my namediff --git a/tex/MCMC-in-IRT.tex b/tex/MCMC-in-IRT.texindex 86e67a1..b860686 100644--- a/tex/MCMC-in-IRT.tex+++ b/tex/MCMC-in-IRT.texIt worked!Step 8: So now we need to point HEAD to 9f0abf890b113a287e10d56b66dbab66adc1662d. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git update-ref HEAD 9f0abf890b113a287e10d56b66dbab66adc1662dWhich didn't complain.Step 9: See what fsck says:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 10: The invalid sha1 pointer in cache-tree seemed like it was from a (now outdated) index file (source). So I killed it and reset the repo.nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/indexnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git resetUnstaged changes after reset:M   tex/MCMC-in-IRT.texM   tex/recipe-example/build-example-plots.RM   tex/recipe-example/build-failure-plots.RStep 11: Looking at the fsck again...nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!dangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79aThe dangling blobs are not errors. I'm not concerned with master.u1conflict, and now that it is working I don't want to touch it anymore! Step 12: Catching up with my local edits: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git status# On branch master# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   tex/MCMC-in-IRT.tex#   modified:   tex/recipe-example/build-example-plots.R#   modified:   tex/recipe-example/build-failure-plots.R#< ... snip ... >no changes added to commit (use ""git add"" and/or ""git commit -a"")nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""recovering from the git fiasco""[master 7922876] recovering from the git fiasco 3 files changed, 12 insertions(+), 94 deletions(-)nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git add tex/sept2012_code/example-code-testing.Rnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""adding in the example code""[master 385c023] adding in the example code 1 file changed, 331 insertions(+) create mode 100644 tex/sept2012_code/example-code-testing.RSo hopefully that can be of some use to people in the future. I'm glad it worked.I solved this removing the various empty files that git fsck was detecting, and then running a simple git pull.I find it disappointing that now that even filesystems implement journaling and other ""transactional"" techniques to keep the fs sane, git can get to a corrupted state (and not be able to recover by itself) because of a power failure or space on device.I just had the same issue : after pulling the distant repository, when I did a git status I got :""error: object file (...) is empty""""fatal: loose object (...) is corrupted""The way I resolved this was to :git stashremoving git file in error (not sure that is necessary)git stash clearI dont know exactly what things happened, but that instructions seemed to make everything clean.This error happens to me when I am pushing my commit and my computer hangs.This is how I've fix it.Steps to fixgit statusshow the empty/corrupt object filerm .git/objects/08/3834cb34d155e67a8930604d57d3d302d7ec12remove itgit statusI got fatal: bad object HEAD messagerm .git/indexI remove the index for the resetgit resetfatal: Could not parse object 'HEAD'.git statusgit pulljust to check whats happeningtail -n 2 .git/logs/refs/heads/MY-CURRENT-BRANCHprints the last 2 lines tail -n 2 of log branch to show my last 2 commit hashgit update-ref HEAD 7221fa02cb627470db163826da4265609aba47b2I pick the last commit hashgit statusshows all my file as deleted because i removed the .git/index filegit resetcontinue to the resetgit statusverify my fixNote:    The steps starts when I landed on this question and used the answers as reference.The git object files have gone corrupt (as pointed out in other answers as well). This can happen during machine crashes, etc.I had the same thing. After reading the other top answers here I found the quickest way to fix the broken git repository with the following commands (execute in the git working directory that contains the .git folder):(Be sure to back up your git repository folder first!)find .git/objects/ -type f -empty | xargs rmgit fetch -pgit fsck --fullThis will first remove any empty object files that cause corruption of the repository as a whole, and then fetch down the missing objects (as well as latest changes) from the remote repository, and then do a full object store check. Which, at this point, should succeed without any errors (there may be still some warnings though!)PS. This answer suggests you have a remote copy of your git repository  somewhere (e.g. on GitHub) and the broken repository is the local repository that is tied to the remote repository which is still in tact. If that is not the case, then do not attempt to fix it the way I recommend.mv your folder app to make backup, i.e. mv app_folder app_folder_bk (it is like a git stash)git clone your_repositoryFinally,.  Open a merge tool (I use meld diff viewer linux or Winmerge Windows) and copy the changes from right(app_folder_bk)  to left( new app_folder)  (it is like a git stash apply).That's all. Maybe it is not the best way, but I think it is so practical .In my case, this error occurred because I was typing commit message and my notebook turned off.I did these steps to fix the error:git checkout -b backup-branch # Create a backup branchgit reset --hard HEAD~4 # Reset to the commit where everything works well. In my case, I had to back 4 commits in the head, that is until my head be at the point before I was typing the commit message. Before doing this step, copy the hash of the commits you will reset, in my case I copied the hash of the 4 last commitsgit cherry-pick <commit-hash> # Cherry pick the reseted commits (in my case 4, so I did this step 4 times) from the old branch to the new branch. git push origin backup-branch # Push the new branch to be sure everything works wellgit branch -D your-branch # Delete the branch locally ('your-branch' is the branch with problem)git push origin :your-branch # Delete the branch from remotegit branch -m backup-branch your-branch # Rename the backup branch to have the name of the branch that had the problemgit push origin your-branch # Push the new branchgit push origin :backup-branch # Delete the backup branch from remoteHere is a really simple and quick way to deal with this problem IF you have a local repo with all the branches and commits you need, and if you're OK with creating a new repo (or deleting the server's repo and making a new one in it's place):Create a new empty repo on the server (or delete the old repo and create a new one in its place)Change the remote URL of your local copy to point to the remote URL of the new repo.Push all branches from your local repo to the new server repo.This preserves all the commit history and branches that you had in your local repo.If you have collaborators on the repo, then I think in many cases all your collaborators have to do is change the remote URL of their local repo as well, and optionally push any commits they have that the server doesn't have.This solution worked for me when I ran into this same problem. I had one collaborator. After I pushed my local repo to the new remote repo, he simply changed his local repo to point to the remote repo URL and everything worked fine.If you don't care about keeping your historical commits, just run rm -r .gitThen answer yes to anything asking about deleting write-protected files.Problem solved in under a minute.Because I have to reboot my VM regularly, so somehow this problem happens to me very often. After few times of it, I realized I cannot repeat the process described by @Nathan-Vanhoudnos every time this happens, though it always works. Then I figured out the following faster solution.Step 1Move your entire repo to another folder.mv current_repo temp_repoStep 2Clone the repo from origin again.git clone source_to_current_repo.gitStep 3Remove Everything under the new repo except the .git folder.Step 4Move Everything from the temp_repo to the new repo except the .git folder.Step 5Remove the temp_repo, and we are done.After few times, I'm sure you can do this procedures very quickly."
"The direct reason for the error is that yes, it's impossible to use git-add with a bare repository. A bare repository, by definition, has no work tree. git-add takes files from the work tree and adds them to the index, in preparation for committing.You may need to put a bit of thought into your setup here, though. GIT_DIR is the repository directory used for all git commands. Are you really trying to create a single repository for everything you track, maybe things all over your system? A git repository by nature tracks the contents of a single directory. You'll need to set GIT_WORK_TREE to a path containing everything you want to track, and then you'll need a .gitignore to block out everything you're not interested in tracking.Maybe you're trying to create a repository which will track just c:\www? Then you should put it in c:\www (don't set GIT_DIR). This is the normal usage of git, with the repository in the .git directory of the top-level directory of your ""module"".Unless you have a really good reason, I'd recommend sticking with the way git likes to work. If you have several things to track, you probably want several repositories!Also, you are probably inside the .git subfolder, move up one folder to your project root.Explicitly setting the GIT_DIR environment variable forces git to use the given directory as the git repository. It is never needed during normal use.In your example, because have specified a GIT_DIR and it isn't named .git (the leading dot is important) and you haven't provided a --work-tree option or set the GIT_WORK_TREE environment variable, that you want a bare repository when you said git init.Because a bare repository has no working tree a large selection of commands don't make sense with a bare repository. git add is just one.Is there a particular reason that you need to use a non-standard location for your git repository, rather than in a .git subfolder under the working tree root? While it's possible to arrange this it tends to be more work and more liable to user mistakes.Just clone the same project in another folder and copy the .git/ folder to your project.ExampleCreate temp folder: mkdir tempswitch to temp folder cd temp/clone the same project in the temp folder: git clone [-b branchName] git@path_to_your_git_repositorycopy .git folder to your projet: cp -R .git/  path/to/your/project/switch to your project and run git statusdelete the temp folder if your are finished.hope this will help someoneJust in case what happened to me is happening to somebody else, I need to say this:I was in my .git directory within my project when I was getting this error. I searched and scoured for answers, but nothing worked.  All I had to do was get back to the right directory. It was kind of a face-palm moment for me.In case there's anyone else out there as silly as me, I hope you found this answer helpful."
"Q. What conflict?The conflict from merging the reverse patch of that revision, when later revisions changed the same lines of code: a merge conflictEdit If you are reverting the latest commit, this means that you had local changes (refer to git status). Don't forget that you can have staged and unstaged local changes. To easily see all local changes, use    git diff HEADYou should just open up the unmerged file (git status) to see the conflicted file(s). You'll see the <<<<, =====, >>>>> conflict markers soon enough.You can usegit mergetoolto resolve the conflicts with more user-friendly tools like Meld, KDiff3, Gvim etc."
"*.opensdf is a temporary file opened only while .vcxproj/.sln is loaded to Visual Studio IDE.  It should be added to your .gitignore file.See the accepted answer on this question: What should be contained in a global Subversion ignore pattern for Visual Studio 2010?"
"You have to either use https and enter your password or use ssh (and associate your public ssh key to your github account)I tried my best and looked for the causes/solution of the error:Error: The requested URL returned error: 403 while accessinghttps://github.com/Joey-project/repo.git/info/refsfatal: HTTP request failedI believe one of the main reasons of this happening is because of bad login credentials from your local machine to the server.If I remember correctly, one has to (1) Make sure you have a stable git version(2) Ensure the remote is correct(3) Provide access token if 2FA is enabled(4) Checking your permissions(username/password)(5) Use ssh instead of httpsPushing to Git returning Error Code 403 fatal: HTTP request failed might come in handy, which has a lot of extra information regarding your problem.Goodluck! I hope it helps you"
"This is likely because you or someone on your team has changes in your submodule that are unpublished (committed, but not pushed to the remote server). They then published the superproject with references to the git commit in the submodule which does not exist on the git server. So git is trying to pull down a specific submodule git commit ID that it can't find.This would be the case if the changes are in a repository elsewhere on your machine or on another machine.To resolve, go to that repository that references that commit and publish (push) the submodule changes to the server. Or change the submodule to point to a different commit ID.I also received this error using TortoiseGit while trying to update submodules that aren't in the index.  That is, they exist in .gitmodules but have not been correctly added to the repository.The solution is to manually re-add them using the paths specified in .gitmodules.  You can use the TortoiseGit UI or run this on the command line for each module...git submodule add <url> <path>(I realise this is probably not the solution for the original poster, but hopefully it helps others Googling this.)In order to get new submodules into other repositories, I believe you need to run git submodule init once before starting to run git submodule update; this will register the new submodule from .gitmodules in .git/config."
"The solution is to enter the commandgit config --global url.""https://"".insteadOf git://in the command line.  This is mentioned in the comments of the answer to this question, but it seems helpful to put in a standalone answer."
"Try git fetch so that your local repository gets all the new info from github. It just takes the information about new branches and no actual code. After that the git checkout should work fine.I got this error for a branch that was remote and had no local tracking branch. Even though I'm certain I've checked out remote branches via a simplegit checkout feature/fooin the past, to get around this error I had togit checkout -t -b feature/foo origin/feature/fooI have no idea what I did to get myself into that situation either.I was getting following error when I tried to checkout new brancherror: pathspec 'BRANCH-NAME' did not match any file(s) known to git.When I tried git checkout origin/<BRANCH-NAME> it went to detached HEAD (detached from origin/)Did following to resolve the issuegit remote updategit fetch git checkout --track origin/<BRANCH-NAME>""error: pathspec 'foo' did not match any file(s) known to git.""This happenned to me when the full repo was not fetched.try:$ git fetchGit Windows users beware - without the --icase-pathspecs or GIT_ICASE_PATHSPECS = 1 env var setting, that git pathspecs will be case-sensitive, in which case git checkout origin/FooBranch ""Some/Path/To/File.txt""is not the same as git checkout origin/FooBranch ""some/path/to/file.Txt""I got this when I did the following:Used IntelliJ IDE, connected to gitCreated a new file, and added to gitRenamed the new fileWhen I tried to check in the directory, I got this error.To fix:I opened the repo in git extensions. I saw that the file (with the old name) was staged. But since it didnt exist anymore, it could not be committed.I simply unstaged this file. Then I re-added the file (this time correctly named) into git and committed without errors.If it happens on Windows, it is probably the filename case issue. I had this error today - I've created new file, added to GIT, then I changed one letter in filename from lower to upper and then I couldn't to anything - commit, revert, delete file from repo. The only solution I found was changing the filename again back to exact same case when I added this file to GIT, then doing GIT revert to remove this file from GIT, then changing filename again as I want. After those changes I could commit to repo and then push without any problem.None of these answers solved my issue:Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git log --format=onelineb9cc6a9078312865280fb5432a43e17eff03a5c6 Formatted README288772f36befe6bd60dd41b8185f1e24e0119668 Updated README documentationd2bdbe18f4169358d46fad50eacfb89786df3bf8 Version object v3.0.0-SNAPSHOTa46b1910a3f548b4fa254a6055d25f68d3f217dd VersionFactory is now Platform agnostic24179ae569ec7bd28311389c0a7a85ea7b4f9594 Added internal.Platform abstraction252b684417cf4edd71aed43a15da2c8a59c629a7 Added IPlugin implementation for Spongee3f8d21d6cf61ee4fc806791689c984c149b45e3 Added IPlugin implementation for Bukkitaeb403914310b4b10dee9e980cf64472e2bfda79 Refactored Version.javaef50efcff700c6438d57f70fac30846de2747a7e Refactored TesterFactorya20808065878d4d28657ae362235c837cfa8e625 Added IPlugin abstraction9712a3575a70060d7ecea8b62bb5e888fdc32d07 Heavily refactored Tester02d025788ae740dbfe3ef76a132cea8ca4e47467 Added generic Predicate<T> interface9c565777abea9be6767dfdab4ab94ed1173750dd Minor refactoring of testCompareTo()2ff2a28c221681e256dcff28770782736d3a796a Version object v2.0.1d4b2e2bd830f77cdbc2297112c2e46b6555d4393 Fix compareTo()05fe7e012b07d1a5b8de29804f96d9a6b24229a1 Make compareTo() fail6e85371414357a41c1fc0cec0e75adba92f96832 Fix VersionFactory passing nullc1fd1f032f87d860d5ed9d6f6679c9fa522cff8d Version object v2.062c3a92c008a2ed11f0a4d016080afc3541d0700 Version object v1.2c42e9e617128085e872c51b4d977a04e48d69e8f Deprecated, doc'd, future-proofed getNmNikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 3a796aerror: pathspec '3a796a' did not match any file(s) known to git.I was trying to go back and build the commit for Version object v2.0.1. Luckily, I got the idea to try the whole hash code and it worked ! Which means that I was using the wrong end of the hash code.Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 2ff2aNote: checking out '2ff2a'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example:  git checkout -b new_branch_nameHEAD is now at 2ff2a28... Version object v2.0.1Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version ((2ff2a28...))$As shown above, for partial hash codes, you must supply the front-end, not the back-end.If you deleted a folder and pulled/cloned again your repo, you may need to create your local branch again. Try: git checkout -b yourbranchnameIn my case I had renamed a file changing the case of the file, i.e.   SomeFile.js -> someFile.jsI think that was related to the problem.  Doing a git fetch didn't fix the issue.I moved the files out of my project, did a fetch, and did a push without them.  Then I did a fetch, added them back, and did a push, and it worked.  I don't know if all those steps were needed, but it did ultimately work.in my case I enter submodule directory without doing git submodule init git submodule updateSo git was linked to the parent folder that indeed missed that branch.On Windows OS by default git is instaled with core.ignorecase = trueThis means that git repo files will be case insensitive, to change this you need to execute:\yourLocalRepo> git config core.ignorecase falseyou can find this configuration on .git\config file$ cat .git/refs/heads/feature/user_controlled_site_layouts3af84fcf1508c44013844dcd0998a14e61455034Can you confirm that the following works:$ git show 3af84fcf1508c44013844dcd0998a14e61455034It could be the case that someone has rewritten the history and that this commit no longer exists (for whatever reason really).This can be caused when upstream rewrites history.When this happens, I toss all affected repos, clone them fresh from upstream, and use 'git format-patch' / 'git am' to ferry any work in progress from old world to new.When I have this issue I install a new version of git. If I can't do that from a binary package, I install it from source into my $HOME directory like this:mkdir $HOME/binexport version=1.7.10.3  wget http://git-core.googlecode.com/files/git-$version.tar.gz  tar zxf git-$version.tar.gz  cd git-$version  ./configure --prefix=$HOME  make && make install  echo ""export PATH=$HOME/bin:\$PATH"" >> ~/.bashrc  chmod +x ~/.bashrc      which git      git --versionthe last two lines are to verify.(updated with code from user FractalSpace - thanks!)I had this problem today i was trying to git checkout foo and got error: pathspec 'testing' did not match any file(s) known to git. turns out i was in the wrong repo.. So lesson learned check your repo before freaking out.Happened to me after renaming an uncommitted file in Android Studio.Git seemed to have the old version in its repository, even if it didnå«t exist anymore.fetch, pull, checkout, add all and so on did not help in my case!So I opened the Git GUI of TortoiseGit which showed me the exactly file which caused trouble.Afterwards I deleted the file from the repository withgit rm -r --cached /path/to/affected/fileand the problem was goneI faced a similar issue. What led me into this trouble was:I had multiple remote branches and I deleted the folder that had the code.I did a get pull. : git pull git@git.corp......Then I added remote repository : git remote add upstream git@git.corp.......Then I tried to change branch to some other branch say AAAA and I got errorerror: pathspec 'AAAA' did not match any file(s) known to git.After spending an hour I found a solution.I deleted the source folder again.Then I did a git pull :git pull git@git.corp......Then I changed branch before linking it to remote repository : git checkout AAAthen I added it to remote repositorygit remote add upstream git@git.corp......After this I can easily switch branches.Although this is not a standard way but it worked for me after I tried all of above options.I faced this problem last time, and the thing I have done is remove the folder (or source code) related to that branch.Ex: the branch origin/foo create folder foo at your local, so I just delete it and use git fetch $ checkout to get code back from remote.Or you can do it by create folder at local same as the branch you intended to checkout.Ex: create folder foo at local, after that, use Git command: git branch --set-upstream-to=origin/foo foo, that all. Use git pull to get code."
"Yes you will have to resolve the conflicts, mark them as so with git add or git rm and git commitThe commit is not done yet, after the git revert - if you see .git/MERGE_MSG, you will see something like:Revert ""adding revert""This reverts commit  c1366607f15a8384434948cb0bcbf8ece48bb460.Conflicts:revertSo once you resolved the merge and do a git commit you will be presented with the message from the MERGE_MSG file and you can commit and that completes the revert.Below is an alternative to revertIt's a bit fuzzy, so ignore me if I'm at the wrong track here!To reset to previousgit reset --hard HEAD^Discard changes of a certain filegit checkout path/to/file/to/revertIf this isn't what you are looking for you always have the option of doing a new checkout of an older revision."
"GitHub isn't able to authenticate you.  So, either you aren't setup with an SSH key, because you haven't set one up on your machine, or your key isn't associated with your GitHub account.You can also use the HTTPS URL instead of the SSH/git URL to avoid having to deal with SSH keys.  This is GitHub's recommended method.Further, GitHub has a help page specifically for that error message, and explains in more detail everything you could check.You need to generate an SSH key (if you don't have one) and associate the public key with your Github account.  See Github's own documentation.This happened to me. For some reason my origin got messed up without my realizing it: Check if your settings are still correct git remote -vthe url needs to be something like ssh://git@github.com/YourDirectory/YourProject.git; if you don't see git@github.com, usegit remote set-url origin git://github.com/YourDirectory/YourProject.gitto set it right. Or you could use the github app to check and set the Primary Remote Repository url in the settings panel of your particular repository.Did you create a config file in your ~/.ssh directory?  It should have contents like these:Host github.com  IdentityFile ~/.ssh/github_rsaAssuming that you created an ssh key named github_rsaand uploaded it to GitHub...First, we need to check for existing ssh keys on your computer. Open up Terminal and run:cd ~/.sshls# Lists the files in your .ssh directoryAnd finally depending on what you see (in my case was): github_rsa  github_rsa.pub known_hostsJust try setting up your RSA and hopefully that will solve your ""git push origin"" issues$ ssh-keygen -lf ~/.ssh/github_rsa.pubMake sure ssh-add -l shows a fingerprint of an SSH key that's present in the list of SSH keys in your Github account.If the output is empty, but you know you have a private SSH key that works with your github account, run ssh-add on this key (found in ~/.ssh. It's named id_rsa by default, so you'll likely run ssh-add id_rsa).Else, follow these instructions to generate an SSH key pair .If you are using the GitHub for Mac UI, check preferences to make sure you're logged in.I know this problem. After add ssh key, add you ssh key to ssh agent too (from oficial docs https://help.github.com/articles/generating-ssh-keys/)ssh-agent -sssh-add ~/.ssh/id_rsaAfter it, all work fine, git can view proper key, before coudn't.you can use Https url to logini guess you are trying to login with ssh url when you say git push if it as asking only password consider you are connecting through ssh.better you use http url.I was using github earlier for one of my php project. While using github, I was using ssh instead of https. I had my machine set up like that and every time I used to commit and push the code, it would ask me my rsa key password.After some days, I stopped working on the php project and forgot my rsa password. Recently, I started working on a java project and moved to bitbucket. Since, I had forgotten the password and there is no way to recover it I guess, I decided to use the https(recommended) protocol for the new project and got the same error asked in the question.How I solved it?Ran this command to tell my git to use https instead of ssh:git config --global url.""https://"".insteadOf git://Remove any remote if any git remote rm originRedo everything from git init to git push and it works!PS: I also un-installed ssh from my machine during the debug process thinking that, removing it will fix the problem. Yes I know!! :)In case you are not accessing your own repository, or cloning inside a cloned repository (using some ""git submodule... "" commands):In the home directory of your repository:$ ls -a1. Open "".gitmodules"", and you will find something like this:[submodule ""XXX""]    path = XXX    url = git@github.com:YYY/XXX.gitChange the last line to be the HTTPS of the repository you need to pull:[submodule ""XXX""]    path = XXX    https://github.com/YYY/XXX.gitSave "".gitmodules"", and run the command for submodules, and "".git"" will be updated.2. Open "".git"", go to ""config"" file, and you will find something like this:[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true    precomposeunicode = true[remote ""origin""]    url = https://github.com/YYY/XXX.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch ""master""]    remote = origin    merge = refs/heads/master[submodule ""XXX""]    url = git@github.com:YYY/XXX.gitChange the last line to be the HTTPS of the repository you need to pull:    url = https://github.com/YYY/XXX.gitSo, in this case, the main problem is simply with the url. HTTPS of any repository can be found now on top of the repository page."
"Finally solved the problem, based on solution used in following thread:How to handle/fix git add/add conflicts?# moved all files from the local workdir to another directory.mv /workdir/* /old_content# commit this changegit commit -m 'Resolve git Add/Add branch merge conflict by deleting conflicted folder and files in myconflictedfolder'# do merge from remotegit pull origin masterPull was executed successfully, no conflicts anymore.I could now overwrite the old_content directory, if I want, then commit.Best regards, Konrad"
"checking it out my colleagues have it instantly in placeThat is not possible: a hook can be put in source control (you simply copy the script in your git repo), but it cannot be ""automatically in place"" (active) on clone/checkout: that would be way too dangerous, depending on what the hook is actually doing.See also ""Git remote/shared pre-commit hook""You would still need to activate it, by adding a symlink (even on Windows) to the pre-commit hook present in the git repo."
"You can simply convert your remote repository to bare repository (there is no working copy in the bare repository - the folder contains only the actual repository data).Execute the following command in your remote repository folder:git config --bool core.bare trueThen delete all the files except .git in that folder. And then you will be able to perform git push to the remote repository without any errors.I just had the same error while I began learning Git. Some of the other answers are clearly not for someone new to Git!(I am going to use non technical terms to get the idea across.) Anyway, what is happening is that you have two repositories, one is the original you first made, and the other the work one you just made.Right now you are in your work repository and are using the ""master"" branch. But you also happen to be ""logged in"" in your original repository to the same ""master"" branch. Now since you're ""logged in"" in the original, Git fears you might mess up because you might be working on the original and screw things up. So you need to return to the original repository and do a ""git checkout someotherbranch"", and now you can push with no problems.I hope this helps.The error message describes what has happened. More modern versions of Git refuse to update a branch via a push if that branch is checked out.The easiest way to work between two non-bare repositories is either toalways update the repositories by pull (or fetch and merge) or, if you have to,by pushing to a separate branch (an import branch) and then merging that branch into the master branch on the remote machine.The reason for this restriction is that the push operation operates only on the remote Git repository, it doesn't have access to the index and working tree. So, if allowed, a push on the checked-out branch would change the HEAD to be inconsistent with the index and working tree on the remote repository.This would make it very easy to accidentally commit a change that undoes all of the pushed changes and also makes it very difficult to distinguish between any local changes that have not been committed and differences between the new HEAD, the index and the working tree that have been caused by push moving HEAD.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.There are multiple solutions, depending on your needs.Solution 1: Use a Bare RepostioryAs suggested, if on one machine, you don't need the working directory, you can move to a bare repository. To avoid messing with the repository, you can just clone it:machine1$ cd ..machine1$ mv repo repo.oldmachine1$ git clone --bare repo.old repoNow you can push all you want to the same address as before.Solution 2: Push to a Non-Checked-Out BranchBut if you need to check out the code on your remote <remote>, then you can use a special branch to push. Let's say that in your local repository you have called your remote origin and you're on branch master. Then you could domachine2$ git push origin master:master+machine2Then you need to merge it when you're in the origin remote repo:machine1$ git merge master+machine2Autopsy of the ProblemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.You can get around this ""limitation"" by editing the .git/config on the destination server. Add the following to allow a git repository to be pushed to even if it is ""checked out"":[receive]denyCurrentBranch = warnor[receive]denyCurrentBranch = falseThe first will allow the push while warning of the possibility to mess up the branch, whereas the second will just quietly allow it.This can be used to ""deploy"" code to a server which is not meant for editing. This is not the best approach, but a quick one for deploying code.I like the idea of still having a usable repository on the remote box, but instead of a dummy branch, I like to use:git checkout --detachThis seems to be a very new feature of Git - I'm using git version 1.7.7.4.I had the same issue. For me, I use Git push to move code to my servers. I never change the code on the server side, so this is safe.In the repository, you are pushing to type:git config receive.denyCurrentBranch ignoreThis will allow you to change the repository while it's a working copy.After you run a Git push, go to the remote machine and type this:git checkout -fThis will make the changes you pushed be reflected in the working copy of the remote machine.Please note, this isn't always safe if you make changes on in the working copy that you're pushing to.You can recreate your server repository and push from your local branch master to the server master.On your remote server:mkdir myrepo.gitcd myrepo.gitgit init --bareOK, from your local branch:git push origin master:masterWith a few setup steps you can easily deploy changes to your website using a one-liner like git push productionWhich is nice and simple, and you don't have to log into the remote server and do a pull or anything. Note that this will work best if you don't use your production checkout as a working branch! (The OP was working within a slightly different context, and I think @Robert Gould's solution addressed it well. This solution is more appropriate for deployment to a remote server.) First you need to set up a bare repository somewhere on your server, outside of your webroot.mkdir mywebsite.gitcd mywebsite.gitgit init --bareThen create file hooks/post-receive:#!/bin/shGIT_WORK_TREE=/path/to/webroot/of/mywebsite git checkout -fAnd make the file executable:chmod +x hooks/post-receiveOn your local machine, git remote add production git@myserver.com:mywebsite.gitgit push production +master:refs/heads/masterAll set! Now in the future you can use git push production to deploy your changes!Credit for this solution goes to http://sebduggan.com/blog/deploy-your-website-changes-using-git/. Look there for a more detailed explanation of what's going on.With git config --local receive.denyCurrentBranch updateInstead on the server repository, it also updates the working tree if no untracked overwrite would happen.It was added in Git 2.3 as mentioned by VonC in the comments.I've compiled Git 2.3 and gave it a try. Sample usage:git init servercd servertouch agit add .git commit -m 0git config --local receive.denyCurrentBranch updateInsteadcd ..git clone server localcd localtouch bgit add .git commit -m 1git push origin master:mastercd ../serverlsOutput:abYay, b got pushed!You should only be pushing to a bare repository.  A bare repository is a repository that has no checked out branches.  If you were to cd to a bare repository directory, you'd only see the contents of a .git directory.In fact, set the remote to a non-checked out branch is sufficient. After you checked out your remote in a different branch, you can push.I had the same problem using Git to synchronise repositories on my Android phone and laptop. The solution for me was to do a pull instead of a push, as @CharlesBailey suggested.git push origin master on the Android repository fails for me with the same error messages that @hap497 got because of a push to a nonbare checkout of a repository + working-copy.git pull droid master on the laptop repository and working-copy works for me. Of course, you need to have previously run something like git remote add droid /media/KINGSTON4GB/notes_repo/.Older versions of Git used to allow pushes to the currently checked out branch of a non-bare repository.  It turns out this was a terribly confusing thing to allow.  So they added the warning message you see, which is also terribly confusing.If the first repository is just acting as a server then convert it to a bare repository as the other answers recommend and be done with it.If however you need to have a shared branch between two repos that are both in use you can achieve it with the following setupRepo1  - will act as the server and also be used for developmentRepo2  - will be for development only Setup Repo1 as followsCreate a branch to share work on.git branch shared_branchTo be safe, you should also create a $(REPO).git/hooks/update that rejects any changes to anything other than shared_branch, because you don't want people mucking with your private branches.repo1/.git/hooks  (GIT_DIR!)$ cat update#!/bin/shrefname=""$1""oldrev=""$2""newrev=""$3""if [ ""${refname}"" != ""refs/heads/shared_branch"" ]then   echo ""You can only push changes to shared_branch, you cannot push to ${refname}""   exit 1fiNow create a local branch in repo1 where you will do your actual work.git checkout -b my_work --track shared_branchBranch my_work set up to track local branch shared_branch.Switched to a new branch 'my_work'(may need to git config --global push.default upstream in order for git push to work)Now you can create repo2 with git clone path/to/repo1 repo2 git checkout shared_branch At this point you have both repo1 and repo2 setup to work on local branches that push and pull from shared_branch in repo1, without needing to worry about that error message or having the working directory get out of sync in repo1.  Whatever normal workflow you use should work.You have 3 optionsPull and push again:git pull; git pushPush into different branch:git push origin master:fooand merge it on remote (either by git or pull-request)git merge fooForce it (not recommended unless you deliberately changed commits  via rebase):git push origin master -fIf still refused, disable denyCurrentBranch on remote repository:git config receive.denyCurrentBranch ignoreHere is one test you can do to see how the bare server stuff work:Imagine you have a workstation and a server with live site hosted on it, and you want to update this site from time to time (this also applies to a situation where two developers are sending their work back and forth through a bare middleman).InitializationCreate some directory on your local computer and cd into it, then execute these commands:# initializationgit init --bare server/.gitgit clone server contentgit clone server localFirst you create a bare server directory (notice the .git at the end). This directory will serve as a container for your repository files only.Then clone your server repository to a newly created content directory. This is your live/production directory which will be served by your server software.The first two directories resides on your server, the third one is a local directory on your workstation.WorkflowNow here is the basic workflow:Enter the local directory, create some files and commit them. Finally push them to the server:# create crazy stuffgit commit -avgit push origin masterNow enter the content directory and update the server's content:git pullRepeat 1-2. Here content may be another developer that can push to the server too, and local as you may pull from him.OK, in case you want a normal remote repository, then create an extra branch and check it out. Push it into one branch (which is not checked out) and merge it with one which is currently active later after pushing from locally.For example, on a remote server:git branch devgit checkout devOn the local setup:git push On remote server:git merge devI had to re-run git --init in an existing bare repository, and this had created a .git directory inside the bare repository tree - I realized that after typing git status there. I deleted that and everything was fine again :)(All these answers are great, but in my case it was something completely different (as far as I can see), as described.)I'm sure most people viewing this question will stop at the first two huge answers, but I'd still like to offer my solution.I had an Eclipse + EGit web project setup when encountering the described error. What helped me was simply using the GitHub app, which seemed to magically resolve the issue. While EGit would always refuse the push, the GitHub desktop app would just shrug its shoulders and push my changes. Maybe it handles the multi-login-situation more gracefully.An article I found that might be useful to others is Git in 5 minutes.I had an Xcode project under Git version control that I wanted to push up to a Virtual Distributed Ethernet (VDE) I have in a DC. The VDE runs Centos 5.None of the articles I read about Git talked about bare repositories. It all sounded so simple until I tried what I thought should be easy coming from an SVN background.The suggestions here to make the remote repository bare worked. Even better for my requirements was to clone the Xcode project to projectname.git, copy that to the remote server; then pushes magically worked. The next step will be getting Xcode to push without errors about commits, but for now I'm okay doing it from Terminal.So:cd /tmp (or another other directory on your system)<br/>git clone --bare /xcode-project-directory projectname.git<br/>scp -r projectname.git sshusername@remotehost.com:repos/<br/>To push changes from your Xcode project after you've committed in Xcode:cd /xcode-project-directory<br/>git push sshusername@remotehost.com:repos/projectname.git<br/>I'm certain there is a smoother more sophisticated way of doing the above, but at a minimum this works. Just so everything is clear, here are some clarifications:/xcode-project-directory is the directory your xcode project is stored in. It's probably /Users/Your_Name/Documents/Project_Name.projectname is literally the name of the project, but it can be anything you care to call it. Git doesn't care, you will.To use scp you need to have a user account on the remote server that's allowed SSH access. Anyone running their own server will have this. If you're using shared hosting or the like, you might be out of luck.remotehost.com is the name of your remote host. You could as easily use its IP address. Just for further clarity I'm using Gitosis on the remote host with SSH keys, so I'm not prompted for passwords when I push. The article Hosting Git Repositories, the Easy (and Secure) Way tells you how to set all that up.The best way to do this is:mkdir ..../remotecd ..../remotegit clone --bare .../currentrepo/This will clone the repository, but it won't make any working copies in .../remote. If you look at the remote, you'll see one directory created, called currentrepo.git, which is probably what you want.Then from your local Git repository:git remote add remoterepo ..../remote/currentrepo.gitAfter you make changes, you can:git push remoterepo masterI just ran into this problem with a deployment git repository on Heroku.I don't know why Heroku has a non-bare repository on their side, but as a workaround I was able to reset the remote repository, and reupload.You shouldn't use Heroku's copy of your repository as your only git repository for collaboration, but just in case, I'll say clearly: Do not do this unless you are sure you have a full copy of your repository stored securely somewhere other than Heroku. Doing a reset will delete the repository contents.To reset:Install the Heroku toolbelt (which contains the command line client) if you haven't already.Install the heroku-repo plugin if you haven't already.heroku plugins:install https://github.com/heroku/heroku-repo.gitDo the reset, which deletes the repository and creates a new, empty oneheroku repo:resetPush to your Heroku remote as you normally would; it will reupload everything."
"In doubt, in your hook, set up explicitly git-dir and work-tree parameters:git --git-dir .git --work-tree . add ...You can even put the full path to be extra-sure:git --git-dir D:/xampp/htdocs/app/application/.git --work-tree D:/xampp/htdocs/app/application/. add ...That way, you rule out any environment issue with those git-dir or work-tree stuck into another path which isn't the one of the repo your are cd'ing into.See ""Calling 'git pull' from a git post-update hook"" for an example of that problem."
"The command has to be entered in the directory of the repository. The error is complaining that your current directory isn't a git repoAre you in the right directory? Does typing ls show the right files?Have you initialized the repository yet? Typed git initEither of those would cause your error."
"You are most likely having a problem with your shell wrongly escaping your parenthesis.Using the following, worked for me (no need for quotes, only escaping the parenthesis with backslash):git add -p \(External\)/Project/Filename.csin order to do the escaping right, I find it very helpful to use the auto-completion capabilities of bash, something like the following helps constructing the filename in a ""bash-safe"" way.git add -p \(E[tab]...if this doesn't help, you could simply try to first cd into ""(External)/Project"" and then usegit add -p Filename.csUPDATEif you are using W32 (which is obviously the case), then i can confirm the problem.the only workaround i found so far is to use git gui, which is simply a nice front-end to git add -p and which seems to work, even with parentheses."
"At server side, do this:git config receive.denyCurrentBranch ignoreThen you can push at local.As I pointed out in this post http://stackoverflow.com/questions/3217969/heroku-like-git-setuppushing to working repositories is a bit dangerous as any work in progress is not taken into account by the push, and it is quite easy to subsequently lose any uncommitted changes (basically the working HEAD can get out of step with the working branch HEAD). Git now has a warning to inform you of this - the, gory, details are in the following link:git push to a non-bare repositoryIt is recommended that your published repository should be a bare repo which does not have a checked out tree. Bare repos are created using the ""git clone --bare"" option.Pushing to a non-bare repo is now possible (Git 2.3.0 February 2015).And it is possible when you are pushing the branch currently checked out at the remote repo!See commit 1404bcb by Johannes Schindelin (dscho):receive-pack: add another option for receive.denyCurrentBranchWhen synchronizing between working directories, it can be handy to update the current branch via 'push' rather than 'pull', e.g. when pushing a fix from inside a VM, or when pushing a fix made on a user's machine (where the developer is not at liberty to install an ssh daemon let alone know the user's password).The common workaround ‰ÛÒ pushing into a temporary branch and then merging on the other machine ‰ÛÒ is no longer necessary with this patch.The new option is:updateInsteadUpdate the working tree accordingly, but refuse to do so if there are any uncommitted changes.This should help: http://stackoverflow.com/questions/3191400/pushing-to-a-git-repository-does-not-work/3191584#3191584"
"Warning, doing this will permanently delete your files if you have any directory/* entries in your gitignore file.Add (git add) the file and start tracking it. Then stash. Since the entire contents of the file are new, they will be stashed, and you can manipulate it as necessary.As of version 1.7.7 you can use git stash save -u to stash untracked files without staging them.As of git 1.7.7, git stash accepts the --include-untracked option (or short-hand -u). To include untracked files in your stash, use either of the following commands:git stash --include-untrackedgit stash -uWarning, doing this will permanently delete your files if you have any directory/* entries in your gitignore file.Add the file to the index:git add path/to/untracked-filegit stashThe entire contents of the index, plus any unstaged changes to existing files, will all make it into the stash.As has been said elsewhere, the answer is to git add the file.  e.g.:git add path/to/untracked-filegit stashHowever, the question is also raised in another answer: What if you don't really want to add the file?  Well, as far as I can tell, you have to.  And the following will NOT work:git add -N path/to/untracked/file     # note: -N is short for --intent-to-addgit stashthis will fail, as follows:path/to/untracked-file: not added yetfatal: git-write-tree: error building treesCannot save the current index stateSo, what can you do?  Well, you have to truly add the file, however, you can effectively un-add it later, with git rm --cached:git add path/to/untracked-filegit stash save ""don't forget to un-add path/to/untracked-file"" # stash w/reminder# do some other workgit stash list# shows:# stash@{0}: On master: don't forget to un-add path/to/untracked-filegit stash pop   # or apply instead of pop, to keep the stash availablegit rm --cached path/to/untracked-fileAnd then you can continue working, in the same state as you were in before the git add (namely with an untracked file called path/to/untracked-file; plus any other changes you might have had to tracked files).Another possibility for a workflow on this would be something like:git ls-files -o > files-to-untrackgit add `cat files-to-untrack` # note: files-to-untrack will be listed, itself!git stash# do some workgit stash popgit rm --cached `cat files-to-untrack`rm files-to-untrack... which could also be easily scripted -- even aliases would do (presented in zsh syntax; adjust as needed) [also, I shortened the filename so it all fits on the screen without scrolling in this answer; feel free to substitute an alternate filename of your choosing]:alias stashall='git ls-files -o > .gftu; git add `cat .gftu`; git stash'alias unstashall='git stash pop; git rm --cached `cat .gftu`; rm .gftu'Note that the latter might be better as a shell script or function, to allow parameters to be supplied to git stash, in case you don't want pop but apply, and/or want to be able to specify a specific stash, rather than just taking the top one.  Perhaps this (instead of the second alias, above) [whitespace stripped to fit without scrolling; re-add for increased legibility]:function unstashall(){git stash ""${@:-pop}"";git rm --cached `cat .gftu`;rm .gftu}Note: In this form, you need to supply an action argument as well as the identifier if you're going to supply a stash identifier, e.g. unstashall apply stash@{1} or unstashall pop stash@{1}Which of course you'd put in your .zshrc or equivalent to make exist long-term.Hopefully this answer is helpful to someone, putting everything together all in one answer.In git bash, stashing of untracked files is achieved by using the commandgit stash --include-untrackedor git stash -uhttp://git-scm.com/docs/git-stashgit stash removes any untracked or uncommited files from your workspace. And you can revert git stash by using following commandsgit stash popThis will place the file back in your local workspace.My experienceI had to perform a modification to my gitIgnore file to avoid movement of .classpath and .project files into remote repo. I am not allowed to move this modified .gitIgnore in remote repo as of now..classpath and .project files are important for eclipse - which is my java editor.I first of all selectively added my rest of the files and committed for staging. However, final push cannot be performed unless the modified .gitIgnore fiels and the untracked files viz. .project and .classpath are not stashed.I used git stash for stashing the modified .gitIgnore file.For stashing .classpath and .project file, I used git stash --include-untrackedand it removed the files from my workspace. Absence of these files takes away my capability of working on my work location in eclipse.I proceeded on with completing the procedure for pushing the committed files to remote.Once this was done successfully, I used git stash popThis pasted the same files back in my workspace. This gave back to me my ability to work on the same project in eclipse.Hope this brushes aside misconceptions.There are several correct answers here, but I wanted to point out that for new entire directories, 'git add path' will NOT work. So if you have a bunch of new files in untracked-path and do this:git add untracked-pathgit stash ""temp stash""this will stash with the following message:Saved working directory and index state On master: temp stashwarning: unable to rmdir untracked-path: Directory not emptyand if untracked-path is the only path you're stashing, the stash ""temp stash"" will be an empty stash. Correct way is to add the entire path, not just the directory name (i.e. end the path with a '/'):git add untracked-path/git stash ""temp stash"""
"After much research i found its a simple problem of the packer running out of memory, this is due to the fact that git uses compression methods that are more suitable to large amounts of small files.If any was interested i am getting around this problem by splitting the files before add them in so it can still track the changes but it will need to be put together when getting it back.I increased the memory on my server and it solved the problem."
"You haven't created a Heroku application yet.You need to run the heroku create command, which will create a Heroku application, and add a git remote called heroku that points to your newly created application. After that git push heroku master should work fine."
"Some git commands modify the git config file. One of them is git remote add, because the remote is stored in the config file.To avoid problems with several git processes modifying the config file simultaneously, git will lock the config file before changing it (by writing a lock file), and release the lock afterwards (by renaming the lock file to the config file).The error messageerror: could not commit config file .git/configmeans that git could not properly release this lock. This probably means that either another process was working on the same file, or there was some kind of filesystem error (or there's a bug in git or your OS/libraries).Unfortunately, git does not tell you what exactly was the problem, so you'll have to manually debug this. You could try running git with dtruss to see what exactly is going wrong."
"It is possible that you are pushing several commits, one of them including a large file, and another more recent one removing that file.In any case, you can try, as explained in ""Fixing the ‰ÛÏthis exceeds GitHub‰Ûªs file size limit of 100 MB‰Ûù error"", a filter-branch (if you know the name/path of the large file that you can't see)git filter-branch --index-filter 'git rm --cached --ignore-unmatch e3384023be667de7529538b11c12ec68.201307290946.sql.gz' merge-point..HEADOr, if you don't know but want to get rid of any large file (say > 90MB), you can use the BFG repo cleanerbfg --strip-blobs-bigger-than 90M  my-repo.gitThat will track for you that elusive large file in your repo history and remove it.Note that you will have to do a git push --force after that, because the history of the more recent commits will have been modified.If others already cloned your repo before, a bit of communication is in order to warn them.In my case I fixed it with this link:http://git.io/iEPt8gNotice where it says giant_file (I didn't notice that)$ git filter-branch --force --index-filter \  'git rm --cached --ignore-unmatch giant_file' \  --prune-empty --tag-name-filter cat -- --all$ git commit --amend -CHEAD$ git push"
"What you are seeing means that automatic merge could not resolve the conflicts in the files. You need to resolve these conflicts manually. Run git mergetool or git gui.The ""git merge"" command tries to incorporate changes from another branch onto the present branch. If the merge is clean, meaning no conflicts, it will commit. Since your merge did have conflicts, it didn't commit. You need to resolve the conflict.Pulling the copy from the upstream repo is one way to do that - by accepting the upstream repo's version. You can do that within git using ""git checkout --theirs conflicting_file.txt""Editing the file to get it into the shape you want is another way.Once it's fixed, you need to add using ""git add conflicting_file.txt"" then commit. Then your working copy is clean and ready for more hacking. Good luck.In Git  there are cases merge refuses to even start in order to protect your local changes.  This may happen in two cases:You have uncommitted changes in you repository that conflict with merge.  The git will refuse to do a merge with the following message:error: Your local changes to the following files would be overwritten by merge:åÊåÊåÊåÊåÊåÊåÊåÊfooPlease, commit your changes or stash them before you can merge.AbortingThen you have to either commit the changes first (git commit -a or git add + git commit), or stash them away with git stash save.You are in the middle of some unfinished merge-y operation. There was some conflict, for exampleAuto-merging fooCONFLICT (content): Merge conflict in fooAutomatic merge failed; fix conflicts and then commit the result.and you have not finished resolving conflicts (by editing files and marking them as resolved with git add, or using some graphical merge tool via git mergetool) and didn't create a final merge commit with git commit -a, or aborted the merge with git reset --hard (NOTE: this will discard all you changes, and you will loose work done on resolving conflicts!!!).Or you have just run second git merge too fast, or used git merge instead of git commit to create a merge commit.error: 'merge' is not possible because you have unmerged files.hint: Fix them up in the work tree,hint: and then use 'git add/rm ' ashint: appropriate to mark resolution and make a commit,hint: or use 'git commit -a'.fatal: Exiting because of an unresolved conflict.Resolve conflicts as described e.g. in old Fun with completing a merge article by Junio C Hamano and finalize a merge with git commit, or discard a merge, or stash it away.  Then if you meant to create this second merge, you can do it.Sidenote: by default git-aware shell prompt shows if you are in the middle of merge, rebase or applying patches (git am operation).  You can also configure it to show if the working directory is dirty (different from latest version, i.e. HEAD).After you've resolved a merge, you need to use git add to add the files you've changed to the index, and then commit (like the message says). This says to git ""Yes, I really do want to make these changes"".Remember, always use git add before committing (either normally or committing a merge), if you're using the command line interface. Frontends like magit can streamline this for you so you don't have to worry about typing ""git add"" every time."
"I have seen this error in VS2013 when the file or folder would be ignored by GIT. You can confirm this by trying the add from the command line.For example, the following shows this for the ""bin"" folder of the TestGit project:$ git add binThe following paths are ignored by one of your .gitignore files:TestGit/binUse -f if you really want to add them.fatal: no files addedIf you confirm that is the issue, you will need to check .gitignore, .git/info/exclude, etc. and fix the settings. You can find which file to using git check-ignore as follows:$ git check-ignore -v bin.gitignore:190:bin      binThis example shows that line 190 of the .gitignore file needs is causing the bin folder to be ignored. Fixing this allow will allow that folder (or files in it) to be added.Note: I added ""bin"" to .gitignore for this example; it is not part of the .gitignore file created by Visual Studio.*Update: I didn't even need to add the line. The .gitignore added by Visual Studio already excludes the ""bin"" folder. See github/gitignore/VisualStudio.gitignore for even more detail."
"Install msysgit, as stated in the Bower documentation:To use Bower on Windows, you must install msysgit correctly. Be sure to check the option shown below:[ ] Use Git bash only[x] Run Git from the Windows Command Prompt[ ] Run Git and included Unix tools from the Windows Command PromptThis will allow you (and bower) to run git from the command prompt, which will fix your issue.Make sure u installed git with 2nd or 3rd option selected from list.It will penetrate git command to cmd by modifying PATH automatically ;)Install Bower using Git Bash and run bower install jQuery from Git Bash. Git doesn't work from Windows command prompt as CMD is not POSIX compatible.Manual method is to add the Git cmd path to your windows PATH environment variable. The Git cmd path will be unique on your machine, and something like:C:\Users\<YourUserName>\AppData\Local\GitHub\PortableGit_<SomeGuid>\cmd\From command prompt, add it to your PATH var like so:path C:\Users\<YourUserName>\AppData\Local\GitHub\PortableGit_<SomeGuid>\cmd\;%PATH%"
"First call reset :git reset views/docs/examplesgit rm -rf views/docs/examples"
"You can see various way to debug this in ""Debugging git repo permissions on samba share"":setting different permissions for sharemounting manuallydowngrading samba and git to earlier versionssudo - this works but I wouldn't want to use it unless absolutely necessarychanging owner and group after using sudoAndrew Myers suggests making sure your bare repo has core.sharedRepository set to group.If not, set it and runcd /path/to/repo.gitchgrp -R groupname .chmod -R g+rwX .find . -type d -exec chmod g+s '{}' +If nothing works, make sure it isn't an issue related to the kernel version:I've downgraded kernel to 3.11.6 and git add/commit as user started working again.Update: The OP kamaradclimber reports (or tried to) that is was a kernel issue (bug 66251):Git doesn't work correctly on samba share after upgrading kernel from 3.11.6 to 3.12.1Fixed by this patch.In my case, it looks like Git (v 2.6.3) tried to create its own read/write permissions on the Samba drive. This would prevent the pack files and/or objects from getting written (unpack error) remote: error: unable to write sha1 filename ./objects/pack/pack-<some_hex_string>.pack: Permission deniedremote: fatal: cannot store pack fileerror: unpack failed: index-pack abnormal exitTo z:\git\<repo name> ! [remote rejected] master -> master (unpacker error)error: failed to push some refsI went back and forth on trying to fix. Finally, since I had control of the Samba machine, I added a line to the samba drive config, which says ""inherit permissions = yes"". I restarted Samba and tried to push. It worked!This worked for me since I'm the only person using the Samba server. For others, you may have the play around with ""force directory mode"" or ""force create mode"". You can find the man pages for those over here:https://www.samba.org/samba/docs/man/Samba-HOWTO-Collection/AccessControls.html"
"You have origin as a remote created already, just add your stuff to the staging area using git add . then use git commit -m 'your commit message' to commit your changes, then the most important part, PUSH your master branch to your remote using git push origin master.You should read about the git workflow, here: http://git-scm.com/book/en/Getting-Started-Git-Basics, http://marklodato.github.io/visual-git-guide/index-en.html."
"Got the same error fatal: index file open failed: Permission denied by run git status, and I checked .git/index by$ ls -al .git/indexto my surprise, it's----------  1 Kjuly  staff  768248 Sep  2 11:07 .git/indexI've no idea why & how it changed. Anyway, after I changed it's permission back to 644 by$ chmod 644 .git/indexgit status works.Make sure the .git directory and its files/subdirectories are owned and writable by your user. This sounds like the repository was either cloned under a different user account or as root user (e.g. through sudo).It does not matter where the remote of the repository is hosted, git status only accesses the local repository."
"I found a solution Here that worked for me.In .git/config file (client and/or server) I added the following:[core]  packedGitLimit = 128m  packedGitWindowSize = 128m[pack]  deltaCacheSize = 128m  packSizeLimit = 128m  windowMemory = 128mFor reference (you might already seen it), the msysgit case dealing with that issue is the ticket 292.It suggests several workarounds:Disable delta compression globally. For this you have to set pack.window to 0. Of course this will make the repository much larger on disc.Disable delta compression for some files. Check the delta flag on the manpage to gitattributes.git config --global pack.threads 1git config --global pack.windowMemory 256m (you already tried that one, but also illustrated in ""Error when pulling warning: suboptimal pack - out of memory"")other settings are mentioned in ""git push fatal: unable to create thread: Resource temporarily unavailable"" and ""Git pull fails with bad pack header error"" in case this is pack-related.sm4 adds in the comments:To disable the delta compression for certain files, in .git/info/attributes, add:*.zip binary -deltaFrom Gitattributes man page:Delta compression will not be attempted for blobs for paths with the attribute delta set to false.Maybe a simpler workaround would be to somehow reset the history before that large file commit, and redo the other commits from there.EDIT: ‰ÛÄSince git-v2.5.0 (Aug/2015), git-for-windows (formerly MSysGit)‰ÛÄ ‰ÛÄ ‰ÛÄ provides 64-bits versions as noticed by Pan.student.‰ÛÄ ‰ÛÄ ‰ÛÄ In this answer I was advising to install Cygwin 64-bits (providing 64-bits Git version).I got a similar Out of memory, malloc failed issue using MSysGit when reaching the 4GB barrier:> git --versiongit version 1.8.3.msysgit.0> file path/Git/cmd/gitpath/Git/cmd/git: PE32 executable for MS Windows (console) Intel 80386 32-bit> time git clone --bare -v ssh://linuxhost/path/repo.gitCloning into bare repository 'repo.git'...remote: Counting objects: 1664490, done.remote: Compressing objects: 100% (384843/384843), done.remote: Total 1664490 (delta 1029586), reused 1664490 (delta 1029586)Receiving objects: 100% (1664490/1664490), 550.96 MiB | 1.55 MiB/s, done.Resolving deltas: 100% (1029586/1029586), done.fatal: Out of memory, malloc failed (tried to allocate 4691583 bytes)fatal: remote did not send all necessary objectsreal    13m8.901suser    0m0.000ssys     0m0.015sFinally git 64 bits from Cygwin fix it:> git --versiongit version 1.7.9> file /usr/bin/git/usr/bin/git: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows> time git clone --bare -v ssh://linuxhost/path/repo.gitCloning into bare repository 'repo.git'...remote: Counting objects: 1664490, done.remote: Compressing objects: 100% (384843/384843), done.remote: Total 1664490 (delta 1029586), reused 1664490 (delta 1029586)Receiving objects: 100% (1664490/1664490), 550.96 MiB | 9.19 MiB/s, done.Resolving deltas: 100% (1029586/1029586), done.real    13m9.451suser    3m2.488ssys     3m53.234sFYI on linuxhost 64 bits:repo.git> git config -luser.email=name@company.comcore.repositoryformatversion=0core.filemode=truecore.bare=truerepo.git> git --versiongit version 1.8.3.4repo.git> uname -aLinux linuxhost 2.6.32-279.19.1.el6.x86_64 #1 SMP Sat Nov 24 14:35:28 EST 2012 x86_64 x86_64 x86_64 GNU/LinuxIf my answer does not fix your issue, you may also check these pages:git clone out of memory even with 5.6GB RAM free and 50 GB hard diskGit clone fails with out of memory error - ‰ÛÏfatal: out of memory, malloc failed (tried to allocate 905574791 bytes) / fatal: index-pack failed‰Ûùgit-clone memory allocation errorMSysGit issues tracker"
"When there is a conflict during a merge, you have to finish the merge commit manually. It sounds like you've done the first two steps, to edit the files that conflicted and then run git add on them to mark them as resolved. Finally, you need to actually commit the merge with git commit. At that point you will be able to switch branches again.In case you ever get stuck during a merge/rebase you can alwaysgit reset --hardto restore your working to the state of the last commit. This will lose your changes from the working tree so if you had local modifications before the merge they will be gone after this‰ÛÓwhich is why it‰Ûªs advisable to not start a merge when you have local modifications. :)The next steps after resolving the conflicts manually are:-git add .git status (this will show you which commands are necessary to continue automatic merge procedure)[command git suggests, e.g. git merge --continue, git cherry-pick --continue, git rebase --continue]"
"I encountered a similar problem with a rebase. My problem was caused because one of my commit only changed a file, and when resolving, I discarded the change introduced in this commit. I was able to solve my problem by skipping the corresponding commit (git rebase --skip).You can reproduce this problem in a test repository. First create the repository.$ mkdir failing-merge$ cd failing-merge$ git initInitialized empty Git repository in $HOME/failing-merge/.git/Then commit the original content of version.txt in master.$ echo v1.4-alpha-02 > version.txt$ git add version.txt$ git commit -m initial[master (root-commit) 2eef0a5] initial 1 files changed, 1 insertions(+), 0 deletions(-) create mode 100644 version.txtCreate the v4 branch and change the content of version.txt.$ git checkout -b v4Switched to a new branch 'v4'$ echo v1.4-alpha-03 > version.txt$ git add version.txt$ git commit -m v4[v4 1ef8c9b] v4 1 files changed, 1 insertions(+), 1 deletions(-)Go back to master and change the content of version.txt so that there will be a conflit during the rebase.$ git checkout masterSwitched to branch 'master'$ echo v1.4-alpha-04 > version.txt$ git add version.txt$ git commit -m master[master 7313eb3] master 1 files changed, 1 insertions(+), 1 deletions(-)Switch back to v4 branch and try to rebase. It fails with a conflit in version.txt as planned.$ git checkout v4Switched to branch 'v4'$ git rebase masterFirst, rewinding head to replay your work on top of it...Applying: v4Using index info to reconstruct a base tree...Falling back to patching base and 3-way merge...Auto-merging version.txtCONFLICT (content): Merge conflict in version.txtRecorded preimage for 'version.txt'Failed to merge in the changes.Patch failed at 0001 v4When you have resolved this problem run ""git rebase --continue"".If you would prefer to skip this patch, instead run ""git rebase --skip"".To restore the original branch and stop rebasing run ""git rebase --abort"".$ cat version.txt<<<<<<< HEADv1.4-alpha-04=======v1.4-alpha-03>>>>>>> v4We resolve the conflict by selecting the master content of version.txt. We add the file and try to continue our rebase.$ echo v1.4-alpha-04 > version.txt$ git add version.txt$ git rebase --continue Applying: v4No changes - did you forget to use 'git add'?If there is nothing left to stage, chances are that something elsealready introduced the same changes; you might want to skip this patch.When you have resolved this problem run ""git rebase --continue"".If you would prefer to skip this patch, instead run ""git rebase --skip"".To restore the original branch and stop rebasing run ""git rebase --abort"".It fails ! Let's see what changes git think there is in our repository.$ git status# Not currently on any branch.nothing to commit (working directory clean)Ah ah, there is no change. If you read in detail the previous error message, git informed us of this and recommended to use git rebase --skip. He told us ""If there is nothing left to stage, chances are that something else already introduced the same changes; you might want to skip this patch."" So we just skip the commit and the rebase succeed.$ git rebase --skipHEAD is now at 7313eb3 masterWord of caution: Please note that git rebase --skip will completely drop the commit that git tried to rebase. In our case, this should be okay since git is complaining this is an empty commit. If you think you've lost changes once the rebase is complete, you can use git reflog to get the commit id of your repository before the rebase, and use git reset --hard to get your depot back in that state (this is another destructive operation).Quoting from here: http://wholemeal.co.nz/node/9Huh?!? No, I didn't forget to use git  add, I did it ... like ... 2 seconds  ago!Turns out that because there is no  change from the patch git suspects  something has gone wrong. Git expects  a patch to have been applied, but the  file has remained unchanged.The error message is not very  intuitive, but it does contain the  answer. We just need to tell rebase to  skip this patch. It's also not  necessary to fix the conflict markers  in the file. You will end up with the  file version from the branch you are  rebasing on.$ git rebase --skipChange app/views/common/version.txt to v1.4-alpha-01At this point in the rebase, remember that you are resolving merge conflicts to show the progression of the non-master branch.So, in rebasing from      A---B---C topic     /D---E---F---G masterto              A*--B*--C* topic             /D---E---F---G masterthe conflict you are resolving is in how to create A* on the topic branch.So after doing git rebase --abort, the commands should begit checkout topicgit rebase master< make edits to resolve conflicts >git add .git rebase --continueThat error message is a result of your git commit -a -m ""merged"". If you just fix up the file, then run git add <file>, and git rebase --continue, it should work fine. git rebase --continue is trying to do a commit, but finding that there are no pending changes to commit (because you committed them already).The behavior you're seeing is not what I would expect from a typical rebase with just this conflict. Consider using a separate branch to do this rebase (especially if you've already pushed the commits remotely that you're fast-forwarding). Also, git mergetool can be helpful for resolving conflicts and remembering to issue a git add.In this minimal example, the rebase works as expected. Can you provide an example that shows the behavior you're seeing?#!/bin/bashcd /tmpmkdir rebasetestcd rebasetestgit initecho 'v1.0' > version.txtgit add version.txtgit commit -m 'initial commit'git checkout -b v4echo 'v1.4-alpha-01' > version.txtgit add version.txtgit commit -m 'created v4'git checkout mastergit merge v4echo 'v1.4-alpha-01-rc1' > version.txtgit add version.txtgit commit -m 'upped version on master to v1.4-alpha-01-rc1'git checkout v4echo 'v1.4-alpha-02' > version.txtgit add version.txtgit commit -m 'starting work on alpha-02'git rebase masterecho 'v1.4-alpha-02' > version.txtgit add version.txtgit rebase --continueHere are some ideas:Before starting the rebase, make sure you aren't in the middle of a rebase or am. Do: rm -rf .git/rebase-applyif you use Bash, enhance your bash prompt so it always presents this information automaticallyOne bit you mentioned I didn't understand: ""and then try to carry on: at first i try a commit:""... why commit? In the middle of a rebase I think you should only ""git add"" after you tidy up or ""git rm"" to toss changes or confirm a file deletion. Maybe that messed something up?try a merge instead of a rebasetry some of Ethan Rowe's ideas"
"The .gitignore file should be in your repository, so it should indeed be added and committed in, as git status suggests. It has to be a part of the repository tree, so that changes to it can be merged and so on.So, add it to your repository, it should not be gitignored.If you really want you can add .gitignore to the .gitignore file if you don't want it to be committed. However, in that case it's probably better to add the ignores to .git/info/exclude, a special checkout-local file that works just like .gitignore but does not show up in ""git status"" since it's in the .git folder.See also https://help.github.com/articles/ignoring-filesIf you want to store the list of ignored files outside of your Git tree, you can use the .git/info/exclude file. It is applied only to your checkout of the repo.You could actually put a line "".gitignore"" into your "".gitignore"" file. This would cause the "".gitignore"" file to be ignored by git. I do not actually think this is a good idea. I think the ignore file should be version controlled and tracked. I'm just putting this out there for completeness.You  can also have a global user git .gitignore file that will apply automatically to all your repos. This is useful for IDE and editor files (e.g. swp and *~ files for Vim). Change directory locations to suite your OSAdd to your ~/.gitconfig file[core]excludesfile = /home/username/.gitignoreCreate a ~/.gitignore file with file patterns to be ignoredSave your dot files in another repo so you have a backup (optional).Any time you copy, init or clone a repo your global gitignore file will be used as wellAfter you add the .gitignore file and commit it, it will no longer show up in the ""untracked files"" list.git add .gitignoregit commit -m ""add .gitignore file""git statusIf someone has already added a .gitignore to your repo, but you want to make some changes to it and have those changes ignored do the following:git update-index --assume-unchanged .gitignoreSource.Just incase someone else has the same pain we had.We wanted to exclude a file that had already been committed.This post was way more useful:working with .git/info/exclude too lateSpecifically what you need to ignore a file is actually use the command git removeSee git rm (http://www.kernel.org/pub/software/scm/git/docs/git-rm.html)you test it by going git rm --dry-run *.log(if you say wanted to exclude all the log files)this will output what would be excluded if you ran it.thenyou run it by goinggit rm *.log(or whatever filename path / expression you want to)Then add a *.log line to your .gitignore file.The idea is to put files that are specific to your project into the .gitignore file and (as already mentioned) add it to the repository. For example .pyc and .o files, logs that the testsuite creates, some fixtures etc.For files that your own setup creates but which will not necessarily appear for every user (like .swp files if you use vim, hidden ecplise directories and the like), you should use .git/info/exclude (as already mentioned).Of course the .gitignore file is showing up on the status, because it's untracked, and git sees it as a tasty new file to eat!Since .gitignore is an untracked file however, it is a candidate to be ignored by git when you put it in .gitignore!So, the answer is simple: just add the line:.gitignore # Ignore the hand that feeds!to your .gitignore file!And, contrary to August's response, I should say that it's not that the .gitignore file should be in your repository.  It just happens that it can be, which is often convenient.  And it's probably true that this is the reason .gitignore was created as an alternative to .git/info/exclude, which doesn't have the option to be tracked by the repository.  At any rate, how you use your .gitignore file is totally up to you.For reference, check out the gitignore(5) manpage on kernel.org.First of all, as many others already said, your .gitignore should be tracked by Git (and should therefore not be ignored). Let me explain why.(TL;DR: commit the .gitignore file, and use a global .gitignore to ignore files that are created by your IDE or operating system)Git is, as you probably already know, a distributed version control system. This means that it allows you to switch back and forth between different versions (even if development has diverged into different branches) and it also allows multiple developers to work on the same project.Although tracking your .gitignore also has benefits when you switch between snapshots, the most important reason for committing it is that you'll want to share the file with other developers who are working on the same project. By committing the file into Git, other contributers will automatically get the .gitignore file when they clone the repository, so they won't have to worry about accidentally committing a file that shouldn't be committed (such as log files, cache directories, database credentials, etc.). And if at some point the project's .gitignore is updated, they can simply pull in those changes instead of having to edit the file manually.Of course, there will be some files and folders that you'll want to ignore, but that are specific for you, and don't apply to other developers. However, those should not be in the project's .gitignore. There are two other places where you can ignore files and folders:Files and folders that are created by your operating system or IDE should be placed in a global .gitignore. The benefit is that this .gitignore is applied to all repositories on your computer, so you don't have to repeat this for every repository. And it's not shared with other developers, since they might be using a different operating system and/or IDE.Files that don't belong in the project's .gitignore, nor in the global .gitignore, can be ignored using explicit repository excludes in your_project_directory/.git/info/exclude. This file will not be shared with other developers, and is specific for that single repositoryWatch out for the following ""problem"" Sometimes you want to add directories but no files within those directories. The simple solution is to create a .gitignore with the following content:*This seams to work fine until you realize that the directory was not added (as expected to your repository. The reason for that is that the .gitignore will also be ignored, and thereby the directory is empty. Thus, you should do something like this:*!.gitignoreThis seems to only work for your current directory to get Git to ignore all files from the repository. update this file.git/info/exclude with your wild card or filename*pyc*swp*~In my case, I want to exclude an existing file.Only modifying .gitignore not work.I followed these steps:git rm --cached dirToFile/file.phpvim .gitignoregit commit -aIn this way, I cleaned from cache the file that I wanted to exclude and after I added it to .gitignore.Navigate to the base directory of your git repo and execute the following command:echo '\\.*' >> .gitignoreAll dot files will be ignored, including that pesky .DS_Store if you're on a mac.It is quite possible that an end user wants to have Git ignore the "".gitignore"" file simply because the IDE specific folders created by Eclipse are probably not the same as NetBeans or another IDE. So to keep the source code IDE antagonistic it makes life easy to have a custom git ignore that isn't shared with the entire team as individual developers might be using different IDE's."
"As the error message indicates, there is already a remote configured with the same name. So you can either add the new remote with a different name or update the existing one if you don't need it:To add a new remote, called for example github instead of origin (which obviously already exists in your system), do the following:$ git remote add github git@github.com:ppreyer/first_app.gitRemember though, everywhere in the tutorial you see ""origin"" you should replace it with ""github"". For example $ git push origin master should now be $ git push github master.However, if you want to see what that origin which already exists is, you can do a $ git remote -v. If you think this is there by some error, you can update it like so:$ git remote set-url origin git@github.com:ppreyer/first_app.gitIn Short,git remote rm origingit remote add origin git@github.com:username/myapp.gitWorked !Cheers!For those of you running into the ever so common error ""fatal: remote origin already exists."", or when trying to remove origin and you get ""error: could not remove config section remote.origin"", what you need to do is to set the origin manually. Window's POSH~Git for Windows PowerShell (and GitHub for Windows' app) has a problem with this.I ran into this, like I do so often, again when setting up my octopress.  So, here's how I got it working. First, check your remotes:C:\gd\code\octopress [source +2 ~3 -0 !]> git remote -voctopress       https://github.com/imathis/octopress.git (fetch)octopress       https://github.com/imathis/octopress.git (push)originYou'll first note that my origin has no url.  Any attempt to remove it, rename it, etc all fails.So, change the url manually:git remote set-url --add origin https://github.com/eduncan911/eduncan911.github.io.gitThen you can confirm it worked by running git remote -v again:C:\gd\code\octopress [source +2 ~3 -0 !]> git remote -voctopress       https://github.com/imathis/octopress.git (fetch)octopress       https://github.com/imathis/octopress.git (push)origin  https://github.com/eduncan911/eduncan911.github.io.git (fetch)origin  https://github.com/eduncan911/eduncan911.github.io.git (push)This has fixed dozens of git repos I've had issues with, GitHub, BitBucket GitLab, etc.You can see what remote repositories you are configured to connect to viagit remote -vThat will return a list in this format:origin  git@github.com:github/git-reference.git (fetch)origin  git@github.com:github/git-reference.git (push)That might help you figure out what the original 'origin' pointed to.If you want to keep the remote connection that you see with the -v, but still want to follow the Rails tutorial without having to remember 'github' (or some other name) for your tutorial's repo, you can rename your other repository with the command:git remote rename [current name] [new name]as in:git remote rename origin oldrepoYou should then be able to resume your tutorial.If you need to check which remote repos you have connected with your local repos, theres a cmd:git remote -vNow if you want to remove the remote repo (say, origin) then what you can do is:git remote rm originFirst do a:git remote rm originthen git remote add origin https://github.com/your_user/your_app.gitand voila! Worked for me!That error message indicates that you already have a remote in your git directory.If you are satisfied with that remote, your can push your code. If not or if you can't push just:git remote remove origingit remote add origin git@github.com:ppreyer/first_app.gitVoilÌÊ !"
"Have you correctly set your PATH to point at your git installation?This is how you can do it (found here):right-click ""My Computer"",select ""Properties"",open ""Advanced"",click ""Environment Variables"",highlight the ""Path"" variable,click ""Edit"",add your specific path to front of ""Variable value"" field, separated by a semicolon from the existing entry. Do not add a space between ; and last entryDid you open the cmd prompt before installation of git? If so, close and reopen it.if you have installed git for window (http://windows.github.com/) , then find git.exe in ""C"" drive.it will be something like C:\Users\dell\AppData\Local\GitHub\PortableGit_8810fd5c2c79c73adcc73fd0825f3b32fdb816e7\libexec\git-coreadd this to window Environment Variables  as said aboveGo to My Computer => Local Disk(C:) => Program Files(x86) => Git => cmdRight Click the git => Select PropertiesUnder the location Copy the text eg - C:\Program Files (x86)\Git\cmdCome back to the Desktop Right-click My ComputerSelect property Open Advanced Click Environment VariablesIn the System variables Find the Variable call PathClick the variable Click the Edit Button Select the Variable value Text Box . Go to the edge of the text and put semicolon(;) Then Right-click and press Paste Press OkEasy route to avoid messing with PATH variables: re-install git and select ""Use Git from the Windows Command Prompt"". It'll take of the PATH variables for you as mentioned. see screenshotGit should be configured in your path variables.(on Windows 7)Open the start button and type in environment. Click on Edit the system environment variables. Click Environment Variables. Scroll down to the Path variable in the bottom box named system variables. Click edit. In the bottom box named variable value add the path to your git bin folder. (for me this is C:\Program Files (x86)\Git\bin but it can be different for you.) If there is no semicolon (;) between your path and the previous one, add one there. Make sure you don't delete the other path variables, only add the git bin folder to the end.This worked for me. Git is now available through the command line.Open the command line and type git to verify if it worked for you.Start->All Programs->Git->Git BashTakes you directly to the Git Shell.Windows 8Drag the Mouse pointer to the Right bottom corner of the screenClick on the Search icon and type: Control PanelClick on -> Control Panel -> System -> AdvancedClick on Environment Variables, under System Variables, find PATH, and click on it.Add C:\Program Files (x86)\Git\bin;C:\Program Files (x86)\Git\cmdIt worked for meYo! I had lots of problems with this. It seems that Github brings its own console which you need to look for in your drive. I managed to finally run it by doing the following:Press Start. Search for ""GitHub"" (without quotes)Right click on ""GitHub"" and select ""Open File Location""*This shall open *C:\Users\UserName\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\GitHub, IncWhere username is your PC's usernameLook for a program called ""Git Shell"". Double click on it. This will open a PowerShell command prompt. Then you can run your git commands normally on it.On Windows use msysgit to get a bash prompt with a git command.If you want to setup for temporary purpose, just execute below command.open command prompt < run --> cmd >Run below command.set PATH=C:\Program Files\Git\bin;\%PATH%Type git, it will work.This is valid for current window/cell only, if you will close command prompt, everything will get vanish.For permanently setting, set GIT in environment variable.a. press Window+Pause b. click on Advance system setting.c. Click on Environment variable under Advance Tab.d. Edit Path Variable.e. Add below line in end of statement.;c:\Program Files\Git\bin; f. Press OK!! g. Open new command prompt . h. Type git and press EnterThanksthat's because at the time of installation you have selected the default radio button to use ""git"" with the ""git bash"" only. If you would have chosen ""git and command line tool"" than this would not be an issue. Solution#1: as you have already installed git tool, now navigate to the desired folder and then right click and use ""git bash here"" to run your same command and it will run properly.Solution#2: try installing again the git-scm and select the proper choice.Cheers ;)"
"The errors are saying that your repo has changes that you don't have yet, because you added the README to the remote one when you set it up. If you've already got local changes or a local repo, you need to initialise an empty repository on Github, and then you can push. You'll have to add the remote though, something like git remote add https://github.com/username/repo.git.Downloading the README manually and adding and committing will probably produce a different commit ID, and put it at a different point in the commit history, which is why it's not detected as the same one.1) Why does it not work to initialize a remote repository on github with a README, and then try to connect the github repo with a previously existing existing local repo?When Github adds the README it commits it, and then this is the first commit. If you have a local repo, the first commit locally will be different, so they won't match up.2) Why could I not pull when I tried to fix this error? Probably because of the above, or the remote reference didn't add in properly, depending on how you added it.Generally, if you're creating locally first, you would go:# Set up the Git repo locally, with no commits in it.git init   # Add a new file.git add file1# Commit the change.git commit# Tell Git where your remote is.git remote add origin https://github.com/user/repo.git # Push the default 'master' branch to the above remote called 'origin'.git push origin master Or if it already exists on Github or a different remote server: # Download the existing repo, with all of the history.git clone https://bitbucket.org/user/repo.git# Add a new file or modified file.git add file1# Commit the change.git commit# Push to the remote that you downloaded from with clone on branch master.git push origin master3) Why could I still not push and initialize the connection to my github remote after I added the README from github to my local repository manually?That's not how the changes work with Git; they're a big list of sequential commits in a chain. Each commit has one or two parent commits, and the commit IDs aren't sequential either.See the Git website for some diagrams on the branching and commits here: http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is4) How do I create a github repo with an initialized README and connect it to a local repo WITHOUT causing the errors below?If you have an existing local repo you shouldn't create one with the initialised README. If it's blank on Github when you create it, you can push up your existing repository with no errors. If it has the README, you have to git clone the Github repo, and then add your changes to that folder, commit the changes, and then push. Adding the README is for when you have a new project and you're creating the Github repo first, and then you clone the project and start working in that location. If you have an existing repository locally don't use that option.Let's say you have a local repository:$ git log --oneline8e7e8d4 hello.txtThe local repository has a single file:$ lshello.txtNow you create a new repository via the GitHub web interface and initialize it with a README file.  At this point, your two repositories have divergent histories.  You can add the remote repository to your local repository:$ git remote add origin git@github.com:larsks/samplerepo.gitBut attempting to pull from this repository will yield an error:$ git pullwarning: no common commitsremote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From github.com:larsks/samplerepo * [new branch]      master     -> origin/masterThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for detailsThe important part of this error message is:There is no tracking information for the current branch.Please specify which branch you want to merge with.This is git telling you that while your current branch in your local repository is not associated with any branch in the remote repository, so it doesn't know what to do.  You can provide it with a remote branch name explicitly:$ git pull origin masterThis will create a merge commit (and will probably prompt you for a commit message).  Once the commit is complete, you can see that the local history now contains both our local commit as well as the commits from the GitHub repository:$ git log --oneline7f1231a Merge branch 'master' of github.com:larsks/samplerepo5f0d62e Initial commit8e7e8d4 hello.txtAnd our working directory now has a merged set of files:$ lshello.txt  README.mdAnd we can push this to our remote repository.  Just typing git push will result in an error similar to what we saw earlier:$ git pushfatal: The current branch master has no upstream branch.To push the current branch and set the remote as upstream, use    git push --set-upstream origin masterSo:$ git push --set-upstream origin masterCounting objects: 6, done.Delta compression using up to 8 threads.Compressing objects: 100% (3/3), done.Writing objects: 100% (5/5), 543 bytes | 0 bytes/s, done.Total 5 (delta 0), reused 0 (delta 0)To git@github.com:larsks/samplerepo.git   5f0d62e..7f1231a  master -> masterBranch master set up to track remote branch master from origin.And now we're all in sync.Update: Regarding your questions about --set-upstream:When you checkout a local branch that matches the name of a remote branch, git will set up the upstream association for you automatically.  For example, if the remote repository in this example also had a branch ""development"", and I did this after adding the remote:$ git checkout developmentI would see:Branch development set up to track remote branch development from origin.Switched to a new branch 'development'On the other hand, if you already have a branch checked out when you add the remote, as in the first part of this example, you need to use --set-upstream to tell git that you want your local branch to track the remote branch.As an aside, note that there's no requirement that your local branch match the name of a remote branch.  You are free to do something like:git checkout mastergit push --set-upstream origin patchesSo that from this point on, git push on your master branch will push to the remote patches branch."
"Cygwin uses persistent shared memory sections, which can on occasion become corrupted. The symptom of this is that some Cygwin programs begin to fail, but other applications are unaffected. Since these shared memory sections are persistent, often a system reboot is needed to clear them out before the problem can be resolved.I had the same problem. I found solution here http://jakob.engbloms.se/archives/1403 c:\msysgit\bin>rebase.exe -b 0x50000000 msys-1.0.dllFor me solution was slightly different. It wasC:\Program Files (x86)\Git\bin>rebase.exe -b 0x50000000 msys-1.0.dllBefore you rebase dlls, you should make sure it is not in use: tasklist /m msys-1.0.dllIf the rebase command fails with something like: ReBaseImage (msys-1.0.dll) failed with last error = 6You will need to perform the following steps in order:Copy the dll to another directoryRebase the copy using the commands aboveReplace the original dll with the copy.If any issue run the commands as Administratortl;dr: Restart the computer or install Git for Windows 2.Technical details      0 [main] us 0 init_cheap: VirtualAlloc pointer is null, Win32 error 487AllocationBase 0x0, BaseAddress 0x68570000, RegionSize 0x2A0000, State 0x10000PortableGit\bin\bash.exe: *** Couldn't reserve space for cygwin's heap, Win32 error 0This symptom by itself has nothing to do with image bases of executables, corrupted Cygwin's shared memory sections, conflicting versions of DLLs etc.It's Cygwin code failing to allocate a ~5 MB large chunk of memory for its heap at this fixed address 0x68570000, while only a hole ~2.5 MB large was apparently available there. The relevant code can be seen in msysgit source.Why is that part of address space not free?There can be many reasons. In my case it was some other modules loaded at a conflicting address:The last address would be around 0x68570000 + 5 MB = 0x68C50000, but there are these WOW64-related DLLs loaded from 0x68810000 upwards, which block the allocation.Whenever there is some shared DLL, Windows in general tries to load it at the same virtual address in all processes to save some relocation processing. It's just a matter of bad luck that these system components got somehow loaded at a conflicting address this time.Why is there Cygwin in your Git?Because Git is a rich suite consisting of some low level commands and a lot of helpful utilities, and mostly developed on Unix-like systems. In order to be able to build it and run it without massive rewriting, it need at least a partial Unix-like environment.To accomplish that, people have invented MinGW and MSYS - a minimal set of build tools to develop programs on Windows in an Unix-like fashion. MSYS also contains a shared library, this msys-1.0.dll, which helps with some of the compatibility issues between the two platforms during runtime. And many parts of that have been taken from Cygwin, because someone already had to solve the same problems there.So it's not Cygwin, it's MinGW's runtime DLL what's behaving weird here.In Cygwin, this code has actually changed a lot since what's in MSYS 1.0 - the last commit message for that file says ""Import Cygwin 1.3.4"", which is from 2001!Both current Cygwin and the new version of MSYS - MSYS2 - already have different logic in place, which is hopefully more robust. It's only old versions of Git for Windows which have been still built using the old broken MSYS system.Clean solutions:Simply restarting the computer to clean the address space (loading these modules at a different random address) is a safe and clean bet.Install Git for Windows 2 - it is built with the new, properly maintained MSYS2 and also has many new features, plenty of bug fixes and so on. There is also a 64-bit version available which would lower the chance of address space clashes considerably even if this problem was not fixed.Hacky solutions:Changing PATH can sometimes work because there might be different versions of msys-1.0.dll in different versions of Git or other MSYS-based applications, which perhaps use different address, different size of this heap etc.Rebasing msys-1.0.dll might be a waste of time, because 1) being a DLL, it already has relocation information and 2) ""in any version of Windows OS there is no guarantee that a (...) DLL will always load at same address space"" anyway (source). The only way this can help is if the msys-1.0.dll itself loads at the conflicting address it's then trying to use.Considering the findings above, I originally binary patched the msys-1.0.dll binary to use a different value for _cygheap_start and that resolved the problem immediately.I have seen the same error message after upgrading to git1.8.5.2:Simply make a search for all msys-1.0.dll on your C:\ drive, and make the one used by Git comes first.For instance, in my case I simply changed the order of:C:\prgs\Gow\Gow-0.7.0\bin\msys-1.0.dllC:\prgs\git\PortableGit-1.8.5.2-preview20131230\bin\msys-1.0.dllBy making the Git path C:\prgs\git\PortableGit-1.8.5.2-preview20131230\bin\ come first in my %PATH%, the error message disappeared.No need to reboot or to even change the DOS session.Once the %PATH% is updated in that DOS session, the git commands just work.Note that carmbrester and Sixto Saez both report below (in the comments) having to reboot in order to fix the issue.Note: First, also removing any msys-1.0.dll, like one in %LOCALAPPDATA%Very simple verison of the rebase solution: Go to the folder where git is installed, such as: C:\Program Files (x86)\Git\binBy holding shift and right clicking in the folder, you should be able to open a command prompt from there, Then run: rebase.exe -b 0x50000000 msys-1.0.dllThis fixed it for me when the restart approach didn't work.Hope it helps.If a reboot does not correct the problem (as suggested by Greg Hegwill's answer) then check your PATH for conflicting installation(s) of the msys-1.0.dll (and possibly other related DLLs).In my particular situation MinGW's installation of msys has a copy of that DLL in its bin directory (<MinGW_Install_Path>\msys\1.0\bin), and it was listed in the PATH. Git's cmd directory was listed in the PATH, but its bin was not. (Git's version of msys-1.0.dll is in the bin directory. Apparently the default installation of MSys-Git does not add its bin to the PATH.)A temporary fix was to add Git's bin directory to the PATH so that it appears before MinGW's paths. (A more permanent fix will likely involve sorting out the path conflicts between MinGW's msys and Git's and/or removing the duplicate msys installations.)I ran into this today. Led by Greg Hewgill's answer, I looked at running processes on my system to see if anything was ""stuck"" or if other users were logged into the machine doing anything with git. I then launched cygwin (installed separately) on this particular machine. It launched ok. I closed it and then tried the Git Extensions again (I was trying a pull operation) and it worked. Not sure if the launching of cygwin cleared something that was shared but this is the first time I ran into this error and this seemed to fix it for me.I had the same problem, after some Windows 8.0 crash and update, on msys git 1.9. I didn't find any msys/git in my path, so I just added it in windows local-user envinroment settings. It worked without restarting. Basically, similiar to RobertB, but I didn't have any git/msys in my path.Btw:I tried using rebase -b blablabla msys.dll, but had error ""ReBaseImage (msys-1.0.dll) failed with last error = 6""if you need this quickly and don't have time debugging, I noticed ""Git Bash.vbs"" in Git directory successfuly starts bash shell.This error happens very rarely on my Windows machine.  I ended up rebooting the machine, and the error went away."
"Creating a config file at ~/.ssh/ and addingIdentityFile ~/.ssh/keyFileSolved the issue. This doesn't answer the above question, but it does solve the problem as a whole. Found by attempting to ssh into the server with the -v flag helped me see that the key files were not being read (obviously)."
"Try run :git checkout spring/50c4ccb1d8f630979e84c03ba14676d1.pidAnd then try merge branches again.git merge filling-in-layoutYour local changes to file spring/50c4ccb1d8f630979e84c03ba14676d1.pid giving this error.There might be some issue with your .gitignore file. Because you already have /spring/*.pid in your gitignore file but it still checking this file. Might be your previous commit have this file.The spring process probably got too big. I had the same problem.you can use pkill -15 -f springand here is more info from https://www.railstutorial.org/book/static_pagesOn Unix-like systems such as Linux and OS X, user and system tasks  each take place within a well-defined container called a process. To  see all the processes on your system, you can use the ps command with  the aux options:$ ps aux To filter the processes by type, you can run the results of  ps through the grep pattern-matcher using a Unix pipe |:$ ps aux | grep spring   ubuntu 12241 0.3 0.5 589960 178416 ? Ssl  Sep20 1:46   spring app | sample_app | started 7 hours ago The result  shown gives some details about the process, but the most important  thing is the first number, which is the process id, or pid. To  eliminate an unwanted process, use the kill command to issue the Unix  kill code (which happens to be 9) to the pid:$ kill -15 12241 This is the technique I recommend for killing  individual processes, such as a rogue Rails server (with the pid found  via ps aux | grep server), but sometimes it‰Ûªs convenient to kill all  the processes matching a particular process name, such as when you  want to kill all the spring processes gunking up your system. In this  particular case, you should first try stopping the processes with the  spring command itself:$ spring stop Sometimes this doesn‰Ûªt work, though, and you can kill  all the processes with name spring using the pkill command as follows:$ pkill -15 -f spring Any time something isn‰Ûªt behaving as expected  or a process appears to be frozen, it‰Ûªs a good idea to run ps aux to  see what‰Ûªs going on, and then run kill -15  or pkill -15 -f   to clear things up."
"You're out of drive space. Delete some unused files from anywhere on your machine. After you've done some housecleaning, you may think about running git gc to have git garbage collect your repository; if you've made lots of changes to git's objects recently - like can happen with a rebase - you can reclaim significant data from git itself. After giving git some breathing room (as gc will need a little wiggle room to copy data to new files as it works), git gc will compact your git repository as much as is possible without losing your repository's history."
"What am I doing wrong?Well, you're hand-editing a patch file, which seems like an odd thing to be doing...From what I can tell, git requires the trailing context in the patch.  For example, if I start with a file that looks like this:thequickbrownfoxjumpedoverthelazydogAnd I have a patch like this:diff --git a/file1 b/file1index 4a3cebe..30f5937 100644--- a/file1+++ b/file1@@ -1,9 +1,9 @@ the quick brown-fox-jumped-over+ostrich+shouted+at the lazy dogThat applies without a problem:$ git apply mypatchIf I remove the trailing context in that patch (and update the linenumbers), giving me this:diff --git a/file1 b/file1index 4a3cebe..30f5937 100644--- a/file1+++ b/file1@@ -1,6 +1,6 @@ the quick brown-fox-jumped-over+ostrich+shouted+atThen git will refuse to apply the patch:$ git apply differror: patch failed: file1:1error: file1: patch does not applyIt I add even a single line of trailing context it will work:diff --git a/file1 b/file1index 4a3cebe..30f5937 100644--- a/file1+++ b/file1@@ -1,7 +1,7 @@ the quick brown-fox-jumped-over+ostrich+shouted+at the"
"cd repositorychown -R user:group *cd .gitchown -R user:group *cd ..the second chown is there because the first one didn't get into .gitWho are the owner/group of the repository, and of the scpecific file/folder you're trying to upload: local and on the server?"
"As the message says:no changes added to commit (use ""git add"" and/or ""git commit -a"")Git has a ""staging area"" where files need to be added before being committed, you can read an explanation of it here.For your specific example, you can use:git commit -am ""save arezzo files""(note the extra a in the flags, can also be written as git commit -a -m ""message"" - both do the same thing)Alternatively, if you want to be more selective about what you add to the commit, you use the git add command to add the appropriate files to the staging area, and git status to preview what is about to be added (remembering to pay attention to the wording used).You can also find general documentation and tutorials for how to use git on the git documentation page which will give more detail about the concept of staging/adding files.One other thing worth knowing about is interactive adding - this allows you to add parts of a file to the staging area, so if you've made three distinct code changes (for related but different functionality), you can use interactive mode to split the changes and add/commit each part in turn. Having smaller specific commits like this can be helpful.You didn't add the changes. Either specifically add them viagit add filename1 filename2or add all changes (from root path of the project)git add .or use the shorthand -a while commiting:git commit -a -m ""message"".you should dogit commit . -m ""save arezzo files""You could have done a:git add -u -nTo check which files you modified and are going to be added (dry run: -n option), and thengit add -uTo add just modified filesI copied a small sub project I had that was under git source into another project and forgot to delete the .git folder. When I went to commit got the same message as above and couldn't clear it until I deleted the .git folder. Bit silly, but worth checking you don't have a .git folder under the folder that doesn't commit.Maybe an obvious thing but... If you have problem with the index, use thegit guiYou get a very good view how the index (staging area) actually works.Another source of info that helped me understand the index was Scott Chacons ""Getting Git"" page 259 and forward.I started off using the command line because most documentation only shown that...I think the git gui and gitk actually make me work faster and I got rid of bad habits like ""git pull"" for example... Now I always fetch first... see what the new changes really are before I merge.I find this problem appearing when I've done a git add . in a subdirectory below where my .gitignore file lives (the home directory of my repository, so to speak).  Try changing directories to your uppermost directory and running git add . followed by git commit -m ""my commit message""."
"If you have fixed the conflicts you need to add the files to the stage with git add [filename], then commit as normal.You can use git stash to save the current repository before doing the commit you want to make (after merging the changes from the upstream repo with git stash pop). I had to do this yesterday when I had the same problem.You need to do two things.First add the changes withgit add .git stash  git checkout <some branch>It should solve your issue as it solved to me."
"The message means that the host key of origin is not present in your trusted hosts file.To get around this, open a plain SSH connection to origin and SSH will ask you if you want to trust the remote host (from the Git console):$ ssh 127.0.0.1The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.RSA key fingerprint is <FINGERPRINT>.Are you sure you want to continue connecting (yes/no)?If you trust the remote host (i.e. type yes), SSH will enter it's key to the list of known hosts.After that, you should be able to do your git push origin.As an alternative, you could also manually add the key of origin to .ssh/known_hosts but this requires that you adhere to the format of the known_hosts file as described in the man page of sshd (Section AUTHORIZED_KEYS FILE FORMAT).For those of you who are setting up MSYS Git on Windows using PuTTY via the standard command prompt, the way to add a host to PuTTY's cache is to run> plink.exe <host>For example:> plink.exe codebasehq.comThe server's host key is not cached in the registry. Youhave no guarantee that the server is the computer youthink it is.The server's rsa2 key fingerprint is:ssh-rsa 2048 2e:db:b6:22:f7:bd:48:f6:da:72:bf:59:d7:75:d7:4eIf you trust this host, enter ""y"" to add the key toPuTTY's cache and carry on connecting.If you want to carry on connecting just once, withoutadding the key to the cache, enter ""n"".If you do not trust this host, press Return to abandon theconnection.Store key in cache? (y/n)Just answer y, and then Ctrl+C the rest.Do check the fingerprint though. This warning is there for a good reason. Fingerprints for some git services (please edit to add more):Github: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48Bitbucket: 97:8c:1b:f2:6f:14:6b:5c:3b:ec:aa:46:46:74:7c:40Gitorious: 7e:af:8d:ec:f0:39:5e:ba:52:16:ce:19:fa:d4:b8:7dTry doing a ""set | grep -i ssh"" from the Git Bash promptIf your setup is like mine you probably have these set:GIT_SSH='C:\Program Files (x86)\PuTTY\plink.exe'PLINK_PROTOCOL=sshSVN_SSH='""C:\\Program Files (x86)\\PuTTY\\plink.exe""'I did a unset GIT_SSHunset PLINK_PROTOCOLunset GIT_SVNand it worked after that,.. I guess putty saves its keys somewhere else as $HOME/.ssh or something... (I've also had a problem on a box where $HOME was set to ""C:\Users\usrnam"" instead of ""/C/Users/usrnam/"" anyway, your mileage may vary, but that fixed it for me. :-)(probably just doing the unset GIT_SSH is enough, but I was on a roll)Note: if unset doesn't work for you, try this:set GIT_SSH=I suspect that your GIT_SSH environment variable is set to %ProgramFiles(x86)%\putty\plink.exe.For some reason, PLink does not use the .ssh/known_hosts file in your user directory to store the remote hosts keys.If this is actually your case, and it might be so on purpose if you want to use pageant, you need to use PLink to connect to the host first.""$GIT_SSH"" user@hostnameYou should get a similar messageThe server's host key is not cached in the registry. Youhave no guarantee that the server is the computer youthink it is.The server's rsa2 key fingerprint is:ssh-rsa 2048 86:7b:1b:12:85:35:8a:b7:98:b6:d2:97:5e:96:58:1dIf you trust this host, enter ""y"" to add the key toPuTTY's cache and carry on connecting.If you want to carry on connecting just once, withoutadding the key to the cache, enter ""n"".If you do not trust this host, press Return to abandon theconnection.Store key in cache? (y/n)Once you have answered y to the question and successfully connected to the remote host, you should be all set. Go ahead and try your push again.Just ssh'ing to the host is not enough, on Windows at least. That adds the host key to ssh/known_hosts but the error still persists.You need to close the git bash window and open a new one. Then the registry cache is cleared and the push/pull then works.Had the same issue, and forget to connect to SSH on port where is actuall repository, not just general SSH port, then the host key is different!Rene, your HOME variable isn't set correctly. Either change it to c:\Users\(your-username) or just to %USERNAME%.Solution with PlinkSave this python script to known_hosts.py:#! /usr/bin/env python# $Id$# Convert OpenSSH known_hosts and known_hosts2 files to ""new format"" PuTTY# host keys.#   usage:#     kh2reg.py [ --win ] known_hosts1 2 3 4 ... > hosts.reg#       Creates a Windows .REG file (double-click to install).#     kh2reg.py --unix    known_hosts1 2 3 4 ... > sshhostkeys#       Creates data suitable for storing in ~/.putty/sshhostkeys (Unix).# Line endings are someone else's problem as is traditional.# Developed for Python 1.5.2.import fileinputimport base64import structimport stringimport reimport sysimport getoptdef winmungestr(s):    ""Duplicate of PuTTY's mungestr() in winstore.c:1.10 for Registry keys""    candot = 0    r = """"    for c in s:        if c in ' \*?%~' or ord(c)<ord(' ') or (c == '.' and not candot):            r = r + (""%%%02X"" % ord(c))        else:            r = r + c        candot = 1    return rdef strtolong(s):    ""Convert arbitrary-length big-endian binary data to a Python long""    bytes = struct.unpack("">%luB"" % len(s), s)    return reduce ((lambda a, b: (long(a) << 8) + long(b)), bytes)def longtohex(n):    """"""Convert long int to lower-case hex.    Ick, Python (at least in 1.5.2) doesn't appear to have a way to    turn a long int into an unadorned hex string -- % gets upset if the    number is too big, and raw hex() uses uppercase (sometimes), and    adds unwanted ""0x...L"" around it.""""""    plain=string.lower(re.match(r""0x([0-9A-Fa-f]*)l?$"", hex(n), re.I).group(1))    return ""0x"" + plainoutput_type = 'windows'try:    optlist, args = getopt.getopt(sys.argv[1:], '', [ 'win', 'unix' ])    if filter(lambda x: x[0] == '--unix', optlist):        output_type = 'unix'except getopt.error, e:    sys.stderr.write(str(e) + ""\n"")    sys.exit(1)if output_type == 'windows':    # Output REG file header.    sys.stdout.write(""""""REGEDIT4[HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\SshHostKeys]"""""")# Now process all known_hosts input.for line in fileinput.input(args):    try:        # Remove leading/trailing whitespace (should zap CR and LF)        line = string.strip (line)        # Skip blanks and comments        if line == '' or line[0] == '#':            raise ""Skipping input line""        # Split line on spaces.        fields = string.split (line, ' ')        # Common fields        hostpat = fields[0]        magicnumbers = []   # placeholder        keytype = """"        # placeholder        # Grotty heuristic to distinguish known_hosts from known_hosts2:        # is second field entirely decimal digits?        if re.match (r""\d*$"", fields[1]):            # Treat as SSH-1-type host key.            # Format: hostpat bits10 exp10 mod10 comment...            # (PuTTY doesn't store the number of bits.)            magicnumbers = map (long, fields[2:4])            keytype = ""rsa""        else:            # Treat as SSH-2-type host key.            # Format: hostpat keytype keyblob64 comment...            sshkeytype, blob = fields[1], base64.decodestring (fields[2])            # 'blob' consists of a number of            #   uint32    N (big-endian)            #   uint8[N]  field_data            subfields = []            while blob:                sizefmt = "">L""                (size,) = struct.unpack (sizefmt, blob[0:4])                size = int(size)   # req'd for slicage                (data,) = struct.unpack ("">%lus"" % size, blob[4:size+4])                subfields.append(data)                blob = blob [struct.calcsize(sizefmt) + size : ]            # The first field is keytype again, and the rest we can treat as            # an opaque list of bignums (same numbers and order as stored            # by PuTTY). (currently embedded keytype is ignored entirely)            magicnumbers = map (strtolong, subfields[1:])            # Translate key type into something PuTTY can use.            if   sshkeytype == ""ssh-rsa"":   keytype = ""rsa2""            elif sshkeytype == ""ssh-dss"":   keytype = ""dss""            else:                raise ""Unknown SSH key type"", sshkeytype        # Now print out one line per host pattern, discarding wildcards.        for host in string.split (hostpat, ','):            if re.search (r""[*?!]"", host):                sys.stderr.write(""Skipping wildcard host pattern '%s'\n""                                 % host)                continue            elif re.match (r""\|"", host):                sys.stderr.write(""Skipping hashed hostname '%s'\n"" % host)                continue            else:                m = re.match (r""\[([^]]*)\]:(\d*)$"", host)                if m:                    (host, port) = m.group(1,2)                    port = int(port)                else:                    port = 22                # Slightly bizarre output key format: 'type@port:hostname'                # XXX: does PuTTY do anything useful with literal IP[v4]s?                key = keytype + (""@%d:%s"" % (port, host))                value = string.join (map (longtohex, magicnumbers), ',')                if output_type == 'unix':                    # Unix format.                    sys.stdout.write('%s %s\n' % (key, value))                else:                    # Windows format.                    # XXX: worry about double quotes?                    sys.stdout.write(""\""%s\""=\""%s\""\n""                                     % (winmungestr(key), value))    except ""Unknown SSH key type"", k:        sys.stderr.write(""Unknown SSH key type '%s', skipping\n"" % k)    except ""Skipping input line"":        passTested on Win7x64 and Python 2.7.Then run:ssh-keyscan -t rsa bitbucket.org >>~/.ssh/known_hostspython --win known_hosts.py >known_hosts.regstart known_hosts.regAnd choose to import into the registry. The keyscan will retrieve the public key for the domain (I had my problems with bitbucket), and then the python script will convert it to Plink format.I solved similar problem using this workaround.You just have to switch to Embedded Git, push, press Yes button and then switch back to System Git.You can find this option inTools -> Options -> Git"
"I found the problem and the solution this is what happened:First src/error was called src/Error when i changed the case locally the foldername was changed but in git it was still commited as src/Error. Windows is case-insensitive so what i did was remove the folder commit and add it again with the right casing.Is that the folder empty if so it is normal, see hereI've tried the following in a Windows 7 console and it worked, i.e. it did not show \src\error\ as untracked.C:\t>dir Volume in drive C is BLAH Volume Serial Number is 2ECA-CB88 Directory of C:\t10.08.2010  17:56    <DIR>          .10.08.2010  17:56    <DIR>          ..               0 File(s)              0 bytes               2 Dir(s)  59'844'902'912 bytes freeC:\t>mkdir .\src\errorC:\t>copy con: .\src\error\text.txtblah^Z        1 file(s) copied.C:\t>git initInitialized empty Git repository in C:/t/.git/C:\t>git add .\src\error\*C:\t>git status# On branch master## Initial commit## Changes to be committed:#   (use ""git rm --cached <file>..."" to unstage)##       new file:   src/error/text.txt#This doesn't answer your question, but I thought it might help to see a full step-by-step example."
"I've been having this same problem for the last few days. Basically, without my knowledge the entire repo had been moved to a new filesystem, when I tried to run git status, it was suddenly reporting that every file in the repo had been udpated.Possible solutionsSo, after much google scouring, I tried the following:changing .git permssions (same issue)changing .git/index permissions (same issue)git add-ing all the changes to commit (same issue)git rm-ing deleted files, since they were reporting file name too long errors (same issue)git reset (soft|Head|Hard) (same issue)git clean (same issue)turning off windows defender (same issue)updating git (same issue)different git clients (i use gitbash) (same issue)drinking 2 coffees instead of 1 (same issue)tl:dr - dirty solutionThe only thing that managed to solve the issue was to copy the index file, delete the original and rename the copy.I know its not really a 'solution' but now its magically working ><, with all files / branches intact. If anyone knows why this might have work, do tell.In my case, the disk ran out of space, so I had to delete files from the hard drive to make space.I had the same issue on a Mac. It seems to be caused by filesystem ACLs. Try chmod -RN /path/to/repo to clear the ACLs. After doing this I was able to commit changes. Using the trick to copy the index file, delete the original and move the copy back achieved the same result.In my case it was a concurrent running EGit. After restarting eclipse it works as usual.It happened to me that the file .git/index was in use by another process (my local development web server). I shut down the process and then it worked."
"You should not attempt to add the whole magento folder to git, there are many folders that do not have anything to do with code. There are many solutions and ways of using git, but the most popular two are:Only check in code that you have written / overridden. You have to create a big .gitignore file which states these ignores, there are many examples on the net.Check in all the code but add the folders with images, caches etc into a .gitignore.Git should not really be used for deployment.Google is your friend:https://www.sonassi.com/knowledge-base/our-magento-git-guide-and-work-flow/Usually, in magento, all the files in var/ folder are owned by www-data webserver group only. You can check for the owner using ls -la var/cacheThese include var/log, var/cache and var/session.Ideally, you should not be adding any of these to your git repo, and your var/ directory should be part of .gitignore.My guess is, you are running the command git add . from your user, and your user is not part of the www-data group.Thus, git can not traverse down the directory structure of var/ because they are owned by a different group, and hence it is throwing up the error Permission Denied."
"git checkout --ours . # checkout our local version of all filesgit add -u            # mark all conflicted files as merged/resolvedgit commit            # commit the mergeThere is a messy alternative that can break the repo for everyone else using the same remote origin. Only consider it if you're the only one using it:git reset --hard HEAD # undo that failed mergegit push --force      # replace everything remote with localExplanation (now that I understand git better)The reason this happened is because amending commits changes 'history'. Doing this locally is safe because it doesn't affect anyone else. However, amending commits that have already been pushed does affect other repos, and is not safe.Your GUI is probably just setting --strategy=ours (git merge -s ours <branch>). This will perform the merge, citing both commits as parents, but keep your entire directory state.Your other option is to use git merge -s recursive -X ours <branch>, which will try to bring in files from both branches but will prefer your version whenever there is a conflict.DocsYou can see the two different styles at work using the following demonstration shell script:#!/bin/shmkdir gittestcd gittestgit initgit checkout masterecho ""Line one"" > bargit add bargit commit -m ""Original commit""git checkout -b fork1echo ""Line one and something"" > barecho ""Line two"" > bamgit add bar bamgit commit -m ""Fork1 commit.""git checkout mastergit checkout -b fork2echo ""Line one and other stuff"" > barecho ""Line three"" > bazgit add bar bazgit commit -m ""Fork2 commit.""git checkout fork1if [ ""$1"" = ""ours"" ]; then  # `ls gittest` => bam bar  # `cat gittest/bar` => Line one and something  git merge -s ours fork2else  # `ls gittest` => bam bar baz  # `cat gittest/bar` => Line one and something  git merge -X ours fork2fi"
"You have added vendor/plugins/open_flash_chart_2 as ‰ÛÏgitlink‰Ûù entry, but never defined it as a submodule. Effectively you are using the internal feature that git submodule uses  (gitlink entries) but you are not using the submodule feature itself.You probably did something like this:git clone git://github.com/korin/open_flash_chart_2_plugin.git vendor/plugins/open_flash_chart_2git add vendor/plugins/open_flash_chart_2This last command is the problem. The directory vendor/plugins/open_flash_chart_2 starts out as an independent Git repository. Usually such sub-repositories are ignored, but if you tell git add to explicitly add it, then it will create an gitlink entry that points to the sub-repository‰Ûªs HEAD commit instead of adding the contents of the directory. It might be nice if git add would refuse to create such ‰ÛÏsemi-submodules‰Ûù.Normal directories are represented as tree objects in Git; tree objects give names, and permissions to the objects they contain (usually other tree and blob objects‰ÛÓdirectories and files, respectively). Submodules are represented as ‰ÛÏgitlink‰Ûù entries; gitlink entries only contain the object name (hash) of the HEAD commit of the submodule. The ‰ÛÏsource repository‰Ûù for a gitlink‰Ûªs commit is specified in the .gitmodules file (and the .git/config file once the submodule has been initialized).What you have is an entry that points to a particular commit, without recording the source repository for that commit. You can fix this by either making your gitlink into a proper submodule, or by removing the gitlink and replacing it with ‰ÛÏnormal‰Ûù content (plain files and directories).Turn It into a Proper SubmoduleThe only bit you are missing to properly define vendor/plugins/open_flash_chart_2 as a submodule is a .gitmodules file. Normally (if you had not already added it as bare gitlink entry), you would just use git submodule add:git submodule add git://github.com/korin/open_flash_chart_2_plugin.git vendor/plugins/open_flash_chart_2As you found, this will not work if the path already exists in the index. The solution is to temporarily remove the gitlink entry from the index and then add the submodule:git rm --cached vendor/plugins/open_flash_chart_2git submodule add git://github.com/korin/open_flash_chart_2_plugin.git vendor/plugins/open_flash_chart_2This will use your existing sub-repository (i.e. it will not re-clone the source repository) and stage a .gitmodules file that looks like this:[submodule ""vendor/plugins/open_flash_chart_2""]    path = vendor/plugins/open_flash_chart_2    url = git://github.com/korin/open_flash_chart_2_plugin.git vendor/plugins/open_flash_chart_2It will also make a similar entry in your main repository‰Ûªs .git/config (without the path setting).Commit that and you will have a proper submodule. When you clone the repository (or push to GitHub and clone from there), you should be able to re-initialize the submodule via git submodule update --init.Replace It with Plain ContentThe next step assumes that your sub-repository in vendor/plugins/open_flash_chart_2 does not have any local history that you want to preserve (i.e. all you care about is the current working tree of the sub-repository, not the history).If you have local history in the sub-repository that you care about, then you should backup the sub-repository‰Ûªs .git directory before deleting it in the second command below. (Also consider the git subtree example below that preserves the history of the sub-repository‰Ûªs HEAD).git rm --cached vendor/plugins/open_flash_chart_2rm -rf vendor/plugins/open_flash_chart_2/.git # BACK THIS UP FIRST unless you are sure you have no local changes in itgit add vendor/plugins/open_flash_chart_2This time when adding the directory, it is not a sub-repository, so the files will be added normally. Unfortunately, since we deleted the .git directory there is no super-easy way to keep things up-to-date with the source repository.You might consider using a subtree merge instead. Doing so will let you easily pull in changes from the source repository while keeping the files ‰ÛÏflat‰Ûù in your repository (no submodules). The third-party git subtree command is a nice wrapper around the subtree merge functionality.git rm --cached vendor/plugins/open_flash_chart_2git commit -m'converting to subtree; please stand by'mv vendor/plugins/open_flash_chart_2 ../ofc2.localgit subtree add --prefix=vendor/plugins/open_flash_chart_2 ../ofc2.local HEAD#rm -rf ../ofc2.local # if HEAD was the only tip with local historyLater:git remote add ofc2 git://github.com/korin/open_flash_chart_2_plugin.gitgit subtree pull --prefix=vendor/plugins/open_flash_chart_2 ofc2 mastergit subtree push --prefix=vendor/plugins/open_flash_chart_2 git@github.com:me/my_ofc2_fork.git changes_for_pull_requestgit subtree also has a --squash option that lets you avoid incorporating the source repository‰Ûªs history into your history but still lets you pull in upstream changes.I just had the same problem. The reason was because there was a subfolder that contained a "".git"" folder. Removing it made git happy.To point out what I had to dig out of Chris Johansen's chat with OP (linked from a reply to an answer):git add vendor/plugins/open_flash_chart_2 # will add gitlink, content will stay untrackedgit add vendor/plugins/open_flash_chart_2/ # NOTICE THE SLASH!!!!The second form will add it without gitlink, and the contents are trackable. The .git dir is conveniently & automatically ignored. Thank you Chris!http://progit.org/book/ch6-6.htmlI think you should read this to learn a little about submodule. It's well-written, and it doesn't take much time to read it.I use the trick suggested by Peter Lada all the time, dubbed as ""fake submodules"":http://debuggable.com/posts/git-fake-submodules:4b563ee4-f3cc-4061-967e-0e48cbdd56cbIt's very useful in several scenarios (p.e. I use it to keep all my Emacs config in a repository, including the current HEAD of all git repositories inside the elpa/el-get package directories, so I could easily roll back/forward to a known working version when some update breaks something).I had the same problem with a big project with many submodules.Based on the answers of Chris Johnsen here and VonC here I build a short bash script which iterates through all existing gitlink entries and adds them as proper submodules.#!/bin/bash# Read all submodules in current gitMODULES=`git ls-files --stage | grep 160000`# Iterate through every submodule pathwhile read -r MOD; do  # extract submodule path (split line at whitespace and take string with index 3)  ARRIN=(${MOD})  MODPATH=${ARRIN[3]}  # grep module url from .git file in submodule path  MODURL=`grep ""url = "" $MODPATH/.git/config`  MODURL=${MODURL##*=}  # echo path and url for information  echo $MODPATH  echo $MODURL  # remove existing entry in submodule index  git rm --cached $MODPATH  # add new entry in submodule index  git submodule add $MODURL $MODPATHdone <<< ""$MODULES""This fixed it for me, I hope it is of any help.Had the same problem, but it was not solved in this discussion.I hit also the submodule problem as described in the thread opening.% git status          # On branch master# Changes not staged for commit:#   modified:   bundle/taglist (untracked content)Looking at the diff I recognized a -dirty appended to a hash:Reading the docs again, solved the problem for me. http://web.mit.edu/jhawk/mnt/spo/git/git-doc/user-manual.html Look at section ""Pitfalls with submodules""Reason was, there were changes or untracked content within the submodule.I first had to got to the submodule directory, do a ""git add"" + ""git commit"" to get all content tracked within the submodule. Then ""git status"" on the master stated% git commit# On branch master# Changes not staged for commit:#   modified:   bundle/taglist (new commits)Now this new HEAD from the submodule could be commited to the master module.I recently encountered this problem while working on a contract project(deemed classified). The system in which I had to run the code did not have internet access, for security purposes of course, and so installing dependencies, using composer and npm, was becoming huge pain.After much deliberation with my colleague, we decided to just wing it and copy paste our dependencies rather than doing composer install or npm  install.This led us to NOT add vendors and npm_modules in gitignore. This is when I encountered this problem.Changed but not updated:modified:   vendor/plugins/open_flash_chart_2 (modified content, untracked content)I googled this a bit and found this helpful thread on SO. Not being too much of a pro in Git, and being a little intoxicated while working on it, I just searched for all the submodules in the vendors folderfind . -name "".git""This gave me some 4-5 dependencies that had git on them. I removed all these .git folders and voila, it worked.I knows it's hack, and not a very geeky one anyways. O Gods of SO, please forgive me! Next time I promise to read up on gitlinks and obey O mighty Linus Tovalds."
"As mentioned in ""Error pushing to GitHub - insufficient permission for adding an object to repository database"", you need, in addition of the git config setting, to:first set the umask for all your repos: umask 002 (so on your server side)then set the git group to rw as mentioned in your solution, still on the server side."
"The issue is that git can't find the public key needed to download the repo from your server, the solution is to use the public url.In the file .gitmodule you will find the following entry:[submodule ""example""]    path = example    url = git@github.com:webhat/example.gitThe URL need to be changed to the public URL for the module:[submodule ""example""]    path = example    url = https://github.com/webhat/example.gitAs you can see the prefix git@ has been changed to https:// and the infix : becomes /EDIT:In your own repository you might need to use git:// rather than https://The previous answer was unclear to me, so I added this.EDIT 2:If you find you need to run git submodule sync or need to edit .git/config to get this to work, you have likely set up remotes for the submodules.If it can help some people:I update my .gitmodules[submodule ""example""]  path = example  url = https://github.com/webhat/example.gitThen I update my .git/config too[submodule ""example""]  url = https://github.com/webhat/example.gitLike some of you said it before (and I thank you).Then I update my .git/modules/example/config[remote ""origin""]  fetch = [...]  url = https://github.com/webhat/example.gitAnd to finish I dogit submodule syncgit submodule initgit submodule update"
"You have to do:git commit -m ""$desc""In the current script, test is going as commit message and commit and script are being treated as next arguments.Here's a merge of the last two answers - chaining together the add -u is awesome, but the embedded read command was causing me troubles. I went with (last line used for my heroku push, change to 'git push origin head' if that's your method):#!/bin/bashread -p ""Commit description: "" descgit add . && \git add -u && \git commit -m ""$desc"" && \git push heroku masterit is helpful to remove from the index the files that have actually been deleted.  git add -u takes care of this.  Also, you may want to consider chaining these commands together like this:git add . && \git add -u && \git commit -m ""$(read -p 'Commit description: ')"" && \git push origin HEADIf any command fails, it will stop evaluating the remaining commands.Just food for thought (untested food).Thanks!"
"You need to install the git executable. Check how to install it from the Windows section here: git installation or msysgitnpm install -g gitThis will install the NPM package git (also known as node-git). This is not the same as the real Git that is available as a command line utility. The former NPM package is essentially a Node JS module to utilize Git functionality. And as the project explains, it also contains some actions natively, but for many others it will need to fall back to the command line utility.So, you should just install the real Git.start menu > system properties > system advanced config > environment variables.go to system variables and find ""Path"" variable, click on ""edit"" then go to the end of the value, and a semicolon (;) and paste your git route (mine is: C:\Program Files\Git\bin). save it and you're done.if you already install git, still you getting problem means me have two solution1. add path in EV ""C:\Program Files\Git\bin"" and ""C:\Program Files\Git\cmd"". Restart machine.2nd solution is uninstall  and install(https://git-scm.com/downloads) aagin and do step1."
"I found a solution: apply the troubled commit's patch manually and add it to the index.$ patch -p1 < .git/rebase-apply/patch patching file bar.txtpatching file baz.txt$ git add bar.txt baz.txt$ git rebase --continueApplying: bar bazApplying: -barYou need to commit before attempting to rebase.  It will work sometimes if you don't, but you shouldn't do that.If you're uncomfortable committing for some reason, you could at least use stash (which does roughly the same thing).git rebase is working correctly. It is protecting your untracked file from being destroyed while visiting a commit that wants to write out a file with that same pathname.There does not seem to be a way to retry just the most recent step of the rebase. Usually when a rebase pauses, it will leave conflicts in the index. But in this case, it can not flag this problem in the index because doing so would convert your untracked file into a tracked file. This is probably a bit of a rough spot in the UI of git rebase. You could dig into the directory it uses to store its internal state (.git/rebase-apply) and manually apply the ‰ÛÏcurrent‰Ûù patch, but aborting and restart is probably easier (but maybe not faster if you are in the middle of rebasing a very long series).If the addition of bar.txt is considered a mistake, then you might consider using git rebase -i to tease apart and drop the addition and removal of bar.txt since you are rewriting history anyway.You will still run into the conflict, but the methods below can also be applied with git rebase -i. The script at the end would have to be split into two parts (‰ÛÏsetup temp/‰Ûù and ‰ÛÏincorporate rebase result‰Ûù since an interactive rebase will usually require multiple commands between those two sections.Move the conflicting file aside temporarily and redo the rebase.mv bar.txt +bar.txtgit rebase --abortgit rebase masterIf you expect many such conflicting files then you might consider doing your rebase in a separate clone where you can be certain that you will not have any untracked files. Perhaps the trickiest part is checking that your untracked files do not conflict with the result of the rebase (the git checkout rebased-topic accomplishes this; it aborts if the untracked files conflict with the rebase result).: ""Note: will destroy:     * 'rebased-topic' branch:     * 'temp' directory""( set -x &&  : '*** Clearing temp/' &&  rm -rf temp/ &&  : '*** Making sure we have topic checked out' &&  git checkout topic  : '*** Cloning into temp/' &&  git clone . temp &&   : '*** Rebasing topic onto master in temp/ clone' &&  ( cd temp &&  git rebase origin/master  ) &&  : '*** Fetching rebase result from topic/ into local rebased-topic branch' &&  git fetch -f temp topic:rebased-topic &&  : '*** Checking rebased-topic for conflicts with untracked files' &&  git checkout rebased-topic &&  : '*** Resetting topic to tip of rebased-topic' &&  git branch -f topic rebased-topic &&  : '*** Returning to topic branch' &&  git checkout topic &&  : '*** Deleting rebased-topic branch' &&  git branch -d rebased-topic &&  : '*** Deleting temp/' &&  rm -rf temp/)"
"Make sure you don't have a GIT_DIR or GIT_WORK_TREE environment variable set in your current session, which would point to an incorrect folder.In doubt, try a:cd /path/to /your/repogit --git-dir .git --work-tree . statusIf that still fails, try at least to clone that repo again from GitHub, and add your recent changes in that new repo:cd /path/to/new/clonegit --git-dir .git --work-tree /path/to /your/repo add .(and go on working in that new clone)I too had the same issue. The problem was my git folder was being synced by UbuntuOne cloud service. It had messed up the files by adding files appended with u1conflict. And my .git/HEAD was also messed up as .git/HEAD.u1conflict.Are you using any cloud collaborating services on the git? Dropbox, UbuntuOne etc. Chances are that your .git folder might have got messed up in the process of syncing.In my case, accidentally .git/HEAD file was messed up with non unknown characters, but .git/ORIG_HEAD file was ok (it has commit id). So, I copied .git/ORIG_HEAD content to .git/HEAD file. Then restarted IDE (Aptana) and everything worked fine."
"I figured it out the issue. I already had a a personal github account linked to sourcetree. When i deleted the personal github account and added the work account it worked fine.Go to Tools -> Options Click on Authentication Tab Delete the other github account and add the new oneI have experienced the problem on Windows (8.1 x64) with a more subtle reason. The problem stemmed from the use of git authentication hooks, like the git-credential-winstore (https://gitcredentialstore.codeplex.com/).In order for it to work i simply removed my network password to github like this:Start menuManage Network PasswordsRemoved my password for http://github.comIf you want to entirely remove the git credential store this SO post which may be of help: http://stackoverflow.com/a/18376438"
"You are apparently dealing with a submodule, so you should use the submodule workflow :# Modification on RestKit, for instance :cd RestKitgit add .git commit -m ""Support for armv6 & armv7""cd ..# RestKit submodule up-to-date, now update your projectgit add RestKitgit commit -m ""RestKit submodule updated""You can find more information here.Also : Git Book on Submodules"
"I met this problem just now. After I changed from git:// to https:// , it works. If you are using bower, this may help: Bower install using only https? .Another two possible problem areyou may have some firewall software in your computer (especially for office computer) like Norton (Symantec Management Client service).you may have some firewall in your router.I meet the first one, since normally home router has empty filters"
"I guess you solved this problem already but i had this to and could fix it simply by run git pullThis has resulted into a working condition. eventough your files are intact you should backup your local git directory and then run the git pull. after that you should be back in business.If there are files deleted (it should not happen) you can copy them back over a working checkout and commit them from there.This happened to me when I accidentally added my bin/ folder in an Eclipse Java project.Using 'git pull' did not work for me.I fixed it by:closing Eclipserm -rf bingit rm binThen I was able to 'git commit' and continue normally.If your .git/HEAD is corrupted or points to a corrupted object, you can change it manually or by git checkout."
"Sudo the command:sudo rm -f ./.git/index.lockBoth errors suggest index.lock is owned by another user. Run the rm as a superuser, then try your commands again. You might also consider setting core.sharedRepository to true if that is, in fact, the case with your repo:core.sharedRepositoryWhen group (or true), the repository is made shareable between several users in a group (making sure all the files and objects are group-writable).When all (or world or everybody), the repository will be readable by all users, additionally to being group-shareable. When umask (or false), git will use permissions reported by umask(2). When 0xxx, where 0xxx is an octal number, files in the repository will have this mode value.  0xxx will override user's umask value (whereas the other options will only override requested parts of the user's umask value). Examples: 0660 will make the repo read/write-able for the owner and group, but inaccessible to others (equivalent to group unless umask is e.g.  0022).  0640 is a repository that is group-readable but not group-writable. See git-init(1). False by default.The issue ended up being Aptana, everytime I ran this it would cause this error when I tried to commit in git.I stopped using aptana studio and I don't have this issue anymore.Do this:rm index.lockfollowed by git reset"
"fatal: https://github.com/username/repository-name.git/info/refs not found: did you run git update-server-info on the server?In GitHub context, this message should be understood as ""The repository doesn't exist"". You're supposed to push toward an already existing bare repository. A bare repository is a repository without a working directory, usually found server-side.If I create my repository first on github, then I can push branches no problem. Is this procedure routine?Yes. You're supposed to first create your repository on GitHub. See the help topic about thisindeed, as stated by the documentation ""To put your project up on GitHub, you'll need to have a GitHub repository for it to live in.""I confirm you need to create your repo on GitHub first, before being able to push to said (remote) repo.Once created, you can add it as a remote named 'origin' to your local repo, and 'git push origin master' (for the first push).Also note that the repository name is case sensitive. Oops!Are you sure the git repo you're trying to access supports the HTTPS protocol?Instead of this:  git clone https://github.com/TeaCodie/TeaCodie-Website.gitTry this:  git clone git@github.com/TeaCodie/TeaCodie-Website.gitYou may need to configure your SSH key.For some details, see: http://git-scm.com/book/ch4-1.html  and https://help.github.com/articles/set-up-git and https://help.github.com/articles/generating-ssh-keys"
"I would rather use the https form to push back to your repo:git remote set-url origin https://github.com/user/repo.git# in your case:git remote set-url origin https://github.com/ars/rss.gitgit remote set-url would change the url currently associated with origin (see git remote man page).Note that I don't have access to rss.git, so either you need to create it on GitHub first (and do a git push -u origin master), or it is an existing but private repo.Note also that if remote origin already exists, you can keep it and add the github url under another remote name, like 'github'.Or you can rename the existing origin (git remote rename origin otherName), and then git remote add origin gitHubUrl."
"You have 2 different paths openYour terminal is ~/hello and your editor is git_tutorial/hello  so that is why you cannot find hello.rb in the terminal, as you are in a different directory."
"If the git submodule deinit fails (maybe because the .gitmodules doesn't list that submodule), try to remove at least the special entry in the index:git rm --cached submodule-namegit commit -m ""Remove submodule entry""git pushThe gray folder should then be gone on GitHub side.This worked http://stackoverflow.com/a/1789374/1798394 :git rm --cached path/to/submodulerm -rf path/to/submodule"
"I think there is no space left in your remote, check this other post:Hudson: returned status code 141: fatal: write error: No space left on device"
"Most Git repositories use master as the main (and default) branch - if you initialize a new Git repo via git init, it will have master checked out by default.However, if you clone a repository, the default branch you have is whatever the remote's HEAD points to (HEAD is actually a symbolic ref that points to a branch name). So if the repository you cloned had a HEAD pointed to, say, foo, then your clone will just have a foo branch.The remote you cloned from might still have a master branch (you could check with git ls-remote origin master), but you wouldn't have created a local version of that branch by default, because git clone only checks out the remote's HEAD.master is just the name of a branch, there's nothing magic about it except it's created by default when a new repository is created.You can add it back with git checkout -b master.To checkout branch which not exists locally but is in the remote repo you could use this command: git checkout -t -b master origin/masterI actually had the same problem with a completely new repository. I had even tried creating one with git checkout -b master, but it would not create the branch. I then realized if I made some changes and committed them, git created my master branch.if it is a new repo you've cloned, it may still be empty, in which case:  git push -u origin master should likely sort it out.  (did in my case.  not sure this is the same issue, thought i should post this just incase. might help others.)In my case there was a develop branch but no master branch. Therefore I cloned the repository pointing the newly created HEAD to the existing branch. Then I created the missing master branch and update HEAD to point to the new master branch.git clone git:repositoryname --branch otherbranchgit checkout -b mastergit update-ref HEAD mastergit push --set-upstream origin masterI ran into the same issue and figured out the problem. When you initialize a repository there aren't actually any branches. When you start a project run git add . and then git commit and the master branch will be created.Without checking anything in you have no master branch. In that case you need to follow the steps other people here have suggested."
"@tripleee had the right answer. Another way to write that is:if git pull; then    command1    command2fiPresumably, git pull's error output will be sufficiently clear that you don't need to add your error message."
"(not a complete answer, but at least some clues, and a workaround)That error message comes from the sha1_file.c, method check_packed_git_idx(), nr = 0;index = idx_map;if (version > 1)  index += 2; /* skip index header */for (i = 0; i < 256; i++) {  uint32_t n = ntohl(index[i]);  if (n < nr) {    munmap(idx_map, idx_size);    return error(""non-monotonic index %s"", path);  }  nr = n;}with ntohl function being:The ntohl function converts a u_long from TCP/IP network order to host byte order (which is little-endian on Intel processors).The ntohl function returns the value supplied in the netlong parameter with the byte order reversed. If netlong is already in host byte order, then this function will reverse it. It is up to the application to determine if the byte order must be reversed.The ntohl function takes a 32-bit number in TCP/IP network byte order (the AF_INET or AF_INET6 address family) and returns a 32-bit number in host byte order. It is called by:open_pack_index(), andparse_pack_index()See the structure of a pack file in the SO question ""Is the git binary diff algorithm (delta storage) standardized?"":The first one is also called by builtin/fsck.c, so you can try a git fsck --full --progress, in order to check if you have a local corruption of your pack files, or if it actually is a remote repo issue.Make sure you can replicate the issue on different OS and/or different version of Git.The usual workaround, for a (here ""Netduino"") repo which seems to be forked around on GitHub, is to:clone another fork, restore one's own local modification from the corrupt repo, add them and commit thempush --force back to one's own fork, in order to erase/reset the remote history by one with can be packed correctlyI was searching for info in this kind of non-monolitic error and found this link: http://git.661346.n2.nabble.com/Error-non-monotonic-index-after-failed-recursive-quot-sed-quot-command-td7575014.htmlTL;DR: you remove the non-monolotic index and then reindex it. In linux it would be:> rm .git/objects/pack/pack-29a18084cf61cd0322a6e9cfd485ce0977348c53.idx> git index-pack .git/objects/pack/pack-29a18084cf61cd0322a6e9cfd485ce0977348c53.pack After this I had to run some git gc --prune=now and git remote prune origin, but I had done some other operations before so I may have spoiled my repo."
"git 'command' --verbose or git 'command' -v. Make sure the switch is after the actual git command. Otherwise - it won't work!Also useful:git 'command' --dry-runWell, like (almost) every console program for unix-like systems, git does not tell you anything if a command succeeds. It prints out something only if there's something wrong.However if you want to be sure of what just happened, just typegit statusand see which changes are going to be committed and which not. I suggest you to use this before every commit, just to be sure that you are not forgetting anything.Since you seem new to git, here is a link to a free online book that introduces you to git. It's very useful, it writes about basics as well as well known different workflows: http://git-scm.com/bookYou can use git add -i to get an interactive version of git add, although that's not exactly what you're after. The simplest thing to do is, after having git added, use git status to see what is staged or not.Using git add . isn't really recommended unless it's your first commit. It's usually better to explicitly list the files you want staged, so that you don't start tracking unwanted files accidentally (temp files and such)."
"Assuming the submodule's repository does contain a commit you want to use (unlike the commit that is referenced from current state of the super-project), there are two ways to do it.The first requires you to already know the commit from the submodule that you want to use. It works from the ‰ÛÏinside, out‰Ûù by directly adjusting the submodule then updating the super-project. The second works from the ‰ÛÏoutside, in‰Ûù by finding the super-project's commit that modified the submodule and then reseting the super-project's index to refer to a different submodule commit.Inside, OutIf you already know which commit you want the submodule to use, cd to the submodule, check out the commit you want, then git add and git commit it back in the super-project.Example:$ git submodule updatefatal: reference is not a tree: e47c0a16d5909d8cb3db47c81896b8b885ae1556Unable to checkout 'e47c0a16d5909d8cb3db47c81896b8b885ae1556' in submodule path 'sub'Oops, someone made a super-project commit that refers to an unpublished commit in the submodule sub. Somehow, we already know that we want the submodule to be at commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6c. Go there and check it out directly.Checkout in the Submodule$ cd sub$ git checkout 5d5a3ee314476701a20f2c6ec4a53f88d651df6cNote: moving to '5d5a3ee314476701a20f2c6ec4a53f88d651df6c' which isn't a local branchIf you want to create a new branch from this checkout, you may do so(now or later) by using -b with the checkout command again. Example:  git checkout -b <new_branch_name>HEAD is now at 5d5a3ee... quux$ cd ..Since we are checking out a commit, this produces a detached HEAD in the submodule. If you want to make sure that the submodule is using a branch, then use git checkout -b newbranch <commit> to create and checkout a branch at the commit or checkout the branch that you want (e.g. one with the desired commit at the tip).Update the Super-projectA checkout in the submodule is reflected in the super-project as a change to the working tree. So we need to stage the change in the super-project's index and verify the results.$ git add subCheck the Results$ git submodule update$ git diff$ git diff --cacheddiff --git c/sub i/subindex e47c0a1..5d5a3ee 160000--- c/sub+++ i/sub@@ -1 +1 @@-Subproject commit e47c0a16d5909d8cb3db47c81896b8b885ae1556+Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6cThe submodule update was silent because the submodule is already at the specified commit. The first diff shows that the index and worktree are the same. The third diff shows that the only staged change is moving the sub submodule to a different commit.Commitgit commitThis commits the fixed-up submodule entry.Outside, InIf you are not sure which commit you should use from the submodule, you can look at the history in the superproject to guide you. You can also manage the reset directly from the super-project.$ git submodule updatefatal: reference is not a tree: e47c0a16d5909d8cb3db47c81896b8b885ae1556Unable to checkout 'e47c0a16d5909d8cb3db47c81896b8b885ae1556' in submodule path 'sub'This is the same situation as above. But this time we will focus on fixing it from the super-project instead of dipping into the submodule.Find the Super-project's Errant Commit$ git log --oneline -p -- subce5d37c local change in subdiff --git a/sub b/subindex 5d5a3ee..e47c0a1 160000--- a/sub+++ b/sub@@ -1 +1 @@-Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6c+Subproject commit e47c0a16d5909d8cb3db47c81896b8b885ae1556bca4663 added subdiff --git a/sub b/subnew file mode 160000index 0000000..5d5a3ee--- /dev/null+++ b/sub@@ -0,0 +1 @@+Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6cOK, it looks like it went bad in ce5d37c, so we will restore the submodule from its parent (ce5d37c~).Alternatively, you can take the submodule's commit from the patch text (5d5a3ee314476701a20f2c6ec4a53f88d651df6c) and use the above ‰ÛÏinside, out‰Ûù process instead.Checkout in the Super-project$ git checkout ce5d37c~ -- subThis reset the submodule entry for sub to what it was at commit ce5d37c~ in the super-project.Update the Submodule$ git submodule updateSubmodule path 'sub': checked out '5d5a3ee314476701a20f2c6ec4a53f88d651df6c'The submodule update went OK (it indicates a detached HEAD).Check the Results$ git diff ce5d37c~ -- sub$ git diff$ git diff --cacheddiff --git c/sub i/subindex e47c0a1..5d5a3ee 160000--- c/sub+++ i/sub@@ -1 +1 @@-Subproject commit e47c0a16d5909d8cb3db47c81896b8b885ae1556+Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6cThe first diff shows that sub is now the same in ce5d37c~. The second diff shows that the index and worktree are the same. The third diff shows the only staged change is moving the sub submodule to a different commit.Commitgit commitThis commits the fixed-up submodule entry.try this:git submodule syncgit submodule updateThis error can mean that a commit is missing in the submodule.  That is, the repository (A) has a submodule (B).  A wants to load B so that it is pointing to a certain commit (in B).  If that commit is somehow missing, you'll get that error.  Once possible cause: the reference to the commit was pushed in A, but the actual commit was not pushed from B.  So I'd start there.Less likely, there's a permissions problem, and the commit cannot be pulled (possible if you're using git+ssh).Make sure the submodule paths look ok in .git/config and .gitmodules.One last thing to try - inside the submodule directory: git reset HEAD --hardThis may also happen when you have a submodule pointing to a repository that was rebased and the given commit is ""gone"". While the commit may still be in the remote repository, it is not in a branch. If you can't create a new branch (e.g. not your repository), you're stuck with having to update the super project to point to a new commit. Alternatively you can push one of your copies of the submodules elsewhere and then update the super-project to point to that repository instead.I got this error when I did:$ git submodule update --init --depth 1but the commit in the parent project was pointing at an earlier commit.Deleting the submodule folder and running$ git submodule update --initdid NOT solve the problem. I deleted the repo and tried again without the depth flag and it worked.Possible causeThis can happens when: Submodule(s) have been edited in placeSubmodule(s) committed, which updating the hash of the submodule being pointed toSubmodule(s) not pushed.e.g. something like this happened:$ cd submodule$ emacs my_source_file  # edit some file(s)$ git commit -am ""Making some changes but will forget to push!""Should have submodule pushed at this point.$ cd .. # back to parent repository$ git commit -am ""updates to parent repository""$ git push origin masterAs a result, the missing commits could not possibly be found by the remote user because they are still on the local disk.SolutionInforma the person who modified the submodule to push, i.e.$ cd submodule$ git pushJust to be sure, try updating your git binaries.GitHub for Windows has the version git version 1.8.4.msysgit.0 which in my case was the problem. Updating solved it."
"You don't need to care.The warning enacts a standard of cleanliness of text files in regard to whitespace, the kind of thing that many programmers tend to care about. As the manual explains:What are considered whitespace errors is controlled  by core.whitespace configuration. By default, trailing whitespaces  (including lines that solely consist of whitespaces) and a space  character that is immediately followed by a tab character inside the  initial indent of the line are considered whitespace errors.By default, the command outputs warning messages but applies the patch.So, the ""error"" means that the change introduces a trailing whitespace, a whitespace-only line, or a space that precedes a tab. Other than that fact, there is nothing erroneous about the change, and it will apply cleanly and correctly. In other words, if you don't care about the ""incorrect"" whitespace, feel free to ignore the warning or turn it off with git config apply.whitespace nowarn.One case when you could legitimately care is when you want to differentiate between ""old"" whitespase error (that you might want to keep for legacy reason) and ""new"" whitespace errors (that you want to avoid).To that effect, Git 2.5+ (Q2 2015) will propose a more specific option for whitespace detection.See commits 0e383e1, 0ad782f, and d55ef3e [26 May 2015] by Junio C Hamano (gitster).(Merged by Junio in commit 709cd91, 11 Jun 2015) diff.c: --ws-error-highlight=<kind> optionTraditionally, we only cared about whitespace breakages introduced  in new lines.Some people want to paint whitespace breakages on old  lines, too.  When they see a whitespace breakage on a new line, they  can spot the same kind of whitespace breakage on the corresponding  old line and want to say ""Ah, those breakages are there but they  were inherited from the original, so let's not touch them for now.""Introduce --ws-error-highlight=<kind> option, that lets them pass  a comma separated list of old, new, and context to specify  what lines to highlight whitespace errors on.The documentation now includes:--ws-error-highlight=<kind>Highlight whitespace errors on lines specified by <kind> in the color specified by color.diff.whitespace.<kind> is a comma separated list of old, new, context.  When this option is not given, only whitespace errors in new lines are highlighted.  E.g. --ws-error-highlight=new,old highlights whitespace errors on both deleted and added lines.all can be used as a short-hand for old,new,context.For instance, the old commit had one whitespace error (bbb), but you can focus on the new errors only (at the end of still bbb and ccc):(test done after t/t4015-diff-whitespace.sh)The whitespace error with visual images is shown here.http://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines"
"Did you install Git correctly?According to the Bower site, you need to make sure you check the option ""Run Git from Windows Command Prompt"".I had this issue where Git was not found when I was trying to install Angular.  I re-ran the installer for git and changed my setting and then it worked.From the bower site:http://bower.io/Installing git and running npm install from git-bash worked for me. Make sure you are in the correct directory.Install git and tortoise git for windows and make sure it is on your path.while @vitocorleone is technically correct.  If you have already installed, there is no need to reinstall.   You just need to add it to your path.  You will find yourself doing this for many of the tools for the mean stack so you should get used to doing it.  You don't want to have to be in the folder that holds the executable to run it.Control Panel --> System and Security --> Systemclick on Advanced System Settings on the left.make sure you are on the advanced tabclick the Environment Variables button on the bottomunder system variables on the bottom find the Path variableat the end of the line type (assuming this is where you installed it);C:\Program Files (x86)\git\cmdclick ok, ok, and ok to saveThis essentially tells the OS.. if you don't find this executable in the folder I am typing in, look in Path to fide where it is."
"The correct answer to this was actually different. Before git runs the aliases it checks the $PATH. In case the directory does not exist, or lacks permissions, git produces the ""fatal: cannot exec 'git-co': Permission denied"". It does not ever comes to check the aliases so git foobar will produce the same error.Good people from the git mailing list also reminded me of an strace tool, that can help finding the entry that is returning EACCES, as in: strace -f -e execve git foobarThe credit goes to Jeff King from the git mailing list. :)Is it possible you have inadvertently created a non-executable git-co file somewhere? I can recreate your situation if I do just that, as demonstrated below.$ git --versiongit version 1.7.7.1.475.g997a1$ git config --get-regexp '^alias\.co$'alias.co checkout$ git co b1Switched to branch 'b1'$ touch $HOME/bin/git-co$ ls -al $HOME/bin/git-co-rw-r--r-- 1 user user 0 2011-11-03 12:59 /home/user/bin/git-co$ git co masterfatal: cannot exec 'git-co': Permission denied$ for p in $(echo ""$PATH"" | sed -e 's/:/ /g'); do if [ -f ""${p}/git-co"" ]; then echo ""Found git-co in ${p}""; fi; doneFound git-co in /home/user/bin$ rm $HOME/bin/git-corm: remove regular empty file `/home/user/bin/git-co'? y$ git co masterSwitched to branch 'master'Another thing you might want to try is enabling trace logging to get more information about what Git is doing. Following is an example:GIT_TRACE=$HOME/trace.log git co masterYou must use absolute paths if you want to send output to a file. Otherwise, use true or 1 to send output to standard error; e.g. GIT_TRACE=1. The trace.log file contains:trace: exec: 'git-co' 'master'trace: run_command: 'git-co' 'master'trace: alias expansion: co => 'checkout'trace: built-in: git 'checkout' 'master'If you do not see the trace: alias expansion: co=> 'checkout' trace log output, Git is finding a git-co file in the PATH environment variable. Git uses a PATH as follows:Start with an empty PATH, saving any ""old"" PATH for reference.If the --exec-path=<my git commands path> Git option is found, append <my git commands path> to the PATH.If --exec-path=<my git commands path> was not found and the GIT_EXEC_PATH environment variable is set, append this to the PATH.If you called git using a relative or absolute path, append the absolute path of the git executable to the PATH.If PATH was previously defined, append it to the PATH.If PATH was not previously defined, append /usr/local/bin:/usr/bin:/bin to the PATH.You can use another alias to get Git to tell you what it is setting the PATH environment variable to.$ git config --global alias.whatpath '!echo $PATH'$ git whatpath/usr/local/libexec/git-core:/home/user/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binThen check each directory listed for the existence of a git-co file. It's not sufficient to do which git-co and assume that if nothing is found that you do not have a git-co file located in one of the directories in Git's PATH; a file may exist that is not executable and which will not display it.Check to see if you have execute permissions on the git aliases.Providing the execute permissions solved this issue for me.I downloaded ""git-credential-osxkeychain"" and added it to /usr/local/bin and provided the exec rights and could run the command without any issue."
"Your arguments are in the wrong order. Try git commit -m 'my notes' path/to/my/file.ext, or if you want to be more explicit, git commit -m 'my notes' -- path/to/my/file.ext.Incidentally, git v1.5.2.1 is 4.5 years old. You may want to update to a newer version (1.7.8.3 is the current release).Try:git commit -m 'my notes' path/to/my/file.ext"
"You are getting this error because ""origin"" is not available. ""origin"" is a convention not part of the command. ""origin"" is the local name of the remote repository.For example you could also write:git remote add myorigin git@github.com:myname/oldrep.git  git remote add testtest git@github.com:myname/oldrep.gitSee the manual: http://www.kernel.org/pub/software/scm/git/docs/git-remote.htmlTo remove a remote repository you enter:git remote rm originAgain ""origin"" is the name of the remote repository if you want toremove the ""experimental"" branch on the remote.git remote rm experimentalThe previous solutions seem to ignore origin, and they only suggest to use another name. When you just want to use git push origin, keep reading.The problem appears because a wrong order of Git configuration is followed. You might have already added a 'git origin' to your .git configuration.You can change the remote origin in your Git configuration with the following line:git remote set-url origin git@github.com:username/projectname.gitThis command sets a new URL for the Git repository you want to push to.Important is to fill in your own username and projectnameIf you have mistakenly named the local name as ""origin"", you may remove it with the following:git remote rm originYou can simply edit your configuration file in a text editor.In the ~/.gitconfig you need to put in something like the following:[user]        name  = Uzumaki Naruto        email = myname@example.com[github]        user = myname        token = ff44ff8da195fee471eed6543b53f1ffIn the oldrep/.git/config file (in the configuration file of your repository):[remote ""github""]        url = git@github.com:myname/oldrep.git        push  = +refs/heads/*:refs/heads/*        push  = +refs/tags/*:refs/tags/*If there is a remote section in your repository's configuration file, and the URL matches, you need only to add push configuration. If you use a public URL for fetching, you can put in the URL for pushing as 'pushurl' (warning: this requires the just-released Git version 1.6.4).You don't have to remove your existing ""origin"" remote, just use a name other than ""origin"" for your remote add, e.g.git remote add github git@github.com:myname/oldrep.gitI got the same issue, and here is how I fixed it after doing some research:Download GitHub for Windows or use something similar, which includes a shellOpen the Git Shell from task menu. This will open a power shell including Git commands.In the shell, switch to your old repository, e.g. cd C:\path\to\old\repositoryShow status of the old repositoryType git remote -v to get the remote path for fetch and push remote. If your local repository is connected to a remote, it will show something like this:origin  https://user@bitbucket.org/team-or-user-name/myproject.git (fetch)origin  https://user@bitbucket.org/team-or-user-name/myproject.git (push)If it's not connected, it might show origin only.Now remove the remote repository from local repository by usinggit remote rm originCheck again with step 4. It should show origin only, instead of the fetch and push path.Now that your old remote repository is disconnected, you can add the new remote repository. Use the following to connect to your new repository.Note: In case you are using Bitbucket, you would create a project on Bitbucket first. After creation, Bitbucket will display all required Git commands to push your repository to remote, which look similar to the next code snippet. However, this works for other repositories, too.cd /path/to/my/repo # If haven't done yetgit remote add mynewrepo https://user@bitbucket.org/team-or-user-name/myproject.gitgit push -u mynewrepo master # To push changes for the first timeThat's it.You could also change the repository name you wish to push to in the REPOHOME/.git/config file(where REPOHOME is the path to your local clone of the repository).I had the same problem when I first set up using Bitbucket.My problem was that I needed to change the word origin for something self-defined. I used the name of the application. So:git remote add AppName https://someone@bitbucket.org/somewhere/something.gitYou should change the name of the remote repository to something else.git remote add origin git@github.com:myname/oldrep.gittogit remote add neworigin git@github.com:myname/oldrep.gitI think this should work.Yes, these are for repository init and adding a new remote. Just with a change of name."
"You get CONFLICT (add/add): Merge conflict in ... conflicts because the files are in fact NOT exactly the same. They may look pretty much the same from a distance, but they are definitely different.If there is even one bit of difference, Git cannot know which file is the right one. One branch says ""add this file"", another branch says ""add this file"", with same name but different content, only you can tell which one is the right one.You can confirm the difference with:git diff other_branch path/to/fileOr after the merge, in the conflicted state, you can see the problem with simply git diff.To resolve such conflict, you have to decide which branch has the right content, and checkout the file from that branch. To choose the version in the current branch:git checkout path/to/fileTo choose the version in the other branch:git checkout other_branch path/to/fileThe long-term solution is to avoid practices that you already know yourself to be bad.I had a git (Add/Add) conflict. The information from Janos provided the insight needed for a solution. The files ""appeared"" identical, but my conflicting folder of files were added with a permission of 664 on one branch, and a permission of 755 on another branch. Using git status revealed the difference between the files.Steps taken to resolve the conflict:git merge --abortrm -rfv myconflictedfoldergit commit -m'Resolve git Add/Add branch merge conflict by deleting conflicted folder and files in myconflictedfolder'git merge mybranch"
"Make sure to install git with Run Git from Windows Command Prompt option selected. This option will add the git executable to your PATH which seems to be missing and causing this error.Check this answer http://stackoverflow.com/a/21614660/157575 for more details."
"This may be an old reply but I'm hoping this is more useful on next who need this solution.On linux/unix/gitbash/cygwin, tryrm -f .git/index.lockOn Windows Command Prompt, try:del .git\index.lockHope that helps, I found this solution here: Fatal: Unable to create ‰Û÷‰Û_git/index.lock‰Ûª File existscheck if the git still running (ps -ef  | grep git)if not, remove the locked fileif yes, kill the git process at first.Just had this issue... Gitbox was at fault. So maybe you had a GUI running that was causing problems.Sometimes Git creates a lock file associated with your repo while you are making any changes or most probably when you are using sub modules. The error message will show you the path of the lock file.Fix: Just manually go to the path in terminal and delete the lock file by $ rm index.lockIt should help.On a Windows platform running Visual Studio 2015 RC (v4.6.00057) in combination with SourceTree (v1.6.14.0) will give this error as well. Solution:Assuming you want to use source tree as source code manager, simply disable the source control provider inside Visual Studio like this:Go to: Tools > Options > Source ControlSelect Current source control plug-in as: NoneProbably (it has happened to me), ls command is saying it doesn't exist because current user doesn't have permissions to reach that directory or file.Remove the lock and make sure you are executing git with the right user in order to avoid permission problems.If you are in a GNU/Linux box with sudo command: sudo rm project_path/.git/index.lockI had this exact same error, but the issue was not the lock file. Instead the issue was that I had copied the contents of another git repo into this repo, including the .git invisible folder. So, SourceTree was confused about which repo I wanted to stage files to (there being a mismatch between the repo SourceTree thought I was in, and the one that the contents of my embedded .git dir said I should be in).I had this problem with TortoiseGit with Cygwin on Windows. I wasn't able to delete remove ./.git/index.lock even with administrative privileges, I tried both Cygwin and command prompt, it said the file was in use by another process. I found that I had 2 instances of TortoiseProc.exe running. I killed one of them, and closed all of my windows explorer windows, and then was able to delete the file. I don't know if killing an instance of TortoiseProc.exe was the solution or closing windows explorer windows.The solution for me was to delete the .index file and allow Git to rebuild another.I created an empty index.lock file, deleted it using windows command"
"In Unix systems the end of a line is represented with a line feed (LF). In windows a line is represented with a carriage return (CR) and a line feed (LF) thus (CRLF). when you get code from git that was uploaded from a unix system they will only have a LF. It's nothing to worry about.And if you want to turn this warning off, type this in the git command linegit config core.autocrlf trueIf you want to make an intelligent decision how git should handle this, read the documentation Here is a snippetFormatting and WhitespaceFormatting and whitespace issues are some of the more frustrating and  subtle problems that many developers encounter when collaborating,  especially cross-platform. It‰Ûªs very easy for patches or other  collaborated work to introduce subtle whitespace changes because  editors silently introduce them, and if your files ever touch a  Windows system, their line endings might be replaced. Git has a few  configuration options to help with these issues.core.autocrlfIf you‰Ûªre programming on Windows and working with people who are not  (or vice-versa), you‰Ûªll probably run into line-ending issues at some  point. This is because Windows uses both a carriage-return character  and a linefeed character for newlines in its files, whereas Mac and  Linux systems use only the linefeed character. This is a subtle but  incredibly annoying fact of cross-platform work; many editors on  Windows silently replace existing LF-style line endings with CRLF, or  insert both line-ending characters when the user hits the enter key.Git can handle this by auto-converting CRLF line endings into LF when  you add a file to the index, and vice versa when it checks out code  onto your filesystem. You can turn on this functionality with the  core.autocrlf setting. If you‰Ûªre on a Windows machine, set it to true  ‰ÛÒ this converts LF endings into CRLF when you check out code:$ git config --global core.autocrlf trueIf you‰Ûªre on a Linux or Mac system that uses LF line endings, then you  don‰Ûªt want Git to automatically convert them when you check out files;  however, if a file with CRLF endings accidentally gets introduced,  then you may want Git to fix it. You can tell Git to convert CRLF to  LF on commit but not the other way around by setting core.autocrlf to  input:$ git config --global core.autocrlf inputThis setup should leave you with CRLF endings in Windows checkouts,  but LF endings on Mac and Linux systems and in the repository.If you‰Ûªre a Windows programmer doing a Windows-only project, then you  can turn off this functionality, recording the carriage returns in the  repository by setting the config value to false:$ git config --global core.autocrlf falseIf you want, you can deactivate this feature in your git core config usinggit config core.autocrlf falseBut it would be better to just get rid of the warnings usinggit config core.autocrlf true"
"Since you have already edited the conflict file, you just need git add mod/assign/locallib.phpthen git cherry-pick --continueYou attempted to do a merge (via either git merge or git pull) and have files that have conflicts that are not resolved.  If you do git status, you will likely see file(s) listed as being 'changed by both'.  You need to take care of this before you do anything else.  Do git mergetool and it will bring up the files one at a time.  Fix the file so that the conflicts are resolved and then you should be able to proceed."
"You need to commit your changes before pulling:git rm -r --cached .git add .git commit -m 'Removed dir/.classpath'git pullDepending on the upstream commits, this could result in a merge conflict. If you get a ""modified/deleted"" merge conflict in dir/.classpath, you will need to remove it again before committing the merge.git rm -r dir/.classpathgit commit # Commit the mergeEdit: Since you already committed your change, all you need to do is remove the untracked directory before pulling. You may want to make a backup first if you need the directory contents.rm -rf dir/.classpathgit pull"
"I just got the same problem and just figured out what's cause.Github seems only supports ssh way to read&write the repo, although https way also displayed 'Read&Write'.So you need to change your repo config on your PC to ssh way:edit .git/config file under your repo directoryfind url=entry under section [remote ""origin""]change it from url=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git to    url=ssh://git@github.com/derekerdmann/lunch_call.git. that is, change all the texts before @ symbol to ssh://gitSave config file and quit. now you could use git push origin master to sync your repo on GitHubTo definitely be able to login using https protocol, you should first set your authentication credential to the git Remote URI:git remote set-url origin https://yourusername@github.com/user/repo.gitThen you'll be asked for a password when trying to git push.In fact, this is on the http authentication format. You could set a password too:https://youruser:password@github.com/user/repo.gitYou should be aware that if you do this, your github password will be stored in plaintext in your .git directory, which is obviously undesirable.One small addition to Sean's answer.Instead of editing .git/config file manually, you can use git remote set-url command.In your case it should be:git remote set-url origin ssh://git@github.com/derekerdmann/lunch_call.gitI find it easier and cleaner, than messing around with dot-files.help.github.com: Changing a remote's URLThe other answers that suggest switching to SSH sort of miss the point. HTTPS is supported, but you must log in with you GITHUB password, not your SSH passphrase (which was what was giving me the same exact error). I was having the same problem, but making sure to use my actual GitHub password at the terminal password prompt fixed the solution with no alteration to the config, or resorting to SSH.The reason it is important to note this, is many public institutions (such as my school) will block SSH, but allow HTTPS (which is the only reason I started cloning over HTTPS in the first place).Hope that helps anyone else having the same issue...Edit .git/config file under your repo directoryFind url= entry under section [remote ""origin""]Change it from url=https://github.com/rootux/ms-Dropdown.git to https://USERNAME@github.com/rootux/ms-Dropdown.gitwhere USERNAME is your github user nameI think @deepwaters got the answer correct for older versions. The HTTPS URL needs to have the username. I had git 1.7.0.4 and git push origin master wouldn't even ask for a password till I added it.Upgrade your git. GitHub has answered this question at https://help.github.com/articles/error-the-requested-url-returned-error-403.Figured it out. I cloned over HTTPS. Setting up my public SSH keys, cloning over SSH, and pushing over SSH fixed it.Same error and resolution on Mac OS X.Everything was working fine till I created a new account on GitHub and tried to push$ git push -u origin masterAnd got the error:remote: Permission to NEWUSER/NEWREPO.git denied to OLDUSER. fatal: unable to access ‰Û÷https://github.com/NEWUSER/NEWREPO.git/': The requested URL returned error: 403It should have fixed by setting the user.name either for global or current repo$ git config ‰ÛÒ-global user.name NEWUSER$ git config user.name NEWUSERBut it didn‰Ûªt. I got it fixed by deleting the OLDUSER associated with GitHub from Keychain Access app under Passwords section. Then the push command went successful.$ git push -u origin masterreferenceJust add you username into url like this :https://islam9@github.com/islam9/bootstrap-rtlplease check:http://islamkhalil.wordpress.com/2012/12/06/github-error-pushing-to-git-returning-error-code-403-fatal/A 403 code is ""Forbidden"".  The server saw your request and refused it.  Do you have permission to push to that repository?I actually had a very simple fix to this. All i did was edit the git config file differently after cloning the repository.  The remote origin url is what you need to edit in your default config file. It should look like seen below[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true[remote ""origin""]    fetch = +refs/heads/*:refs/remotes/origin/*    url = https://*username*@github.com/*username*/*repository*.git[branch ""master""]    remote = origin    merge = refs/heads/masterThis works for me -:git remote set-url origin https://username@github.com/user/repo.gitHope it helpsFor anyone curious, my mac machine vs lucid vm ran git 1.7.6 vs 1.7.0.4, and the exact same repo was pushable from my mac (newer git) but not the VMSame curl version. Perhaps some older git versions don't support https pushes?change it fromurl=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git tourl=ssh://git@github.com/derekerdmann/lunch_call.gitIt works! Do not forget the ""git"" before the ""@"".I figured out my own variation of this problem.The issue was not changing the protocol from https to ssl, but instead,setting the Github global username and email! (I was trying to push to a private repository.git config --global user.email ""your_github_email_@email.com""git config --global user.name ""Your full name""I had this problem right now, and it turned out that my server /etc/resolver.conf file had a bad ip address.  Might help others.It could be an accounting issue. The Github account of the upstream (private) repo owner may not be financial. I've seen this where the client's credit card expired.After changing https to http within gitbox app, it worked for me.Sometimes there is nothing wrong with settings, and there are some problems on github servers.https://status.github.com - current status of github :)Github has page dedicated to troubleshooting this error:https://help.github.com/articles/https-cloning-errorsIn my case it turned out that using a new version of git (1.8.5.2) solved this problem.100 % Tested and It Save Your  lot of Time that your Are Finding Solution on NetClick on Your Repository and The Write Hand Side Click On ""Setting "" 2.IN the Left Hand Side Option Panel Click on  ""Collaborators""Add And Person Name You Know In Git Hub  Then Click "" Add Collaborators""After this our ""Push to Git"" work Fine !!Edit .git/config file under your repo directoryFind url= entry under section [remote ""origin""]Change it from url=https://github.com/rootux/ms-Dropdown.git to https://USERNAME@github.com/rootux/ms-Dropdown.gitwhere USERNAME is your github user name=> This solution worked for me."
"You are connecting via the SSH protocol. Using SSH, every host has a key. Clients remember the host key associated with a particular address and refuse to connect if a host key appears to change. This prevents man in the middle attacks.The host key for domain.com has changed. If this does not seem fishy to you, you can remove the old key from your local cache using$ ssh-keygen -R domain.comI strongly encourage you to consider having users authenticate with keys as well. That way, ssh-agent can store key material for convenience (rather than everyone having to enter her password for each connection to the server), and passwords do not go over the network.As I answered previously in Cloning git repo causes error - Host key verification failed. fatal: The remote end hung up unexpectedly, add the GitHub to the list of authorized hosts:ssh-keyscan -t rsa github.com >> ~/.ssh/known_hostsI got the same problem on a newly installed system, but this was a udev problem. There was no /dev/tty node, so I had to do:mknod -m 666 /dev/tty c 5 0"
"The only case I saw where the git-commit command output was empty was on issue 556, where the following solution was proposed:I had exactly the same problem as you; and:removing the release.properties and putting back my pom version to a SNAPSHOT (it was previously changed by the plugin) version resolved the problem; the process ended successfully.Like it's being said in the other answer, restoring is done either by doing  mvn release:cleanbut since this doesn't always work, so the solution would be to remove release.properties, and runningmvn versions:set -DnewVersion={version with snapshot}(This is not necessary if you reset your git repostiory to the state prior to running the release plugin.)You might also have to remove the commits made by the release plugin, withgit reset --hard HEAD~1It usually makes two commits, to remove both either run the above command twice, or change the ~1 with ~2.To decouple the git stuff from the maven stuff (so that the mvn build doesn't break upon a git error, you could add this to your pom.xml:<plugin>    <groupId>org.apache.maven.plugins</groupId>    <artifactId>maven-release-plugin</artifactId>    <configuration>        <pushChanges>false</pushChanges>    </configuration></plugin>Setting push-changes to false lets you control the git push yourself. (Remember that you also have to push tags, git push --tags."
"One step you seem to have missed (or didn't include in your description) is the publication of the public key on the server side.Upload your public ssh key and add it to the ~username/.ssh/authorized_keys file.Also, try it (for testing) first with a private key without passphrase (no need to ssh-add your key to an ssh agent)Finally, make sure your ssh keys are with standards names (id_rsa and id_rsa.pub), with the right protection:on the local sidein the remote sideFinally, an ssh -Tvvv username@hostname.com should tell you more, if the previous steps didn't solve the issue.The complete procedure being: Add the EC2 public key to your ssh list with the following command    ssh-add /path/to/myEC2publickeyCreate a git repository on the EC2 instance with the followingcommandsmkdir /path/my_project.gitcd /path/my_project.gitgit init --bareConnect the local files on your system to your repository with thecommandscd the_project git initgit add . git commit -m ""Initial git commit message"" git remote add origin username@hostname.com:the_project.git git config --global remote.origin.receivepack ""git receive-pack"" git push origin masterCreate a public key as the user and add it to the server'sauthorized keysYou can do this step by just copying the file id_rsa.pub from the  localhost to the servers ~/.ssh/authorized_keys file, as suggested in  the previous answer.After all this steps if you try the git push, no more permission denied error."
"Git Apparently not take certificates saved in windows, you have to specify what editing the path to the certificate file .gitconfiggitconfig location:C:\Program Files (x86)\Git\etcAdd the line (replace  with the path to file and yourCertificate.ctr with the name to your certificate):...[help]    format = html[http]    sslVerify = true    sslCAinfo = C:/Program Files (x86)/Git/bin/curl-ca-bundle.crt    sslCAinfo = [route]/yourCertificate.crt[sendemail]    smtpserver = /bin/msmtp.exe[diff ""astextplain""]...and try again..If you are using Linux or Mac OS you can type in terminal :export GIT_SSL_NO_VERIFY=1git clone https://some.repositoryOn windows :Right click on My Computer -> Properties -> Advanced System settings -> Environment VariablesAdd variable GIT_SSL_NO_VERIFY with value 1"
"I was having this exact problem.I figured out my problem was that there were two other .git folders in subdirectories.  I had cloned two repos into these sub folders.  I removed these two .git folders and I was able to use git again.To find these other .git folders I ran this command:find . -name "".git"" -type d"
"Update November 2013:Following rajibchowdhury's answer (upvoted), the git rm which is advised is for removing the special entry in the index indicating a submodule (a 'folder' with a special mode '160000').  If that special entry path isn't referenced in the .gitmodule (like 'Classes/Support/Three20' in the original question), then you need to remove it, in order to avoid the ""No submodule mapping found in .gitmodules for path"" error message.You can check all the entries in the index which reference a submodule:git ls-files --stage | grep 160000Original answer (November 2010)Did you declare your initial submodule correctly? (i.e. without any tail '/' at the end, as described in my old answer, even though your .gitmodule has paths which looks ok in it).This thread mentions:do you get the same error when running 'git submodule init' from a fresh clone?  If so, you have something wrong.  If you have no submodules, delete .gitmodules, and any references to submodules in  .git/config, and ensure the Pikimal dir does not have a .git dir in it.  If that fixes the problem, check in and do the same on your cruise working copy. Obviously, don't delete your main .gitmodules file, but look after other extra .gitmodules files in your working tree.Still in the topic of ""incorrect submodule initialization"", Jefromi mentions submodules which actually are gitlinks.See ""Git - how to track untracked content?"" to see how to convert such a directory to a real submodule.No submodule mapping found in .gitmodules for path 'OtherLibrary/MKStore'when$ git submodule update --initI didn't know why the error occur. After spending a minute and found the answer in stackoverflow.$ git rm --cached OtherLibrary/MKStoreand then update the submodule again. It's working fine.http://en.saturngod.net/no-submodule-mapping-found-in-gitmodulesI resolved this issue for me. Initially I tried to do this:git submodule add --branch master [URL] [PATH_TO_SUBMODULE]As it turns out the specification of the --branch option should not be used if you want to clone the master branch. It throws this error:fatal: Cannot force update the current branch.Unable to checkout submodule '[PATH_TO_SUBMODULE]'Every time you try to do agit submodule syncThis error will be thrown:No submodule mapping found in .gitmodules for path '[PATH_TO_SUBMODULE]'And the lines needed in .gitmodules are never added.So the solution for me was this:git submodule add [URL] [PATH_TO_SUBMODULE]I just hit this error after trying to ""git submodule init"" on a new checkout of my repo. Turns out I had specified the module sub-folder with the wrong case initially. Since I'm on a Mac with a case-sensitive filesystem (hurr) it was failing. For example:git submodule add git@github.com:user/project.git MyApp/Resources/ProjectCloning into 'MyApp/Resources/Project'succeeds but the trouble is that on disk the path is Myapp/Resources/ProjectWhat I don't understand is why git is init'ing the module to wrong folder (ignoring the incorrect case in my command) but then operating correctly (by failing) with subsequent commands.Just had this problem.  For a while I tried the advice about removing the path, git removing the path, removing .gitmodules, removing the entry from .git/config, adding the submodule back, then committing and pushing the change.  It was puzzling because it looked like no change when I did ""git commit -a"" so I tried pushing just the removal, then pushing the readdition to make it look like a change.After a while I noticed by accident that after removing everything, if I ran ""git submodule update --init"", it had a message about a specific name that git should no longer have had any reference to: the name of the repository the submodule was linking to, not the path name it was checking it out to.  Grepping revealed that this reference was in .git/index.  So I ran ""git rm --cached repo-name"" and then readded the module.  When I committed this time, the commit message included a change that it was deleting this unexpected object.  After that it works fine.Not sure what happened, I'm guessing someone misused the git submodule command, maybe reversing the arguments.  Could have been me even...  Hope this helps someone!When I use SourceTree to do the stuff, it will spit out this message.The message that I encountered:git -c diff.mnemonicprefix=false -c core.quotepath=false -c credential.helper=sourcetree submodule update --init --recursiveNo submodule mapping found in .gitmodules for path 'SampleProject/SampleProject'Completed with errors, see aboveMy scenario is I misapplied the project directory the contains .git folder.SourceTree regarded this folder as git submodule, but actually not.  My solution is use command line to remove it.  $ git rm -r SampleProject --cached$ git commit -m ""clean up folders""remove the garbage in git and keep it clean.Scenario: changing the submodule from directory dirA-xxx to another directory dirB-xxxmove the dirA-xxx to dirB-xxxmodify entry in .gitmodules to use dirB-xxxmodify entry in .git/config to use dirB-xxxmodify .git/modules/dirA-xxx/config to reflect the correct directorymodify dirA-xxx/.git to reflect the correct directoryrun  git submodule statusif return error: No submodule mapping found in .gitmodules for path dirA-xxx. This is due to dirA-xxx is not existing, yet it is still tracked by git. Update the git index by: git rm --cached dirA-xxxTry with git submodule foreach git pull.I didn't go through the actual study of git submodule structure, so above steps may break something. Nonetheless going through above steps, things look good at the moment. If you have any insight or proper steps to get thing done, do share it here. :)in the file .gitmodules, I replaced string ""path = thirdsrc\boost"" with ""path = thirdsrc/boost"", and it solved! - -Usually, git creates a hidden directory in project's root directory (.git/)When you're working on a CMS, its possible you install modules/plugins carrying .git/ directory with git's metadata for the specific module/pluginQuickest solution is to find all .git directories and keep only your root git metadata directory. If you do so, git will not consider those modules as project submodules.After looking at my .gitsubmodules, turned out I did have a capital where I should have.  So keep in mind, the .gitsubmodules directories are CAP SENSITIVEThe folder mapping can be found in .git/modules folder (each has config file with reference to its worktree), so make sure these folders correspond to the configuration in .gitmodules and .git/config.So .gitmodules has the correct path:[submodule ""<path>""]  path = <path>  url = git@github.com:foo/bar.gitand in .git/modules/<path>/config in [core] section you've the right path to your <path>, e.g.[core]  repositoryformatversion = 0  filemode = true  bare = false  logallrefupdates = true  worktree = ../../../<path>If the right folder in .git/modules is missing, then you've to go to your submodule dir and try git reset HEAD --hard or git checkout master -f. If this won't help, you probably want to remove all the references to the broken submodule and add it again, then see: Rename a git submodule."
"For me the problem was the execution of clone via sudo.If you clone to a directory where you have user permission ( /home/user/git) it will work fine.(Explanation: Running a command a superuser will not work with the same public key as running a command as user. Therefore github refused the connection.) This solutionr requires a SSH key already to be set up: https://help.github.com/articles/generating-ssh-keysI had to add my public key to github. https://help.github.com/articles/generating-ssh-keysYes, It's a public key Problem.I'm a windows user,and the page below help me resolve this problem.http://help.github.com/win-set-up-git/more precisely this link should be helpful https://help.github.com/articles/error-permission-denied-publickeyType the following command using your username and repository name:git clone https://github.com/{user name}/{repo name}in Ubuntu this works perfectly.I got a solution after a long time in tutorials.I followed the github tutorial on this link -> https://help.github.com/articles/error-permission-denied-publickey and I was able to connect in every step.But when I was trying to git push -u origin master I got this error:Permission denied (publickey). fatal: Could not read from remote  repository.Please make sure you have the correct access rightsThats how I`ve fixed it!!Go to the project directory using the Terminal and check it out$git remote -vYou will get something like this:origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (fetch)origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (push)If you are using anything different then git@github.com, open the config file on git directory by typing the command:vi .git/configAnd configure the line[remote ""origin""]url = ssh://git@github.com/yourGithubUserName/yourRepo.gitfetch = +refs/heads/*:refs/remotes/origin/In my case, I had to setup the public key for another user, as I already had one for my main user. once I switched users and performed the commands in the link above I was able to perform the setup for my test server without a problem.after you created the RSA key pair, you must to add it to SSH using:ssh-add ~/.ssh/id_rsaor wherever you created your rsa key pair.I had this problem, but none of the solutions above worked. I could clone and fetch but couldn't push. Eventually, I figured out the problem was in the url in my .git/config, it should be:git@github.com:<username>/<project>(not ssh://github.com/<username>/<project>.git or https://github.com/<username>/<project>.git).A good one if you have installed git on your computer:http://help.github.com/mac-set-up-git/Given that none of the answers here worked for me, I finally tracked down my issue connecting to Bitbucket (or Github, doesn't matter in this case) with ssh -vT git@bitbucket.org.In my case, the failure was due to using a DSA key instead of RSA, and apparently my SSH client no longer allows that.debug1: Skipping ssh-dss key /c/Users/USER/.ssh/id_dsa for not in PubkeyAcceptedKeyTypesThe solution was to add this to .ssh/config:Host *    PubkeyAcceptedKeyTypes +ssh-dssThis elegantly appends the ssh-dss key type to all existing accepted public key types and after this was done, git can now ssh into Bitbucket no problem.I faced a similar issue when running SSH or Git Clone in Windows. Following findings helps to solve my problem:When you run ‰ÛÏrhc setup‰Ûù or other ssh methods to generate ssh key, it will create the private key file id_rsa in .ssh folder in your home folder, default is C:\User\UserIDGit for windows has its own .ssh folder in its installation directory. When you run git/ssh, it will look for private key file id_rsa in this folderSolved the problem by copying id_rsa from the home folder .ssh folder to the .ssh folder in the git installation directoryAlso, I think there  a way to ‰ÛÏtell‰Ûù git to use the default .ssh folder in home folder but still need to figure out how."
"I had the same problem, simply cloned the homebrew repository in a temporary location usinggit clone https://github.com/Homebrew/homebrew.gitand moved the resulting .git directory to /usr/local, overwriting the one already there. After that, I had to checkout a few directories:cd /usr/localgit checkout Library/Formula/git checkout Library/Contributions/git checkout Library/ENV/git checkout Library/Homebrew/Indeed a correct answer but no need to go so far.As mentioned in the comments also, removing the top .git directory present in /usr/local is enough. Run your brew update after only having removed the top .git directory will rebuild the tree!Segmentation fault: 11 with your PHP installation is same issue it is still the pulled version from the Mavericks bottle so update and upgrade will correct this and also only needed for your main php55 or php56 and not for all your PHP dependencies installed using Homebrew.GL!!!"
"easy to solve.You are see this error because not have rights to write in folder.When you are attempting to create new repo of your folder - try to create it in the place, which you are owner and have a full rights to write. If you are already trying to push and get this error - delete .git folder, set rights to write in this folder and create repo again. Be sure, that you are can see a hidden files in the folders.What worked for me on this error, was for some reason in Microsoft, even though I am the Administrator, and have administrator rights, (different username than Administrator), I still did not have full rights to all folders, ???So I had to add me to the security of folders I use with Git-Gui. After I did that, I made sure that i started Git-Gui as an Administrator, and voila, it worked!This is of course on a Windows box. As for Linux, it would be similar as well...I hope this helps someone else."
"You might have changed your repository nameIn your local repository edit the file:.git/configThen check:[remote ""origin""]   url = that the URL matches your remote repositoryDid you create a new repository on the http://github.com with the same name? If not, do it! And make sure each letter is correct and case sensitive.In my case my github account did not have permissions to the repo. Added the github account as a collaborator for the repo and that fixed it.This error mostly caused by WRONG URL, please check:http or httpsURL Nameusername@git_urlwrong git nameIt looks like that's a private (or deleted) repository; if you visit the repository page while logged it'll give you the real URL, which'll probably be https://TeaCodie@github.com/TeaCodie/TeaCodie-Website.git , i.e. with a username specified?Also make sure the repo you've entered is cased correctly (it's case sensitive).I got the same problem while using a github repository, and connecting to it via https, while using the OS X Keychain Credential helper.My problem was that I had the wrong credentials stored in OS X's Keychain (I was using the email address that I used to sign up for github.com rather than the [username]@github.com address it provides you). I deleted the old account in the keychain and only left the @github.com one and it fixed the problem.Not sure if it is related, but when I checked the user.email local config:git config -lit showed the incorrect email address as well, so I updated the local git user.email to use the correct account too:git config user.email <username>@github.comMake sure that your user account is added to the repository as a collaborator.Setting --> CollaboratorsMy issue was that I used the clone https url widget provided by github. That URL doesn't work for private repositories as you need to add a username to the front of it.  Example: a private repo owned by john and named widget with collaborator sam the correct url would be: https://sam@github.com/john/widget.gitThe github provided url: https://github.com/john/widget.gitThe error message leaves much to be desired.This happened to me and at first it was not apparent what had gone wrong. The previous day I had renamed my repo on github.com only changing the first character of the repo name from a lowercase letter to uppercase. I was not aware that the repo name in the origin URL was case-sensitive unit I received the error which contained the text, ""did you run git update-server-info on the server."" Once I edited the .git/config file to correct the case of the same letter in the origin URL, the problem was solved, the error no longer occurred and I was once again able to push my changes up to the repo on github.com. Another bit of advice: if you make changes to your repo on github, make sure to test sync'ing your local repo right away. In my case, I did not and it was the next day when I had tried to sync and couldn't because of the error and I forgot that I had renamed the repo, so I was scratching my head for a bit. Had I tested sync'ing right away, I would have caught this problem right away.I met up with the same problem.How I solved this problem is:I use git bash to create a new repo, when I typed ""git push origin master""It reported ""fatal: https://github.com/TeaCodie/TeaCodie-Website.git/info/refs not found: did you run git update-server-info on the server?""Finally, I found there was not a repo on the github at all.You'd better create a new repo first on github. Maybe this experience can help somebody.I received this same error when I attempted to git clone something from Kiln what was actually a Mercurial repository."
"It sounds like you have file in the git repo owned by root.  Since you're ssh'ing in as 'username' to do the push, the files must be writable by username.  The easiest thing is probably to create the repo as the user, and use the same user to do your pushes.  Another option is to create a group, make everything writable by the group, and make your user a member of that group.Ok, I figured it out. The issue was that I didn't have the correct permissions set for myrepo.git and the parent directory git. As root I logged into the server and used:$ chown username /home/username/gitThis then returns drwxrwxr-x 4 username root 4096 2012-10-30 15:51 /home/username/git with the following:$ ls -ld /home/username/gitI then make a new directory for myrepo.git inside git:$ mkdir myrepo.git$ ls -ld myrepo.git/drwxr-xr-x 2 root root 4096 2012-10-30 18:41 myrepo.git/but it has the user set to root, so I change it to username the same way as before.$ chown username myrepo.git/$ ls -ld myrepo.git/drwxr-xr-x 2 username root 4096 2012-10-30 18:41 myrepo.git/I then sign out of root and sign into server as username:Inside git directory:$ cd myrepo.git/$ git --bare initInitialized empty Git repository in /home/username/git/myrepo.git/On local machine:$ git remote add origin      ssh://username@server.com/home/username/git/myrepo.git$ git push origin masterSUCCESS!Hopefully this comes in handy for anyone else that runs into the same issue in the future!Resourceshttp://www.cyberciti.biz/tips/unix-or-linux-commands-for-changing-user-rights.htmlhttp://www.cyberciti.biz/faq/how-to-use-chmod-and-chown-command/It would seem like your user doesn't have permission to write to that directory on the server. Please make sure that the permissions are correct. The user will need write permissions on that directory."
"The command (or the URL in it) to add the github repository as a remote isn't quite correct. If I understand your repository name correctly, it should be;git remote add demo_app 'git@github.com:levelone/demo_app.git'You are referring to the section ""2.3.5 Deploying the demo app"" of this ""Ruby on Rails Tutorial "":In section 2.3.1 Planning the application, note that they did:$ git remote add origin git@github.com:<username>/demo_app.git$ git push origin masterThat is why a simple git push worked (using here an ssh address).Did you follow that step and made that first push? www.github.com/levelone/demo_appwouldn't be a writable URI for pushing to a GitHub repo.  https://levelone@github.com/levelone/demo_app.gitshould be more appropriate.Check what git remote -v returns, and if you need to replace the remote address, as described in GitHub help page, use git remote --set-url.git remote set-url origin https://levelone@github.com/levelone/demo_app.gitor git remote set-url origin git@github.com:levelone/demo_app.git"
"Found what was wrong. I don't understand how, but .git directory path somehow was changed to other path than I was working in. So then anything I changed was not checked, because git was checking in other place. I noticed it, when I reinitialized it and it showed that it reinitialized entirely different directory. When I cd .. from my current directory and cd to it back again and then reinitialized yet again, then it switched back to correct .git directory and started seeing my changes.For people working in public open source projects, if you face this behaviour, it is most likely that the file you are editing is excluded from the git repository using .gitignore. I faced the same behaviour, and after hours I found that the file I was making the change is excluded in .gitignore because it is a settings file, and every one will have their own local version.For anyone seeing this problem, the simplest solution I found was to just ""git clone"" your repo and delete the old directory. This should set up your pathing correctly by default.Check the location whether it's the right location of the git project."
"You should do the git pull and resolve conflicting files. Open each one, fix it, then git add it. You will find the conflicting lines like that:After doing this with all conflicting files, test your code and run git commit to merge. You will be able to push after that.git is not allowing you to push, pull, fetch because you copy pasted the entire directory. This has copied the .git folder also which git creates on git init. Delete the .git folder and then reinitialize the git repository with git init.This will create a new .git pointing according to the new path."
"I am using Mac OS X 10.7.5.  I recently downloaded git 1.8.1.2 for Mac.  Having it installed, I bumped into the same signal 11 error message when running:$git credential-osxkeychainwhich in turn runs:/usr/local/git/bin/git-credential-osxkeychainSignal 11 is SEGFAULT which might indicate a bug (e.g. dereferencing a null pointer) with the git-credential-osxkeychain program.I followed instructions on caching your github password and grabbed a new copy of git-credential-osxkeychain from S3. That resolved the problem. The new copy is of different size which makes me guess the bug has been patched.In the meantime, I believe using a URL like git@github.com:yang3wei/octopress-3-in-one in the config should also work around the problem as it bypasses HTTPS and uses SSH instead where the key chain helper is not invoked any more.The error message is being thrown by a git credential helper. It is supposed to be a way for git to avoid  asking for your username and password on every push (see here).I don't know why it is dying but, if you want to stop using it (and avoid seeing the error message), delete your system gitconfig file.On my system (OSX 10.6.8) I did it with: sudo rm /usr/local/git/etc/gitconfig because the only setting in the file was for the credential helper. Check yours first!Since you are getting two death messages, you may also have the setting in your own ~/.gitconfig file or even your project's. Edit those and remove the credential helper block.As you noted, the problem with the credential helper doesn't stop git from working. The next step is to find out why the helper fails!I got it!Try to modify the contents of .git/config file in your project's root directory.[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true[remote ""origin""]    url = https://github.com/yang3wei/octopress-3-in-one.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch ""master""]    remote = origin    merge = refs/heads/masterTo:[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true[remote ""origin""]    url = git@github.com:yang3wei/octopress-3-in-one    fetch = +refs/heads/*:refs/remotes/origin/*[branch ""master""]    remote = origin    merge = refs/heads/masterI had the same error every time I did a git pull. I realized that I did not have the git-credential binary which I got from(under Where's the Mac version?):https://github.com/blog/1104-credential-caching-for-wrist-friendly-git-usage and followed the steps mentioned there. It started working the way I expected to.Hope this helps!"
"You can specify the username that SSH should send to the remote system as part of your remote's URL.  Put the username, followed by an @, before the remote hostname.git remote set-url website abc@***.com:path/to/repoMake sure you have correct url in .git/configurl = git@github.com:username/repo.gitIf it's your first push, you'll need to set up correct upstream$ git push -u origin masterYou can check which key is used by:$ ssh -vvv git@github.comThe reply should contain something like this:debug1: Next authentication method: publickeydebug1: Offering RSA public key: ~/.ssh/id_rsa...You've successfully authenticated, but GitHub does not provide shell access.Also it's possible to define rules for ssh in ~/.ssh/config, e.g. based on aliases:   Host github      HostName github.com       User git      IdentityFile ""~/.ssh/id_rsa""   Host git      HostName github.com       User git      IdentityFile ""~/.ssh/some_other_id""You can set connect to different ports, use different username etc. for each alias.Try removing the GIT_SSH environment variable with unset GIT_SSH.  This was the cause of my problem.After doing some research I've finally got solution for this, you have declared a environment variable to plink.exe path. So if you remove that path, reopen the git bash and try cloning through SSH it will work.Refer to this linkhttp://sourceforge.net/p/forge/site-support/2959/#204cI had the same error. The solution was following:I've corrected my url in .git/config.Just copied that from HTTPS clone URL. That would be something like that:url = https://github.com/*your*git*name*/*your*git*app*.gitIt worked.Make sure ssh-agent is running:eval ""$(ssh-agent -s)""https://help.github.com/articles/generating-ssh-keys/#step-3-add-your-key-to-the-ssh-agenti just wanted to share that i found a easy fix for that:Access denied.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.just logout from gitlab and login again. The problems should then be fixed."
"The file in question is likely .git/index.lock and it should be safe to just remove it if you have no other git processes running.  Make sure a git-svn command isn't hanging.PS  My usual approach to fixing git-svn problems is to make a fresh pull of the repository.  Time consuming, but you can do it in parallel with trying to fix the problem. Have a little race between you and git. Of course, this only works if you didn't have unpushed commits.Removing the index.lock file like Schwern stated will solve this  problem.You can remove it by running    rm -f ./.git/index.lockThe rm command is used to remove (delete) files and directories.The -f stands for force which tells your computer to remove the files without prompting for confirmationFor ""GUI"" user like meOpen Git Extension and choose repository (if more than one)Choose ""Settings"" from top menu then ""Git Maintenance"" and then click on ""Delete Index Lock""Git Extensions: Settings->Git Maintenance->Delete Index LockYou have already opened a commit in another tab in the terminal"
"Rather than cloning the empty repository from Stash, try creating a new repository locally (in a new directory) with:git init .Add your files and make your first commit. The freshly init'd repository should have a proper HEAD and master branch:git add file1.txtgit add file2.txtgit commitThen, add your empty Stash repo as a remote and push master there:git remote add origin http://me@myrepo/my/repo.gitgit push -u origin masterActually you guessed it right, this is something totally into your (and actually our, as I'm in charge of them) company hooks.The error:ERROR: Unable to determine active branch in current context !     ERROR: GITLib::Branch::get_current died at line 41occurs when we try to find the name of the current branch. Currently we are using ""git branch --list"" to find it, but in case of empty repo this returns an empty result.The solution would need to go to something else, probably ""get symbolic-ref"" as suggested here: http://stackoverflow.com/a/2111099(issue is we have to support clients still in Git 1.7.9)Phil."
"These two files contains absolute submodule path:{submodule}/.git.git/modules/{submodule}/configSo, if you moved the repo, the absolute path in these two files are not valid, and cause the 'not a git repository' error. Just fix these files manually.Former versions of git used an absolute path to locate the gitdir of a submodule. The solution is as follows:Upgrade git to the latest version. Some says you'll need at least version 1.7.10. I just successfully solved the issue with git 1.8.3.Delete all the broken submodule folders: rm -rf broken_submodule_folderUpdate the registered submodules: git submodule update. You should see the submodules being checked out.I finally sorted out that the issue was due to an issue with one of the submodules. Simply renaming the repo directory caused a conflict with that submodule. After seeing the discussion in How can I rename a git repository with submodules? I realized that cloning the repo is a better way to go instead of renaming the directory and that solved the issue with the submodule.Following @ax003d answer, you could replace all old paths (old/path) with the new path (new/path) using this command:find . -type f \( -name "".git"" -o \( -path ""*.git/modules/*"" -name config \) \)  -print0 | xargs -0 sed -i -e ""s#old/path#new/path#g""You might want to check what the old paths look like before replacing them:find . -type f \( -name "".git"" -o \( -path ""*.git/modules/*"" -name config \) \)  -print0 | xargs -0 grep --colour ""old/path""I ws facing this issue with submodules as well , but after analysing the two files {submodule}/.git.git/modules/submodules/{submodule}/configI realised that in my case this was not an issue. After a little research I have found that in my case I had to add the git (command : module add git) and the error disappeared.I solved this issue by reseting all git-submodules withrm -rf .git/modulesgit submodule update --init"
"You aren't setting up any remotes when you initialize an empty repository and issue a git pull.If you want to use any/all of the remote branches in your repository, you should be using git clone <remote> to create a local clone of the repo, rather than git init; git pull <remote> which simply gives you a copy of the default branch from the remote.Once you've properly cloned the repository, assuming there is a remote branch origin/mybranch, you can check out a local copy which will track the remote through your command:git checkout mybranchIf you're creating a new brach, use eithergit checkout -b rvm-upgradeAlso, there's no need to put the branch name in quotes.If you expect the branch to already exist, run    git branch -aand it should be in the list.  If it's not in the list, it doesn't exist yet."
"This is not an empty directory, this is a submodule. Read ProGit: Submodules and man git-submoule on how to handle them.Especially: If you clone a repository with submodules, you should init the submodules too# git clone ...git submodule initgit submodule update"
"Assuming @ChrisHayes is right about an accidental sudo, this should fix it. From inside your repository:sudo chown -R $USER:$USER ""$(git rev-parse --show-toplevel)/.git""I am using Ubuntu and faced the same problem. To solve it, I simply switched user to root and I see no further error.$supasswordThen,$git pull origin master"
"The problem is that you are using Windows or Mac, which have (more or less) case insensitive file systems.The easiest solution (took it from http://apple.stackexchange.com/a/51619) would be to  rename the file to something completely different, commit, rename the file again to the name you want and commit again, this time amending the old commit.If Android Studio does not support amend commits, you could go with the terminal commands from the answer avove."
"You might have a corrupted object in your git repository.If you have a remote, or other clones of this repository, you could grab from there the problematic file and just replace it on your local repo.The file you want would be in:/repo/.git/objects/13/da9eeff5a9150cf2135aaed4d2e337f97b8114git reset --hard should bring your repository back to normal, but you will lose uncommitted changes.If the problematic file is being added by your change you can just remove it from the index and add it again: git reset <file> git add <file>For me it was just permissions issue. When I run with 'sudo', it worked. perhaps something to do with mac environmnet"
"Notice the first line of output:Reinitialized existing Git repository You already have a git repo in that directory, and it has no uncommitted changes.After doinggit add .you need to commit the changes you just staged:git commit -m ""my first commit""You can view the latest commit using the git show command.Perhaps you previously added and committed when creating the git repository the first time?I was able to reproduce this with:durrantm.../aaa$ git initInitialized empty Git repository in /home/durrantm/play/aaa/.git/durrantm.../aaa$ ltotal 16drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  3 durrantm 4096 Oct 31 22:29 ./drwxrwxr-x  7 durrantm 4096 Oct 31 22:29 .git/durrantm.../aaa$ git status# On branch master## Initial commit## Untracked files:#   (use ""git add <file>..."" to include in what will be committed)##       gggnothing added to commit but untracked files present (use ""git add"" to track)durrantm.../aaa$ git add .durrantm.../aaa$ git status# On branch master## Initial commit## Changes to be committed:#   (use ""git rm --cached <file>..."" to unstage)##       new file:   ggg#durrantm.../aaa$ git commit[master (root-commit) 953c83f] new 1 file changed, 1 insertion(+) create mode 100644 gggdurrantm.../aaa$ ltotal 16drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  3 durrantm 4096 Oct 31 22:29 ./drwxrwxr-x  8 durrantm 4096 Oct 31 22:29 .git/durrantm.../aaa$ git initReinitialized existing Git repository in /home/durrantm/play/aaa/.git/durrantm.../aaa$ ltotal 16drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  3 durrantm 4096 Oct 31 22:29 ./drwxrwxr-x  8 durrantm 4096 Oct 31 22:30 .git/durrantm.../aaa$ git add .durrantm.../aaa$ git status# On branch masternothing to commit (working directory clean)durrantm.../aaa$ durrantm.../aaa$ git commit# On branch masternothing to commit (working directory clean)Notice how there is nothing to commit at the end after a git add . as you are seeing.One 'fix' is to remove the git repository and start again, when you do this you get to commit the final as normal, e.g.:durrantm.../aaa$ rm -rf .git/durrantm.../aaa$ ltotal 12drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  2 durrantm 4096 Oct 31 22:34 ./durrantm.../aaa$ git initInitialized empty Git repository in /home/durrantm/play/aaa/.git/durrantm.../aaa$ ltotal 16drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  3 durrantm 4096 Oct 31 22:34 ./drwxrwxr-x  7 durrantm 4096 Oct 31 22:34 .git/durrantm.../aaa$ git add .durrantm.../aaa$ git commit[master (root-commit) 380863a] wewew 1 file changed, 1 insertion(+) create mode 100644 ggg"
"You cannot use git add -p to tell git ""keep this patch as a trace for the differences between the two version of this file"" : git does not store diffs or patches, it stores actual content.When you add a file in git (git add myfile), this specific version of the file will receive a hash based on its sole content. Git will keep no trace of how it went from version n-1 to version n.When you run git diff, git will actually retrieve the content of the two versions of the file, and run the diff algorithm again. The patch you are trying to edit will not be kept in memory.The closest way I can think of to achieve what you are looking for is to add ""sync points"" for the diff algorithm itself :1- Starting from the first version of your file, commit a first intermediary version with comments over each ""migration block"" :// migrating method1 :void medthod1() const;//migrating calculation :void calculation() const;//etc ...2- After this first commit, write your actual migration, keeping the comments :// migrating method1 :void method1() const {    //this method does nifty stuff}// migrating calculation :void calculation() const {    return _a + _d;}//etc ...and commit this version.3- Finally, remove the unneeded, noisy comments, and commit this last version.When exploring the git history, the migration will show up as 3 commits, you should have a clear view of what was rewritten  when inspecting the differences intoduces by commit 2-."
"Adding Git to Windows 7/8/8.1 PathNote: You must have msysgit installed on your machine. Also, the path to my Git installation is ""C:\Program Files (x86)\Git"". Yours might be different. Please check where yours is before continuing.Open the Windows Environment Variables/Path Window.Right-click on My Computer -> PropertiesClick Advanced System Settings link from the left side columnClick Environment Variables in the bottom of the windowThen under System Variables look for the path variable and click editAdd the pwd to Git's binary and cmd at the end of the string like this:;%PROGRAMFILES(x86)%\Git\bin;%PROGRAMFILES(x86)%\Git\cmdNow test it out in PowerShell. Type git and see if it recognizes the command.Source: Adding Git to Windows 7 PathJust use the Git Bash instead of cmd.Run the following command at your node.js command prompt where ""<git path>"" is the path to your git bin folder:set PATH=%PATH%;<git path>;So, like this:set PATH=%PATH%;C:\Program Files\Git\bin;Or this: (Notice the (x86) )set PATH=%PATH%;C:\Program Files (x86)\Git\bin;This will add git to your path variables. Be sure you type it correctly or you could possibly delete your path vars which would be bad.Make sure you installed Git with the second or third option selected from the list. It will penetrate the Git command to cmd by modifying PATH automatically ;)I had the same error in Windows. Adding git to the path fixed the issue. G:\Dropbox\Development\xampp\htdocs.penfolds.git\penfolds-atg-development>bower installbower bootstrap#~3.0.0          ENOGIT git is not installed or not in the PATHG:\>PATHPATH=E:\Program Files\Windows Resource Kits\Tools\;G:\Dropbox\Development\xampp\htdocs.penfolds.git\penfolds-atg-development>set PATH=%PATH%;E:\Program Files\Git\bin;G:\Dropbox\Development\xampp\htdocs.penfolds.git\penfolds-atg-development>bower installbower bootstrap#~3.0.0      not-cached git://github.com/twbs/bootstrap.git#~3.0.0bower bootstrap#~3.0.0         resolve git://github.com/twbs/bootstrap.git#~3.0.0When you ran the git install, you probably didn't choose:""Use Git from the Windows Command Prompts""during the installation.Re-run git install, and choose that option.You are missing the ENVIRONMENT PATH. Follow these steps:Search for 'Edit the system environment variables'.Click on 'Environment Variables'.In the 'System variables' section, scroll down and click on the variable 'Path'. Click 'Edit'.Append this text to the end of the 'Variable value'.;%PROGRAMFILES%\Git\bin;%PROGRAMFILES%\Git\cmdI am also getting the same error and the solution is first to check if the ""Git"" is installed or not in the system and if not please install it.After installation, open ""Git Bash"" from Windows and go to your project (same way you go in command prompt using ""cd path"").Then run the same ""Bower install command"". It will work as expected.I bumped into this problem on a cPanel CentOS 6 linux machine.The solution for me was to symlink the cPanel git to /usr/local/bin/gitln -s /usr/local/cpanel/3rdparty/bin/git /usr/local/bin/gitI also got the same problem from cmd and resolved using the following steps.First install the https://msysgit.github.io/ (if not alredy installed).Then set the Git path as suggested by skinneejoe:set PATH=%PATH%;C:\Program Files\Git\bin;Or this (notice the (x86)):set PATH=%PATH%;C:\Program Files (x86)\Git\bin;"
"Ok, I tracked it down. Although the error report gave me paths like 'features/authentication/administrator_logs_in.feature', git status shows the offending path as 'features/Authentication/administrator_logs_in.feature' (different capitalisation). I'm on MS Windows, so they look the same to my system but apparently not to git. The version in the error report is the correct one.I tried solving it using git to rename the files, but that was rejected because the destination file already existed so I had to use git to move the files to a new location, commit, then use git to move them back (with the correct capitalisation)."
"that will not side step the issue. You now have conflict markers in your file!The whitespace issue are warnings and you should not have as many legitimate conflicts. If the file is a nightmare to resolve, you may need to reconstruct it by hand. This depends on what you're doing though.Many times the two bases are so different that each commit you are rebasing make you deal with this monstrous conflict. I tend to steer clear of rebase workflows and subscribe to merge/reset. Here's what I do: http://dymitruk.com/blog/2012/02/05/branch-per-feature/If your issues are only whitespace problems like line endings, you can try and clean up your repository by doing a filter branch or an interactive rebase on each side first to get whitespace on each commit to be consistent.Also I use beyond compare 3 or Perforce Merge to do conflict resolutions. BC3 is syntax aware and should deal with whitespace the best. A lot of times, it won't even open up as it will resolve the conflicts for you and you can just continue.I think most diff viewers (specially those with a GUI) let you select how to handle whitespace changes.I'd suggest you to use something like meld as your git mergetool to auto-correct those conflicts. When meld is launched, set it's whitespace-handling policy (from the Text filters tab of Preferences panel), and it will auto-adjust those changes.I faced the same problem today: rebase fails due to conflicts caused by whitespace errors.After failed trials with different settings for the whitespace option (git rebase --whitespace=fix and git rebase --whitespace=nowarn), the solution that worked for me was to ignore trailing whitespace errors in the recursive merging strategy (git rebase --abort any running rebase first if needed):git rebase -Xignore-space-at-eol <newbase>Depenending on the kind of whitespace errors, options -Xignore-space-change and -Xignore-all-space might be more useful. I don't know if the option --ignore-whitespace would have also worked."
"Add .idea directory to the list of ignored filesFirst, add it to .gitignore, so it is not accidentally committed by you (or someone else) again:.ideaRemove it from repositorySecond, remove the directory only from the repository, but do not delete it locally. To achieve that, do what is listed here:Git: Remove a file from the repository without deleting it from the local filesystemSend the change to othersThird, commit the .gitignore file and the removal of .idea from the repository. After that push it to the remote(s).SummaryThe full process would look like this:$ echo '.idea' >> .gitignore$ git rm -r --cached .idea$ git add .gitignore$ git commit -m '(some message stating you added .idea to ignored entries)'$ git push(optionally you can replace last line with git push some_remote, where some_remote is the name of the remote you want to push to)You can remove it from the repo and commit the change.git rm .idea/ -r --cachedgit add -u .idea/git commit -m ""Removed the .idea folder""After that, you can push it to the remote and every checkout/clone after that will be ok.You can rewrite git history:$ git reset --soft HEADNow you have your local repo like before the commit. You can $ git reset --soft HEAD~Nwhere N is the number of commit you want to ""reset""."
"NOTE: This advice is now out-dated as per comment since git 1.6.1. Git used to behave this way, and no longer does.Git by default attempts to store symlinks instead of following them ( for compactness, and it's generally what people want ) However, I accidentally managed to get it to add files beyond the symlink when the symlink is a directory.i.e.:  /foo/   /foo/baz  /bar/foo --> /foo   /bar/foo/baz by doing  git add /bar/foo/bazit appeared to work when I tried it, that behavior was however unwanted by me at the time, so I can't give you info beyond that.What I did to add to get the files within a symlink into git (I didn't use a symlink but):sudo mount --bind SOURCEDIRECTORY TARGETDIRECTORYdo this command in the git managed directory. TARGETDIRECTORY has to be created before the SOURCEDIRECTORY is mounted into it.Works fine on Linux but not on OS X! that trick helped me with subversion too. I use it to include files from an Dropbox account, where a webdesigner does his stuff.Why not create symlinks the other way around? Meaning instead of linking from the git repository to the application directory, just link the other way around.e.g. lets say I am setting up an application installed in ~/application that needs a configuration file config.confI add config.conf to my git repository e.g. at ~/repos/application/config.confthen I create a symlink from ~/application by running  ln -s ~/repos/application/config.confThis approach might not always work but it worked well for me so far.Use hard links instead. This differs from a soft (symbolic) link. All programs, including git will treat the file as a regular file. Note that the contents can be modified by changing either the source or the destination.On OSXIf you already have git and Xcode installed, install hardlink. It's a microscopic tool to create hard links. To create the hard link, simply:hln source destinationOn Linux and other Unix flavorsThe ln command can make hard links:ln source destinationOn Windows (Vista, 7, 8, ‰Û_)Someone suggested to use mklink create a junction on Windows, but I haven't tried it:mklink /j ""source"" ""destination""I used to add files beyond symlinks for quite some time now.  This used to work just fine, without making any special arrangements.  Since I updated to git 1.6.1, this does not work any more.You may be able to switch to git 1.6.0 to make this work. I hope that a future version of git will have a flag to git-add allowing it to follow symlinks again.This is a pre-commit hook which replaces the symlink blobs in the index, with the content of those symlinks.Put this in .git/hooks/pre-commit, and make it executable:#!/bin/sh# (replace ""find ."" with ""find ./<path>"" below, to work with only specific paths)# (these lines are really all one line, on multiple lines for clarity)# ...find symlinks which do not dereference to directories...find . -type l -exec test '!' -d {} ';' -print -exec sh -c \# ...remove the symlink blob, and add the content diff, to the index/cache    'git rm --cached ""$1""; diff -au /dev/null ""$1"" | git apply --cached -p1 -' \# ...and call out to ""sh"".    ""process_links_to_nondir"" {} ';'# the endNotesWe use POSIX compliant functionality as much as possible; however, diff -a is not POSIX compliant, possibly among other things.There may be some mistakes/errors in this code, even though it was tested somewhat.hmmm mount --bind doesn't seem to work on Darwin.Does anyone have a trick that does?[edited]OK I found the answer on OSX is to make a hardlink. Except that that API is not exposed via ln so you have to use your own tiny program to do this. Here is a link to that program:http://stackoverflow.com/questions/1432540/creating-directory-hard-links-in-macos-xEnjoy!With Git 2.3.2+ (Q1 2015), there is one other case where Git will not follow symlink anymore: see commit e0d201b by Junio C Hamano (gitster) (main Git maintainer)apply: do not touch a file beyond a symbolic linkBecause Git tracks symbolic links as symbolic links, a path that has a symbolic link in its leading part (e.g. path/to/dir/file, where path/to/dir is a symbolic link to somewhere else, be it inside or outside the working tree) can never appear in a patch that validly applies, unless the same patch first removes the symbolic link to allow a directory to be created there.Detect and reject such a patch.Similarly, when an input creates a symbolic link path/to/dir and then creates a file path/to/dir/file, we need to flag it as an error without actually creating path/to/dir symbolic link in the filesystem.Instead, for any patch in the input that leaves a path (i.e. a non deletion) in the result, we check all leading paths against the resulting tree that the patch would create by inspecting all the patches in the input and then the target of patch application (either the index or the working tree).This way, we:catch a mischief or a mistake to add a symbolic link path/to/dir and a file path/to/dir/file at the same time, while allowing a valid patch that removes a symbolic link path/to/dir and then adds a file path/to/dir/file.That means, in that case, the error message won't be a generic one like ""%s: patch does not apply"", but a more specific one:affected file '%s' is beyond a symbolic link"
"when your library is project with source and not jar:Right click on project dir - PropertiesChoose Android on left side In a lower ""Library"" section will be reference to old library with red crossremove itadd library from new location enjoywhen your library is jar:Right click on project dir - PropertiesChoose Java build Path on left sideChoose Libraries tabremove old librariesadd new external jars from your locationenjoyor:do steps 1-4 and then:copy your jar library to libs dir of android projectright click on newly copied jar in libschoose build path -> add to build path from menuenjoy Hope it helps you and somebody else ;)"
"The server where you are pushing to should use bare repository.How to convert a git repository from normal to bare ?Why Git won't let you push to non-bare repositoriesThe original poster says:One solution is to run the following command:git config receive.denyCurrentBranch ignoreAfter this it works, but I would like to know why I need to use this  option. Is this the only option? What are the consequences of doing  this?As I point out in my answer to a similar question, since Git version 1.6.2, Git won't let you push to a non-bare repository by default. This is because the git push command only updates the branch and HEAD references on the remote repository. What it doesn't do is also update the working-copy and staging-area in that non-bare remote.As a consequence, when you use git status in the remote repo, you'll see that the repo's previous state is still present in the working copy (and staged in the index):$ git statusOn branch masterChanges to be committed:  (use ""git reset HEAD <file>..."" to unstage)        new file:   previous-state.txtIf you look at the error message that you got when you first tried to push to your non-bare remote repo with the receive.denyCurrentBranch setting set to the default refuse value, you'll see that the message tells you basically the same thing:error: refusing to update checked out branch: refs/heads/mastererror: By default, updating the current branch in a non-bare repositoryerror: is denied, because it will make the index and work tree inconsistenterror: with what you pushed, and will require 'git reset --hard' to matcherror: the work tree to HEAD.error:error: You can set 'receive.denyCurrentBranch' configuration variable toerror: 'ignore' or 'warn' in the remote repository to allow pushing intoerror: its current branch; however, this is not recommended unless youerror: arranged to update its work tree to match what you pushed in someerror: other way.You should really just push to bare Git repositoriesAs pointed out in some of the other answers, you shouldn't really be pushing to a non-bare repository, for the reasons I pointed out above, and which Git itself is telling you.So like what this answer states, a simple way to convert an existing non-bare repo to a bare one is to simply reclone it as a bare repo:git clone --bare old-repoOr you could try messing around with the core.bare config setting, as detailed in this answer.You should have a bare repository on the server, not one with a checked-out working tree. Git is telling you it refuses to overwrite the branch that is currently checked out on the server.See this answer for information on how to convert your non-bare repository on the server to a bare one."
"Looks like you have a corrupt tree object. You will need to get that object from someone else. Hopefully they will have an uncorrupted version.You could actually reconstruct it if you can't find a valid version from someone else by guessing at what files should be there. You may want to see if the dates & times of the objects match up to it. Those could be the related blobs. You could infer the structure of the tree object from those objects.Take a look at Scott Chacon's Git Screencasts regarding git internals. This will show you how git works under the hood and how to go about doing this detective work if you are really stuck and can't get that object from someone else.I had the same problem (don't know why).This fix requires access to an uncorrupted remote copy of the repository, and will keep your locally working copy intact, but you will lose the record of any commits that were not pushed, and will have to recommit them.  You will also lose any stashes.Execute these commands from the parent directory above your repo (replace 'foo' with the name of your project folder):Create a backup of the corrupt directory:cp -R foo foo-backupMake a new clone of the remote repository to a new directory:git clone git@www.mydomain.de:foo foo-newcloneDelete the corrupt .git subdirectory:rm -rf foo/.gitMove the newly cloned .git subdirectory into foo:mv foo-newclone/.git fooDelete the rest of the temporary new clone:rm -rf foo-newcloneOn Windows you will need to use:copy instead of cp -R rmdir /S instead of rm -rfmove instead of mvNow foo has its original .git subdirectory back, but all the local changes are still there. git status, commit, pull, push, etc. work again as they should.Your best bet is probably to simply re-clone from the remote repo (ie. Github or other).  Unfortunately you will lose any unpushed commits and stashed changes, however your working copy should remain intact.First make a backup copy of your local files.  Then do this from the root of your working tree:rm -fr .gitgit initgit remote add origin [your-git-remote-url]git fetchgit reset --mixed origin/mastergit branch --set-upstream-to=origin/master master  Then commit any changed files as necessary.Trygit stashThis worked for me.  It stashes anything you haven't committed and that got around the problem.I ran into this problem after my computer crashed while I was writing a commit message. After rebooting, the working tree was as I had left it and I was able to successfully commit my changes.However, when I tried to run git status I got thiserror: object file .git/objects/xx/12345 is emptyfatal: loose object xx12345 (stored in .git/objects/xx/12345 is corruptIn my case, unlike most of the other answers, I wasn't trying to recover any data. I just needed Git to stop complaining about the empty object file.tl;drThe ""object file"" is git's hashed representation of a real file that you care about. Git thinks it should have a hashed version of some/file.whatever stored in .git/object/xx/12345, and fixing the error turned out to be mostly a matter of figuring out which file the ""loose object"" was supposed to represent.DetailsPossible options seemed to beDelete the empty fileGet the file into a state acceptable to GitRestore the entire computer from a backup and redo the work. This would have taken about 90 minutes. In the end, I spent over 2 hours trying out solutions 1 and 2, so maybe that's what I should have done.Approach 1: Remove the object fileThe first thing I tried was just moving the object filemv .git/objects/xx/12345 ..That didn't work - git began complaining about a broken link. On to Approach 2Approach 2: Fix the fileLinus Torvalds has a great writeup of how to recover an object file that solved the problem for me. Key steps are summarized here.$> # Find out which file the blob object refers to$> git fsckbroken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8           to    blob xx12345missing blob xx12345$> git ls-tree 2d926...10064 blob xx12345  your_file.whateverThis tells you what file the empty object is supposed to be a hash of. Now you can repair it.$> git hash-object -w path/to/your_file.whateverAfter doing this I checked .git/objects/xx/12345, it was no longer empty, and git stopped complaining.I got this error after my (windows) machine decided to reboot itself.Thankfully my remote repo was up to date so I just did a fresh git-clone..In answer of @user1055643 missing the last step:$ rm -fr .git$ git init$ git remote add origin your-git-remote-url$ git fetch$ git reset --hard origin/master$ git branch --set-upstream-to=origin/master masterI just experienced this - my machine crashed whilst writing to the Git repo, and it became corrupted. I fixed it as follows.I started with looking at how many commits I had not pushed to the remote repo, thus:gitk &If you don't use this tool it is very handy - available on all operating systems as far as I know. This indicated that my remote was missing two commits. I therefore clicked on the label indicating the latest remote commit (usually this will be /remotes/origin/master) to get the hash (the hash is 40 chars long, but for brevity I am using 10 here - this usually works anyway).Here it is:14c0fcc9b3I then click on the following commit (i.e. the first one that the remote does not have) and get the hash there:04d44c3298I then use both of these to make a patch for this commit:git diff 14c0fcc9b3 04d44c3298 > 1.patchI then did likewise with the other missing commit, i.e. I used the hash of the commit before and the hash of the commit itself:git diff 04d44c3298 fc1d4b0df7 > 2.patchI then moved to a new directory, cloned the repo from the remote:git clone git@github.com:username/repo.gitI then moved the patch files into the new folder, and applied them and committed them with their exact commit messages (these can be pasted from git log or the gitk window):patch -p1 < 1.patchgit commitpatch -p1 < 2.patchgit commitThis restored things for me (and note there's probably a faster way to do it for a large number of commits). However I was keen to see if the tree in the corrupted repo can be repaired, and the answer is it can. With a repaired repo available as above, run this command in the broken folder:git fsck You will get something like this:error: object file .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390d is emptyerror: unable to find ca539ed815fefdbbbfae6e8d0c0b3dbbe093390derror: sha1 mismatch ca539ed815fefdbbbfae6e8d0c0b3dbbe093390dTo do the repair, I would do this in the broken folder:rm .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390dcp ../good-repo/.git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390d .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390di.e. remove the corrupted file and replace it with a good one. You may have to do this several times. Finally there will be a point where you can run fsck without errors. You will probably have ""dangling commit"" and ""dangling blob"" lines in the report, these are a consequence of your rebases and amends in this folder, and are OK. The garbage collector will remove them in due course.Thus (at least in my case) a corrupted tree does not mean unpushed commits are lost.I had this same problem in my bare remote git repo. After much troubleshooting, I figured out one of my coworkers had made a commit in which some files in .git/objects had permissions of 440 (r--r-----) instead of 444 (r--r--r--). After asking the coworker to change the permissions with ""chmod 444 -R objects"" inside the bare git repo, the problem was fixed.Runnning git stash; git stash pop fixed my problemI followed many of the other steps here; Linus' description of how to look at the git tree/objects and find what's missing was especially helpful. git-git recover corrupted blobBut in the end, for me, I had loose/corrupt tree objects caused by a partial disk failure, and tree objects are not so easily recovered/not covered by that doc.In the end, I moved the conflicting objects/<ha>/<hash> out of the way, and used git unpack-objects with a pack file from a reasonably up to date clone. It was able to restore the missing tree objects.Still left me with a lot of dangling blobs, which can be a side effect of unpacking previously archived stuff, and addressed in other questions hereI was getting a corrupt loose object error as well../objects/x/xI successfully fixed it by going into the directory of the corrupt object. I saw that the users assigned to that object was not my git user's. I don't know how it happened, but I ran a chown git:git on that file and then it worked again.This may be a potential fix for some peoples' issues but not necessary all of them."
"It's probably because your SSH key has been compromised. Make a new one and add it to your GitHub account.for me I simply had to add configure my git username and email with the following commands:git config --global user.email ""you@example.com""git config --global user.name ""Your Name""git-bash reports fatal: Unable to create '/.git/index.lock': File exists. Deleting index.lock makes the error go away.If you're running windows 7: I was trying to decide the best way to do this securely, but the lazy way is right-click the parent folder -> click the ""properties"" button -> click the ""security"" tab -> click the ""edit"" button - > click the group that starts with ""Users"" - > click the checkbox that says ""full control"" -> click all the OK's to close the dialogs. I realize this might circumvent windows ""security"" features, but it gets the job done.In my case a folder in my directory named as the git-repository on the server caused the failure.on win7 64:git-gui gives a good answer: a previous git has crashed and left a lock file. Manually remove.In my case, this was in .git/ref/heads/branchname.lock.delete, and error 128 goes away. It surprises that tortoisegit doesn't give such an easy explanation.In my case, it was because of the proxy. A proxy was needed in the corporate network and TortoiseGit / Git does not seems to automatically get information from Windows internet settings. Setting up the proxy address solved the issue.For me, I tried to check out a SVN-project with TortoiseGit. It worked fine if I used TortoiseSVN though. (May seem obvious, but newcomers may stumble on this one)I was having this same issue and I resolved it in the following way...I have the NVIDIA ""Tegra Android Development Pack"" installed and it seems to also have a version of mysysgit.exe with it. TortoiseGit automatically found that installation location (instead of the standard git installation) and auto-populated it in the settings menu.To correct this, go to: ""Settings -> General"" and there is a field for the path to mysysgit.exe. Make sure this is pointing to the correct installation.Deleting index.lock worked for meAn quick solution would be to create a new local directory for example c:\git_2014, In this directory rightklick and choose Git Clone"
"It might be a good idea to customize you bash, like this:0 ;) $ cat ~/.bashrcPS1=""\[\033[01;37m\]\$? \$(if [[ \$? == 0 ]]; then echo \""\[\033[01;32m\];)\""; else echo \""\[\033[01;31m\];(\""; fi) $(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi)\[\033[01;34m\] \w \$\[\033[00m\] ""It displays a green happy face ;) if the last command finished with no errors, and a red sad face ;( if it failed, for example:0 ;) $ cat 1.sh#!/bin/bashexit 10 ;) $ ./1.sh1 ;( $ 0 ;( $ cat 1.sh#!/bin/bashexit 00 ;) $ ./1.sh0 ;) $You can customize the output however you want.The example was taken from hereIn action:UpdateFor Git 2.5 for windows it should be if ! \$?; then  PS1=""\[\e[1;32m\]Nice Work!\n\[\e[0;32m\]\u@\h \[\e[0;33m\]\w\[\e[0;37m\]\n\$ "" else  PS1=""\[\e[1;31m\]Something is wrong!\n\[\e[0;32m\]\u@\h \[\e[0;33m\]\w\[\e[0;37m\]\n\$ ""fiBest way to deal with this is to colorize your hook output instead of the PS1 prompt, like so:red='\033[0;31m'green='\033[0;32m'yellow='\033[0;33m'no_color='\033[0m'echo -e ""\n${yellow}Executing pre-commit hook${no_color}\n""... do your hook stuff ...if [[ something bad happens ]]; then    >&2 echo -e ""\n${red}ERROR - Something BAD happened!\n${no_color}""    exit 1fiecho -e ""${green}Git hook was SUCCESSFUL!${no_color}\n""Note: Using -e with echo is required - it specifies to interpret special characters, like colors and new lines. (http://ss64.com/bash/echo.html)"
"git is searching for the linereturn 0   unless  $cmd  &&  exists $DB::commands->{ $cmd };but your code contains the line return 0   unless  $cmd and exists $DB::commands->{ $cmd };(I marked the difference between && and and) whence the patch does not apply.You can find a nice tutorial about git conflict resolution here."
"It looks very much like you have failed to run a git remote add command. Usually this would look likegit remote add origin ssh://git@bitbucket.org/[USERNAME]/[REPONAME].gitBut you should be able to find the correct info for your repository if you follow the docs here: https://confluence.atlassian.com/display/BITBUCKET/Importing+code+from+an+existing+projectI just had the same problem, this may help you:#initialize git in the folder   git init#add remote repository (this did not work for me)git remote add origin https://myusername@bitbucket.org/myusername/myrepo.git#...so i changed it later (after some git add and commit commands)git remote set-url origin https://myusername@bitbucket.org/myusername/myrepo.git#now it worked:git push -u origin master"
"It works for me:[merge]    keepBackup = false;    tool = p4merge[mergetool ""p4merge""]    path = C:/Program Files/Perforce/p4merge.exe    cmd = \""C:/Program Files/Perforce/p4merge.exe\"" ""$BASE"" ""$LOCAL"" ""$REMOTE"" ""$MERGED""    keepTemporaries = false    trustExitCode = false    keepBackup = false[difftool]    prompt = false[mergetool]    prompt = falseYou may also need to restart your git console if you've just installed p4merge, for the updated environment variables to register.After I installaed P4Merge, I followed the instructions on this page and it works perfectly for me.https://gist.github.com/tony4d/3454372"
"To compile git, you need not only the curl binaries, but also the development package (I believe it is called libcurl-dev or something similar in Ubuntu), as well as the zlib expat and gettext development packages. To build the documentation, you will need the asccidoc, makeinfo, docbook2X and dblatex programs."
"You have to add the location of git's bin to your PATH. On Windows, open up Start, search for ""Environment Variables"", click ""Edit environment variables for your account"", go to PATH, and append ;C:\Program Files (x86)\Git\bin to the end of the PATH variable. You need the leading ; to separate the various paths you have there. After this you may need to log off and log on again for the changes to take affect.Get git from here: http://msysgit.github.com/Note: You must have msysgit installed on your machine. Also, the path to my git install is ""C:\Program Files (x86)\Git"" yours might be different. Please check were yours is before continuing.Right-Click on My ComputerClick Advanced System Settings link from the left side columnClick Environment Variables in the bottom of the windowThen under System Variables look for the path variable and click editAdd the pwd to git's bin and cmd at the end of the string like this:;C:\Program Files (x86)\Git\bin;C:\Program Files (x86)\Git\cmdSource: http://blog.countableset.ch/2012/06/07/adding-git-to-windows-7-path/"
"It has nothing to do regarding the many similar questions.  The key is ""remote: error: "".  The problem is the remote repository (GitLab which is similar to GitHub).  Making all associated files owned by git solved the problem."
"You need a clean state to change branches. The branch checkout will only be allowed if it does not affect the 'dirty files' (as Charles Bailey remarks in the comments).Otherwise, you should either:stash your current change orreset --hard HEAD  (if you do not mind losing those minor changes) orcheckout -f (When switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes. )If you want to discard the changes,git checkout -- <file>git checkout branchIf you want to keep the changes,git stash savegit checkout branchgit stash popwell, it should begit stash savegit checkout branch// do somethinggit checkout oldbranchgit stash popFollow, $: git checkout -f$: git checkout next_branchIf you have made changes to files that Git also needs to change when switching branches, it won't let you. To discard working changes, use:git reset --hard HEADThen, you will be able to switch branches.Note that if you've merged remote branches or have local commits and want to go back to the remote HEAD you must do:git reset --hard origin/HEADHEAD alone will only refer to the local commit/merge -- several times I have forgotten that when resetting and end up with ""your repository is X commits ahead.."" when I fully intended to nuke ALL changes/commits and return to the remote branch."
"As mentioned in ""git rebase: error: cannot stat 'file': Permission denied"", this should be an error seen mainly on Windows.It is usually related to files locked by a Windows process, either an anti-Virus or an IDE (Visual Studio, Eclipse, ...).Make sure no other processes are running when trying to make your checkout or merge, and see if the issue persists.TortoiseGIT process that blocks those files. Open task manager and end process TGitCache.exe. The OP virtuesplea reports:Killing the TGitCache.exe process (from the other topic) ended up being the solution"
"You've got the syntax for the scp-style way of specifying a repository slightly wrong - it has to be:[user@]host.xz:path/to/repo.git/... as you can see in the git clone documentation.  You should use instead the URL:git@skarp.beanstalkapp.com:/gittest.giti.e. in the URL you're using, you missed out the : (colon)To update the URL for origin you could do:git remote set-url origin git@skarp.beanstalkapp.com:/gittest.gitThis is typically because you have not set the origin alias on your Git repository.Trygit remote add origin URL_TO_YOUR_REPOThis will add an alias in your .git/config file for the remote clone/push/pull site URL. This URL can be found on your repository Overview page.I met a similar problem when I tried to store my existing repo in my Ubunt One account, I fixed it by the following steps:Step-1: create remote repo$ cd ~/Ubuntu\ One/$ mkdir <project-name>$ cd <project-name>$ mkdir .git$ cd .git$ git --bare initStep-2: add the remote $ git remote add origin /home/<linux-user-name>/Ubuntu\ One/<project-name>/.gitStep-3: push the exising git reop to the remote$ git push -u origin --all"
"You need to add the origin remote:Delete the current onegit remote rm originAdd the git remote link ex: (https://user@bitbucket.org/test.git or https://github.com/user/test.git)git remote add origin linkgit pull origin master (or other branch)If you are trying to pull you app from herokugit pull heroku masterOr if you try to upload a new version to herokugit push heroku master[EDIT]Please fallow this tutorial, when you reach the bottom of the page click on Rails."
"UPDATEThere are two general reasons why Git will ignore a file: gitignore and submodules.To be more specific, the following conditions will cause Git to ignore a file when 'git add' is invoked:The file matches a pattern $GIT_DIR/exclude.The file matches a pattern in a .gitignore file inside the repo.The file matches a pattern in a user-specific .gitignore file (specified by 'git config --global core.excludesfile').The file is part of a submodule.Forcing 'git add' on an ignored file:You can check to see if a particular file is ignored by invoking 'git add full/path/to/file'.The man page states that ""If an ignored file is explicitly specified on the command line, the command will fail with a list of ignored files.""If the file is ignored, you can force it to be added with 'git add --force full/path/to/file'.Instructions to eliminate a submodule reference:As noted in a previous answer, shells/smallApps is a submodule in your repository.  If the file is part of a submodule, the situation is more complex.  You cannot modify the contents of the submodule from within the main project.If you want to eliminate the submodule reference and directly track the files in your main repo, there are several steps that must be performed.  You cannot simply remove the "".git"" directory from the submodule.  There are three links between your main repository and the submodule:The .gitmodules file in your main repo.An entry in the .git/config of your main repo.Any commits related to the submodule in your main repo history.Per this related SO question, you need to perform the following steps to completely remove the sub-module:NOTE: If another branch depends on this submodule, then removing it can corrupt your repository!  This is a dangerous operation...use with caution.Delete the relevant line from the .gitmodules file.Delete the relevant section from .git/config.Run git rm --cached path_to_submodule (no trailing slash).CommitThe files that were part of the submodule are now untracked and you may decide to keep or delete them as desired (with the one caveat mentioned below).If you don't need these files, you may simply delete them.Caveat: If you want to keep these files (which you appear to want), you must manually remove the .git directory from the submodule folder:cd path_to_submodulerm .gitcd ..git add path_to_submodulegit statusgit commitUPDATE:Request for further information:To assist debugging this issue, please post the output of the following complete session of commands:cd to the top-level directory in your repols -alcat .git/configfind . -name "".git*""git statusgit add editorsgit add shellsgit statusBased on the description of what you have done so far, I expect to see:No .gitmodules file anywhereOnly one .git directory (found at the root of your repo)No .git directory in editors/vim/vimdocletNo .git directory in shells/smallAppsI see you've got git add saying something about submodules. Do you have nested Git repositories? Do this:$ find . -name .gitHow many .git directories are listed? If there is more than one, then you've got multiple nested repositories and that could be a cause of some of this confusion.You should consider posting this question to the Git mail list (git@vger.kernel.org).  You will likely get a more prompt and complete response.If you do decide to post there, be sure to include:A description of what you are trying to achieve.A description of the problem you have encountered.A complete session log showing:cd to the top-level directory in your repols -alcat .git/configfind . -name "".git*""git statusgit add editorsgit add shellsgit status"
"Not sure exactly what, but something got out of whack during the upgrade. Uninstall CommandLineTools by typing sudo rm -r /Library/Developer/CommandLineTools then reinstall. I just typed some git command like: git status and let the OS prompt me to install the CommandLineTools. Everything is happy now."
"You might want to set core.safecrlf to ""warn"", if you want only warning and not a fatal error.From ""git config"" mange page:core.safecrlfIf true, makes git check if converting CRLF is reversible when end-of-line conversion is active. Git will verify if a command modifies a file in the work tree either directly or indirectly.  For example, committing a file followed by checking out the same file should yield the original file in the work tree. If this is not the case for the current setting of core.autocrlf, git will reject the file.  The variable can be set to ""warn"", in which case git will only warn about an irreversible conversion but continue the operation.CRLF conversion bears a slight chance of corrupting data.  When it is enabled, git will convert CRLF to LF during commit and LF to CRLF during checkout.A file that contains a mixture of LF and CRLF before the commit cannot be recreated by git.  For text files this is the right thing to do: it corrects line endings such that we have only LF line endings in the repository.But for binary files that are accidentally classified as text the conversion can corrupt data.If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in .gitattributes.  Right after committing you still have the original file in your work tree and this file is not yet corrupted. You can explicitly tell git that this file is binary and git will handle the file appropriately.Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished.  In both cases CRLFs are removed in an irreversible way. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data.I prefer identifying the exact files or types of file I want to force the eol with .gitattributes files only (with core.eol settings, which you have), and leave autocrlf to false.In case of text fiels with mixed eol, this blog post suggests, for instance, to:If you have Notepad++ installed in your computer, simply follow these steps.Open the file that is having the Fatal issue.Click Edit -> EOL Conversion then select Windows Format or to any that you‰Ûªre having an issue committing.git config --global core.safecrlf false"
"You have a few things going on strange here, one is that you are not using sed like a stream. clean takes standard input runs it through the command and modifies the file as standard output. its more like cat foo.txt | sed 's/foo/bar/'. So there is no need for -i and it will break things. Other than that I think the regex isn't liked by git, you can do better in this case by being more specific.[filter ""updatedate""]    clean = sed ""s/2011-20[01][0-9]/2011-$(date '+%Y')/""Note that this won't change your local copy, you will have to pull to see the changes in the pulled directory, thus the smudge command."
"Did you add the local folder into the git environment so as to enable it to know where to push it?normally you would: cd into foldertype git init type git remote add originhttps://github.com/user/repo.gitnext steps depend on whether you have code you want to store in a fresh repo online or to pull a repo.Pull is:git pull origin masterpush would be:git add . git commit -m ""Original Commit""git push origin master"
"As this thread illustrates, this is usually a disk space issue:$ git statusfatal: unable to write new_index fileOne cause of this that I found was that my file system had run out of space.  Finding large directories with something like the following helped clean up some log files that had run wild :$ du -h / | grep ^[0-9.]*GNote: you can also see it fora resource issue with msysgit and Egit (Git for Eclipse):Problem still remained so I ran File Monitor from Sysinternals Suite.  It seems that Eclipse is accessing index file constantly and blocks command line gitfor a classic anti-virus issue:Yeah, looks like Windows Defender strikes again. I always forget to disable that damn thing. I can't believe how broken it is. Destroys Blu-ray playback at home, breaks Git at work...If you are using TortoiseGit, this error (or more recently: error: Unable to write index.) is very likely caused by having TortoiseGit icon overlays enabled. To disable icon overlays, go to: TortoiseGit > Settings > Icon Overlays and set Status cache to None. This may be fixed in a future version of TortoiseGit, but for now it seems to be common.I was getting the same error while I was merging a git repo that was sshfs mounted. There was no shortage of space anywhere.In my case the solution was to add an -o workaround=rename option to the sshfs mount command.Like so:sshfs -o idmap=user -o uid=[lokal uid] -o gid=[lokal gid] -o workaround=rename [host]: [mountpoint]I have followed every solution here and none of them worked. I have no shortage of disk space, I have disabled Windows Defender, disabled icon overlays and whatnot. I had tons of files to import and maybe this was causing the problem (I had boost libraries among other things).I simply opened ""Git Bash"" and issued a number of git add and a git commit and all went well. This has something to do with TortoiseGit but I am not sure what. It seems to choke on a large number of files or large directory depth.I got this error using Cygwin and git-svn. The solution that worked for me was to do garbage collection (odd as it seemed at the time):$ git gcI have found solution. Just need to free some disk space.I was having this issue, but I was able to commit with msysgit.  I updated tortoisegit, and also noticed that my msysgit version was not in sync with tortoise git.  I'm not sure if the latest version fixed it, or if it was due to having different versions of tortoise and msysgit.  Anyway, another thing to check.  It all started working after updating them both to TortoiseGit 1.7.10.0 git version 1.7.10.msysgit.1I had same problem. In my case above solutions didn't work.The reason behind this error is that the file .git/index was corrupted for some unknown reason. I just renamed the file to something else and run the  'git add .' command from git bash and it worked.Hope this helps someone."
"This has to do with the core.autocrlf global config option.  See this page on github and check out these stackoverflow answers, and more.It sounds like git is replacing your linefeeds (LF) with carriage-return line feeds (CRLF), so it's swapping the end line characters on the repository side while leaving them alone in your current working directory. See this link for a description of newline characters.If you want to avoid seeing that you could just change the newline characters in the New Full Car.mdl - it might do this when you pull from the repository, though if you've already pulled before it looks like it hasn't."
"It seems like you want the files ignored but they have already been commited. .gitignore has no effect on files that are already in the repo so they need to be removed with git rm --cached. The --cached will prevent it from having any effect on your working copy and it will just mark as removed the next time you commit. After the files are removed from the repo then the .gitignore will prevent them from being added again.But you have another problem with your .gitignore, you are excessively using wildcards and its causing it to match less than you expect it to. Instead lets change the .gitignore and try this..bundle.DS_Storedb/*.sqlite3log/*.logtmp/public/system/images/public/system/avatars/WARNING: it will delete untracked files, so it's not a great answer to the question being posed. I hit this message as well. In my case, I didn't want to keep the files, so this worked for me:git clean  -d  -fx """"http://www.kernel.org/pub/software/scm/git/docs/git-clean.html-x means ignored files are also removed as well as files unknown to git.-d means remove untracked directories in addition to untracked files. -f is required to force it to run.Just force it : git checkout -f another-branchIf you're on OS X, it may be because a file's name has had certain characters change case. Try setting the following config option:git config core.ignorecase trueGit is telling you that it wants to create files (named public/system/images/9/... etc), but you already have existing files in that directory that aren't tracked by Git. Perhaps somebody else added those files to the Git repository, and this is the first time you have switched to that branch?There's probably a reason why those files in your develop branch but not in your current branch. You may have to ask your collaborators why that is.how do I get this working so I can switch branches without deleting those files?You can't do it without making the files disappear somehow. You could rename public to my_public or something for now.if I came back to this branch afterwards would everything be perfect as up to my latest commit?If you commit your changes, Git won't lose them. If you don't commit your changes, then Git will try really hard not to overwrite work that you have done. That's what Git is warning you about in the first instance here (when you tried to switch branches).Unfortunately neither git rm --cached or git clean  -d  -fx """" did it for me.My solution ended up being pushing my branch to remote, cloning a new repo, then doing my merge in the new repo. Other people accessing the repo had to do the same.Moral of the story: use a .gitignore file from inception.This happened to me on a Windows 8 system, using Git from the command prompt.  The rest of my team uses TFS, and I use Microsoft's git-tf to push/pull between TFS and my local Git repository.The problem arose due to some files that had been renamed only to change their case.  What appears to have happened was this:The files were checked in with mixed casing in their names.In a later commit, the file names were changed to all lower-case.git-tf initially got the files in mixed case.When the files were renamed to lower-case, git-tf didn't get the files because to Windows 8 those file names are equivalent.Since Git is case-sensitive, it complained that I had the mixed-case files that weren't in source control.  But using git status, I couldn't see any changes, since in the command prompt those file names are equivalent.The simplest solution for me was:git checkout a previous version of the project, well before those files were ever added.Then git checkout the latest version of the project, with the correct file casing.In my case git rm --cached didn't work.But i got it with a git rebaseI had the same problem when checking out to a branch based on an earlier commit. Git refused to checkout because of untracked files.I've found a solution and I hope it will help you too.Adding the affected directories to .gitignore and issuing $ git rm -r --cached on them is apparently not enough. Assume you want to make a branch based an earlier commit K to test some stuff and come back to the current version. I would do it in the following steps:Setup the untracked files: edit the .gitignore and apply $ git rm -r --cached on the files and directories you want the git to ignore. Add also the file .gitignore itself to .gitignoreand don't forget to issue $ git rm -r --cached .gitignore. This will ensure the the ignore behavior of git leaves the same in the earlier commits.Commit the changes you just made:$ git add -A$ git commitSave the current log, otherwise you may get problems coming back to the current version$ git log > ../git.logHard reset to the commit K $ git reset --hard version_kCreate a branch based on the commit K$ git branch commit_k_branchCheckout into that branch$ git checkout commit_k_branch Do your stuff and commit itCheckout back into master again$ git checkout masterReset to the current Version again$ git reset current_version or $ git reset ORIG_HEADNow you can reset hard to the HEADgit reset --hard HEADNOTE!Do not skip the next-to-last step (like e. g. $ git reset --hard ORIG_HEAD) otherwise the untracked files git complained above will get lost.I also made sure the files git complained about were not deleted. I copied them to a text-file and issued the command $ for i in $(cat ../test.txt); do ls -ahl $i; doneIf you checkout to the branch mentioned above again, do not forget to issue $ git status to ensure no unwanted changes appear.I was also facing a similar issue and i tried all the solutions posted above but it didn't workThe issue was caused when i renamed my onMusicUpdateListener.java to OnMusicUpdateListener.java in develop branch. Now master had onMusicUpdateListener.javaand develop had the same file as OnMusicUpdateListener.javaNow whenever i switched to master it gave me an errorThe following untracked working tree files would be overwritten by checkoutand then it aborted.In order to solve this, i forcefully checked out master branchand then renamed my onMusicUpdateListener.java to OnMusicUpdateListener.java, committed it and then merged it with develop branch.Then i updated my develop branch by merging it into master and now everything is back to normal and problem is solved.This could be a permission issue,change the ownership,sudo chown -v -R usr-name:group-name folder-name"
"I found that adding ""-i"" to the commit command fixes this problem for me. The -i basically tells it to stage additional files before committing.That is:git commit -i myfile.phpgit commit -am 'Conflicts resolved'This worked for me. You can try this also.You can use git commit -i for most cases but in case  it doesn't work You need to do  `git commit -m ""your_merge_message"". During a merge conflict you cannot merge one single file so you need to Stage only the conflicted file git commit -m ""your_merge_message""You probably got a conflict in something that you haven't staged for commit.  git won't let you commit things independently (because it's all part of the merge, I guess), so you need to git add that file and then git commit -m ""Merge conflict resolution"".  The -i flag for git commit does the add for you.If you just want to ditch the whole cherry-picking and commit files in whatever sets you want, git reset --soft <ID-OF-THE-LAST-COMMIT>gets you there.I got this when I did forgot the -m in my git commit when resolving a git merge conflict.git commit ""commit message"" should be git commit -m ""commit message""Your merge stopped in the middle of the action.You should add your files, and then 'git commit':git add file_1.php file_2.php file_3.phpgit commitCheersDuring a merge Git wants to keep track of the parent branches for all sorts of reasons.  What you want to do is not a merge as git sees it.  You will likely want to do a rebase or cherry-pick manually.For myself this happened in SourceTree when I tried to commit a merge before resolving all of the files. I then marked the last file resolved and yet it still gave me this error when trying to commit. I closed SourceTree and reopened it, and then it committed fine."
"You need to actually create the git repo. Simply calling 'heroku create' won't set one up for you. For an existing folder, you want enter it and run something like:git initgit add .git commit -m 'Initial commit'...and then you add the remote (fill in your heroku git repo name from heroku info here):git remote add heroku git@heroku.com:sushi.gitIf you're starting a fresh app and a git repo already exists in the current dir, heroku create will add the git remote for you, and you don't need to run that last command.mkdir new-appcd new-appgit initheroku createAfter that, create your app from that dir rails new . and run the git add and commit steps from above. Modify your app as desired, update git again with any changes, then git push heroku master to deploy. Run more .git/config from the app's root dir to see the config file with all of your app specific git settings. This will list your remote repos.Ha! Just found out that you actually need to have a git repo created before the heroku apps:create app_namecall. Simply do git initgit add .git commit -m ""Initial Commit.""and then do the app creation command. Hope this helps."
"I seriously doubt you really need that .../tmp/... directory. git add fails when there are any errors. If there is a problem adding any of the files you specified, nothing will be added.I suggest to ignore the tmp directory:echo tmp >> .gitignoregit add .This will ignore all tmp directories in the project. If you want to ignore specific tmp directories, you can specify their full path:echo path/to/AdminServer/tmp >> .gitignoregit add .Since the long filenames are in that tmp directory in your sample output, by ignoring the directory the git add . should work.I had a similar encounter which confirmed the 260 char limitation of Max Path length for WindowsThe way I handled was using SUBST (substitute) command which maps any lengthy folder to a single letter drive, for example subst X: C:\<__relevant_lengthy_path__>\However in your case it is big unfortunate that you had git inited in just C:\ which is unusual & brave:)Cygwin to the rescue! Running the same comands through Cygwin's Git worked for me.The problem is Windows-specific: Git for Windows does not currently use that Win32 API hack of prepending \\?\ to pathnames to overcome the standard pathname length limit of 260 characters, and your pathname is 9 characters longer than the limit."
"If you are getting an error while doing a git clone, then above needs to be changed to:git config --global http.sslVerify falseYou might have to disable the certificate verification in your case:git config http.sslVerify false(as in ""Git: ignore a self signed certificate"")The other option, similar to ""Unable to clone Git repository due to self signed certificate"" would be to import that certificate into git.That is: copied it at the end of the file /path/to/git/bin/curl-ca-bundle.crt.Check your .gitconfig file.If you've found the following line, Remove it![http]sslCAinfo = /bin/curl-ca-bundle.crtIt worked for me."
"I had the same issue with Cordova on Windows 7. I had to roll back to 5.0.0 (npm install -g cordova@5.0.0) to make it work again.A quick fix is to clone the git locally and provide the path from there. For a plug-in to start working, all it needs is to see the plugin.xml file So cordova plugin add https://github.com/phonegap/phonegap-plugin-fast-canvas.git -- fails because shell.js: internal errorError: EXDEV, cross-device link not permitted '/ -- normal error in Cordova 5.1.0+. Applies to most if not all .git installLocal clone :: git clone https://github.com/phonegap/phonegap-plugin-fast-canvas.gitAnd local installcordova plugin add /path/to/phonegap-plugin-fast-canvasWorks.This issue is fixed in the latest cordova version(5.2.0).Upgrade Cordova using npm install -g cordovaI had the same situation with you. and resvole this problem need to pull back the cordova to 5.0.0To extend other great answers provided here,As a temporary workaround, here's a one-liner that will downgrade Cordova, install plugin, and upgrade Cordova back:npm install -g cordova@5.0.0 && cordova plugin add [plugin url] && npm install -g cordovaWill take some time to execute, but eliminates all the manual repo cloning work.The problem comes from node.js fs.rename() which is unable to rename files cross devices.A possible workaround is to replace fs.renameSync() with something else in cordova/node_modules/cordova-lib/node_modules/shelljs/src/mv.jsEg:var run=require('sync-runner');...run(""mv '""+src+""' '""+thisDest+""'"");"
"See the 'non-fast forward' section of 'git push --help' for details.You can perform ""git pull"", resolve potential conflicts, and ""git push"" the result. A ""git pull"" will create a merge commit C between commits A and B.Alternatively, you can rebase your change between X and B on top of A, with ""git pull --rebase"", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A.You can also force a push by adding the + symbol before your branch name.git push origin +some_branchYou probably have changes on github that you never merged. Try git pull to fetch and merge the changes, then you should be able to push. Sorry if I misunderstood your question.If you ""git pull"" and it says ""Already up-to-date."", and still get this error, it might be because one of your other branches isn't up to date.  Try switching to another branch and making sure that one is also up-to-date before trying to ""git push"" again:Switch to branch ""foo"" and update it:$ git checkout foo$ git pullYou can see the branches you've got by issuing command:$ git branchYou can force it to push, but please do this ONLY when you're quite sure what you are doing.The command is:git push -fThis problem can also occur when you have conflicting tags. If your local version and remote version use same tag name for different commits, you can end up here.You can solve it my deleting the local tag:$ git tag --delete foo_tagWhen I got this error, I backed up my entire project folder.  Then I did something like$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master...depending on your branch name (if it's not master).Then I did git pull --rebase.  After that, I replaced the pulled files with my backed-up project's files.  Now I am ready to commit my changes again and push."
"This is actually a multi-step process. First you'll need to add all your files to the current stage:git add .You can verify that your files will be added when you commit by checking the status of the current stage:git statusThe console should display a message that lists all of the files that are currently staged, like this:# On branch master## Initial commit## Changes to be committed:#   (use ""git rm --cached <file>..."" to unstage)##   new file:   README#   new file:   src/somefile.js#If it all looks good then you're ready to commit. Note that the commit action only commits to your local repository. git commit -m ""some message goes here""If you haven't connected your local repository to a remote one yet, you'll have to do that now. Assuming your remote repository is hosted on GitHub and named ""Some-Awesome-Project"", your command is going to look something like this:git remote add origin git@github.com:username/Some-Awesome-ProjectIt's a bit confusing, but by convention we refer to the remote repository as 'origin' and the initial local repository as 'master'. When you're ready to push your commits to the remote repository (origin), you'll need to use the 'push' command:git push origin masterFor more information check out the tutorial on GitHub: http://learn.github.com/p/intro.htmlI had an issue with connected repository. What's how I fixed:I deleted manually .git folder under my project folder, run git init and then it all worked.git add puts pending files to the so called git 'index' which is local.After that you use git commit to commit (apply) things in the index.Then use git push [remotename] [localbranch][:remotebranch] to actually push them to a remote repository.After adding files to the stage, you need to commit them with git commit -m ""comment"" after git add .. Finally, to push them to a remote repository, you need to git push <remote_repo> <local_branch>."
"Well, i know this post is to old but... i found a solution clicking on VCS | Refresh File Status, hope this help someone :)I ended up going to the VCS menu and selecting something like ""Enable Version Control Integration"".PHPStorm has a lot of these little stupid design failures, unfortunately."
"This is result of disk quota exceeded.I got same error without additional explanation.  I then noticed that my disk quota was exceeded.  After freeing some disk space, i was able to perform the original git action.PS: In my case, the error condition prevent any change in the local git repository.  I was not able to do any of add/commit/push/gc (all gave above sha1 file error).Apparently this was, as indicated in the comment, a problem with the remote file server.  After waiting a while, I was able to push without incident."
"Configure git to use the right root certificate. Get the root CA certificate of the server and add it to the git config. Run this in command prompt (don't forget to cd into your git repo)git config http.sslCAinfo ~/certs/cacert.pemYou can choose to ignore the server certificate (at your own risk!).git config http.sslVerify falseSecurity Warning: This is susceptible to Man in the Middle attacks. Be sure that this security concern is not an issue for you before you disable SSL certification verification.You can choose to ignore the server certificate (at your own risk!).Configure your TortoiseGit in the following way. First of all open the TortoiseGit settings.Then:Select the Git configurationOpen the global git configuration pressing ""Edit systemwide gitconfig""In the [http] section write: [http]     sslVerify = false"
"Check these out:Have you looked for other .gitignore files, as there can be many of them.Also, look at REPO/.git/config to see if there is anything there.Repo exclude Local per-repo rules can be added to the .git/info/exclude file in your repo. These rules are not committed with the repo so they are not shared with others. This method can be used for locally-generated files that you don‰Ûªt expect other users to generate, like files created by your editor. ‰ÛÒ gahooa just now editIt might be good to know that your git configuration can contain a core.excludesfile which is a path to a file with additional patterns that are ignored. You can find out if you have such a configuration by running (in the problematic git repo):git config core.excludesfileIf it prints a file path, look at the contents of that file for further information.In my case I installed git via an old version of boxen which ignored the pattern 'Icon?' that in my case gave me the warning, mentioned in this question, for a folder icons (I'm on a case insensitive filesystem that's why Icon? matches icons).Use git check-ignore command to debug your gitignore file (exclude files).In example:$ git check-ignore -v config.php.gitignore:2:src    config.phpThe above output details about the matching pattern (if any) for each given pathname (including line).So maybe your file extension is not ignored, but the whole directory.The returned format is:<source> <COLON> <linenum> <COLON> <pattern> <HT> <pathname>Or use the following command to print your .gitignore in user and repo folder:cat ~/.gitignore $(git rev-parse --show-toplevel)/.gitignore $(git rev-parse --show-toplevel)/.git/info/excludeAlternatively use git add -f which allows adding otherwise ignored files.See: man gitignore, man git-check-ignore for more details.I had the same problem - a directory was being ignored by git with this error:‰__ git add app/views/admin/tags/The following paths are ignored by one of your .gitignore files:app/views/admin/tagsUse -f if you really want to add them.fatal: no files addedI finally figured out my problem was a line in my ~/.gitignore_global:TAGSwhich was matching the path app/views/admin/tags. I fixed it by adding a leading slash to the global gitignore file/TAGSand git started tracking my directory again.I was having the exact same problem as you. The only reply you got listed a few places to check, but none of them solved the problem for me, and from your comment I don't think for you either. I had no OTHER .gitignore files hiding lower in the directory tree; nothing in .git/config; nothing in .git/ingore/excludeIf you still have the problem, check this answer. It solved the issue for meBasically, check for a ~/.gitignore file. Mine was called ~/.gitignore_global. I don't know when it was created (I certainly didn't make it), but I tried a ton of different git setup's when I first installed, so one of them must have put it there.Hope his answer helps you as well!Another thing to try: I had a directory B with its own .git repository nested under my project directory A (but not as a submodule). I made some changes to B, and wanted to make it into a bonafide submodule. I believe git A was automatically ignoring B because it contained its own repository (see Nested git repositories without submodules?). I renamed the B folder, and tried to clone it again as a submodule, and that was bringing me the misleading ""ignored by .gitignore"" error message. The solution was to delete  .git out of B.For me I accidentally had a wildcard in my ~/.gitignore_global file. Maybe check there?"
"It could be related to a control access issue.This usually happen when the repo hasn't been set to be exported (by git-daemon or gitweb): GitStack could rely on a similar mechanism.See this thread for instance/I created an 'empty' file with the name ""git-daemon-export-ok' inside one of my repositories.  I can now clone / push / pull to this repository without issues.That file should be created directly under the xxx.git root directory of your bare repo on the server.I looked into C:/GitStack/apache/logs/error.log and found that GitStack was looking for the repository in the wrong location although its settings said D:/Repositories (my custom location), GitStack looked for the repositories in its default location. So I simply went and saved the settings again from GitStack admin page. It solved the problem."
"It can depends on the version of Git you are using: this recent thread (February 2012) mentions a bug:Since recently a submodule with name <name> has its git directory in the .git/modules/<name> directory of the superproject while the work tree contains a gitfile pointing there.When the same submodule is added on a branch where it wasn't present so far (it is not found in the .gitmodules file), the name is not initialized from the path as it should.  This leads to a wrong path entered in the gitfile when the .git/modules/<name> directory is found, as this happily uses the - now empty - name.  It then always points only a single directory up, even if we have a path deeper in the directory hierarchy. But more generally, uses the <path> argument of git submodule:<path> is the relative location for the cloned submodule to exist in the superproject.  If <path> does not exist, then the submodule is created by cloning from the named URL.  If <path> does exist and is already a valid git repository, then this is added to the changeset without cloning.  This second form is provided to ease creating a new submodule from scratch, and presumes the user will later push the submodule to the given URL. eoinoc mentions in the comments another cause, which is detailed in the question ""git status returns fatal: Not a git repository but .git exists and HEAD has proper permissions"".My repo's location had changed, and I needed to update git's configuration files."
"If you enabled two-factor authentication in your Github account you  won't be able to push via HTTPS using your accounts password. Instead  you need to generate a personal access token. This can be done in the  application settings of your Github account. Using this token as your  password should allow you to push to your remote repository via HTTPS.  Use your username as usual.https://help.github.com/articles/https-cloning-errors#provide-access-token-if-2fa-enabledYou may also need to update the origin for your repository if set to https: git remote -v git remote remove origin git remote add origin git@github.com:user/repo.gitFirst, you can make sure to use the proper url:git remote set-url origin https://github.com/zkirkland/Random-Python-Tests.gitThen, if it was working before, and if it wasn't asking for you username, it must be because you had stored your credentials (login/password) in a $HOME/.netrc file, as explained here. You can double-check those settings, and make sure that your proxy, if you have one, hasn't changed.If that still doesn't work, you can switch to an ssh url:git remote set-url origin git@github.com:zkirkland/Random-Python-Tests.gitBut that means you have published your ssh public key in your Account settings.I know this is an old question, but I was having the same annoying issue, and maybe this pinpoints the problem and will help other people. I think that for some reason GitHub is expecting the URL to NOT have subdomain www. When I use (for example)git remote set-url origin https://www.github.com/name/repo.gitit gives the following messages:remote: Anonymous access to name/repo.git deniedfatal: Authentication failed for https://www.github.com/name/repo.gitHowever, if I usegit remote set-url origin https://github.com/name/repo.gitit works perfectly fine. Doesn't make too much sense to me... but I guess remember not to put www in the remote URL for GitHub repositories.Also notice the clone URLs provided on the GitHub repository webpage doesn't include the www.I had the same problem. I set url in that way:git remote set-url origin https://github.com/zkirkland/Random-Python-Tests.gitI also removed from config file this entry: askpass = /bin/echo.Then ""git push"" asked me for username and password and this time it worked.This worked for me, and it also remembers my credentials:Run gitbashPoint to the repo directoryRun git config --global credential.helper wincredI'm not really sure what I did to get this error, but doing:git remote set-url origin https://...didn't work for me. However:git remote set-url origin git@bitbucket.org:user/reposomehow worked."
"The first set of instructions don't make sense:cd miorep-codegit initgit commit -a -m 'Initial commit'There needs to be a git add between git init and git commit, because otherwise git doesn't know what you want to commit.  Your second error...error: src refspec master does not match any. error: failed to push some refs to 'ssh://**/p/ravenna/code'...means you haven't actually committed anything to your local repository yet, so there is no master branch to push.What you want to do is:cd miorep-codegit initgit add .git commit -m 'initial commit'git push origin masterYou'll note that this is almost identical to your first set of instructions, except we've add a git add . which means ""add everything in my current directory and below to my repository"".The single-quote ' is the problem. Change it to double-quotes, like ""initial commit"". Use double-quotes in Windows-cmd instead of single-quote.@AndrewC: read this before doing the downvote: http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#Skipping-the-Staging-Area"
"I changed my git remote url so there is no ssh via git remote set-url origin /home/git/projects/myproject/"
"Try: git reset README.mdI had a similar issue and this was the only thing that solved it.Do this:git merge --abortgit pull (to be sure you're up-to-date)Now replace the contents of the README.md file with what you want it to say.  If you don't want it at all, do git rm README.mdThen if you replaced the contents, commit and push those contents with:    git add README.md    git commit -m ""comment""    git push"
"The complaint is actually that the remote didn't reply with a proper git response - ie, there's a problem on the server running .  (The first four bytes should be the line length - instead, they were the characters Unab...  probably an error message of some kind.)What happens when you run ssh <host> git-receive-pack <path-to-git-repository>?  You should see the error message that your git client is barfing on.Maybe you have a statement in the server's .bashrc that produces output. I, for example had this:[[ -s ""$HOME/.rvm/scripts/rvm"" ]] && source ""$HOME/.rvm/scripts/rvm""rvm use ruby-1.9.3-p194@rails32In this case the output from the rvm use will be (wrongly) interpreted as coming from git. So replace it by:rvm use ruby-1.9.3-p194@rails32 > /dev/nullYou can redirect any output from .bashrc to stderr:# inside .bashrcecho 'some error/warning/remind message' 1>&2git will ignore this symbolsCheck your startup files on the account used to connect to the remote machine for ""echo"" statements. For the Bash shell these would be your .bashrc and .bash_profile etc. Edward Thomson is correct in his answer but a specific issue that I have experienced is when there is some boiler-plate printout upon login to a server via ssh. Git will get the first four bytes of that boiler-plate and raise this error. Now in this specific case I'm going to guess that ""Unab"" is actually the work ""Unable..."" which probably indicates that there is something else wrong on the Git host.I had a similar problem on Windows using Git Bash. I kept getting this error when trying to do a git clone. The repository was on a Linux box with GitLab installed.git clone git@servername:path/to/repofatal: protocol error: bad line length character: git@I made sure the ssh key was generated. The public key was added on GitLab. The ssh-agent was running and the generated key was added (github link).I ran out of options and then finally tried closing Git Bash and opening it again by right clicking 'Run as Administrator'. Worked after that.The error transformed in:fatal: protocol error: bad line length character: fataafter adding the location of git-upload-pack to the system path.The problem seem to be an apostrophe added around the repository name: Looking with a tool like Process Monitor (from sys internals), that were added by the git client. It seems to be a git specific windows problem.I tried the same command line in the prompt of the server: the full error was ""fatal: not a given repository (or any of the parent directories): .git""In conclusion, to me it seems like a software bug. Be advised that I am not a git expert, it is first time I use git, i come from subversion and perforce.I had the same problem as Christer Fernstrom. In my case it was a message I had put in my .bashrc that reminds me do do a backup when I haven't done one in a couple of days.i also encounter that error once in a while, but when it does, it means that my branch is not up-to-date so i have to do git pull origin <current_branch>FYI I got this same error message after I upgraded a CentOS6 container to CentOS7 -- some git operations started failing when building the container, e.g.# git remote show originfatal: protocol error: bad line length character: InvaRunning ssh gave me an error I could search on:# ssh git@bitbucket.orgInvalid clock_id for clock_gettime: 7That led me to https://github.com/wolfcw/libfaketime/issues/63 where I realized I had forgotten I had a LD_PRELOAD=/usr/local/lib/faketime/libfaketime.so.1 in a parent Dockerfile. Commenting that out fixed the error.After loading the SSH private key in Git Extensions, this issue gets resolved."
"You can use git checkout <file> to check out the committed version of the file (thus discarding your changes), or git reset --hard HEAD to throw away any uncommitted changes for all files.git fetch origingit reset --hard origin/mastergit pullExplanation:Fetch will download everything from another repository, in this case, the one marked as ""origin"". Reset will discard changes and revert to the mentioned branch, ""master"" in repository ""origin"". Pull will just get everything from a remote repository and integrate. See documentation at http://git-scm.com/docs.I've tried both these and still get failure due to conflicts. At the end of my patience, I cloned master in another location, copied everything into the other branch and committed it. which let me continue.The ""-X theirs"" option should have done this for me, but it did not.git merge -s recursive -X theirs mastererror: 'merge' is not possible  because you have unmerged files. hint: Fix them up in the work tree,  hint: and then use 'git add/rm ' as hint: appropriate to mark  resolution and make a commit,  hint: or use 'git commit -a'. fatal:  Exiting because of an unresolved conflict."
"Check if your commits have Change-Id: ... in their descriptions. Every commit should have them.If no, use git rebase -i to reword the commit messages and add proper Change-Ids (usually this is a SHA1 of the first version of the reviewed commit).For the future, you should install commit hook, which automatically adds the required Change-Id.Execute scp -p -P 29418 username@your_gerrit_address:hooks/commit-msg .git/hooks/ in the repository directoryor download them from http://your_gerrit_address/tools/hooks/commit-msg and copy to .git/hookstry this:git commit --amendand copy paste the Change-Id: I55862204ef71f69bc88c79fe2259f7cb8365699a at the end of the file.save it and push it again!If you need to add Change-Id to multiple commits, you can download the hook from your Gerrit server and run these commands to add the Change-Ids to all commits that need them at once.  The example below fixes all commits on your current branch that have not yet been pushed to the upstream branch.tmp=$(mktemp)hook=$(readlink -f $(git rev-parse --git-dir))/hooks/commit-msggit filter-branch -f --msg-filter ""cat > $tmp; \""$hook\"" $tmp; cat $tmp"" @{u}..HEADIt is because Gerrit is configured to require Change-Id in the commit messages.http://gerrit.googlecode.com/svn-history/r6114/documentation/2.1.7/error-missing-changeid.htmlYou have  to change the messages of every commit that you are pushing to include the change id ( using git filter-branch ) and only then push."
"What I did was to change the protocol from HTTPS to GIT.Followed the instructions to setup SSH here: https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git(easy from the GitBash console, you don't need to install SSH or nothing, all comes with Git)After you completed the SSH setup, just re-add the remote with the git@bitbucket.... url and you are done.Hope this helps.I have installed Git version 1.8.5.2-preview20131230I solved this by adding my password in the url.Instead of:git remote add origin https://MYUSERNAME@bitbucket.org/MYUSERNAME/test.gitI used:git remote add origin https://MYUSERNAME:PASSWORD@bitbucket.org/MYUSERNAME/test.gitI got this error when updated git to 1.8.5.2.When I rolled git to version 1.7.10 (initial version), the error disappeared.As I really needed to use HTTPS instead of SSH (proxy limitations), I've solved it by setting the remote push url to the HTTPS url as follow: git remote set-url --push origin https://MYUSERNAME@bitbucket.org/MYUSERNAME/test.gitgit version 1.9.5I had the same problem. Installing Git 1.9.0 solved it for me."
"The commands you've used have successfully created a repository OK on your own machine, but it doesn't exist on Github; that's why you get the error:fatal: https://github.com/fxbird/Common-Lib.git/info/refs not foundThe ""refs"" file isn't found because it doesn't exist. Your best solution is to create the repository on Github first and then clone it to your local machine. That way everything will be set up for you to push and pull.Oh, and when you ran:git update-server-infoyou ran that on your local repository, not on the server so it wouldn't work anyway. That command generates files necessary to access your repository over ""dumb"" protocols like http.I don't see targetted repository in your GitHub profile. Click the icon Create a New Repo on top bar right to your username to create it first.this is a work around I'm also new to git so if we ave to manually create the directory then what's te use of executing this statement""git remote add origin https://github.com/fxbird/Common-Lib.git"""
"In my case, the git repository was duplicated somehow in the config file:cat .git/configgave me:[remote ""origin""]    url = git@bitbucket.org:myUserName/myRepositoryName.git/myRepositoryName.git    fetch = +refs/heads/*:refs/remotes/origin/*As you can see, myRepositoryName is duplicated, so I removed that, and now the config file looks like this:[remote ""origin""]    url = git@bitbucket.org:myUserName/myRepositoryName.git    fetch = +refs/heads/*:refs/remotes/origin/*Doing this, my problem is solved. Now the push is correctly done. Hope this help someone.This error also occur when you rename your repo:Edit .git/config and change from:git remote add origin git@bitbucket.org:myname/myproject.gitto:git remote add origin git@bitbucket.org:myname/my_new_project_name.gitI managed to do this in the end by removing the origin and re-adding it.  Everything seemed ok after I did this.git remote rm origingit remote add origin git@github_or_bitbucket_or_whatever_linkYou get this error if the remote repository hasn't been created. Bitbucket is running a service called conq that handles pushes and you see the error message from it. Simply create a new (empty) repository and the push should succeed.Here I'm pushing to a non-existing repository:$ git push git@bitbucket.org:mg/testt.git masterconq: repository does not exist.fatal: The remote end hung up unexpectedlyand here I push to the correct path:$ git push git@bitbucket.org:mg/test.git masterCounting objects: 3, done.Writing objects: 100% (3/3), 203 bytes, done.Total 3 (delta 0), reused 0 (delta 0)remote: bb/acl: mg is allowed. accepted payload.To git@bitbucket.org:mg/gtest.git * [new branch]      master -> masterThe test repository was newly created on Bitbucket. If the problem persists, then I suggest deleting the empty repo from Bitbucket and re-creating it.I had a similar problem, and this thread helped me solve the issue, but my solution is slightly different:I was on a remote server, so first I had to change into the public_html (www) directory, then initialize the repo. (note you have to first add your .ssh key in bitbucket)$ git initwhich initialized an empty Git repositorythen add the remote$ git remote add origin git@bitbucket.org:myname/myproject.gitthen I was able to pull and checkout my branch$ git pull$ git checkout <branch-name>in my case, i mixed up usernames:in my scenario there are 2 accounts: i need to connect using my-account to the repository's owner-account:owner-acc   - created, maintaining the accountmy-acc           - me, a participantthe syntax in this case should beurl = git@bitbucket.org:owner-acc/repo-name.gitand NOT my username, nor my account-name.I assume bitbucket's instructions I followed previously took care of identifying me somehow (it's probably relating my-account with the public key i uploaded earlier).I had this error when trying to deploy with Capistrano. I was missing the deploy key for that Bitbucket repo. Here's how to solve the issue:Generate an SSH Key on your server: https://confluence.atlassian.com/display/STASH/Creating+SSH+keysFollow these instructions to get ssh-agent running, and load in the identity you just created: https://confluence.atlassian.com/display/BITBUCKET/Troubleshoot+SSH+IssuesOnce that's finished just go to the Bitbucket repo > Settings > Deploy Keys and copy and paste your newly created key.Did you encounter this error doing the Rails Tutorial?I did. And I'm very new to this so I was only doing was the tutorial explicitly told me to do. That got me into trouble because in chapter 3 it says it‰Ûªs a good idea to create a new repository at Bitbucket and push it up but it doesn't hold your hand through the process like it does in Chapter 2.Don't forget to create the new repository at BitBucket before pushing to that repository. From Chapter 2: You should also create a new repository by clicking on the ‰ÛÏCreate‰Ûù button at Bitbucket.I did that and it fixed the problem."
"You've created a new repository and added some files to the index, but you haven't created your first commit yet.  After you've done: git add a_text_file.txt ... do: git commit -m ""Initial commit.""... and those errors should go away.The quick possible answer: When you first successfully clone an empty git repository, the origin has no master branch. So the first time you have a commit to push you must do:git push origin masterWhich will create this new master branch for you. Little things like this are very confusing with git.If this didn't fix your issue then it's probably a gitolite-related issue:Your conf file looks strange. There should have been an example conf file that came with your gitolite. Mine looks like this:repo    phonegap                                                                                                                                                                               RW+     =   myusername otherusername                                                                                                                                               repo    gitolite-admin                                                                                                                                                                             RW+     =   myusername                                                                                                                                                               Please make sure you're setting your conf file correctly.Gitolite actually replaces the gitolite user's account with a modified shell that doesn't accept interactive terminal sessions. You can see if gitolite is working by trying to ssh into your box using the gitolite user account. If it knows who you are it will say something like ""Hi XYZ, you have access to the following repositories: X, Y, Z"" and then close the connection. If it doesn't know you, it will just close the connection.Lastly, after your first git push failed on your local machine you should never resort to creating the repo manually on the server. We need to know why your git push failed initially. You can cause yourself and gitolite more confusion when you don't use gitolite exclusively once you've set it up."
"Late to the party, but on cygwin the package you need for this to validate is docbook-xml45 (as implied by the DTD URI, docbook/xml/4.5/docbookx.dtd)This appears to be something of a reoccurring issue for git.  In hunting down the solution (today), I ran across it in several forums.  (Linux, Cygwin, Mac OS).  The problem is always the same:  lack of a good docbook catalog.  Unfortunately, installing the appropriate catalog is HIGHLY dependent on your installation, and there is more than one way to lack a good catalog.A bad catalog was released a few years ago.  Uninstall & install the update.The package that built the catalog failed part way.  Remove & reinstall the package.The package that installs the catalog has not been installed, and the package tools haven't taken care of you.Option 3 is where I was.  I have brew installed, so     sudo brew install docbook    sudo docbook-registerTook care of this problem for me.Alternatively, there is a separate download of just the docs available.On OSX (Mountain Lion) I had to do this:brew install asciidocbrew install xmltobrew install docbook   # then (as prompted by brew...)## If you intend to process AsciiDoc files through an XML stage# (such as a2x for manpage generation) you need to add something# like:##   export XML_CATALOG_FILES=/usr/local/etc/xml/catalog## to your shell rc file so that xmllint can find AsciiDoc's# catalog files.brew install docbook-xsl(Thanks to Nathan for providing the necessary hints)."
"You need to do these things in order..Fetch All Branches git fetch --allCheck Branch Namegit branchThen Checkout to branchgit checkout your_branch_nameNow, while committingAdd all files you want to commit in the staging areagit add . (for all files)git add filename (for respective file)Commit to local database git commit -m ""your custom message""Push to remote repogit push origin current_branch_nameHere, origin is the remote name."
"If I understand the question correctly, you simply want to ""undo"" the git add that was done for that file.If that is the case, then git reset HEAD <file> will do the job.Your modifications will be kept and the file will once again show up in the modified, but not yet staged set of git status.See the git reset man page for details.git rm --cached FILE,git rm -r --cached CVS */CVSgit reset <file>Works whether or not you have any previous commits.So, a slight tweak to Tim Henigan's answer: you need to use -- before the file name. It would look like this:git reset HEAD -- <file>If you want to remove files following a certain pattern and you are using git rm --cached, you can use file-glob patterns too.See here."
"Your error appears when you have modified file, and branch that you switching to have changes for this file too (from latest merge point).Your options, as I see it, are - commit, and then amend this commit with extra changes (you can modify commits in git, as long as they're not pushed); or - use stash:git stash save your-file-namegit checkout master# do whatever you had to do with mastergit checkout staginggit stash popgit stash save will create stash that contains your changes, but it isn't associated with any commit or even branch. git stash pop will apply latest stash entry to your current branch, restoring saved changes and removing it from stash.I encountered the same problem and solved it bygit checkout -f branchand its specification is rather clear-f, --forceWhen switching branches, proceed even if the index or the working             tree differs from HEAD. This is used to throw away local changes.When checking out paths from the index, do not fail upon unmerged             entries; instead, unmerged entries are ignored."
"When specifying relative URLs for submodule location, Git takes it relatively to the origin (here Github) URL of the current projet, and not relatively to the project location on filesystem. This is because a submodule is a permanent pointer to a remote location. Here Git tries to contact the origin github repository with two levels up, which is an incorrect URL.As for the second error Git has created an entry in the staging area of your index, and it must be removed (unstaged) with git rm -r addons/shared_addons/modulesThen retry with the absolute path to your clone:git submodule add $HOME/Dropbox/github/PyroDatabase/ addons/shared_addons/modules/Anyway adding a local clone of your project as a submodule of itself is weird, since submodules are meant to be a different repo of the containing project. Why not keep track of local and origin commits in standard Git fashion?What version of git are you running? You probably cannot run the command again because the directory structure you specified has been staged. You can reset things like this (be careful with this command):$ git status # check what has been changed$ git reset --hard HEAD # destroy all working copy changesA really useful way to debug what's going on with git is to set GIT_TRACE=1. So, try running the command again once you've cleaned up like this:$ GIT_TRACE=1 git submodule add ../../github/PyroDatabase/ addons/shared_addons/modules/"
"Just to add to Tobb's excellent original answer..I noticed that this has been fixed but had issues getting the new version to work.. You have to add it as a plugin (not project) dependency, eg.<!-- Appengine deploy at end of mvn release:perform --><plugin>    <groupId>org.apache.maven.plugins</groupId>    <artifactId>maven-release-plugin</artifactId>    <version>2.2.2</version>    <dependencies>        <dependency>            <groupId>org.apache.maven.plugins</groupId>            <artifactId>maven-scm-plugin</artifactId>            <version>1.8.1</version>        </dependency>    </dependencies></plugin>Turned out that this was an error that had been encountered before. This is due to a bug in  maven-scm-provider-git, which causes the file-reference to a local repository for checkout to lose its ':' in ""C:..."". (The bug is described here: http://jira.codehaus.org/browse/SCM-662)We fixed this by copying a fixed version of the jar into the local maven repository, but I had recently cleared my local repository in order to see if our Nexus repo was behaving correctly, and thus got an unfixed version of the jar in my local repo (doh!)So, added the fixed version of the jar to my local maven repo, the git clone-command contained a ':' again, and things started working :)Edit: This bug is fixed in version 2.4 of the maven release plugin."
"When you push to an empty repository you must set on checkbox ""Push current branch to alternative branch"" and choose master as that alternative.It's because master is not created yet (repo is really empty). But doing this way you can pretend to initialize the repository.While that checkbox is off and repository is empty, IDEA can't push, because its interface must be safe and he will not just create new brach if the one in which you pushed last accidentally disappeared (or just not exist). You must force that ""branch creation""I've resolved this with turning on checkbox ""Push current branch to alternative branch"". Not sure, but we need this for first push to new branch as it have status as 'untracked'.In my case, after setting up my remote repository, I simply made a fetch and then the push worked just fine."
"Resolved the issue... you need to add the ssh public key to your github account.Verify that the ssh keys have been setup correctly. Run ssh-keygen Enter the password (keep the default path - ~/.ssh/id_rsa)Add the public key (~/.ssh/id_rsa.pub) to github account Try git clone. It works!Initial status (public key not added to git hub account)foo@bn18-251:~$ rm -rf testfoo@bn18-251:~$ lsfoo@bn18-251:~$ git clone git@github.com:devendra-d-chavan/test.gitCloning into 'test'...Permission denied (publickey).fatal: The remote end hung up unexpectedlyfoo@bn18-251:~$Now, add the public key ~/.ssh/id_rsa.pub to the github account (I used cat ~/.ssh/id_rsa.pub)foo@bn18-251:~$ ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/home/foo/.ssh/id_rsa): Created directory '/home/foo/.ssh'.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/foo/.ssh/id_rsa.Your public key has been saved in /home/foo/.ssh/id_rsa.pub.The key fingerprint is:xxxxxThe key's randomart image is:+--[ RSA 2048]----+xxxxx+-----------------+foo@bn18-251:~$ cat ./.ssh/id_rsa.pub xxxxxfoo@bn18-251:~$ git clone git@github.com:devendra-d-chavan/test.gitCloning into 'test'...The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of known hosts.Enter passphrase for key '/home/foo/.ssh/id_rsa': warning: You appear to have cloned an empty repository.foo@bn18-251:~$ lstestfoo@bn18-251:~/test$ git status# On branch master## Initial commit#nothing to commit (create/copy files and use ""git add"" to track)The issue could be that Github isn't present in your ~/.ssh/known_hosts file.Append GitHub to the list of authorized hosts: ssh-keyscan -H github.com >> ~/.ssh/known_hosts"
"What I had to do was:git remote rm origingit remote add origin 'git@github.com:username/repo.git'Then, I was able to push my changes.Well I had the same problem - what annoys me to no end is that I don't have a clue why (edit: bug). I was pushing with https. Manually editing the config did not work for me (or doing a chkdsk as suggested in another answer). I ended up pushing with ssh - as in, replace:https://github.com/USER/REPO.gitwithgit@github.com:USER/REPO.gitafter generating your keysEDIT as to why : it is a bug in 1.8.5. See the report and a discussion with a way to workaroundI tried following command and it worked for megit push https://<username>:<password>@github.com/<username>/<repository-name>Since it's a bug from 1.8.5 version, if you don't want use SSH Key you can downgrade to 1.84 from here, or upgrade to higher version, 1.9.x, for example.This seems to be a known bug in Git 1.8.5 on Windows. As described and reported by @Mr_and_Mrs_D:https://groups.google.com/forum/#!msg/msysgit/s4dB8Nv9V4c/55-cGPdPYmAJDowngrading to 1.8.4 works for me. Please note you have to explicitly uninstall 1.8.5 first by running C:\Program Files (x86)\Git\unins000.exe as described here:https://github.com/swcarpentry/bc/issues/234#issuecomment-33055444I downloaded 1.8.4 here:https://msysgit.googlecode.com/files/Git-1.8.4-preview20130916.exeIn my case, I update Git to version 1.9 and this issue is fixed.During push/commit, the Git Bash will ask for Github's account & password."
"Figured it out. Here for posterity.The error was the wrong remote for the staging app. I created it with$ git remote add staging git@heroku.com:myApp-staging.gitand I had$ git remote -vheroku  https://git.heroku.com/myApp.git (fetch)heroku  https://git.heroku.com/myApp.git (push)staging git@heroku.com:myApp-staging.git (fetch) // wrongstaging git@heroku.com:myApp-staging.git (push)  // wrongI should have done $ git remote add staging https://git.heroku.com/myApp-staging.git // over httpsNow my git shows $ git remote -vheroku  https://git.heroku.com/myApp.git (fetch)heroku  https://git.heroku.com/myApp.git (push)staging https://git.heroku.com/myApp-staging.git (fetch) // OKstaging https://git.heroku.com/myApp-staging.git (push)  // OKAnd the life is peachy again!Note: Heroku says that the new repo IS EMPTY after forking an app. https://devcenter.heroku.com/articles/fork-app#forked-app-state"
"Assuming you're wanting to undo the effects of 'git rm ' or 'rm ' followed by 'git add -A' or something similar:# this restores the file status in the indexgit reset -- <file># then check out a copy from the indexgit checkout -- <file>To undo 'git add ', the first line above suffices, assuming you haven't committed yet.Both questions are answered in git status.To unstage adding a new file use git rm --cached# Changes to be committed:#   (use ""git rm --cached <file>..."" to unstage)##   new file:   testTo unstage deleting a file use git reset HEAD# Changes to be committed:#   (use ""git reset HEAD <file>..."" to unstage)##   deleted:    testIn the other hand, git checkout -- never unstage, it just discards non-staged changes.The answers to your two questions are related.  I'll start with the second:Once you have staged a file (often with git add, though some other commands implicitly stage the changes as well, like git rm) you can back out that change with git reset -- <file>.In your case you must have used git rm to remove the file, which is equivalent to simply removing it with rm and then staging that change.  If you first unstage it with git reset -- <file> you can then recover it with git checkout -- <file>."
"From git branch it appears that somehow your local branch name is ""origin"".You can rename the branch with -mv flag, like this: git branch -mv origin masterAfter this git branch should show master :-)Just to make sure the name is indeed the only thing that went astray, you can run git log and look at the last few commits - and compare them to the last few commits on bitbucket website.This should help yougit initgit add .git commit -m 'Initial Commit'git push -u origin master"
"As far as I can tell, GitHub does not provide shell access, so I'm curious about how you managed to log in in the first place.$ ssh -T git@github.comHi username! You've successfully authenticated, but GitHub does not provideshell access.You have to clone your repository locally, make the change there, and push the change to GitHub.$ git clone git@github.com:username/reponame.git$ cd reponame$ git mv README README.md$ git commit -m ""renamed""$ git push origin masterNote that, from March 15th, 2013, you can move or rename a file directly from GitHub:(you don't even need to  clone that repo, git mv xx and git push back to GitHub!)You can also move files to entirely new locations using just the filename field.  To navigate down into a folder, just type the name of the folder you want to move the file into followed by /.  The folder can be one that‰Ûªs already part of your repository, or it can even be a brand-new folder that doesn‰Ûªt exist yet!You can rename a file using git's mv command:$ git mv file_from file_toExample:$ git mv helo.txt hello.txt$ git status# On branch master# Changes to be committed:#   (use ""git reset HEAD <file>..."" to unstage)##   renamed:    helo.txt -> hello.txt#$ git commit -m ""renamed helo.txt to hello.txt""[master 14c8c4f] renamed helo.txt to hello.txt 1 files changed, 0 insertions(+), 0 deletions(-) rename helo.txt => hello.txt (100%)Do a git status to find out if your file is actually in your index or the commit. It is easy as a beginner to misunderstand the index/staging area. I view it as a 'progress pinboard'. I therefore have to add the file to the pinboard before I can commit it (i.e. a copy of the complete pinboard), I have to update the pinboard when required, and I also have to deliberately remove files from it when I've finished with them - simply creating, editing or deleting a file doesn't affect the pinboard. It's like 'storyboarding'.Edit: As others noted, You should do the edits locally and then push the updated repo, rather than attempt to edit directly on github.You've got ""Bad Status"" its because the target file cannot find or not present, like for example you call README file which is not in the current directory.I had a similar problem going through a tutorial.# git mv README README.markdownfatal: bad source, source=README, destination=README.markdownI included the filetype in the source file:# git mv README.rdoc README.markdownand it worked perfectly.  Don't forget to commit the changes with i.e.: # git commit -a -m ""Improved the README""Sometimes it is simple little things like that, that piss us off.  LOL"
"There is a clone of your repo in ~/.sbt/ghpages/{organisation}/{name} which will be created when you run it in the first place. If you create another project with the same organisation and the git clone failed somehow then the directory in ~/.sbt/ghpages/{organisation}/{name} is empty and git complains that there is no .git directory later on. if you rename the orga of your project, then you will find a different directory under ~/.sbt/ghpages/ and everything works fine as you found out. When you remove the folder with the organisation name (or the directory with your repo name) everything should also work again.Changing the organization key of sbt made it work. Before it wasorganization := ""at.iem.sysson""I changed it toorganization := ""de.sciss""Since these are not the git user-names, I don't understand what this has to do with anything. Yet, the site got successfully pushed to iem-projects.github.io/sysson now..."
"Run the Git Bash or the console you are running, with Run As Administrator"
"After the chat, the right way to configure the link with github is:cd c:\Users\ramas\dmsproject\dmsgit remote set-url origin git@github.com:vamsiannem/dms.gitThen a git push can work."
"Perhaps try:git push git@github.com:{username}/{projectname}.git HEAD:testThe format of the last parameter on that command line is a refspec which is a source ref followed by a colon and then the destination ref. You can also use your local branch name (my_test) instead of HEAD to be certain you're pushing the correct branch.The documentation for git push has more detail on this parameter.Also, you don't need to type out the whole url each time you want to push.  When you ran the clone, git saved that URL as 'origin', that's why you can run something like 'merge origin/test' - it means the 'test' branch on your 'origin' server.  So, the simplest way to push to your server in that case would be:git push origin my_test:testThat will push your local 'my_test' branch to the 'test' branch on your 'origin' server.  If you had named your local branch the same as the branch on the server, then the colon is not neccesary, you can simply do:git push origin testI think here you will need to set up branch tracking. Please run the following to enable trackinggit branch --track my_test origin/my_testTo test git push -u origin my_testgit pull origin my_testThis error also comes up if you try to push to a new repository without having committed anything first. Try:git add -Agit commit -am 'Initial commit'And then try your push again."
"Are you sure branch labs does not already exist (as in this thread)?You can't have both a file, and a directory with the same name.You're trying to get git to do basically this:% cd .git/refs/heads% ls -ltotal 0-rw-rw-r-- 1 jhe jhe 41 2009-11-14 23:51 labs-rw-rw-r-- 1 jhe jhe 41 2009-11-14 23:51 master% mkdir labsmkdir: cannot create directory 'labs': File existsYou're getting the equivalent of the ""cannot create directory"" error.  When you have a branch with slashes in it, it gets stored as a  directory hierarchy under .git/refs/heads.It is possible to have hierarchical branch names (branch names with slash).  For example in my repository I have such branch(es).  One caveat is that you can't have both branch 'foo' and branch 'foo/bar' in repository.Your problem is not with creating branch with slash in name.$ git branch foo/barerror: unable to resolve reference refs/heads/labs/feature: Not a directoryfatal: Failed to lock ref for update: Not a directoryThe above error message talks about 'labs/feature' branch, not 'foo/bar' (unless it is a mistake in copy'n'paste, i.e you edited parts of session).  What is the result of git branch or git rev-parse --symbolic-full-name HEAD?Sometimes that problem occurs if you already have a branch with the base name.I tried this:git checkout -b features/aName origin/features/aNameUnfortunately, I already had a branch named features, and I got the exception of the question asker.Removing the branch features resolved the problem, the above command worked.I my case I forgot that there was already an unused labs branch. Deleting it solved the problem:git branch -d labsgit checkout -b labs/featureExplanation: You can only have a branch name as parent for other sub-branches or as a normal branch. So the branches labs and labs/feature at the same time is not possible in git.The reason is that the branches are stored in the file system and there you also can't have a file labs and a directory labs at the same level."
"One of the nicest things about git is that you don't need to track file renames explicitly. Git will figure it out by comparing the contents of the files.So, in your case, don't work so hard:$ mkdir include$ mv common include$ git rm -r common$ git add include/commonRunning git status should show you something like this:$ git status# On branch master# Changes to be committed:#   (use ""git reset HEAD <file>..."" to unstage)##   renamed:    common/file.txt -> include/common/file.txt#git mv common includeshould work.From the git mv man page:git mv [-f] [-n] [-k] <source> ... <destination directory>In the second form, the last argument has to be an existing directory; the given sources will be moved into this directory.  The index is updated after successful completion, but the change must still be committed.No ""git add"" should be done before the move.Note: ""git mv A B/"", when B does not exist as a directory, should error out, but it didn't.See commit c57f628 by Matthieu Moy (moy) for Git 1.9/2.0 (Q1 2014):Git used to trim the trailing slash, and make the command equivalent to 'git mv file no-such-dir', which created the file no-such-dir (while the trailing slash explicitly stated that it could only be a directory).This patch skips the trailing slash removal for the destination path.  The path with its trailing slash is passed to rename(2), which errors out with the appropriate message:$ git mv file no-such-dir/fatal: renaming 'file' failed: Not a directoryCommand:$ git mv oldFolderName newFolderNameIt usually works fine.Error ""bad source ..."" typically indicates that after last commit there were some renames in the source directory and hence git mv cannot find the expected file.The solution is simple - just commit before applying git mv.Another way to move all files in a directory to a sub directory (keeps git history):$ for file in $(ls | grep -v 'subDir'); do git mv $file subDir; done;I'm sorry I don't have enough reputation to comment the ""answer"" of ""Andres Jaan Tack"".I think my messege will be deleted ((But I just want to warn ""lurscher"" and others who got the same error: be carefull doing$ mkdir include$ mv common include$ git rm -r common$ git add include/commonIt may cause you will not see the git history of your project in new folder.I tryed$ git mv oldFolderName newFolderNamegotfatal: bad source, source=oldFolderName/somepath/__init__.py, destination=ESWProj_Base/ESWProj_DebugControlsMenu/somepath/__init__.pyI didgit rm -r oldFolderNameandgit add newFolderNameand I don't see old git history in my project. At least my project is not lost. Now I have my project in newFolderName, but without the history (Just want to warn, be carefull using advice of ""Andres Jaan Tack"", if you dont want to lose your git hsitory.Make sure you have added all your changes to the staging area before runninggit mv oldFolderName newFoldernamegit fails with errorfatal: bad source, source=oldFolderName/somepath/somefile.foo, destination=newFolderName/somepath/somefile.fooif there are any unadded files, so I just found out."
"You probably didn't do this part of the tutorial:First, the work tree (/var/www/www.example.org above) must be writable by the user who runs the hook (or the user needs sudo access to run git checkout -f, or something similar).I believe if you run sudo chown -R git:git /srv/git/ this is coming from Permission denied issue when performing git push"
"As the error message says: git pull before you try to git push. Apparently your local branch is out of sync with your tracking branch.Depending on project rules and your workflow you might also want to use git pull --rebase.Try this: git push -f origin masterI've just received this error.I created a github repository after creating my local git repository so I needed to accept the changes into local before pushing to github. In this case the only change was the readme file created as optional step when creating github repository.git pull https://github.com/*username*/*repository*.git masterrepository URL is got from here on project github page : I then re-initialised (this may not be needed)git initgit add .git commit -m ""update""Then push : git pushIf git pull does not help, then probably you have pushed your changes (A) and after that had used git commit --amend to add some more changes (B). Therefore, git thinks that you can lose the history - it interprets B as a different commit despite it contains all changes from A.             B            /        ---X---AIf nobody changes the repo after A, then you can do git push --force.However, if there are changes after A from other person:             B            /        ---X---A---Cthen you must rebase that persons changes from A to B (C->D).             B---D            /        ---X---A---Cor fix the problem manually. I didn't think how to do that yet.Try this command: ""git pull origin master""It worked for me.Check this link: https://help.github.com/articles/dealing-with-non-fast-forward-errorsi had created new repo in github and i had the same problem, but it also had problem while pulling,  so this worked for me.but this is not advised in repos that already have many codes as this  could mess up everythinggit push origin master --force! [rejected]        master -> master (non-fast-forward)Don‰Ûªt panic, this is extremely easy to fix. All you have to do is issue a pull and your branch will be fast-forward:$ git pull myrepo masterThen retry your push and everything should be fine:$ git push github masterThe only i was able to resolve this issue was to delete the local and git repo and create the same again at both ends. Works fine for now.You need to do git branchif the output is something like:* (no branch)masterthen dogit checkout masterMake sure you do not have any pending commits as checking out will lose all non-committed changes.I had this problem on a development machine. The dev branch was pushing fine but thethe master branch gave me (while git pushing when being on the dev branch):! [rejected]        master -> master (non-fast-forward)So I tried:git checkout mastergit pullWhich gave me:You asked me to pull without telling me which branch youwant to merge with, and 'branch.master.merge' inyour configuration file does not tell me, either.I found out the master branch was missing from .git/config and added:[branch ""master""]    remote = origin    merge = refs/heads/masterAfterwards git push also worked fine on the dev branch."
"click fork button on original github project pageclone your forked repository instead originalpush to itpress Pull Requests button on your repositorycreate itwait for original author to accept itSee the github help on cloning URL. With HTTPS, if you are not authorized to push, you would basically have a read-only access. So yes, you need to ask the author to give you permission.If the author doesn't give you permission, you can always fork (clone) his repository and work on your own. Once you made a nice and tested feature, you can then send a pull request to the original author.For some reason my push and pull origin was changed to HTTPS-url in stead of SSH-url (probably a copy-paste error on my end), but trying to push would give me the following error after trying to login:Username for 'https://github.com': xxxPassword for 'https://xxx@github.com': remote: Invalid username or password.Editing the [remote ""origin""] url in the .git/config file to point the SSH url, there was no problem:[remote ""origin""]    url = git@github.com:<username>/<repo>.gitHope this helps!"
"There's a couple of ways to fix this but I've found git stash works good for me. It temporary puts your local changes into another place. Then you can pull, to grab the latest changes. And then you can get your local changes back.Just like this:$ git pull......file your_file.rb not up to date, cannot merge.$ git stash$ git pull$ git stash popThis sort of problem is frequently caused by trying to pull from a repository that has two filenames that differ only in case. If you are on FAT, NTFS in case-insensitive mode (essentially, any time it's being used under Windows), or HFS+ in case-insensitive mode, and have two files ""foobar"" and ""FOOBAR"", then Git will see two distinct files, but the filesystem will only see one, which will cause all kinds of problems. Git will checkout, say, ""FOOBAR"", and then checkout ""foobar"", which the filesystem sees as simply replacing the contents of ""FOOBAR"" but leaving it in place. Now to Git, it appears that ""FOOBAR"" has been replaced with the contents of ""foobar"", and ""foobar"" is gone.There are two different manifestations of this basic problem. One is when your repository actually contains two files that differ only on case. In this case, you need to work on a case-sensitive file system, or you will need to edit the repository to ensure that no collisions of this sort occur; a case-insensitive file system simply cannot store the contents of this repository.A different case that you can workaround is when a rename happens that changes the case of the file. Say, for example, that the Git repository contains a rename from ""EXAMPLE"" to ""example"". Before Git checks out the new version, it will try and check to make sure it's not overwriting some existing file that you have on your disk. Since it thinks that ""example"" is a new filename, it will ask the filesystem if it exists, and the filesystem will see ""EXAMPLE"" and say yes, so Git will refuse to check out the new version since it thinks it will be overwriting untracked files. In this case, if you have no local changes that you care about, a simple git reset --hard <revision-to-checkout> will generally be sufficient to get you past the problem and to the new revision. Just try and remember not to rename files to other names that differ only in case if you're on a case-insensitive file system, as it will cause problems like this.Generally speaking, this means you have changes in your local files that haven't been committed to your local repository.  You can also see this stackoverflow question for a bit more detail.It might a problem also with file permissions. Git is versioning them too, unless config says otherwise. Just adding this answer for people who has almost but not the like problem.Worth a try:Could you set, just for this update, set the config parameter core.trustctime to false?core.trustctimeIf false, the ctime differences between the index and the working copy are ignored; useful when the inode change time is regularly modified by something outside Git (file system crawlers and some backup systems)."
"Yes, the problem is that there are no commits in ""bare"".  This is a problem with the first commit only, if you create the repos in the order (bare,alice).  Try doing git push --set-upstream origin master.  This would only be required the first time.  Afterwards it should work normally.As Chris Johnsen pointed out, you would not have this problem if your push.default was customized.  I like upstream/tracking.If you: git push origin masterit will push to the bare repo.It sounds like your alice repo isn't tracking correctly.cat .git/configThis will show the default remote and branch.If you git push -u origin masterYou should start tracking that remote and branch. I'm not sure if that option has always been in git.git push --allis the canonical way to push everything to a new bare repository.Another way to do the same thing is to create your new, non-bare repository and then make a bare clone withgit clone --barethen usegit remote add origin <new-remote-repo>in the original (non-bare) repository.This related question's answer provided the solution for me... it was just a dumb mistake: Remember to commit first!http://stackoverflow.com/a/7572252If you have not yet committed to your local repo, there is nothing to push, but the Git error message you get back doesn't help you too much.Try this in your alice repository (before pushing):git config push.default trackingOr, configure it as the default for your user with git config --global ‰Û_.git push does default to the origin repository (which is normally the repository from which you cloned the current repository), but it does not default to pushing the current branch‰ÛÓit defaults to pushing only branches that exist in both the source repository and the destination repository.The push.default configuration variable (see git-config(1)) controls what git push will push when it is not given any ‰ÛÏrefspec‰Ûù arguments (i.e. something after a repository name). The default value gives the behavior described above.Here are possible values for push.default:nothingThis forces you to supply a ‰ÛÏrefspec‰Ûù.matching (the default)This pushes all branches that exist in both the source repository and the destination repository.This is completely independent of the branch that is currently checked out.upstream or tracking(Both values mean the same thing. The later was deprecated to avoid confusion with ‰ÛÏremote-tracking‰Ûù branches. The former was introduced in 1.7.4.2, so you will have to use the latter if you are using Git 1.7.3.1.)These push the current branch to the branch specified by its ‰ÛÏupstream‰Ûù configuration.  currentThis pushes the current branch to the branch of the same name at the destination repository.  These last two end up being the same for common cases (e.g. working on local master which uses origin/master as its upstream), but they are different when the local branch has a different name from its ‰ÛÏupstream‰Ûù branch:git checkout master# hack, commit, hack, commit# bug report comes in, we want a fix on master without the above commitsgit checkout -b quickfix origin/master  # ""upstream"" is master on origin# fix, commitgit pushWith push.default equal to upstream (or tracking), the push would go to origin‰Ûªs master branch. When it is equal to current, the push would go to origin‰Ûªs quickfix branch.The matching setting will update bare‰Ûªs master in your scenario once it has been established. To establish it, you could use git push origin master once.However, the upstream setting (or maybe current) seems like it might be a better match for what you expect to happen, so you might want to try it:# try it once (in Git 1.7.2 and later)git -c push.default=upstream push# configure it for only this repositorygit config push.default upstream# configure it for all repositories that do not override it themselvesgit config --global push.default upstream(Again, if you are still using a Git before 1.7.4.2, you will need to use tracking instead of upstream)."
"I just had the same problem.From GIT source, error is thrown when command git diff-index HEAD returns result, even if git status says working tree is clean.To avoid this error, in my case, I re-checkout the current branch of working tree , and everything seems OK : git checkout <branch>It's a bit confused, but if someone can explain why ...I got around this now. My problem seemed to me that the repository was brand new: I had never committed anything to it. Once I committed a file to the repo, I was able to move past this error. However, using the command git subtree add C:\gitTest\repos\subA -d --prefix subA I got the new error:fatal just how do you expect me to merge 0 trees?After messing around for a minute, I figured out it requires that a specific revision be passed to it. So this command seems to have succeeded:git subtree add C:\gitTest\repos\subA HEAD -d --prefix subAAnd obviously you don't need the -d debug flag."
"This info is working on theChaw but can be applied to all other git repositories which support SSH pubkey authentications. (See gitolite, gitlab or github for example.)First start by setting up your own public/private key pair set. This  can use either DSA or RSA, so basically any key you setup will work.  On most systems you can use ssh-keygen.First you'll want to cd into your .ssh directory. Open up the terminal and run:    cd ~/.ssh && ssh-keygenNext you need to copy this to your clipboard.    On OS X run: cat id_rsa.pub | pbcopy On Linux run: cat id_rsa.pub | xclipOn Windows (via Cygwin/Git Bash) run: cat id_rsa.pub | clipAdd your key to your account via the website.Finally setup your .gitconfig.    git config --global user.name ""bob""git config --global user.email bob@...  (don't forget to restart your command line to make sure the config is reloaded)Thats it you should be good to clone and checkout.Further information can be found on https://help.github.com/articles/generating-ssh-keys (thanks to @Lee Whitney)More extensive troubleshooting and even  automated fixing can be done with: ssh -vT git@github.comSource: http://help.github.com/ssh-issues/This error can happen when you are accessing the SSH URL (Read/Write) instead of Git Read-Only URL but you have no write access to that repo.Sometimes you just want to clone your own repo, e.g. deploy to a server. In this case you actually only need READ-ONLY access. But since that's your own repo, GitHub may display SSH URL if that's your preference. In this situation, if your remote host's public key is not in your GitHub SSH Keys, your access will be denied, which is expected to happen.An equivalent case is when you try cloning someone else's repo to which you have no write access with SSH URL.In a word, if your intent is to clone-only a repo, use HTTPS URL (https://github.com/{user_name}/{project_name}.git) instead of SSH URL (git@github.com:{user_name}/{project_name}.git), which avoids (unnecessary) public key validation.Update: GitHub is displaying HTTPS as the default protocol now and this move can probably reduce possible misuse of SSH URLs.Note that (at least for some projects) you must have a github account with an ssh key.Look at the keys listed in your authentication agent (ssh-add -l)  (if you don't see any, add one of your existing keys with ssh-add /path/to/your/key (eg: *ssh-add ~/.ssh/id_rsa*))  (if you don't have any keys, first create one. See: http://rcsg-gsir.imsb-dsgi.nrc-cnrc.gc.ca/documents/internet/node31.html or just google ssh-keygen)To verify that you have a key associated with your github account:Go to: https://github.com/settings/sshYou should see at least one key with a hash key matching one of the hashes you saw when you typed ssh-add -l just a minute ago.If you don't, add one, then try again.I had a slight different situation, I was logged on to a remote server and was using git on the server, when I ran any git command I got the same message   Permission denied (publickey).   fatal: The remote end hung up unexpectedlyThe way I fixed it was by changing the file /etc/ssh_config on my Mac. fromForwardAgent no to ForwardAgent yesThe basic GIT instructions did not make a reference to the SSH key stuff. Following some of the links above, I found a git help page that explains, step-by-step, exactly how to do this for various operating systems (the link will detect your OS and redirect, accordingly):http://help.github.com/set-up-git-redirect/It walks through everything needed for GITHub and also gives detailed explanations such as ""why add a passphrase when creating an RSA key."" I figured I'd post it, in case it helps someone else...The github help link helped me sort out this problem. Looks like the ssh key was not added to the ssh-agent. This is what i ended up doing. Ensure ssh-agent is enabled:Command 1:Start the ssh-agent in the backgroundeval ""$(ssh-agent -s)""Command 2:Add your SSH key to the ssh-agent:ssh-add ~/.ssh/id_rsaOn Windows, make sure all your apps agree on HOME.  Msys will surprisingly NOT do it for you. I had to set an environment variable because ssh and git couldn't seem to agree on where my .ssh directory was.Are you in a corporate environment?  Is it possible that your system variables have recently changed?  Per this SO answer, ssh keys live at %HOMEDRIVE%%HOMEPATH%\.ssh\id_rsa.pub.  So if %HOMEDRIVE% recently changed, git doesn't know where to look for your key, and thus all of the authentication stuff.  Try running ssh -vT git@github.com.  Take note of where the identity file is located.  For me, that was pointing not to my normal \Users\MyLogin but rather to a network drive, because of a change to environment variables pushed at the network level.The solution?  Since my new %HOMEDRIVE% has the same permissions as my local files, I just moved my .ssh folder there, and called it a day.In addition to Rufinus' reply, the shortcut to copy your ssh key to the clipboard in Windows is:type id_rsa.pub | clipRefs:Print to standard outputCopy command line output to clipboardI have just experienced this issue while setting my current project, and none of the above solution works. so i tried looking what's really happening on the debug list using the command ssh -vT git@github.com. I notice that my private key filename is not on the list. so renaming the private key filename to 'id_rsa' do the job. hope this could help."
"One classic root cause for this message is:when the repo has been initialized (git init lis4368/assignments), but no commit has ever been madeIe, if you don't have added and committed at least once, there won't be a local master branch to push to.See ""Why do I need to explicitly push a new branch?"" for more.It doesn't recognize that you have a master branch, but I found a way to get around it. I found out that there's nothing special about a master branch, you can just create another branch and call it master branch and that's what I did.To create a master branch:git checkout -b masterAnd you can work off of that."
"I believe this occurs when you are trying to checkout a remote branch that your local git repo is not aware of yet.  Try:git remote show originIf the remote branch you want to checkout is under ""New remote branches"" and not ""Tracked remote branches"" then you need to fetch them first:git remote updategit fetchNow it should work:git checkout -b local-name origin/remote-nameAlternate syntax,git fetch origin remote_branch_name:local_branch_nameAfter having tried most of what I could read in this thread without success, I stumbled across this one:Remote branch not showing up in ""git branch -r""It turned out that my .git/config file was incorrect. After doing a simple fix all branches showed up.Going from[remote ""origin""]    url = http://stash.server.com/scm/EX/project.git    fetch = +refs/heads/master:refs/remotes/origin/masterto[remote ""origin""]    url = http://stash.server.com/scm/EX/project.git    fetch = +refs/heads/*:refs/remotes/origin/*Did the trickNot sure if this is helpful or exactly relevant to your question, but if you are trying to fetch and checkout only a single branch from the remote repository, then the following git commands will do the trick:url= << URL TO REPOSITORY >>branch= << BRANCH NAME >>git initgit remote add origin $urlgit fetch origin $branch:origin/$branchgit checkout -b $branch --track origin/$branchnone of the above worked for me. My situation is slightly different, my remote branch is not at origin. but in a different repository.git remote add remoterepo GIT_URL.gitgit fetch remoterepogit checkout -b branchname remoterepo/branchnametip: if you don't see the remote branch in the following output git branch -v -a there is no  way to check it out.Confirmed working on 1.7.5.4For me what worked was:git fetchWhich pulls all the refs down to your machine for all the branches on remote. Then I could do git checkout <branchname>and that worked perfectly. Similar to the top voted answer, but a little more simple.It's not very intuitive but this works well for me ...   mkdir remote.git & cd remote.git & git init  git remote add origin $REPO  git fetch origin $BRANCH:refs/remotes/origin/$BRANCH        THEN run the git branch --track command ...  git branch --track $BRANCH origin/$BRANCHI suspect there is no remote branch named remote-name, but that you've inadvertently created a local branch named origin/remote-name.Is it possible you at some point typed:git branch origin/remote-nameThus creating a local branch named origin/remote-name?  Type this command:git checkout origin/remote-nameYou'll either see:Switched to branch ""origin/remote-name""which means it's really a mis-named local branch, orNote: moving to ""origin/rework-isscoring"" which isn't a local branchIf you want to create a new branch from this checkout, you may do so(now or later) by using -b with the checkout command again. Example:  git checkout -b which means it really is a remote branch.Could your issue be linked to this other SO question ""checkout problem""?i.e.: a problem related to:an old version of Gita curious checkout syntax, which should be: git checkout -b [<new_branch>] [<start_point>], with  [<start_point>] referring to the name of a commit at which to start the new branch, and 'origin/remote-name' is not that.(whereas git branch does support a start_point being the name of a remote branch)Note: what the checkout.sh script says is:  if test '' != ""$newbranch$force$merge""  then    die ""git checkout: updating paths is incompatible with switching branches/forcing$hint""  fiIt is like the syntax  git checkout -b [] [remote_branch_name] was both renaming the branch and resetting the new starting point of the new branch, which is deemed incompatible.After fetching a zillion times still added remotes didn't show up, although the blobs were in the pool. Turns out the --tags option shouldn't be given to git remote add for whatever reason. You can manually remove it from the .git/config to make git fetch create the refs."
"If you initially cloned your repository then:git push origin masterIf you are wanting to push local files to an empty repository you created on github, then:git remote add origin git@github.com:username/reponame.gitYou have to have a connection established to communicate properly.  Here is a more detailed answer to help.Here is a good Git tutorial site.EDIT:""You push your local repository to the remote repository using the git push command after first establishing a relationship between the two with the git remote add command. If you visit your Github repository, it will show you the URL to use for pushing. You'll first enter something like:git remote add origin git@github.com:username/reponame.git ""Replace git@github.com:username/reponame.git with the URL from the repository.  The URL is located on the right side bar, titled ""SSH clone URL""."
"Use the BFG Repo-Cleaner, a simpler, faster alternative to git-filter-branch specifically designed for removing files from Git history.Carefully follow the steps here: http://rtyley.github.io/bfg-repo-cleaner/#usage - but the core bit is just this: download the BFG jar (requires Java 6 or above) and run this command:$ java -jar bfg.jar --delete-folders .git --delete-files .git --no-blob-protection my-repo.gitYour entire repository history will be scanned, and any file or folder named .git will be removed. I've tested this against a specially-constructed test repo containing a .git folder, and it worked just fine.Thanks to Michel Jouvin for reminding me that files named '.git' are also illegal in Git (and the error message reported by Git doesn't make it immediately obvious that they are files, rather than folders), I've updated this answer to reflect that.Full disclosure: I'm the author of the BFG Repo-Cleaner."
"Steps taken to solve the problem.Credits go to: jszakmeister1) I have cloned the project to somewhere else.2) I've checkout master on that clone.3) Placed the gitignore into the master as it should have been there from the beginning:      git show dev:.gitignore > .gitignore4) I've removed the files from the tree by doing git rm ""all files that where on gitignore one by one""5) I've added the .gitignore file to the repo.6) commit it7) switch back to the original repo and did:8) git fetch /path/to/fix-project master:master9) git checkout master, and I got:    Switched to branch 'master'     Your branch is ahead of 'hub/master' by 1 commit.    this is my remote master branch.10) Pushed to remote master.11) checkout dev again"
"rm .DS_Storegit add -Agit commit -m ""Added .gitignore file""You'll also want to expressly add .DS_Store to your .gitignore so that when .DS_Storeis inevitably created in the future, it won't get in the way of your commits.You probably don't care about .DS_Store.So, try to move it to .DS_Store.bak and pull again"
"You need to set up your git repo correctly.I think you followed this section ""Installing WordPress on your development environment"" from the link you provided https://developers.google.com/appengine/articles/wordpressSo what you did was download WordPress into your folder which you set up to be a .git repository.  However, the WordPress project builder you downloaded itself contains a .git repository.Check if you have a /workpress/.git file.  It likely contains something like :gitdir: ../.git/modules/wordpressIf you do, then that explains the error I think.As for setting it up correctly, there are many tutorials available.One way is to use Git for theme deployment, rather than having it manage your entire WordPress installation  --> http://culttt.com/2013/04/08/how-to-deploy-wordpress-themes-with-git/Another way is to add wordpress as a submodule http://www.efeqdev.com/website-development/this-is-how-we-version-control-and-deploy-our-wordpress-websites-with-git/or Just make a ~/Downloads/rtt/rtt-code/wordpress/myWebpage directory and set up a git repo in it. http://www.whistlenet.com/git-for-wordpress/"
"The index file has become corrupted, but it is easily re-creatable. Just remove it, and re-add the files in your working directory:rm .git/indexgit add .If you want to keep local changes, use the following:$ rm .git/index$ git reset HEAD .> Unstaged changes after reset:  modified foo.txt  modified bar.txtI've had the same issue and I've fixed removing .git/index an then reseting to HEAD. You have details here:http://programertools.blogspot.com/2014/04/how-to-fix-fatal-index-file-smaller.html"
"Bus error indicates a memory problem; it could be as simple as a corrupted file on disk, a bug in the git program, or failing memory, memory controller, etc.If you can run a memory testing tool on your computer overnight, that would help rule out failing memory and controller. (You might also spot them with odd SIGBUS or SIGSEGV during large compiles, or random crashes of other programs...)Can you re-create the repository on the server from your laptop's clone, and see if it functions correctly? My guess is the repository is corrupted, and needs to be replaced with a good clone."
"start debugging?Check the ""Errors"" Eclipse view for a full Stack Trace associate with that error messageExample of an Error View:fix it?If the Exception is a NPE one (NullPointerException), like shown in bug 329611, then you can try a git commit -m ""a message"" in a shell, in order to get past that initial first commit with a GUI.As the OP rogueleaderr mentions, the error view and the exact stack trace behind the exception was enough:Somehow, I managed to not have ""write"" permissions to the .git directory.  So was trying to write the commit and getting bounced.I've solved my case removing index.lock file from the git folder of the project.I face this problem too, Error tab doesn't show anything more. So I use GitExtension to commit instead, problem solved. Using parallel eGit and GitExtension to keep tracking a local git repo is a good idea. It's update runtime on both Eclipse and GitExtension when we make change on each.I faced this problem. I delete the .git folder and .gitignore file push to upstream it works correctly."
"You can simply convert your remote repository to bare repository (there is no working copy in the bare repository - the folder contains only the actual repository data).Execute the following command in your remote repository folder:git config --bool core.bare trueThen delete all the files except .git in that folder. And then you will be able to perform git push to the remote repository without any errors.I just had the same error while I began learning Git. Some of the other answers are clearly not for someone new to Git!(I am going to use non technical terms to get the idea across.) Anyway, what is happening is that you have two repositories, one is the original you first made, and the other the work one you just made.Right now you are in your work repository and are using the ""master"" branch. But you also happen to be ""logged in"" in your original repository to the same ""master"" branch. Now since you're ""logged in"" in the original, Git fears you might mess up because you might be working on the original and screw things up. So you need to return to the original repository and do a ""git checkout someotherbranch"", and now you can push with no problems.I hope this helps.The error message describes what has happened. More modern versions of Git refuse to update a branch via a push if that branch is checked out.The easiest way to work between two non-bare repositories is either toalways update the repositories by pull (or fetch and merge) or, if you have to,by pushing to a separate branch (an import branch) and then merging that branch into the master branch on the remote machine.The reason for this restriction is that the push operation operates only on the remote Git repository, it doesn't have access to the index and working tree. So, if allowed, a push on the checked-out branch would change the HEAD to be inconsistent with the index and working tree on the remote repository.This would make it very easy to accidentally commit a change that undoes all of the pushed changes and also makes it very difficult to distinguish between any local changes that have not been committed and differences between the new HEAD, the index and the working tree that have been caused by push moving HEAD.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.There are multiple solutions, depending on your needs.Solution 1: Use a Bare RepostioryAs suggested, if on one machine, you don't need the working directory, you can move to a bare repository. To avoid messing with the repository, you can just clone it:machine1$ cd ..machine1$ mv repo repo.oldmachine1$ git clone --bare repo.old repoNow you can push all you want to the same address as before.Solution 2: Push to a Non-Checked-Out BranchBut if you need to check out the code on your remote <remote>, then you can use a special branch to push. Let's say that in your local repository you have called your remote origin and you're on branch master. Then you could domachine2$ git push origin master:master+machine2Then you need to merge it when you're in the origin remote repo:machine1$ git merge master+machine2Autopsy of the ProblemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.You can get around this ""limitation"" by editing the .git/config on the destination server. Add the following to allow a git repository to be pushed to even if it is ""checked out"":[receive]denyCurrentBranch = warnor[receive]denyCurrentBranch = falseThe first will allow the push while warning of the possibility to mess up the branch, whereas the second will just quietly allow it.This can be used to ""deploy"" code to a server which is not meant for editing. This is not the best approach, but a quick one for deploying code.I like the idea of still having a usable repository on the remote box, but instead of a dummy branch, I like to use:git checkout --detachThis seems to be a very new feature of Git - I'm using git version 1.7.7.4.I had the same issue. For me, I use Git push to move code to my servers. I never change the code on the server side, so this is safe.In the repository, you are pushing to type:git config receive.denyCurrentBranch ignoreThis will allow you to change the repository while it's a working copy.After you run a Git push, go to the remote machine and type this:git checkout -fThis will make the changes you pushed be reflected in the working copy of the remote machine.Please note, this isn't always safe if you make changes on in the working copy that you're pushing to.You can recreate your server repository and push from your local branch master to the server master.On your remote server:mkdir myrepo.gitcd myrepo.gitgit init --bareOK, from your local branch:git push origin master:masterWith a few setup steps you can easily deploy changes to your website using a one-liner like git push productionWhich is nice and simple, and you don't have to log into the remote server and do a pull or anything. Note that this will work best if you don't use your production checkout as a working branch! (The OP was working within a slightly different context, and I think @Robert Gould's solution addressed it well. This solution is more appropriate for deployment to a remote server.) First you need to set up a bare repository somewhere on your server, outside of your webroot.mkdir mywebsite.gitcd mywebsite.gitgit init --bareThen create file hooks/post-receive:#!/bin/shGIT_WORK_TREE=/path/to/webroot/of/mywebsite git checkout -fAnd make the file executable:chmod +x hooks/post-receiveOn your local machine, git remote add production git@myserver.com:mywebsite.gitgit push production +master:refs/heads/masterAll set! Now in the future you can use git push production to deploy your changes!Credit for this solution goes to http://sebduggan.com/blog/deploy-your-website-changes-using-git/. Look there for a more detailed explanation of what's going on.With git config --local receive.denyCurrentBranch updateInstead on the server repository, it also updates the working tree if no untracked overwrite would happen.It was added in Git 2.3 as mentioned by VonC in the comments.I've compiled Git 2.3 and gave it a try. Sample usage:git init servercd servertouch agit add .git commit -m 0git config --local receive.denyCurrentBranch updateInsteadcd ..git clone server localcd localtouch bgit add .git commit -m 1git push origin master:mastercd ../serverlsOutput:abYay, b got pushed!You should only be pushing to a bare repository.  A bare repository is a repository that has no checked out branches.  If you were to cd to a bare repository directory, you'd only see the contents of a .git directory.In fact, set the remote to a non-checked out branch is sufficient. After you checked out your remote in a different branch, you can push.I had the same problem using Git to synchronise repositories on my Android phone and laptop. The solution for me was to do a pull instead of a push, as @CharlesBailey suggested.git push origin master on the Android repository fails for me with the same error messages that @hap497 got because of a push to a nonbare checkout of a repository + working-copy.git pull droid master on the laptop repository and working-copy works for me. Of course, you need to have previously run something like git remote add droid /media/KINGSTON4GB/notes_repo/.Older versions of Git used to allow pushes to the currently checked out branch of a non-bare repository.  It turns out this was a terribly confusing thing to allow.  So they added the warning message you see, which is also terribly confusing.If the first repository is just acting as a server then convert it to a bare repository as the other answers recommend and be done with it.If however you need to have a shared branch between two repos that are both in use you can achieve it with the following setupRepo1  - will act as the server and also be used for developmentRepo2  - will be for development only Setup Repo1 as followsCreate a branch to share work on.git branch shared_branchTo be safe, you should also create a $(REPO).git/hooks/update that rejects any changes to anything other than shared_branch, because you don't want people mucking with your private branches.repo1/.git/hooks  (GIT_DIR!)$ cat update#!/bin/shrefname=""$1""oldrev=""$2""newrev=""$3""if [ ""${refname}"" != ""refs/heads/shared_branch"" ]then   echo ""You can only push changes to shared_branch, you cannot push to ${refname}""   exit 1fiNow create a local branch in repo1 where you will do your actual work.git checkout -b my_work --track shared_branchBranch my_work set up to track local branch shared_branch.Switched to a new branch 'my_work'(may need to git config --global push.default upstream in order for git push to work)Now you can create repo2 with git clone path/to/repo1 repo2 git checkout shared_branch At this point you have both repo1 and repo2 setup to work on local branches that push and pull from shared_branch in repo1, without needing to worry about that error message or having the working directory get out of sync in repo1.  Whatever normal workflow you use should work.You have 3 optionsPull and push again:git pull; git pushPush into different branch:git push origin master:fooand merge it on remote (either by git or pull-request)git merge fooForce it (not recommended unless you deliberately changed commits  via rebase):git push origin master -fIf still refused, disable denyCurrentBranch on remote repository:git config receive.denyCurrentBranch ignoreHere is one test you can do to see how the bare server stuff work:Imagine you have a workstation and a server with live site hosted on it, and you want to update this site from time to time (this also applies to a situation where two developers are sending their work back and forth through a bare middleman).InitializationCreate some directory on your local computer and cd into it, then execute these commands:# initializationgit init --bare server/.gitgit clone server contentgit clone server localFirst you create a bare server directory (notice the .git at the end). This directory will serve as a container for your repository files only.Then clone your server repository to a newly created content directory. This is your live/production directory which will be served by your server software.The first two directories resides on your server, the third one is a local directory on your workstation.WorkflowNow here is the basic workflow:Enter the local directory, create some files and commit them. Finally push them to the server:# create crazy stuffgit commit -avgit push origin masterNow enter the content directory and update the server's content:git pullRepeat 1-2. Here content may be another developer that can push to the server too, and local as you may pull from him.OK, in case you want a normal remote repository, then create an extra branch and check it out. Push it into one branch (which is not checked out) and merge it with one which is currently active later after pushing from locally.For example, on a remote server:git branch devgit checkout devOn the local setup:git push On remote server:git merge devI had to re-run git --init in an existing bare repository, and this had created a .git directory inside the bare repository tree - I realized that after typing git status there. I deleted that and everything was fine again :)(All these answers are great, but in my case it was something completely different (as far as I can see), as described.)I'm sure most people viewing this question will stop at the first two huge answers, but I'd still like to offer my solution.I had an Eclipse + EGit web project setup when encountering the described error. What helped me was simply using the GitHub app, which seemed to magically resolve the issue. While EGit would always refuse the push, the GitHub desktop app would just shrug its shoulders and push my changes. Maybe it handles the multi-login-situation more gracefully.An article I found that might be useful to others is Git in 5 minutes.I had an Xcode project under Git version control that I wanted to push up to a Virtual Distributed Ethernet (VDE) I have in a DC. The VDE runs Centos 5.None of the articles I read about Git talked about bare repositories. It all sounded so simple until I tried what I thought should be easy coming from an SVN background.The suggestions here to make the remote repository bare worked. Even better for my requirements was to clone the Xcode project to projectname.git, copy that to the remote server; then pushes magically worked. The next step will be getting Xcode to push without errors about commits, but for now I'm okay doing it from Terminal.So:cd /tmp (or another other directory on your system)<br/>git clone --bare /xcode-project-directory projectname.git<br/>scp -r projectname.git sshusername@remotehost.com:repos/<br/>To push changes from your Xcode project after you've committed in Xcode:cd /xcode-project-directory<br/>git push sshusername@remotehost.com:repos/projectname.git<br/>I'm certain there is a smoother more sophisticated way of doing the above, but at a minimum this works. Just so everything is clear, here are some clarifications:/xcode-project-directory is the directory your xcode project is stored in. It's probably /Users/Your_Name/Documents/Project_Name.projectname is literally the name of the project, but it can be anything you care to call it. Git doesn't care, you will.To use scp you need to have a user account on the remote server that's allowed SSH access. Anyone running their own server will have this. If you're using shared hosting or the like, you might be out of luck.remotehost.com is the name of your remote host. You could as easily use its IP address. Just for further clarity I'm using Gitosis on the remote host with SSH keys, so I'm not prompted for passwords when I push. The article Hosting Git Repositories, the Easy (and Secure) Way tells you how to set all that up.The best way to do this is:mkdir ..../remotecd ..../remotegit clone --bare .../currentrepo/This will clone the repository, but it won't make any working copies in .../remote. If you look at the remote, you'll see one directory created, called currentrepo.git, which is probably what you want.Then from your local Git repository:git remote add remoterepo ..../remote/currentrepo.gitAfter you make changes, you can:git push remoterepo masterI just ran into this problem with a deployment git repository on Heroku.I don't know why Heroku has a non-bare repository on their side, but as a workaround I was able to reset the remote repository, and reupload.You shouldn't use Heroku's copy of your repository as your only git repository for collaboration, but just in case, I'll say clearly: Do not do this unless you are sure you have a full copy of your repository stored securely somewhere other than Heroku. Doing a reset will delete the repository contents.To reset:Install the Heroku toolbelt (which contains the command line client) if you haven't already.Install the heroku-repo plugin if you haven't already.heroku plugins:install https://github.com/heroku/heroku-repo.gitDo the reset, which deletes the repository and creates a new, empty oneheroku repo:resetPush to your Heroku remote as you normally would; it will reupload everything."
"There are two types of repositories: bare and non-bareBare repositories do not have a working copy and you can push to them. Those are the types of repositories you get in Github! If you want to create a bare repository, you can usegit init --bareSo, in short, you can't push to a non-bare repository (Edit: Well, you can't push to the currently checked out branch of a repository. With a bare repository, you can push to any branch since none are checked out. Although possible, pushing to non-bare repositories is not common). What you can do, is to fetch and merge from the other repository. This is how the pull request that you can see in Github works. You ask them to pull from you, and you don't force-push into them.Update: Thanks to VonC for pointing this out, in the latest git versions (currently 2.3.0), pushing to the checked out branch of a non-bare repositories is possible. Nevertheless, you still cannot push to a dirty working tree, which is not a safe operation anyway.I solved this problem by first verifying the that remote did not have anything checked out (it really was not supposed to), and then made it bare with:$ git config --bool core.bare trueAfter that git push worked fine.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.Autopsy of the problemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.As there's already an existing repository, runninggit config --bool core.bare trueon the remote repository should sufficeFrom the core.bare documentationIf true (bare = true), the repository is assumed to be bare with no working directory associated. If this is the case a number of commands that require a working directory will be disabled, such as git-add or git-merge (but you will be able to push to it).This setting is automatically guessed by git-clone or git-init when the repository is created. By default a repository that ends in ""/.git"" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).TLDRPull & push again: git pull &&& git push.Still a problem? Push into different branch: git push origin master:foo and merge it on remote repo.Alternatively force the push by adding -f (denyCurrentBranch needs to be ignored).Basically the error means that your repository is not up-to-date with the remote code (its index and work tree is inconsistent with what you pushed).Normally you should pull first to get the recent changes and push it again.If won't help, try pushing into different branch, e.g.:git push origin master:foothen merge this branch on the remote repository back with master.If you changed some past commits intentionally via git rebase and you want to override repo with your changes, you probably want to force the push by adding -f/--force parameter (not recommended if you didn't do rebase). If still won't work, you need to set receive.denyCurrentBranch to ignore on remote as suggested by a git message via:git config receive.denyCurrentBranch ignorecd into the repo/directory that you're pushing into on the remote machine and enter$ git config core.bare trueMaybe your remote repo is in the branch which you want to push. You can try to checkout another branch in your remote machine. I did this, than these error disappeared, and I pushed success to my remote repo. Notice that I use ssh to connect my own server instead of github.com."
"The error message leads to the conclusion that you do not have a master branch in your local repository. Either push your main development branch (git push origin my-local-master:master which will rename it to master on github) or make a commit first. You can not push a completely empty repository.I was having the same issue and then smacked myself in the head because I hadn't actually added my project files.git add -Agit commit -am ""message""git push origin masterI had the same issue. I deleted the .git folder then followed the following commands$ git init$ git add .$ git remote add origin git@gitorious.org:project/project.git$ git commit -m ""Initial version""$ git push origin masterI just had the same problem while creating my first Git repository ever. I had a typo in the Git origin remote creation - turns out I didn't capitalize the name of my repository. git remote add origin git@github.com:Odd-engineFirst I removed the old remote using git remote rm originThen I recreated the origin, making sure the name of my origin was typed EXACTLY the same way my origin was spelled. git remote add origin git@github.com:Odd-EngineNo more error! :)I have same issue . it's solved my problem . €¡f you init your git . you have to do on Terminal 1) git add .2)git commit -m ""first commit""For send to bitbucket 3) git push -u origin --all # pushes up the repo and its refs for the first timeI had the same error, as Bombe said I had no local branch named master in my config, although git branch did list a branch named master...To fix it just add this to your .git/config[branch ""master""]    remote = origin    merge = refs/heads/masterKinda hacky but does the jobmake sure you are on a branch, at least in master branchtype:git branchyou should see:ubuntu-user:~/git/turmeric-releng$ git branch* (no branch)masterthen type:git checkout masterthen all your changes will fit in master branch (or the branch u choose)i fixed my problem....not sure what the problem was but using the gitx interface to commit my staged files, then...$ git push origin masterworked...i am having the same problem...created a new folder added in the bort template files...$ git commit -m 'first commit'$ git remote add origin git@github.com:eltonstewart/band-of-strangers.git$ git push origin masterthen i get the same error...error: src refspec master does not match any.  fatal: The remote end hung up unexpectedly  error: failed to push some refs to 'git@github.com:eltonstewart/band-of-strangers.git'error: failed to push some refs to 'git@github.com:{username}/{projectname}.git'Unless you're generalizing the error message, it looks like you literally put git@github.com:{username}/{projectname}.git as your remote Git repo. You should fill in {username} with your GitHub username, and {projectname} with your project's name.To actually resolve the issue I used the following command to stage all my files to the commit.$ git add .$ git commit -m 'Your message here'$ git push origin masterThe problem I had was that the -u command in git add didn't actually add the new files and the git add -A command wasn't supported on my installation of git. Thus as mentioned in this thread the commit I was trying to stage was empty.cd  app git init git status touch  test git add . git commit  -a  -m""message to log "" git commit  -a  -m ""message to log"" git remote add origin  git remote add origin git@git.google.net:cherry git push origin master:refs/heads/mastergit clone git@git.google.net:cherry test1I had same issue. I had mistakenly created directory in machine in lower case. Once changed the case , the problem solved(but wasted my 1.5 hrs :( )Check it out your directory name and remote repo name is same.It looks like this question has a number of answers already, but I'll weigh in with mine since I haven't seen any that address the issue I had.I had this error as well on a brand new github repository. It turns out the user I was pushing from did not have push access. For some reason, this results in an ""ERROR: repository not found"" error instead of some sort of access error.Anyway, I hope this helps the poor soul who runs into the same issue."
"At server side, do this:git config receive.denyCurrentBranch ignoreThen you can push at local.As I pointed out in this post http://stackoverflow.com/questions/3217969/heroku-like-git-setuppushing to working repositories is a bit dangerous as any work in progress is not taken into account by the push, and it is quite easy to subsequently lose any uncommitted changes (basically the working HEAD can get out of step with the working branch HEAD). Git now has a warning to inform you of this - the, gory, details are in the following link:git push to a non-bare repositoryIt is recommended that your published repository should be a bare repo which does not have a checked out tree. Bare repos are created using the ""git clone --bare"" option.Pushing to a non-bare repo is now possible (Git 2.3.0 February 2015).And it is possible when you are pushing the branch currently checked out at the remote repo!See commit 1404bcb by Johannes Schindelin (dscho):receive-pack: add another option for receive.denyCurrentBranchWhen synchronizing between working directories, it can be handy to update the current branch via 'push' rather than 'pull', e.g. when pushing a fix from inside a VM, or when pushing a fix made on a user's machine (where the developer is not at liberty to install an ssh daemon let alone know the user's password).The common workaround ‰ÛÒ pushing into a temporary branch and then merging on the other machine ‰ÛÒ is no longer necessary with this patch.The new option is:updateInsteadUpdate the working tree accordingly, but refuse to do so if there are any uncommitted changes.This should help: http://stackoverflow.com/questions/3191400/pushing-to-a-git-repository-does-not-work/3191584#3191584"
"If the GitHub repo has seen new commits pushed to it, while you were working locally, I would advice for:git pull --rebasegit pushThe full syntax is:git pull --rebase origin mastergit push origin masterThat way, you would replay (the --rebase part) your local commits on top of the newly updated origin/master (or origin/yourBranch: git pull origin yourBranch).See a more complete example in the chapter 6 Pull with rebase of the Git Pocket Book.I would recommend a:git push -u origin masterThat would establish a tracking relationship between your local master branch and its upstream branch.After that, any future push for that branch can be done with a simple:git pushSee ""Why do I need to explicitly push a new branch?"".Since the OP already reset and redone its commit on top of origin/master:git reset --mixed origin/mastergit add .git commit -m ""This is a new commit for what I originally planned to be amended""git push origin masterThere is no need to pull --rebase.Note: git reset --mixed origin/master can also be written git reset origin/master, since the --mixed option is the default one when using git reset.If you just used git init and have added your files with git add . or something similar and have added your remote branch it might be that you just haven't committed (git commit -m 'commit message') anything locally to push to the remote... I just had this error and that was my issue.I find the solution to this problem in github help.You can see it from:Dealing with non-fast-forward errorsIt says:You can fix this by fetching and merging the changes made on the remote branch with the changes that you have made locally:  $ git fetch origin# Fetches updates made to an online repository$ git merge origin branch# Merges updates made online with your local workOr, you can simply use git pull to perform both commands at once:$ git pull origin branch# Grabs online updates and merges them with your local work"
"I just ran into this issue as well. I had been added to an existing project. I cloned it and committed a local change. I went to push and got the ERROR: Repository not found. error message. I realized that the person who added me only gave me read-only access to the repo. A quick email to him and I'm able to push. Check to see if you have read-write access.Good luck!I was getting the same errorERROR: Repository not found.   fatal: The remote end hung up unexpectedlyand I had created the repository on Github and cloned it locally.I was able to solve by opening .git/config and removing the [remote ""origin""] section.[remote ""origin""]      url = git@github.com:alexagui/my_project.git     fetch = +refs/heads/*:refs/remotes/origin/*then I ran the following (again)git remote add origin git@github.com:alexagui/my_project.git  git push -u origin masterand this time I was able to push to the repository.I ran into the same issue and I solved it by including my username and password in the repo url:git clone https://myusername:mypassword@github.com/path_to/myRepo.gitI got this error (but before was working). My problem was the missing ssh key binded with the Github account. You can check you current ssh keys with ssh-add -l.If your key is missing, you can add it with ssh-add ~/.ssh/your_keygit remote rm origingit remote add origin <remote url>Had similar issue. The root of the problem was that I followed some online tutorial about adding a new repository to Github. Just go to Github, create a new repo, it will ask you to add a README, don't add it. Create it, and you'll get instructions on how to push.It's similar to the next two lines:git remote add origin https://github.com/YOUR_USER/your-repo.gitgit push -u origin masterIf you belong to a group in Github check that you have Write Access.If you include your username and the repo name we can reasonably help you, at the moment we have no reason to think the repo does actually exist.Additionally, if the repo is private and you don't have access to it, github returns ""Does not exist"" to avoid disclosing the existance of private repos.EDIT: If you're not able to clone it because it's saying it doesn't exist and it's private, it's because you're not sending authentication. Ensure that your public key is added to your keyring, or use HTTP basic auth for the time being.Changing the content of the .git/config file helps as Alex said above. I experienced the same problem and I think it was because I changed my Github username. The local files could not be updated with the changes. So perhaps anytime you change your username you might consider running git remote add origin your_ssh_link_from_githubI hope this helps ;)I had the same problem. My issue was misunderstanding that I had to first create the empty repo on github before pushing to it. Doh! Including this here for anyone else who doesn't realize.You need to check your SSH access as the following: ssh -T git@github.comthis issue was because i don't add the person response on SSH in repository, read more about SSH link-1, link-2.Have experienced the same problem. Everything was working fine for years and then suddenly this error.The problem turns out was that I added a deploy key for another repo to my SSH agent before my user's github SSH key (which I always used to access the repo in question). SSH agent tried the deploy key for another repo first, and GitHub for some totally unexplainable reason was sayingERROR: Repository not found.Once I've removed the deploy key from SSH agent, everything was back to normal.I had this issue and realized I was using a different account from the one whose repo it was. Logging in as the original user resolved the issue.I had a similar problem.  The incorrect credentials were cached in OS X's key-chain.Check out: https://help.github.com/articles/updating-credentials-from-the-osx-keychain"
"I just got the same problem and just figured out what's cause.Github seems only supports ssh way to read&write the repo, although https way also displayed 'Read&Write'.So you need to change your repo config on your PC to ssh way:edit .git/config file under your repo directoryfind url=entry under section [remote ""origin""]change it from url=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git to    url=ssh://git@github.com/derekerdmann/lunch_call.git. that is, change all the texts before @ symbol to ssh://gitSave config file and quit. now you could use git push origin master to sync your repo on GitHubTo definitely be able to login using https protocol, you should first set your authentication credential to the git Remote URI:git remote set-url origin https://yourusername@github.com/user/repo.gitThen you'll be asked for a password when trying to git push.In fact, this is on the http authentication format. You could set a password too:https://youruser:password@github.com/user/repo.gitYou should be aware that if you do this, your github password will be stored in plaintext in your .git directory, which is obviously undesirable.One small addition to Sean's answer.Instead of editing .git/config file manually, you can use git remote set-url command.In your case it should be:git remote set-url origin ssh://git@github.com/derekerdmann/lunch_call.gitI find it easier and cleaner, than messing around with dot-files.help.github.com: Changing a remote's URLThe other answers that suggest switching to SSH sort of miss the point. HTTPS is supported, but you must log in with you GITHUB password, not your SSH passphrase (which was what was giving me the same exact error). I was having the same problem, but making sure to use my actual GitHub password at the terminal password prompt fixed the solution with no alteration to the config, or resorting to SSH.The reason it is important to note this, is many public institutions (such as my school) will block SSH, but allow HTTPS (which is the only reason I started cloning over HTTPS in the first place).Hope that helps anyone else having the same issue...Edit .git/config file under your repo directoryFind url= entry under section [remote ""origin""]Change it from url=https://github.com/rootux/ms-Dropdown.git to https://USERNAME@github.com/rootux/ms-Dropdown.gitwhere USERNAME is your github user nameI think @deepwaters got the answer correct for older versions. The HTTPS URL needs to have the username. I had git 1.7.0.4 and git push origin master wouldn't even ask for a password till I added it.Upgrade your git. GitHub has answered this question at https://help.github.com/articles/error-the-requested-url-returned-error-403.Figured it out. I cloned over HTTPS. Setting up my public SSH keys, cloning over SSH, and pushing over SSH fixed it.Same error and resolution on Mac OS X.Everything was working fine till I created a new account on GitHub and tried to push$ git push -u origin masterAnd got the error:remote: Permission to NEWUSER/NEWREPO.git denied to OLDUSER. fatal: unable to access ‰Û÷https://github.com/NEWUSER/NEWREPO.git/': The requested URL returned error: 403It should have fixed by setting the user.name either for global or current repo$ git config ‰ÛÒ-global user.name NEWUSER$ git config user.name NEWUSERBut it didn‰Ûªt. I got it fixed by deleting the OLDUSER associated with GitHub from Keychain Access app under Passwords section. Then the push command went successful.$ git push -u origin masterreferenceJust add you username into url like this :https://islam9@github.com/islam9/bootstrap-rtlplease check:http://islamkhalil.wordpress.com/2012/12/06/github-error-pushing-to-git-returning-error-code-403-fatal/A 403 code is ""Forbidden"".  The server saw your request and refused it.  Do you have permission to push to that repository?I actually had a very simple fix to this. All i did was edit the git config file differently after cloning the repository.  The remote origin url is what you need to edit in your default config file. It should look like seen below[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true[remote ""origin""]    fetch = +refs/heads/*:refs/remotes/origin/*    url = https://*username*@github.com/*username*/*repository*.git[branch ""master""]    remote = origin    merge = refs/heads/masterThis works for me -:git remote set-url origin https://username@github.com/user/repo.gitHope it helpsFor anyone curious, my mac machine vs lucid vm ran git 1.7.6 vs 1.7.0.4, and the exact same repo was pushable from my mac (newer git) but not the VMSame curl version. Perhaps some older git versions don't support https pushes?change it fromurl=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git tourl=ssh://git@github.com/derekerdmann/lunch_call.gitIt works! Do not forget the ""git"" before the ""@"".I figured out my own variation of this problem.The issue was not changing the protocol from https to ssl, but instead,setting the Github global username and email! (I was trying to push to a private repository.git config --global user.email ""your_github_email_@email.com""git config --global user.name ""Your full name""I had this problem right now, and it turned out that my server /etc/resolver.conf file had a bad ip address.  Might help others.It could be an accounting issue. The Github account of the upstream (private) repo owner may not be financial. I've seen this where the client's credit card expired.After changing https to http within gitbox app, it worked for me.Sometimes there is nothing wrong with settings, and there are some problems on github servers.https://status.github.com - current status of github :)Github has page dedicated to troubleshooting this error:https://help.github.com/articles/https-cloning-errorsIn my case it turned out that using a new version of git (1.8.5.2) solved this problem.100 % Tested and It Save Your  lot of Time that your Are Finding Solution on NetClick on Your Repository and The Write Hand Side Click On ""Setting "" 2.IN the Left Hand Side Option Panel Click on  ""Collaborators""Add And Person Name You Know In Git Hub  Then Click "" Add Collaborators""After this our ""Push to Git"" work Fine !!Edit .git/config file under your repo directoryFind url= entry under section [remote ""origin""]Change it from url=https://github.com/rootux/ms-Dropdown.git to https://USERNAME@github.com/rootux/ms-Dropdown.gitwhere USERNAME is your github user name=> This solution worked for me."
"Repair PermissionsAfter you have identified and fixed the underlying cause (see below), you'll want to repair the permissions:cd /path/to/repo.gitchgrp -R groupname .chmod -R g+rwX .find . -type d -exec chmod g+s '{}' +If you do not fix the underlying cause, the error will keep coming back and you'll have to keep re-running the above commands over and over again.Underlying CausesThe error could be caused by one of the following:The repository isn't configured to be a shared repository (see core.sharedRepository in git help config).  If the output of:git config core.sharedRepositoryis not group or true or 1 or some mask, try running:git config core.sharedRepository groupand then re-run the recursive chmod and chgrp (see ""Repair Permissions"" above).The operating system doesn't interpret a setgid bit on directories as ""all new files and subdirectories should inherit the group owner"".When core.sharedRepository is true or group, Git relies on a feature of GNU operating systems (e.g., every Linux distribution) to ensure that newly created subdirectories are owned by the correct group (the group that all of the repository's users are in).  This feature is documented in the GNU coreutils documentation:... [If] a directory's set-group-ID bit is set, newly created subfiles inherit the same group as the directory, and newly created subdirectories inherit the set-group-ID bit of the parent directory. ... [This mechanism lets] users share files more easily, by lessening the need to use chmod or chown to share new files.However, not all operating systems have this feature (NetBSD is one example).  For those operating systems, you should make sure that all of your Git users have the same default group.  Alternatively, you can make the repository world-writable by running git config core.sharedRepository world (but be careful‰ÛÓthis is less secure).The file system doesn't support the setgid bit (e.g., FAT).  ext2, ext3, ext4 all support the setgid bit.  As far as I know, the file systems that don't support the setgid bit also don't support the concept of group ownership so all files and directories will be owned by the same group anyway (which group is a mount option).  In this case, make sure all Git users are in the group that owns all the files in the file system.Not all of the Git users are in the same group that owns the repository directories.  Make sure the group owner on the directories is correct and that all users are in that group.For Ubuntu (or any Linux)From project root,cd .git/objectsls -alsudo chown -R yourname:yourgroup *You can tell what yourname and yourgroup should be by looking at the permissions on the majority of the output from that ls -al commandNote: remember the star at the end of the sudo lineA good way to debug this is the next time it happens, SSH into the remote repo, cd into the objects folder and do an ls -al.If you see 2-3 files with different user:group ownership than this is the problem.It's happened to me in the past with some legacy scripts access our git repo and usually means a different (unix) user pushed / modified files last and your user doesn't have permissions to overwrite those files. You should create a shared git group that all git-enabled users are in and then recursively chgrp the objects folder and it's contents so that it's group ownership is the shared git group. You should also add a sticky bit on the folder so that all the files created in the folder will always have the group of git.chmod g+s directory-nameUpdate: I didn't know about core.sharedRepository. Good to know, though it probably just does the above.I just wanted to add my solution. I had a repo on OS X that had ownership of root on some directories and Home (which is my user directory) on others which caused the same error listed above.The solution was simple thankfully. From terminal:sudo chown -R Home projectdirectoryThis can easily happen if you ran git init with a different user from the one you are planning to use when pushing changes.If you blindly follow the instructions on [1] this will happen as you probably created the git-user as root and then immediately moved on to git init without changing user in between.[1] http://git-scm.com/book/en/Git-on-the-Server-Setting-Up-the-ServerSolved for me...just this:sudo chmod 777 -R .git/objectssudo chmod -R ug+w .;This has fixed the issue for me. Basically .git/objects file does not had a write permission, the above line grants permission to all the files and folders in the directory.After you add some stuff... commit them and after all finished push it! BANG!! Start all problems... As you should notice there are some differences in the way both new and existent projects were defined. If some other person tries to add/commit/push same files, or content (git keep both as same objects), we will face the following error:$ git pushCounting objects: 31, done.Delta compression using up to 2 threads.Compressing objects: 100% (17/17), done.Writing objects: 100% (21/21), 2.07 KiB | 0 bytes/s, done.Total 21 (delta 12), reused 0 (delta 0)remote: error: insufficient permission for adding an object to repository database ./objects  remote: fatal: failed to write objectTo solve this problem you have to have something in mind operational system's permissions system as you are restricted by it in this case. Tu understand better the problem, go ahead and check your git object's folder (.git/objects). You will probably see something like that:<your user_name>@<the machine name> objects]$ ls -latotal 200drwxr-xr-x 25 <your user_name> <group_name> 2048 Feb 10 09:28 .drwxr-xr-x  3 <his user_name> <group_name> 1024 Feb  3 15:06 ..drwxr-xr-x  2 <his user_name> <group_name> 1024 Jan 31 13:39 02drwxr-xr-x  2 <his user_name> <group_name> 1024 Feb  3 13:24 08*Note that those file's permissions were granted only for your users, no one will never can changed it... *Level       u   g   oPermission rwx r-x ---Binary     111 101 000Octal       7   5   0SOLVING THE PROBLEMIf you have super user permission, you can go forward and change all permissions by yourself using the step two, in any-other case you will need to ask all users with objects created with their users, use the following command to know who they are:$ ls -la | awk '{print $3}' | sort -u <your user_name><his user_name>Now you and all file's owner users will have to change those files permission, doing:$ chmod -R 774 .After that you will need to add a new property that is equivalent to --shared=group done for the new repository, according to the documentation, this make the repository group-writable, do it executing:$ git config core.sharedRepository grouphttps://coderwall.com/p/8b3ksgFor my case none of the suggestions worked. I'm on Windows and this worked for me:Copy the remote repo into another folderShare the folder and give appropriate permissions.Make sure you can access the folder from your local machine. Add this repo as another remote repo in your local repo. (git remote add foo //SERVERNAME/path/to/copied/git)Push to foo. git push foo master. Did it worked? Great! Now delete not-working repo and rename this into whatever it was before. Make sure permissions and share property remains the same."
"You need to change the default push behavior.  The branch being complained about is master, which doesn't appear to be the branch you are working on.  By default, Git treats push.default as matching, which means that when you say git push, it will push every branch that goes to origin.  Unfortunately, most people don't keep all their local versions of branches up-to-date, which will result in the error that you see above.It happens because there are new commits on the master branch in the remote repository, but your local version of master doesn't have them.  When you push, Git is trying to make the remote master branch match your local version.  Since the local version is behind by several commits, this is a non-fast-forward update (you would lose history) and Git complains.I generally recommend that folks change the push.default setting right away to either upstream, simple, or current:git config push.default upstreamgit config push.default simplegit config push.default currentYou can read about the difference it the git-config man page (search for ""push.default"").  You can also see it at the command line with:git help configOnce set, git push will only push the branch that you are on, and this message will go away.Also, if you're debating on using git push --force, don't consider it until after you've changed your default push setting.  It's a great way to lose history, and it's also the reason why Git will change the default behavior in 2.0--though I think they should've done it already.You're still on the branch myBranch, so you need to specifically say that you only want to push that branch:git push origin myBranchOr, you can configure to always push the branch that you're on by default:git config push.default currentAfter that, to fix the master branch:git rebase origin/master mastergit push origin masterIt looks, like your branch didn't configured well for git pull. In case you just want to push a bunch of simple commits (no merge commits) I would suggest using git rebase:git checkout mastergit rebase origin/mastergit pushIn case your changes contain merge commits and you want to push it, like you see it in the history (gitk --all) you can dogit checkout mastergit merge origin/mastergit push"
"Someone else (or you on some other machine) has pushed a changeset to the remote repository. You, on your local machine dont have those changes yet. So to solve the situation you first have to git pulland then git pushHowever, you wont be able to git pull while you have changes in your working tree, so before you pull/push, you first have to commit or stash your local changes. This, potentialy, might bring up a merge situation if remote changes overlap with your local ones."
"Perhaps try:git push git@github.com:{username}/{projectname}.git HEAD:testThe format of the last parameter on that command line is a refspec which is a source ref followed by a colon and then the destination ref. You can also use your local branch name (my_test) instead of HEAD to be certain you're pushing the correct branch.The documentation for git push has more detail on this parameter.Also, you don't need to type out the whole url each time you want to push.  When you ran the clone, git saved that URL as 'origin', that's why you can run something like 'merge origin/test' - it means the 'test' branch on your 'origin' server.  So, the simplest way to push to your server in that case would be:git push origin my_test:testThat will push your local 'my_test' branch to the 'test' branch on your 'origin' server.  If you had named your local branch the same as the branch on the server, then the colon is not neccesary, you can simply do:git push origin testI think here you will need to set up branch tracking. Please run the following to enable trackinggit branch --track my_test origin/my_testTo test git push -u origin my_testgit pull origin my_testThis error also comes up if you try to push to a new repository without having committed anything first. Try:git add -Agit commit -am 'Initial commit'And then try your push again."
"See the 'non-fast forward' section of 'git push --help' for details.You can perform ""git pull"", resolve potential conflicts, and ""git push"" the result. A ""git pull"" will create a merge commit C between commits A and B.Alternatively, you can rebase your change between X and B on top of A, with ""git pull --rebase"", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A.You can also force a push by adding the + symbol before your branch name.git push origin +some_branchYou probably have changes on github that you never merged. Try git pull to fetch and merge the changes, then you should be able to push. Sorry if I misunderstood your question.If you ""git pull"" and it says ""Already up-to-date."", and still get this error, it might be because one of your other branches isn't up to date.  Try switching to another branch and making sure that one is also up-to-date before trying to ""git push"" again:Switch to branch ""foo"" and update it:$ git checkout foo$ git pullYou can see the branches you've got by issuing command:$ git branchYou can force it to push, but please do this ONLY when you're quite sure what you are doing.The command is:git push -fThis problem can also occur when you have conflicting tags. If your local version and remote version use same tag name for different commits, you can end up here.You can solve it my deleting the local tag:$ git tag --delete foo_tagWhen I got this error, I backed up my entire project folder.  Then I did something like$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master...depending on your branch name (if it's not master).Then I did git pull --rebase.  After that, I replaced the pulled files with my backed-up project's files.  Now I am ready to commit my changes again and push."
"The correct refspec for the master branch is either master or refs/heads/master.  So either one of the following should work:git push origin HEAD:mastergit push origin HEAD:refs/heads/masterAs you appear to be using Gerrit (I'm assuming because you've used the gerrit tag in your question), you might not be authorized to push directly into the master branch, depending on how your Gerrit is configured. If you intend to push your changes into code-review instead of directly into the master branch, use the refs/for/master refspec:git push origin HEAD:refs/for/master"
"GitLab by default marks master branch as protected (See part Protecting your code in https://about.gitlab.com/2014/11/26/keeping-your-code-protected/ why). If so in your case, then this can help:Open your project > Settings and go to ""Protected branches"", select: ""Developers can push"" and try again.via https://gitlab.com/gitlab-com/support-forum/issues/40Seems the problem is with some services, like sidekiq. Running sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production outputs all the problems with config."
"You should do the git pull and resolve conflicting files. Open each one, fix it, then git add it. You will find the conflicting lines like that:After doing this with all conflicting files, test your code and run git commit to merge. You will be able to push after that.git is not allowing you to push, pull, fetch because you copy pasted the entire directory. This has copied the .git folder also which git creates on git init. Delete the .git folder and then reinitialize the git repository with git init.This will create a new .git pointing according to the new path."
"I changed my git remote url so there is no ssh via git remote set-url origin /home/git/projects/myproject/"
"Simply type:git remote -vand double-check the url associated with origin for your upstream repo.Once you have the right url, update your remote origin with another git remote command:git remote set-url origin /the/right/urlIn your case, the url is wrong:https:/github.com/nkshastri/datasciencecoursera.git# instead of:https://github.com/nkshastri/datasciencecoursera.git     ^^^^Simply type:git remote set-url origin https://nkshastri@github.com/nkshastri/datasciencecourseraThen try again:git push -u origin master(with master, not maaster)"
"At first glance it looks like you have got your master and Heroku parameters round the wrong way because the first parameter to git push should be the name of the remote repository, the second is refspec (normally a branch). You are more likely to have a branch called master and a remote called Heroku. But I would expect you to get a different error message if that were the case, something like:fatal: 'master' does not appear to be a git repositoryfatal: Could not read from remote repository.The error message you are seeing implies that there is no local master branch. That would be the case if you haven't made any commits yet because git doesn't create the branch until the first commit. You can check this by running:git show-refYou should see a line containing refs/heads/master if you have a master branch. If not then try running:git commit -m 'Initial commit'You can also find out what remotes you have available with:git remote -vIf you have a remote called Heroku you should see something like:Heroku  git@heroku.youraccount:yourproject.git (fetch)Heroku  git@heroku.youraccount:yourproject.git (push)This is work for me:-git push heroku HEAD:master"
"The problem is here:git pushYou must be using old version of git <2.In older version whenever you use git push/pull without any branch name after the command git push all you branches (modified) to the server.In your case you must have cloned the pull request as well and not you try to push them back to stash server.Stash rejects it and does not allow you to push those refs."
"You have to either use https and enter your password or use ssh (and associate your public ssh key to your github account)I tried my best and looked for the causes/solution of the error:Error: The requested URL returned error: 403 while accessinghttps://github.com/Joey-project/repo.git/info/refsfatal: HTTP request failedI believe one of the main reasons of this happening is because of bad login credentials from your local machine to the server.If I remember correctly, one has to (1) Make sure you have a stable git version(2) Ensure the remote is correct(3) Provide access token if 2FA is enabled(4) Checking your permissions(username/password)(5) Use ssh instead of httpsPushing to Git returning Error Code 403 fatal: HTTP request failed might come in handy, which has a lot of extra information regarding your problem.Goodluck! I hope it helps you"
"Your origin repository is ahead of your local repository. You'll need to pull down changes from the origin repository as follows before you can push. This can be executed between your commit and push.git pull origin developmentdevelopment refers to the branch you want to pull from.If you want to pull from master branch then type this one.git pull origin masteryou can write in your console: git pull originthen press TAB and write your ""master"" repositoryIn my case git push was trying to push more that just the current branch, therefore, I got this error since the other branches were not in sync.To fix that you could use: git config --global push.default simpleThat will make git to only push the current branch.This will only work on more recent versions of git. i.e.: won't work on 1.7.9.5"
"If you are sure of what you're doing you can force the push to heroku:git push --force heroku masterThat means you have code in your repository newer than the code in your local repository.You have to merge your changes locally :git pull heroku masterthen you push :git push heroku masterEDIT (following your edit) :try git fetch origingit pull --rebasepush again"
"On Unix-like systems each user can belong to any number of ""groups"". (This is an OS-level concept, not a Git concept).Assuming you are on a unix-like system, to determine which groups you belong to use the command:groupsIf you know which one of the resulting groups to use, then use that for the chgrp command.But, if you are in a situation where you have a system administrator, it would be best to ask them which group your team should use for Git. If you do not belong to that group open a ticket to have yourself included."
"The error from what I know means that the upload link got terminated in a way that it wasn't supposed to.  This is typically because of either a timeout or network connectivity issues.  With increasing the buffer size the servers shouldn't be timing out, but you may still have other issues to check for as below.  Note that I am assuming that you have a space between http.postBuffer and 2M in ""git config --global http.postBuffer 2M"" since your original post didn't and I thought it is a typo when entering it here.  You could also change the global buffer to a much larger size like by using 524288000 (which is 500MB) instead of 2M (i.e. git config --global http.postBuffer 524288000)A few other things:If you have a software firewall like Kaspersky AV, disable it and retry.If you are over wireless connection, switch to a hardwire ethernet.  Some wireless adaptors/drivers seem to be problematic with large commits.Make sure you have a reliable ISP link.Also if you are using HTTP for git, setup SSH key-pair and use them instead."
"As it has already been mentioned in che's answer about adding the remote part, which I believe you are still missing.Regarding your edit for adding remote on your local USB drive. First of all you must have a 'bare repository' if you want your repository to be a shared repository i.e. to be able to push/pull/fetch/merge etc..To create a bare/shared repository, go to your desired location. In your case:$ cd /Volumes/500gb/   $ git init --bare myproject.gitSee here for more info on creating bare repositoryOnce you have a bare repository set up in your desired location you can now add it to your working copy as a remote.$ git remote add origin /Volumes/500gb/myproject.gitAnd now you can push your changes to your repository$ git push origin masterYour config file does not include any references to ""origin"" remote. That section looks like this:[remote ""origin""]    url = git@foo.com:repository.git    fetch = +refs/heads/*:refs/remotes/origin/*You need to add the remote using git remote add before you can use it.Here are the instructions from github:touch README.mdgit initgit add README.mdgit commit -m ""first commit""git remote add origin https://github.com/tqisjim/google-oauth.gitgit push -u origin masterHere's what actually worked:touch README.mdgit initgit add README.mdgit commit -m ""first commit""git remote add origin https://github.com/tqisjim/google-oauth.gitgit clone origin masterAfter cloning, then the push command succeeds by prompting for a username and passwordMay be you forgot to run ""git --bare init"" on the remote?That was my problemWhen you create a repository in bitbucket.org, it gives you instructions on how to set up your local directory.  Chances are, you just forgot to run the code:  git remote add origin https://username@bitbucket.org/username/reponame.gitmy case was a little different - unintentionally I have changed owner of git repository (project.git directory in my case), changing owner back to the git user helped"
"GitHub provided me with this step-by-step documentation and it worked for me: https://help.github.com/articles/remove-sensitive-data/Basically, needed to do a more thorough cleaning of past commits."
"The answer is there, git is telling you to fetch first.Probably somebody else has pushed to master already, and your commit is behind. Therefore you have to fetch, merge the changeset, and then you'll be able to push again.If you don't (or even worse, if you force it by using the --force option), you can mess up the commit history.EDIT: I get into more detail about the last point, since a guy here just gave the Very Bad Advice of using the --force option.As git is a DVCS, ideally many other developers are working on the same project as you, using the same repository (or a fork of it). If you overwrite forcefully with your changeset, your repository will mismatch other people's, because ""you rewrote history"". You will make other people unhappy and the repository will suffer. Probably a kitten in the world will cry, too.TL;DRIf you want to solve, fetch first.If you want to hack, use the --force option. You asked for the former, though. Go for 1) always, even if you will always use git by yourself, because it is a good practice.You should use  git pull, thatå«s command do a git fetch and next do the git merge.If you use a git push origin master --force command, you may have problems in the future.Try this git commandgit push origin master --forceor short of force -fgit push origin master -f"
"The master branch at remote site is checked out. If you have access to remote repository, checkout any other branch and then push from your repository.Pushing is meant for bare repos. For non-bare repos you should pull into them.If you want to force this through anyway, you can do as the error message states and set receive.denyCurrentBranch to ignore. SSH to the location of the repo you are pushing to and run:git config receive.denyCurrentBranch ignoreCreate the origin (local) repository as a bare repository (ie. git init --bare), or checkout a branch in there which is not master.OR,when you initialize your remote project, using git init --bareI managed to get round this by pulling from 'local' in 'current' rather than pushing to 'current' from 'local'."
"A replicated question here, src refspec master does not match any when pushing commits in gitTry git show-ref to see what refs do you have. Is there refs/heads/[branch]?You can try git push origin HEAD:[branch] as more local-reference-independent solution.It works for me."
"Even though you already raised the http buffer size, this might still be related to the general size of your repo.This thread mentions:This repo is well in excess of our size limits. We don't store repositories of this size. We do not offer that as an option to any of our commercial plans, either. 1GiB/2GiB is a firm and inflexible limit for everyone.As much as we want to offer larger repos, the performance of repos over 750MiB or so is too bad to tolerate. We hope you understand this limitation.To check this I was asked to run: git count-objects -Hv(See ""Find size of git repo"")That would explain why switching to ssh does not constitute a workaround in this case."
"Using git-rebase imply rewriting commits. Since commits have changed, git push can't do a fast-forward anymore, so you have to force it.You can take a look at that possible duplicate for further explanation: Git push rejected after feature branch rebase"
"The remote end hangs up because the pack size you are trying to transmit exceeds the maximum HTTP post size. Try to limit this pack size withgit config --local http.postBuffer 157286400to 150MB."
"This answer is in response to your issue of removing large files from your current commit and then re-pushing your commit to see if it is the large installs that are causing the problem.Imagine starting with this dir structure:.git/libs/somefile.jar    /someotherfile.jarsrc/otherstuff.javaIn your current situation, you have a bunch of files in your commit that you are trying to push, but you realise you actually want to remove some extras you've added that are not needed upstream, but you do want to keep locally, but also make it so they never get pushed up.You can see what files are in your current commit with:git log --pretty=format:""%h %s"" --decorate --numstat HEAD^..HEADNow, we want to create a new commit object without the libs/ folder, and mark it in .gitignore so it's never added in future.# either do this recursively to the dir with this command:git rm -r --cached libs# or individual name the files:git rm --cached libs/somefile.jargit rm --cached libs/someotherfile.jarNow you have local changes, you can see them with git status:$ git statusOn branch masterChanges to be committed:  (use ""git reset HEAD <file>..."" to unstage)    deleted:    libs/somefile.jar    deleted:    libs/someotherfile.jarUntracked files:  (use ""git add <file>..."" to include in what will be committed)    libs/If you look at your filesystem, the files should still be there. That's what --cached did - kept the workspace files, only removed them from git repo.Now we edit the .gitignore file and add entries for either /libs/ or name the files individually, and then add that to your changeset:git add .gitignoreFinally we want to commit all these changes, replacing the old commit with all the large files in it.This is done with git commit --amend. All this does is replace your current commit with a new one, rather than adding a new commit on top of the old one.It will pop up the usual dialog for the commit message. You can keep it the same as it was if you like, or add some additional notes to the commit message. This will be the commit message of the new commit, replacing the old commit entirely (ie. the lib files will be gone from the commit).If you do a git status, you should see you're still 1 commit ahead of origin/master, and if you check the files in the commit itself (with the git log ... command above) it shouldn't have any of your unwanted files in it.Now try pushing back to the remote.If you're stuck at some point from an earlier situation, post your git status output. It usually gives you all the hints you need to know how to continue."
"This doesn't seem like a git limitation, but should be some kind of pre-receive hook on the remote side (the Git repository hosting service/server to which you are pushing to)That hook seems to parse the commits and check the committer email against a specific criteria which rejects karan@xyz.com.You should check with the remote side administrator to see what is going on.The OP Karan Singla confirms in the comments it was an issue at the server side:Issue got resolved. Admin re-created my account and it is working fine now.This worked for megit config --global user.name ""Correct Name"" git config --global user.email name@email.com git commit --amend --reset-authorI would suggest to open git terminal and set correct email. This worked for me when I encountered same issue.git config --global user.email ""your_correct_email@example.com"""
"I set-up a test to fail. This is what I got:$ git merge newbranchAuto-merging test.txtCONFLICT (content): Merge conflict in test.txtAutomatic merge failed; fix conflicts and then commit the result.$ echo $?1Git returns 0 when it merges correctly, as expected.In short, no. You're going to see exit code 1 for errors, and 0 for success.From a quick grepping of the source, there are some of the expected 127 and 128 for their specific purposes (command not found, errors already reported), and a few unusual codes in a few places, but for run of the mill errors, it's all exit(1).Running git status on a non-git repo returns 128, not 1, which is helpful in quickly determining whether a git repo exists or not.Error 128, with no error message from git, could be a catch-all for ""unexpected problem"".I was getting this on operations that needed to modify files under .git (e.g. ""git checkout -- myfile"" to revert a modified file) by a different user. (In my case ""chmod -R og+w .git"" fixed it; naturally, don't do that unless you understand the security implications for your case!)"
"It looks like the branch management (one of the admin settings) in bitbucket has been configured to only allow certain people to push directly to master.Try creating a branch - git checkout -b test, create your test commit and push git push origin test:test. You can always cleanly delete this branch once you have completed the test.The other option (probably best agreeing with whoever set this up) is you go to bitbucket and head to admin, branch management and remove master be to limited. cf - https://confluence.atlassian.com/display/BITBUCKET/Branch+managementI think package setuptools/distribute is listed in requirements.txt. Please remove the same."
"I had this problem today and tried all the suggestions. Finally the solution was very simple:Switch to another branch (e.g. develop).Pull from the remote repositorySwitch back to your new branch and push.With any luck it'll work now."
"I had faced similar issue, behind corporate firewall. Did the following, and able to clone repository using git shell from my system running Windows 7 SP1.Set 'all_proxy' environment variable for your user. Required by curl.export all_proxy=http://DOMAIN\proxyuser:proxypwd@proxy.server.com:8080Set 'https_proxy' environment variable for your user. Required by curl.export https_proxy=http://DOMAIN\proxyuser:proxypwd@proxy.server.com:8080I am not sure if this has any impact. But I did this and it worked: git config --global http.sslverify falseUse https:// for cloninggit clone https://github.com/project/project.gitNote-1: Do not use http://. Using that can give the below error. It can be resolved by using https://. error: RPC failed; result=56, HTTP code = 301Note-2: Avoid having @ in your password. Can use $ though.What worked for me is something similar to what rohitmohta is proposing ; in regular DOS command prompt (not on git bash) :firstgit config --global http.proxy http://username:password@proxiURL:proxiPortthengit config --global http.sslVerify false(I confirm it's necessary : if set to true getting ""SSL certificate problem: unable to get local issuer certificate"" error)in my case, no need of defining all_proxy nor https_proxy variablesand finally git clone https://github.com/someUser/someRepo.gitI had the same problem in a Windows environment.I just resolved with NTLM-APS (a Windows NT authentication proxy server)Configure your NTML proxy and set Git to it:git config --global http.proxy http://<username>:<userpsw>@localhost:<port>I had to setup all 4 things in .gitconfig with:git config --global http.sslVerify falsegit config --global https.sslVerify falsegit config --global http.proxy http://user:pass@yourproxy:portgit config --global https.proxy http://user:pass@yourproxy:portOnly then the cloning was successful."
"Yes, the problem is that there are no commits in ""bare"".  This is a problem with the first commit only, if you create the repos in the order (bare,alice).  Try doing git push --set-upstream origin master.  This would only be required the first time.  Afterwards it should work normally.As Chris Johnsen pointed out, you would not have this problem if your push.default was customized.  I like upstream/tracking.If you: git push origin masterit will push to the bare repo.It sounds like your alice repo isn't tracking correctly.cat .git/configThis will show the default remote and branch.If you git push -u origin masterYou should start tracking that remote and branch. I'm not sure if that option has always been in git.git push --allis the canonical way to push everything to a new bare repository.Another way to do the same thing is to create your new, non-bare repository and then make a bare clone withgit clone --barethen usegit remote add origin <new-remote-repo>in the original (non-bare) repository.This related question's answer provided the solution for me... it was just a dumb mistake: Remember to commit first!http://stackoverflow.com/a/7572252If you have not yet committed to your local repo, there is nothing to push, but the Git error message you get back doesn't help you too much.Try this in your alice repository (before pushing):git config push.default trackingOr, configure it as the default for your user with git config --global ‰Û_.git push does default to the origin repository (which is normally the repository from which you cloned the current repository), but it does not default to pushing the current branch‰ÛÓit defaults to pushing only branches that exist in both the source repository and the destination repository.The push.default configuration variable (see git-config(1)) controls what git push will push when it is not given any ‰ÛÏrefspec‰Ûù arguments (i.e. something after a repository name). The default value gives the behavior described above.Here are possible values for push.default:nothingThis forces you to supply a ‰ÛÏrefspec‰Ûù.matching (the default)This pushes all branches that exist in both the source repository and the destination repository.This is completely independent of the branch that is currently checked out.upstream or tracking(Both values mean the same thing. The later was deprecated to avoid confusion with ‰ÛÏremote-tracking‰Ûù branches. The former was introduced in 1.7.4.2, so you will have to use the latter if you are using Git 1.7.3.1.)These push the current branch to the branch specified by its ‰ÛÏupstream‰Ûù configuration.  currentThis pushes the current branch to the branch of the same name at the destination repository.  These last two end up being the same for common cases (e.g. working on local master which uses origin/master as its upstream), but they are different when the local branch has a different name from its ‰ÛÏupstream‰Ûù branch:git checkout master# hack, commit, hack, commit# bug report comes in, we want a fix on master without the above commitsgit checkout -b quickfix origin/master  # ""upstream"" is master on origin# fix, commitgit pushWith push.default equal to upstream (or tracking), the push would go to origin‰Ûªs master branch. When it is equal to current, the push would go to origin‰Ûªs quickfix branch.The matching setting will update bare‰Ûªs master in your scenario once it has been established. To establish it, you could use git push origin master once.However, the upstream setting (or maybe current) seems like it might be a better match for what you expect to happen, so you might want to try it:# try it once (in Git 1.7.2 and later)git -c push.default=upstream push# configure it for only this repositorygit config push.default upstream# configure it for all repositories that do not override it themselvesgit config --global push.default upstream(Again, if you are still using a Git before 1.7.4.2, you will need to use tracking instead of upstream)."
"As stated in your error code, Heroku doesn't support sqlite3 gem:Detected sqlite3 gem which is not supported on Heroku.so you can't use SQLite database and should remove from your Gemfile this line:gem 'sqlite3'Instead Heroku supports pg gem to run your application on PostgreSQL RDBMS so you should add the following line to the Gemfile:gem 'pg'Then run bundle install.And in the config/database.yml change your RDBMS settings:default: &default  adapter: postgresql  pool: 5  timeout: 5000development:  database: db/development# Warning: The database defined as ""test"" will be erased and# re-generated from your development database when you run ""rake"".# Do not set this db to the same as development or production.test:  <<: *default  database: db/testproduction:  <<: *default  database: db/productionAfter that you should commit all changes and finally run:git push heroku masterResolvedMistake: I didn't know I must commit the changes.git commit -am ""comment line""git pushgit push heroku masterThat's all. Thanks, @suslov"
"You should be able to force the push with (assuming you have bitbucket set up as the remote ""origin""):git checkout developgit push -f origin developNote that before you do that you may need to reset your local develop branch (if it's now pointing at your pulled/merged commit):git checkout developgit reset --hard new_hash_of_abcd3git push -f origin develop"
"Push to refs/heads/master, just this one time. That will create it unambiguously as a branch, and you'll be able to push to it normally in the future."
"How could I push all the branched on my working copy to remote server ?You can do at least a:git push origin --all'feature' is a command of git-flow, not the name of a branch.See gitflow cheatsheet.'feature' translate into a branch namespace, defining a branch hierarchy.Pushing only those feature branches would be:git push origin refs/heads/feature/*:refs/remotes/origin/feature/*Or you can register the refspec in a .gitconfig."
"This is because you are trying to push to your friend's repository & you do not have permission to do so. This is probably what you did:git clone https://github.com/sokratus/xxxxxxxxxxxxx.git/## did something, git add or git commit....git push By default, git push pushes to the origin, you can check the repository to which origin points to by doing :$ git remote -v# which will give you something like thisorigin https://github.com/sokratus/xxxxxxxxxxxxx.git/ If you want to push to the origin, then you need access to it. Or if you want to push it to your own github repository, then you need to create a new remote, like this:$ git remote add my_origin <your github repository's url>$ git push my_origin"
"After the chat, the right way to configure the link with github is:cd c:\Users\ramas\dmsproject\dmsgit remote set-url origin git@github.com:vamsiannem/dms.gitThen a git push can work."
"The error message already tells you everything you need to solve the issue. Before a git push origin master you should do a git pull origin master to ensure you have the latest updates from the server.If you are getting this message you did work on an older version of the repository instead of the latest one."
"One step you seem to have missed (or didn't include in your description) is the publication of the public key on the server side.Upload your public ssh key and add it to the ~username/.ssh/authorized_keys file.Also, try it (for testing) first with a private key without passphrase (no need to ssh-add your key to an ssh agent)Finally, make sure your ssh keys are with standards names (id_rsa and id_rsa.pub), with the right protection:on the local sidein the remote sideFinally, an ssh -Tvvv username@hostname.com should tell you more, if the previous steps didn't solve the issue.The complete procedure being: Add the EC2 public key to your ssh list with the following command    ssh-add /path/to/myEC2publickeyCreate a git repository on the EC2 instance with the followingcommandsmkdir /path/my_project.gitcd /path/my_project.gitgit init --bareConnect the local files on your system to your repository with thecommandscd the_project git initgit add . git commit -m ""Initial git commit message"" git remote add origin username@hostname.com:the_project.git git config --global remote.origin.receivepack ""git receive-pack"" git push origin masterCreate a public key as the user and add it to the server'sauthorized keysYou can do this step by just copying the file id_rsa.pub from the  localhost to the servers ~/.ssh/authorized_keys file, as suggested in  the previous answer.After all this steps if you try the git push, no more permission denied error."
"When you ask to push tags, git push --tags sends (along with any commits and other objects needed and any other ref updates from the push settings) to the remote an update request of the form new-sha1 refs/tags/name.  (Well, it sends however many: one of those for each tag.)The update request is modified by the remote to add an old-sha1 (or again, one for each tag), then delivered to the pre-receive and/or update hooks (whichever hooks exist on the remote).  Those hooks can decide whether to allow or reject the tag create/delete/update.The old-sha1 value is the all-zeros ""null"" SHA-1 if the tag is being created.  The new-sha1 is the null SHA-1 if the tag is being deleted.  Otherwise both SHA-1 values are real, valid values.Even with no hooks, there's a sort of ""built-in hook"" that is also run: the remote will refuse to move a tag unless you use the ""force"" flag (though the ""built-in hook"" is always OK with both ""add"" and ""delete"").  The rejection message you're seeing is coming from this built-in hook.  (Incidentally, this same built-in hook also rejects branch updates that are not fast-forwards.)1But‰ÛÓhere's one of the keys to understanding what's going on‰ÛÓthe git push step has no idea whether the remote has that tag now, and if so, what SHA-1 value it has.  It only says ""here's my complete list of tags, along with their SHA-1 values"".  The remote compares the values and if there are additions and/or changes, runs the hooks on those.  (For tags that are the same, it does nothing at all.  For tags you don't have that they do, it also does nothing!)If you delete the tag locally, then push, your push simply does not transfer the tag.  The remote assumes no change should be made.If you delete the tag locally, then create it pointing to a new place, then push, your push transfers the tag, and the remote sees this as a tag-change and rejects the change, unless it's a force-push.Thus, you have two options:do a force-push, ordelete the tag on the remote.The latter is possible via git push2 even though deleting the tag locally and pushing has no effect.  Assuming the name of the remote is origin, and the tag you want it to delete is dev:git push origin :refs/tags/devThis asks the remote to delete the tag.  The presence or absence of the tag dev in your local repository is irrelevant; this kind of push, with :remoteref as a refspec, is a pure-delete push.The remote may or may not allow tag deletion (depending on any extra hooks added).  If it allows the deletion, then the tag will be gone, and a second git push --tags, when you have a local dev tag pointing to some commit or annotated tag repo object, send your new dev tag.  On the remote, dev will now be a newly created tag, so the remote will probably allow the push (again this depends on any extra hooks added).The force-push is simpler.  If you want to be sure not to update anything other than the tag, just tell git push to push only that one refspec:git push --force origin refs/tags/dev:refs/tags/dev(note: you don't need --tags if you're explicitly pushing just one tag ref-spec).1Of course, the reason for this built-in hook is to help enforce the behavior that other users of that same remote-repo expect: that branches are not rewound, and tags do not move.  If you force-push, you should let the other users know you are doing this, so that they can correct for it.  Note that ""tags don't move at all"" is newly enforced by git 1.8.2; previous versions would allow the tag to ""move forward"" in the commit graph, much like branch names.  See the git 1.8.2 release notes.2It's trivial if you can log in on the remote.  Just go to the git repository there and run git tag -d dev.  Note that either way‰ÛÓdeleting the tag on the remote, or using git push to delete it‰ÛÓthere's a period of time when anyone who accesses the remote will find that the dev tag is missing.In Mac SourceTree only deselect the Push all tags checkbox:The reason you are getting rejected is that your tag lost sync with the remote version. This is the same behaviour with branches.sync with the tag from the remote via git pull --rebase <repo_url> +refs/tags/<TAG> and after you sync, you need to manage conflicts.If you have a diftool installed (ex. meld) git mergetool meld use it to sync remote and keep your changes.The reason you're pulling with --rebase flag is that you want to put your work on top of the remote one so you could avoid other conflicts.Also, what I don't understand is why would you delete the dev tag and re-create it??? Tags are used for specifying software versions or milestones. Example of git tags v0.1dev, v0.0.1alpha, v2.3-cr(cr - candidate release) and so on..Another way you can solve this is issue a git reflog and go to the moment you pushed the dev tag on remote. Copy the commit id and git reset --mixed <commmit_id_from_reflog> this way you know your tag was in sync with the remote at the moment you pushed it and no conflicts will arise."
"When you created your repository on GitHub, you created a README.md, which is a new commit.Your local repository doesn't know about this commit yet. Hence:Updates were rejected because the remote contains work that you do  not have locally.You may want to find to follow this advice:You may want to first merge the remote changes (e.g.,  'git pull') before pushing again.That is:git pull# Fix any merge conflicts, if you have a `README.md` locallygit push -u origin masterif is your first push... relax take it easy..just change the git push **-u** origin master  change de like this!git push -f origin masterDo a forced push with:git push -f origin master.All you need is a force push. Because you might have created Readme.md file on Githib and you haven't committed it yet.git push -f origin master.Assuming that you added the Readme.md file through the interface provided by github, the readme is not yet in your local folder.  Hence, when you try to push to the remote repo, you get an error, because your local repo is lacking the readme file - it's ""behind the times"", so to speak.  Hence, as is suggested in the error message, try ""git pull"" first.  This will pull the readme from the remote repository and merge it with your local directory.  After that, you should have no problem pushing to the remote repo  (the commands you posted look valid to me).if you use the git for mac in GUI you can chose Respository->Pull or the ""comm+shift+p"" to ""git pull"" first, then publish the source.Considering if you haven't committed your changes in a while, maybe doing this will work for you.git add filesgit commit -m ""Your Commit""git push -u origin masterThat worked for me, hopefully it does for you too."
"What I did was to change the protocol from HTTPS to GIT.Followed the instructions to setup SSH here: https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git(easy from the GitBash console, you don't need to install SSH or nothing, all comes with Git)After you completed the SSH setup, just re-add the remote with the git@bitbucket.... url and you are done.Hope this helps.I have installed Git version 1.8.5.2-preview20131230I solved this by adding my password in the url.Instead of:git remote add origin https://MYUSERNAME@bitbucket.org/MYUSERNAME/test.gitI used:git remote add origin https://MYUSERNAME:PASSWORD@bitbucket.org/MYUSERNAME/test.gitI got this error when updated git to 1.8.5.2.When I rolled git to version 1.7.10 (initial version), the error disappeared.As I really needed to use HTTPS instead of SSH (proxy limitations), I've solved it by setting the remote push url to the HTTPS url as follow: git remote set-url --push origin https://MYUSERNAME@bitbucket.org/MYUSERNAME/test.gitgit version 1.9.5I had the same problem. Installing Git 1.9.0 solved it for me."
"There is a problem with the stable Git for Windows (1.9.5) for updating using http and windows or basic auth.Try to upgrade to the 2.4.6-release candidate version. You can find it hereSource"
"It looks, that someone pushed new commits between your last git fetch and git push. In this case you need to repeat your steps and rebase my_feature_branch one more time.git fetchgit rebase feature/my_feature_branchgit push origin feature/my_feature_branchAfter the git fetch I recommend to examine situation with gitk --all.Probably you did not fetch the remote changes before the rebase or someone pushed new changes (while you were rebasing and trying to push). Try these steps:#fetching remote 'feature/my_feature_branch' branch to the 'tmp' local branch git fetch origin feature/my_feature_branch:tmp#rebasing on local 'tmp' branchgit rebase tmp#pushing local changes to the remotegit push origin HEAD:feature/my_feature_branch#removing temporary created 'tmp' branchgit branch -D tmp"
"You need to move the sqlite3 gem into the development section of your Gemfile. Heroku doesn't have the SQLite database installed.Example:group :development, :test do  gem 'sqlite3'endTo use the database on Heroku you need to use PostgreSQL database (by default). To make it work you need to add the pg gem into the production group:group :production do  gem 'pg'endAlso, there are some chances that you will need to update your database.yml, but I believe Heroku will just inject their database connection setting in your config file."
"When just asking for git push origin MyTag, git expects a branch name to be pushed and not a tag name (as it tells you in the error message).In order to push a certain tag, you need to specify the exact tag name:git push origin refs/tags/MyTagorgit push origin tag MyTagFrom man git-push:The object referenced by <src> is used to update the <dst> reference on the remote side. By default this is only allowed if <dst> is not a tag (annotated or lightweight), and then only if it can fast-forward <dst>.  ...tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>.If you want to push all your tags to origin, dogit push origin --tags"
"First you need to have a local git repository for first_app:cd to /the/dir/with/first_appCreate the git repository with: git init This will create a 'hidden' .git/ directory which (basically) holds all the source controlled files that are checked in.Then git remote add to add the remote you want, then you can push the code to it (or pull from it).You can now think of the 'regular' visible files (the ones that existed in the directory before adding git) as working 'copies'.  The (full) file copies that are actually under .git/ are the ones being managed by source control, i.e. that is 'where' you are committing files 'to'.  So when you add and commit a file it is the .git/ directory that is getting the file. and when you then 'push' it, it goes to the remote.Did you initialize a git repository in your local app?The command is as follows.git init Then you can add an origin, copying it from GitHub."
"git push -f if you have permission, but that will screw up anyone else who pulls from that repo, so be careful.If that is denied, and you have access to the server, as canzar says below, you can allow this on the server withgit config receive.denyNonFastForwards falseIf you are the only the person working on the project, what you can do is: git checkout master git push origin +HEADThis will set the tip of origin/master to the same commit as master (and so delete the commits between 41651df and origin/master)Just dogit pull origin [branch]and then you should be able to push.'remote: error: denying non-fast-forward refs/heads/master (you should  pull first)'That message suggests that there is a hook on the server that is rejecting fast forward pushes. Yes, it is usually not recommended and is a good guard, but since you are the only person using it and you want to do the force push, contact the administrator of the repo to allow to do the non-fastforward push by temporarily removing the hook or giving you the permission in the hook to do so."
"Pushes don't update the working-copy and staging-area in non-bare repositoriesThe staging area in the first repository appears to contain the reverse of the changes that were just pushed because it's a non-bare repository, meaning that it contains a working copy, which is also frequently referred to as a working (directory) tree in the Git documentation. Bare repositories, on the other hand, don't have a working copy directory.Since the repository is non-bare, when you push to it, the push only updates branch references, and the symbolic HEAD reference, because git push doesn't operate on the working-copy and staging area that are present in non-bare repos.As a consequence of this, the working-copy and staging-area of the non-bare repo are still left on the same state of the repository that was present before the push that updated HEAD. In other words, the actual state of the working-copy and staging-area do not match the state of the commit pointed to by HEAD. This is why those differences between the two states show up when git status and git diff are run:$ git statusOn branch masterChanges to be committed:  (use ""git reset HEAD <file>..."" to unstage)        modified:   plans.txt$ git diff --stageddiff --git a/plans.txt b/plans.txtindex febb495..ce01362 100644--- a/hello.txt+++ b/hello.txt@@ -1,2 +1 @@ MWA HA HA HA HA!-Step 1: set up super secret spy base in Cleveland, Ohio(Sub-optimal) solution: hard resetSince the working-copy and staging-area are out of sync with HEAD, a solution to get them to match again is to simply usegit reset --hard HEADgit reset --hardto reset the working-coy and staging-area to the commit pointed to by HEAD.However, this is not the ideal solution...Ideal solution: push to bare repositories insteadYou're not really supposed to push to non-bare repositories, because of this exact issue of their working-copies and staging-areas de-syncing with the repository references. Instead, unless you have an unusual reason to push to a non-bare repository, you really ought to push to bare repositories instead, which don't have a working copy.To create a bare repository, simply use the --bare flag:# Initialize a bare repomkdir barecd baregit init --bare# Push changes to the bare repocd ..mkdir projectcd project# Make some changes and commitgit remote add origin ../baregit push origin master# Or create a bare clone from another bare or non-bare repogit clone --bare <repo-path-or-uri>Pushing to non-bare repositories is denied by default since Git 1.6.2Note that since Git version 1.6.2, pushing to non-bare repositories has been denied by default:With the next major release, git push into a branch that is  currently checked out will be refused by default.  You can choose  what should happen upon such a push by setting the configuration  variable receive.denyCurrentBranch in the receiving repository.In fact, when you try to push to a non-bare repo with current versions of Git, you're push should be denied with the following error message (slightly modified for brevity):$ git push origin masterTotal 0 (delta 0), reused 0 (delta 0)error: refusing to update checked out branch: refs/heads/mastererror: By default, updating the current branch in a non-bare repositoryerror: is denied, because it will make the index and work tree inconsistenterror: with what you pushed, and will require 'git reset --hard' to matcherror: the work tree to HEAD.error:error: You can set 'receive.denyCurrentBranch' configuration variable toerror: 'ignore' or 'warn' in the remote repository to allow pushing intoerror: its current branch; however, this is not recommended unless youerror: arranged to update its work tree to match what you pushed in someerror: other way.error:error: To squelch this message and still keep the default behaviour, seterror: 'receive.denyCurrentBranch' configuration variable to 'refuse'.To non-bare ! [remote rejected] master -> master (branch is currently checked out)error: failed to push some refs to 'non-bare'As the error message above explains, you can disable the safety checks that prevent you from pushing into a non-bare repo by disabling the receive.denyCurrentBranch config setting in the remote non-bare repo:git config receive.denyCurrentBranch warn   # Warn when pushing to non-bare repogit config receive.denyCurrentBranch ignore # Don't even bother warning"
"Check to make sure that the server isn't full. You can run the following command on Linux to see size of the filesystem:df -hIf you don't have any space left you either have to do some cleanup or add more space. If it's a physical machine you would probably need more hard drive space, or if it's a virtual machine you can add more pretty easily.After you add more space use Gparted to re-size your partition, then, once that's done you can follow this link to re-size the file system:Extending partition on linux gparted but not more space in the vm"
"If git status does indicate that you do have an active master branch (since you did make a first commit after all), check if you made any typo when defining your remote: see ""Push origin master error on new repository"":git remote rm originThen I recreated the origin, making sure the name of my origin was typed EXACTLY the same way my origin was spelled.git remote add origin git@....You can simplify with:git remote set-url origin git@....Then you can establish a tracking link between the local branch and the remote tracking branch:git push -u origin masterYou can also push it to a different branch on origin:git push -u origin master:anotherBranchuse git branch -m to rename your local repository to have the same name you want to push to the remoteYou need to make sure that the branch name is the same locally and remotely. So it's not enough to have master branch on remote. You also need this branch locally."
"click fork button on original github project pageclone your forked repository instead originalpush to itpress Pull Requests button on your repositorycreate itwait for original author to accept itSee the github help on cloning URL. With HTTPS, if you are not authorized to push, you would basically have a read-only access. So yes, you need to ask the author to give you permission.If the author doesn't give you permission, you can always fork (clone) his repository and work on your own. Once you made a nice and tested feature, you can then send a pull request to the original author.For some reason my push and pull origin was changed to HTTPS-url in stead of SSH-url (probably a copy-paste error on my end), but trying to push would give me the following error after trying to login:Username for 'https://github.com': xxxPassword for 'https://xxx@github.com': remote: Invalid username or password.Editing the [remote ""origin""] url in the .git/config file to point the SSH url, there was no problem:[remote ""origin""]    url = git@github.com:<username>/<repo>.gitHope this helps!"
"It seems like something has added a hook to your repository. I haven't figured out what software is responsible for this, but command you want to run from your project root is ...mv .git/hooks/pre-push .git/hooks/pre-push.sample"
"Inside your projects root directory, open the file .git/config. Inside there will be the address of the github repository. Change all references from githum.com to github.com.You could also just try running the command from your root project directory assuming your environment has the sed command installed.sed -i ""s#githum.com#github.com#g"" .git/config"
"When you ran git add; git commit then git added the zip file to your local repository.  Even though you deleted the local file, git still has it in the repo since it keeps a copy of every file ever committed.Since you've already committed the file to your local git repo, you'll need to remove it from the history before you can push.  In order to do that, follow this answer:http://stackoverflow.com/a/2158271/1695439The answer boils down to running git filter-branch and then deleting your original branch.  Remember to replace giantfile.zip with the filename of your giant zip file.$ git filter-branch --index-filter 'git rm --cached -r --ignore-unmatch giantfile.zip' --prune-empty --tag-name-filter cat -- --all$ git update-ref -d refs/original/refs/heads/master$ git reflog expire --expire=now --all$ git gc --prune=now"
"I suspect you don't have remote configured.push likes to know WHAT to push and WHERE to push it. Usually one configures git so that it automatically tracks branches (local - remote pairs). Try pushing: git push heroku master assuming master is your local branch and heroku is a remote.Also, to see if remote is not configured, (l)ist your config or (e)dit it:git config -l / -eSince Felix was before me, I'll extend my answer with setting the remote:nice SO question in the subjectGit Guys explain remote section of configgit config -l will show you:[branch.master.remote] and [branch.master.merge]Actually, they are the default behaviors of git pull/push, for example, git push == git push [branch.master.remote] [branch.master.merge].By default, [branch.master.remote] = origin, [branch.master.merge] = master, so in this situation git push = git push origin master. However, in your situation, your origin [branch.master.remote] is not heroku, and git does not know which branch of heroku* you wanna push to, so you must point it for git."
"After many tries I've found the solution :)The problem was in incorrect VirtualHost configuration for git-http-backend.Here's my working config:<IfModule mod_ssl.c><VirtualHost _default_:443>        DocumentRoot /git/myrepos        SetEnv GIT_PROJECT_ROOT /git/myrepos        SetEnv GIT_HTTP_EXPORT_ALL        ScriptAlias /myrepos/ /usr/lib/git-core/git-http-backend        AliasMatch ^/myrepos/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$ /git/myrepos/$1        AliasMatch ^/repos/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /git/myrepos/$1        ScriptAliasMatch ""(?x)^/(.*/(HEAD | info/refs | objects/(info/[^/]+ | [0-9a-f]{2}/[0-9a-f]{38} | pack/pack-[0-9a-f]{40}\.(pack|idx)) | git-(upload|receive)-pack))$"" /usr/lib/git-core/git-http-backend/$1        <Directory ""/usr/lib/git-core/"">        Options +ExecCGI        Allow From All        </Directory>        ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/        <Directory ""/usr/lib/cgi-bin"">                AllowOverride None                Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch                Order allow,deny                Allow from all        </Directory>        ErrorLog ${APACHE_LOG_DIR}/error.log        LogLevel warn        CustomLog ${APACHE_LOG_DIR}/ssl_access.log combined        SSLEngine on        SSLCertificateFile    /etc/ssl/git.crt        SSLCertificateKeyFile /etc/ssl/git.key        <FilesMatch ""\.(cgi|shtml|phtml|php)$"">                SSLOptions +StdEnvVars        </FilesMatch>        <Directory /usr/lib/cgi-bin>                SSLOptions +StdEnvVars        </Directory>        BrowserMatch ""MSIE [2-6]"" \                nokeepalive ssl-unclean-shutdown \                downgrade-1.0 force-response-1.0        BrowserMatch ""MSIE [17-9]"" ssl-unclean-shutdown<Location /repo1.git>Order deny,allowDeny from allAllow from allAuthName ""GIT Authentication""AuthType BasicAuthBasicProvider ldapAuthzLDAPAuthoritative offAuthLDAPBindDN domain\userAuthLDAPBindPassword passwdAuthLDAPURL ldap://ldap.server:389/ou=git,DC=domain?sAMAccountNameRequire ldap-group cn=git_repo1,ou=git,dc=domain</Location></VirtualHost></IfModule>Now all git operations works properly with git-http-backend via https with ldap authorization :) Maybe it will be useful for someone."
"The remote master-branch is obviously in a non-bare state, which means, that anyone pushing into this branch would overwrite the existing status of the checked out working copy (the reference to HEAD). This is not a good thing.To solve this, you either use a bare repository as a ""communal"" repo (do this with 'git init --bare'), or work with branches: git checkout -b myBranchDo your work on this branch and commit. Then push your branch with 'git push origin myBranch' without having to destroy anything. After that, your branch in the remote repo can be merged or rebased into master.Isn't the long description in the message clear enough?You can do three things: make the original repo bare, and push whatever you like set the receive.denyCurrentBranch in config as suggested to allow pushing to checked-out branches, and take care of the discrepanciescheck out a different branch in the target repopossibly even force push would work, I don't suggest that."
"Try to use with http.sslVerify=false in the User Settings.If you are using eclipse Find Window-->Preferences-->Git-->Configuration-->User Settings-->http.sslVerify(Key)=false(value).If it is worked i.e. your  Ssl Certificate is  Expired.I was just getting the exact same error. Tried pushing half a dozen times over a five minute period and the last time it just magically worked. I hadn't changed a thing. Perhaps it's an issue on the github servers..?"
"What I had to do was:git remote rm origingit remote add origin 'git@github.com:username/repo.git'Then, I was able to push my changes.Well I had the same problem - what annoys me to no end is that I don't have a clue why (edit: bug). I was pushing with https. Manually editing the config did not work for me (or doing a chkdsk as suggested in another answer). I ended up pushing with ssh - as in, replace:https://github.com/USER/REPO.gitwithgit@github.com:USER/REPO.gitafter generating your keysEDIT as to why : it is a bug in 1.8.5. See the report and a discussion with a way to workaroundI tried following command and it worked for megit push https://<username>:<password>@github.com/<username>/<repository-name>Since it's a bug from 1.8.5 version, if you don't want use SSH Key you can downgrade to 1.84 from here, or upgrade to higher version, 1.9.x, for example.This seems to be a known bug in Git 1.8.5 on Windows. As described and reported by @Mr_and_Mrs_D:https://groups.google.com/forum/#!msg/msysgit/s4dB8Nv9V4c/55-cGPdPYmAJDowngrading to 1.8.4 works for me. Please note you have to explicitly uninstall 1.8.5 first by running C:\Program Files (x86)\Git\unins000.exe as described here:https://github.com/swcarpentry/bc/issues/234#issuecomment-33055444I downloaded 1.8.4 here:https://msysgit.googlecode.com/files/Git-1.8.4-preview20130916.exeIn my case, I update Git to version 1.9 and this issue is fixed.During push/commit, the Git Bash will ask for Github's account & password."
"Inside your project folder go into .git/config and look at what (if anything) is defined under the heroku remote.For example, one of my apps has:[remote ""origin""]  url = git@github.com:jefflunt/cortex.git  fetch = +refs/heads/*:refs/remotes/origin/*[branch ""master""]  remote = origin  merge = refs/heads/master[remote ""heroku""]  url = git@heroku.com:cortex-cedar.git  fetch = +refs/heads/*:refs/remotes/heroku-cedar/*...where origin is the github repo, master is the master branch on github, and heroku is the name and path to the repository on heroku.It's important that (a) you have an entry for heroku because that's what makes your push work, and (b) that it's pointed at the correct path/repo.To get the path/repo for your project go into you application settings on heroku and it should be listed.On a side note, these lists of remotes in your .git/config file are what make the aliases that you use on the command line work at all, and the names they are given are simply found in the config file."
"If you want to use https, you need the full url of your repo:git remote set-url https://<yourLogin>@github.com/<yourLogin>/<yourRepo>Then you can try a git push.That will ask you for your GitHub account password, unless you have activated the 2FA (See ""About Two-Factor Authentication""), in which case you would need to generate first a PAT (Personnal Acces Token).I've tried, and the only way I could produce something similar was by disowning parts of my .git files. Given the fact that SSH credentials, as you say, 'disappear', I'd guess this is actually what the error message says:fatal: could not read Password i.e., you don't have read access to the file you're trying to read.Now, the hunt is on for files in your home directory that are not readable by you:cdfind -not -readable -print0 | xargs -0 ls -lhWill give you details about all files that your user can't read that are in your home directory. Typically, you should only see a few lock files there. I suspect you have something in a .ssh folder, too, or in your git repositories."
"You can use git filter-branch --index-filter 'git rm -r --cached --ignore-unmatch <file/dir>' HEADThis will delete everything in the history of that file. The problem is that the file is present in the history."
"Git doesn't push individual files one at a time, it pushes complete commit trees, as in, ""here is how the entire project looked at one commit, and then it looked like that at another, and now finally it looks like this"".Drawn as a graph of commits, this is, e.g., the very linear:...--D--E--F--G    <-- masterWhat's being ""rejected"" is that the ""finally"" you're supplying is not ""forward progress"" from the ""finally"" the remote had before, i.e., you're missing some ""forward progress"" that someone else put in.  You had:...--D             <-- masterand then you added commits E, F, and G.  But while you were doing that, someone else picked up the series of commits ending in D and added his or her own commit H:...--D--H          <-- masterYou're proposing to throw away H and make the commit sequence look like your sequence: D is followed by E-through-G and that's the end of everything.Git tells you the branch name that has the progress you're proposing to throw away, in this case, master.  It's up to you to git fetch the progress and then retain it, perhaps by git merge creating a merge commit M:       H------      /       \...--D         M   <-- master      \       /       E--F--Gor perhaps by ""rebasing"" your series of commits on top of H:...--D--H-E'-F'-G' <-- master(where E', F', and G' are versions of ""what changed in E, F, and G"" with just enough changed to make them apply on top of H instead‰ÛÓquite often that's just commit parentage, occasionally there's a bit more work involved).Do a git pull, then try to push, that's what the message is saying."
"But when I try to push to master I getfatal: You are not currently on a branch.To push the history leading to the current (detached HEAD)Which is to be expectedWorking in a detached state is not to be expected, unless you deliberately want to be doing this, which I doubt is the case for you.  Instead of checking out commit #5, you should have either reverted the master branch to that commit, or do a git rebase in interactive mode where you can rehash the commits as you want.That being said, if you are certain that the version of master in the detached state is what you really want to keep, then you can get around the non-fast-forward error, by force pushing the branch to the remote:git push origin HEAD:master --forceHowever, if you force push you run the risk of causing problems for all other users who have that branch checked out.  A less risky solution would be to create a temporary branch from the detached HEAD, and then merge that branch into master:git branch temp-branchgit checkout mastergit merge temp-branchgit push origin master"
"If you enabled two-factor authentication in your Github account you  won't be able to push via HTTPS using your accounts password. Instead  you need to generate a personal access token. This can be done in the  application settings of your Github account. Using this token as your  password should allow you to push to your remote repository via HTTPS.  Use your username as usual.https://help.github.com/articles/https-cloning-errors#provide-access-token-if-2fa-enabledYou may also need to update the origin for your repository if set to https: git remote -v git remote remove origin git remote add origin git@github.com:user/repo.gitFirst, you can make sure to use the proper url:git remote set-url origin https://github.com/zkirkland/Random-Python-Tests.gitThen, if it was working before, and if it wasn't asking for you username, it must be because you had stored your credentials (login/password) in a $HOME/.netrc file, as explained here. You can double-check those settings, and make sure that your proxy, if you have one, hasn't changed.If that still doesn't work, you can switch to an ssh url:git remote set-url origin git@github.com:zkirkland/Random-Python-Tests.gitBut that means you have published your ssh public key in your Account settings.I know this is an old question, but I was having the same annoying issue, and maybe this pinpoints the problem and will help other people. I think that for some reason GitHub is expecting the URL to NOT have subdomain www. When I use (for example)git remote set-url origin https://www.github.com/name/repo.gitit gives the following messages:remote: Anonymous access to name/repo.git deniedfatal: Authentication failed for https://www.github.com/name/repo.gitHowever, if I usegit remote set-url origin https://github.com/name/repo.gitit works perfectly fine. Doesn't make too much sense to me... but I guess remember not to put www in the remote URL for GitHub repositories.Also notice the clone URLs provided on the GitHub repository webpage doesn't include the www.I had the same problem. I set url in that way:git remote set-url origin https://github.com/zkirkland/Random-Python-Tests.gitI also removed from config file this entry: askpass = /bin/echo.Then ""git push"" asked me for username and password and this time it worked.This worked for me, and it also remembers my credentials:Run gitbashPoint to the repo directoryRun git config --global credential.helper wincredI'm not really sure what I did to get this error, but doing:git remote set-url origin https://...didn't work for me. However:git remote set-url origin git@bitbucket.org:user/reposomehow worked."
"Following the example of this blog post (it was for a tag, in your case it is for a branch HEAD), you would need to amend at least just the branch HEAD you want to push:git commit --amend --allow-empty --author=""LastName, FirstName <name@email.com>""And then push.Hopefully, if user may reset/revert the local commit and then recommit the code after correcting the name in global configuration, this will make the push successful. Here is a way to revert commit:git reset HEAD~1  -- revert changes made to the index (i.e., that you have added)For now, I tried the empty commit and also tried to commit the same file with some space (to attempt a fake commit) but both (above solution and fake commit) did not work for me. Then I just removed the cloned repository and re cloned it and then committed the code again and this time Push was done successfully, as I already changed the name in configurations."
"This can cause the remote repository to lose commits; use it with care.If you do not wish to merge the remote branch into your local branch (see differences with git diff), and want to do a force push, use the push command with -fgit push -f origin <branch>where origin is the name of your remote repo.Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. This can cause the remote repository to lose commits; use it with care.As the message tells you,Merge the remote changes (e.g. 'git pull')Use git pull to pull the latest changes from the remote repository to your local repository. In this case, pulling changes will require a merge because you have made changes to your local repository. I'll provide an example and a picture to explain. Let's assume your last pull from origin/branch was at Commit B. You have completed and committed some work (Commit C). At the same time, someone else has completed their work and pushed it to origin/branch (Commit D). There will need to be a merge between these two branches.local branch:                         --- Commit C                                     /                                   /                                  /origin/branch: Commit A ------ Commit B ---- Commit DBecause you are the one that wants to push, Git forces you to perform the merge. To do so, you must first pull the changes from origin/branch.local branch:                         --- Commit C -- Commit E                                    /               /                                              /               /                                               /               /               origin/branch: Commit A ------ Commit B ---- Commit D After completing the merge, you will now be allowed to fast-forward origin/branch to Commit E by pushing your changes.         Git requires that you handle merges yourself, because a merge may lead to conflicts.Have you updated your code before pushing?Use git pull origin master before you push anything.I assume that you are using origin as a name for your remote.You need to pull before push, to make your local repository up-to-date before you push something (just in case someone else has already updated code on github.com). This helps in resolving conflicts locally.This normally happens when you git commit and try to git push changes before git pulling on that branch x.The normal flow would be as below, STEP 1: git stash your local changes on that branch.STEP 2: git pull origin branch_name -v to pull and merge to locally commited changes on that branch, give the merge some message, and fix conflicts if any.STEP 3: git stash pop the stashed changes.STEP 4: git push origin branch_name -v the merged changes.Replace branch_name with master (for master branch).Some of you may be getting this error because Git doesn't know which branch you're trying to push.If your error message also includeserror: failed to push some refs to 'git@github.com:jkubicek/my_proj.git'hint: Updates were rejected because a pushed branch tip is behind its remotehint: counterpart. If you did not intend to push that branch, you may want tohint: specify branches to push or set the 'push.default' configurationhint: variable to 'current' or 'upstream' to push only the current branch.then you may want to follow the handy tips from Jim Kubicek, Configure Git to Only Push Current Branch, to set the default branch to current.git config --global push.default currentSometimes we forgot the pulling and did lots of works in the local environment.If someone want to push without pull,git push --forceis working. This is not recommended when working with other people, but when your work is a simple thing or a personal toy project, it will be a quick solution.I mentioned this in my tutorial, How To Use GitHub: A tutorial for beginners.When you create a new repository on GitHub, GitHub may ask you to create a readme file. If you create a readme file directly on GitHub, then you will need to first make a ‰Û÷pull‰Ûª request before the ‰Û÷push‰Ûª request will be successful.These commands will ‰Û÷pull‰Ûª the remote repository, merge it with your current files, and then ‰Û÷push‰Ûª all the files back to GitHub:git pull https://github.com/thomas07vt/MyFirstRepo.git mastergit push https://github.com/thomas07vt/MyFirstRepo.git masterI was getting a similar error while pushing the latest changes to a bare Git repository which I use for gitweb. In my case I didn't make any changes in the bare repository, so I simply deleted my bare repository and cloned again:git clone --bare <source repo path> <target bare repo path>Just had the same issue but in my case I had typed the wrong branch on the remote.  So, it seems that is another source of this issue... double check you're pushing to the correct branch.I experienced the very same problem and it turned out I was on a different (local) branch than I thought I was AND the correct local branch was behind in commits from remote.My solution: checkout the correct branch, cherry-pick the commit from the other local branch, git pull and git pushIs your branch name the same as the remote branch name?If no, you should checkout a new branch with the same name as the remote branch and try push it again.Assume the remote branch you want to push is [testing] and your local branch is named as [test].If you`re not in test branch, first switch to it.git checkout testThen open a new branch and name it testing.git checkout -b testingNow, it`s time to push it:git push [remote repo] testingIn my case, I had ""mybranch"" checked out, and had done git pull, so I couldn't figure out why the push wasn't working. Eventually, I realized that I was pushing the wrong branch. I was typing git push origin master instead of git push origin mybranch.So if you've already done git pull and still getting this message, make sure you're pushing the correct branch.Another solution is to advance the head of the remote by making another commit if you can. After you pull this advanced head into the local subtree then you will be able to push from it again."
"Pull changes first:git pull origin branch_nameAdd --force to your command line if you are sure you want to push. E.g. use git push origin --force (I recommend the command line as you will find much more support from other users with the command line. Also this may not be possible with SmartGit.) See this site for more information: http://help.github.com/remotes/Before pushing, do a git pull with rebase option. This will get the changes that you made online (in your origin) and apply them locally, then add your local changes on top of it.git pull --rebaseNow, you can push to remotegit push For more information take a look at Git rebase explained and Chapter 3.6 Git Branching - Rebasing.I've had the same problem. The reason was, that my local branch had somehow lost the tracking to the remote counterpart.Aftergit branch branch_name --set-upstream-to=origin/branch_namegit pulland resolving the merging conflicts, I was able to push.(One) Solution for Netbeans 7.1: Try a pull. This will probably also fail. Now have a look into the logs (they are usually shown now in the IDE). There's one/more line saying:""Pull failed due to this file:""Search that file, delete it (make a backup before). Usually it's a .gitignore file, so you will not delete code. Redo the push. Everything should work fine now."
"When you have to unlink file, you have to have permission 'w' for directory, in which file is, not for the file...FWIW - I had a similar problem and I'm not sure if this alleviated it (beyond the permission mod):  Closing Eclipse that was using the branch with this problem.If you are using any IDE most likely the problem is that file was used by some process. Like your tomcat might be using the file. Try to identify that particular process and close it. That should solve your problem."
"One classic root cause for this message is:when the repo has been initialized (git init lis4368/assignments), but no commit has ever been madeIe, if you don't have added and committed at least once, there won't be a local master branch to push to.See ""Why do I need to explicitly push a new branch?"" for more.It doesn't recognize that you have a master branch, but I found a way to get around it. I found out that there's nothing special about a master branch, you can just create another branch and call it master branch and that's what I did.To create a master branch:git checkout -b masterAnd you can work off of that."
"The problem came from the proxy server i had to use at work which didn't support the HTTP/1.1 protocol.Our sysadmin confirmed me that he was using squid 2.7 and he didn't support HTTP/1.1.Thank's again for the tip."
"The fact that refs/remotes/origin/my_remote_branch exists in your local repository does not imply refs/heads/my_remote_branch exists in the origin remote repository.Do git fetch -p origin to make refs/remotes/origin/my_remote_branch go away if it's already deleted in origin. The -p option tells fetch to delete any tracking branches that no longer exist in the corresponding remotes; by default they are kept around.Found question cleaning up old remote git branches and this did the trickgit branch -r -d origin/my_remote_branchI ran across this when trying to delete a remote branch that had already been deleted. All that was needed was a prune:git remote prune origingit branch -r -d origin/my_remote_branchwas not enough for me. Before I had to go to server and work with git directory directly (which is dangerous and ugly) to remove the branch:ssh mygitserversu - gitcd /home/git/repositories/my_remote_branch.git/git  --git-dir=. --work-tree=/tmp/ branch -D my_remote_branch"
"This might be caused by the new GitHub limits on file sizes, or possibly the packing process is crashing out due to large data (like in this other SO question from 2011: Alternative way to do an initial push of a large repo) before those particular limits can even be reported.A few weeks ago on a colleague's Mac OS X machine I saw a similar opaque error messag when pushing (tho' only over HTTPS - SSH gave the good error message) - yet having tried to reproduce this just now by pushing a big file to GitHub on my own Mac, I got the expected informative error message on both connection protocols (""remote: error: File big is 976.56 MB; this exceeds GitHub's file size limit of 100 MB""). It's possible that my colleague had an older version of Git installed that couldn't report the errors correctly.If you decide you need to remove the large files from your Git history (as it's the only way you'll get them pushed up to GitHub), I can recommend The BFG:$ java -jar bfg.jar  --strip-blobs-bigger-than 50M  my-repo.gitFull disclosure: I'm the author of the BFG Repo-Cleaner.Simple solution is to increase the HTTP post buffer size to allow for larger chunks to be pushed up to the remote repo. To do that, simply type:git config http.postBuffer 52428800The number is in bytes, so in this case I have set it to 50MB. The default is 1MB."
"I have finally discovered a solution to the problem. As it was described here, I ran the following command in the terminal:  unset SSH_ASKPASSand then running git push origin master works the way it should. You can also add the line to your .bashrc file.I recently dealt with this behavior on a RedHat 5 machine where our Git version was 1.7.4.1.I didn't have a high degree of confidence that unset SSH_ASKPASS wouldn't have unintended consequences, so I wanted to see if there was another solution.I couldn't tell for certain, but it seems that a patch for this problem was in the works around the same time that our version of Git had been published.  So, it seemed to me that it was reasonable to hope that a more recent version would correct the behavior.And indeed it did. Upgrading to the 1.8 branch of Git resolved the problem.  The error message is still displayed for some odd reason, but you are correctly prompted for your password and allowed to continue."
"The following command should work.git push origin refs/heads/product-0.2:refs/heads/product-0.2Change the names. Whether you do it locally or remotely, just change the names. A tag and a branch are fundamentally the same thing in git: they represent a pointer to a commit. The difference is that a branch pointer advances as you make commits, while a tag remains static. However, you can perform a git checkout on either a branch or a tag. Why would you fight with all these doubled up names? Change them.Verify what tags are associated with your branch:git tagIn my case, I had a tag with the same name of the branch. Deleting it worked:git tag -d [tag-name]"
"git rm or git rm --cached isn't enough to remove that file fir the history stored in your repo.You need to:use BFG Repo Cleaner, as suggested above.bfg --strip-blobs-bigger-than 1M  my-repo.gituse git gc --agrressive --prune=now (after BFG), as detailed in ""Reduce git repository size""git push -f to force the new history on your remote repo.The message contains information about two files. var/log/system.log generates a warning but it would be pushed. var/report/752246136671 is too large and thus prevents the push. You thus have to delete at least the latter file.Before Github will let you push, you'll have to remove the file from all commits you want to push. It is not enough to just delete the file in a later commit after having it added before.According to the article linked in the message, you can perform one of the two recommended operations:If you have added the file in the most recent commit, you can change it to remove the file:git rm --cached var/report/752246136671# Stage our giant file for removal, but leave it on diskgit commit --amend -CHEAD# Amend the previous commit with your change# Simply making a new commit won't work, as you need# to remove the file from the unpushed history as wellgit push# Push our rewritten, smaller commitOr you can use The BFG to filter your repository and remove the file from all commits. This is required if you have added the file in the git history (as opposed to only in your most recent commit), you have to clean your history. Github will not allow to push the large file in any commit even if it is later removed again. This is because in this case, the file will still be part of the history and will thus bloat the repo.You can install The BFG from https://github.com/rtyley/bfg-repo-cleaner/releases/latest.The you can remove any indication of any files larger than 100MB by running this command:cd /path/to/your/git/repojava -jar bfg.jar --strip-blobs-bigger-than 100M# Git history will be cleaned - files in your latest commit will *not* be touchedNote that this will change history of your repository, leading to a potential force-push. You might thus have to coordinate with your fellow developers.Also, if you still need the file, you should make a backup before as you won't be able to restore it from git.The problem at hand is that while you have removed the relevant files using new commits, there are blobs corresponding to the older commits for the same files in you repo, and the size of 2 of these objects is throwing you a warning and an error. To be able to push again, you need to remove the same as well.While bfg-repo should work for most people to rectify the situation here, it requires java to be installed and configured on the system and that is not always available.You have 2 files var/log/system.log and var/report/752246136671 which exceed the limit, so I would suggest using filter-branch for removing them for a git only solution:git filter-branch --index-filter 'git rm --cached --ignore-unmatch var/log/system.log var/report/752246136671' --tag-name-filter cat -- --allYou might need to force push the changes later (using git push -f origin).In general, it is a good practice to ignore the *.log, *.info and other log files from the git repo completely by using a *.log  entry in your .gitignore file. You can similarly ignore the var/reports folder. In case there are files which have already been committed to the repo and pushed earlier, you might need to use git rm --cached ""*.log"" to remove the same and commit those changes to untrack them permanently.PS: This seems like a magento/joomla installation to me, in that case ignore the var folder completely in your .gitignore, you don't want objects from var/cache or var/session etc to be tracked in the repo."
"I recently experienced this problem when setting up a new clone of my github project.You need to include your username in the URL to your project, in the form https://user@github.com/project/...For example, the URL provided for my test github is this:https://github.com/jdblair/test.gitIf I add my username to it, like this, then I'm able to push and pull from github with no problem:https://jdblair@github.com/jdblair/test.gitIt is easiest to use the URL that contains the username starting from when you clone a project.You can change the URL for an existing project like this:git remote set-url origin https://user@github.com/project/foo/bar.gitYou can use the ssh authentication instead if you want, but that's a separate setup process.Github now is asking us to use git 1.7.10 or later:https://help.github.com/articles/error-the-requested-url-returned-error-403The GitHub Remote page mentions the read/write addresses for a repo:Make sure your clone address is like:https://github.com/username/yourRepo.gitAnd that you have defined:git config --global user.name ""Firstname Lastname""git config --global user.email ""your_email@youremail.com""Should you use a git address (without ssh), you would also need:git config --global github.user usernamegit config --global github.token 0123456789yourf0123456789token # no longer needed(with your token coming from ‰ÛÏAccount Settings‰Ûù > Click ‰ÛÏAccount Admin.‰Ûù)Update 2013: you still can generate a token (see ""Creating an access token for command-line use""), but you would use it as a password for https url.Actually, if you activate the 2FA (two-factor authentication) mechanism on GitHub, you will need a token for your https url (because your regular password would trigger the second-step verification).See ""Configure Git clients, like GitHub for Windows, to not ask for authentication""See more at ""Which remote URL should I use?"".It's all in the remote.Change your current remote from https://github.com/amalapk/pygame.git to git@github.com:amalapk/pygame.git and enjoy.To do this... (assuming your current remote is called origin)git remote set-url origin git@github.com:amalapk/pygame.gitIn my case getting rid of such error message was resolved this way:Person was simply added to github repository as a colaborator. Thats it - error vanished magically."
"The syntax you're using for git push includes a refspec (new_branch:new_branch).  Refspecs are always in the form source:destination, so the error is telling you that something's wrong with the source part of your refspec.I was able to reproduce this error by trying to push a branch that doesn't exist (git push origin fake:fake).  I know this seems like a painfully stupid question, but are you sure you're spelling your branch name correctly?  Keep in mind that branch names are case-sensitive.  What do you see when you type git branch?"
"It appears funder-request.git is not a bare repo, meaning it has a working tree (files that come from the checkout of a branch).  See ""all about ""bare"" repos -- what, why, and how to fix a non-bare push"" for more:Using a non-bare repo entails the risk of making the content of the working tree out of sync with the content of the git repo itself.You need to contact the admin of that server and make it convert to a bare repo.See ""How to convert a git repository from normal to bare ?""."
"As the error message says: git pull before you try to git push. Apparently your local branch is out of sync with your tracking branch.Depending on project rules and your workflow you might also want to use git pull --rebase.Try this: git push -f origin masterI've just received this error.I created a github repository after creating my local git repository so I needed to accept the changes into local before pushing to github. In this case the only change was the readme file created as optional step when creating github repository.git pull https://github.com/*username*/*repository*.git masterrepository URL is got from here on project github page : I then re-initialised (this may not be needed)git initgit add .git commit -m ""update""Then push : git pushIf git pull does not help, then probably you have pushed your changes (A) and after that had used git commit --amend to add some more changes (B). Therefore, git thinks that you can lose the history - it interprets B as a different commit despite it contains all changes from A.             B            /        ---X---AIf nobody changes the repo after A, then you can do git push --force.However, if there are changes after A from other person:             B            /        ---X---A---Cthen you must rebase that persons changes from A to B (C->D).             B---D            /        ---X---A---Cor fix the problem manually. I didn't think how to do that yet.Try this command: ""git pull origin master""It worked for me.Check this link: https://help.github.com/articles/dealing-with-non-fast-forward-errorsi had created new repo in github and i had the same problem, but it also had problem while pulling,  so this worked for me.but this is not advised in repos that already have many codes as this  could mess up everythinggit push origin master --force! [rejected]        master -> master (non-fast-forward)Don‰Ûªt panic, this is extremely easy to fix. All you have to do is issue a pull and your branch will be fast-forward:$ git pull myrepo masterThen retry your push and everything should be fine:$ git push github masterThe only i was able to resolve this issue was to delete the local and git repo and create the same again at both ends. Works fine for now.You need to do git branchif the output is something like:* (no branch)masterthen dogit checkout masterMake sure you do not have any pending commits as checking out will lose all non-committed changes.I had this problem on a development machine. The dev branch was pushing fine but thethe master branch gave me (while git pushing when being on the dev branch):! [rejected]        master -> master (non-fast-forward)So I tried:git checkout mastergit pullWhich gave me:You asked me to pull without telling me which branch youwant to merge with, and 'branch.master.merge' inyour configuration file does not tell me, either.I found out the master branch was missing from .git/config and added:[branch ""master""]    remote = origin    merge = refs/heads/masterAfterwards git push also worked fine on the dev branch."
"The errors are saying that your repo has changes that you don't have yet, because you added the README to the remote one when you set it up. If you've already got local changes or a local repo, you need to initialise an empty repository on Github, and then you can push. You'll have to add the remote though, something like git remote add https://github.com/username/repo.git.Downloading the README manually and adding and committing will probably produce a different commit ID, and put it at a different point in the commit history, which is why it's not detected as the same one.1) Why does it not work to initialize a remote repository on github with a README, and then try to connect the github repo with a previously existing existing local repo?When Github adds the README it commits it, and then this is the first commit. If you have a local repo, the first commit locally will be different, so they won't match up.2) Why could I not pull when I tried to fix this error? Probably because of the above, or the remote reference didn't add in properly, depending on how you added it.Generally, if you're creating locally first, you would go:# Set up the Git repo locally, with no commits in it.git init   # Add a new file.git add file1# Commit the change.git commit# Tell Git where your remote is.git remote add origin https://github.com/user/repo.git # Push the default 'master' branch to the above remote called 'origin'.git push origin master Or if it already exists on Github or a different remote server: # Download the existing repo, with all of the history.git clone https://bitbucket.org/user/repo.git# Add a new file or modified file.git add file1# Commit the change.git commit# Push to the remote that you downloaded from with clone on branch master.git push origin master3) Why could I still not push and initialize the connection to my github remote after I added the README from github to my local repository manually?That's not how the changes work with Git; they're a big list of sequential commits in a chain. Each commit has one or two parent commits, and the commit IDs aren't sequential either.See the Git website for some diagrams on the branching and commits here: http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is4) How do I create a github repo with an initialized README and connect it to a local repo WITHOUT causing the errors below?If you have an existing local repo you shouldn't create one with the initialised README. If it's blank on Github when you create it, you can push up your existing repository with no errors. If it has the README, you have to git clone the Github repo, and then add your changes to that folder, commit the changes, and then push. Adding the README is for when you have a new project and you're creating the Github repo first, and then you clone the project and start working in that location. If you have an existing repository locally don't use that option.Let's say you have a local repository:$ git log --oneline8e7e8d4 hello.txtThe local repository has a single file:$ lshello.txtNow you create a new repository via the GitHub web interface and initialize it with a README file.  At this point, your two repositories have divergent histories.  You can add the remote repository to your local repository:$ git remote add origin git@github.com:larsks/samplerepo.gitBut attempting to pull from this repository will yield an error:$ git pullwarning: no common commitsremote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From github.com:larsks/samplerepo * [new branch]      master     -> origin/masterThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for detailsThe important part of this error message is:There is no tracking information for the current branch.Please specify which branch you want to merge with.This is git telling you that while your current branch in your local repository is not associated with any branch in the remote repository, so it doesn't know what to do.  You can provide it with a remote branch name explicitly:$ git pull origin masterThis will create a merge commit (and will probably prompt you for a commit message).  Once the commit is complete, you can see that the local history now contains both our local commit as well as the commits from the GitHub repository:$ git log --oneline7f1231a Merge branch 'master' of github.com:larsks/samplerepo5f0d62e Initial commit8e7e8d4 hello.txtAnd our working directory now has a merged set of files:$ lshello.txt  README.mdAnd we can push this to our remote repository.  Just typing git push will result in an error similar to what we saw earlier:$ git pushfatal: The current branch master has no upstream branch.To push the current branch and set the remote as upstream, use    git push --set-upstream origin masterSo:$ git push --set-upstream origin masterCounting objects: 6, done.Delta compression using up to 8 threads.Compressing objects: 100% (3/3), done.Writing objects: 100% (5/5), 543 bytes | 0 bytes/s, done.Total 5 (delta 0), reused 0 (delta 0)To git@github.com:larsks/samplerepo.git   5f0d62e..7f1231a  master -> masterBranch master set up to track remote branch master from origin.And now we're all in sync.Update: Regarding your questions about --set-upstream:When you checkout a local branch that matches the name of a remote branch, git will set up the upstream association for you automatically.  For example, if the remote repository in this example also had a branch ""development"", and I did this after adding the remote:$ git checkout developmentI would see:Branch development set up to track remote branch development from origin.Switched to a new branch 'development'On the other hand, if you already have a branch checked out when you add the remote, as in the first part of this example, you need to use --set-upstream to tell git that you want your local branch to track the remote branch.As an aside, note that there's no requirement that your local branch match the name of a remote branch.  You are free to do something like:git checkout mastergit push --set-upstream origin patchesSo that from this point on, git push on your master branch will push to the remote patches branch."
"I got the same message. And it was because I have managed to get the same Change-Id for two commits. Maybe due to some cherry-picking or similar between my local branches. Solved by removing the Change-Id from the commit message, a new Id then was added by the commit hook.I found the following page which details exactly why you're unable to push your changes to the origin due to the change XXXXX closed error: https://git.eclipse.org/r/Documentation/error-change-closed.htmlCheers!The change 14823 closed message does not come from vanilla git. It indicates that whoever maintains that repository has an update or post-update hook that is evaluating your push and rejecting it due to local policy (I'm guessing you're adding additional commits to an issue that has already been marked as completed/closed). You'll need to find out what those policies are, and whether you need to somehow get the change re-opened so you can add commits to it, or if you need to create a new change request and (probably) rebase your work against it.You're pushing to gerrit, which is a code review tool, as indicated by both the url (ssh://xxxxx@gerrit.dev.xxxxx.net:29418/xxxxxx) and the ""HEAD -> refs/for/master"" message. You need to consult with whoever maintains the repository you're trying to push to in order to figure out why the change is being rejected."
"It looks very much like you have failed to run a git remote add command. Usually this would look likegit remote add origin ssh://git@bitbucket.org/[USERNAME]/[REPONAME].gitBut you should be able to find the correct info for your repository if you follow the docs here: https://confluence.atlassian.com/display/BITBUCKET/Importing+code+from+an+existing+projectI just had the same problem, this may help you:#initialize git in the folder   git init#add remote repository (this did not work for me)git remote add origin https://myusername@bitbucket.org/myusername/myrepo.git#...so i changed it later (after some git add and commit commands)git remote set-url origin https://myusername@bitbucket.org/myusername/myrepo.git#now it worked:git push -u origin master"
"Your remote address is, compared to what github tells you: git@github.com:seterr/messages.git    <== your remote git@github.com:septerr/messages.git   <== GitHub actual repo addressYou forgot the 'p' in septerr.As mentioned in ""GitHub pushing/pulling error"", GitHub repo addresses are sensitive to typo or case.Nick mentions in the comments:I ran into an issue where I needed to change my repo address due to a change in GitHub username.  Here's the code for it: git remote set-url origin git@github.com:username/reponame.git This will set the remote name to origin with the GitHub username of username.If you are receiving this error and a typo is not the cause, as was my scenario, try opening .git/config and deleting the section:[remote ""origin""]   url = git@github.com:yourgitusername/my_project.git  fetch = +refs/heads/*:refs/remotes/origin/*Then rerun the following (replace 'yourgitusername'):git remote add origin git@github.com:yourgitusername/my_project.git   git push -u origin masterThis resolved the problem for me.Credit to this answer on a similar question: Git Push ERROR: Repository not foundI had the same problem. My issue was misunderstanding that I had to first create the empty repo on github before pushing to it. Doh! Including this here for anyone else who doesn't realize.If you're using OS-X on a Mac and have a HTTPS URL for your remote WITHOUT credentials then the KeyChain may be used for the credentials.  Is it possible that the credentials in your KeyChain are incorrect?  Perhaps you have changed your password or you have two github accounts but the wrong one is being used?If in doubt open the KeyChain app and remove the ""github.com"" entries then when you next perform a fetch/pull/push etc you will be re-prompted for your github username and password.All the above assumes that you had previously enabled 'Password/Keychain Caching' as per the guide at https://help.github.com/articles/set-up-git#platform-mac"
"If you are running git under a file system that is not case sensitive (Windows or OS X) this will occur if there are two branches with the same name but different capitalisation, e.g. user_model_changes and User_model_changes as both of the remote branches will match the same tracking ref.Delete the wrong remote branch (you shouldn't have branches that differ only by case) and then git remote prune origin and everything should workPermanent Fixgit update-ref -d resolved my instance of this error, e.g.git update-ref -d refs/remotes/origin/userNote that this doesn't impact remote.In my case, a subsequent git fetch fetched that branch again, and following git fetches/pulls no longer gave the error ""remote ref is at but expected"".If that doesn't work, a temporary fix:Note also that if you don't care about the branch in question (e.g. you just want to update master, not origin/user), a git pull workaround is to fetch then just merge the particular branch you care about, e.g.git fetch # may give an error for a particular branch, but other branches will still be successfully fetchedgit merge origin/master"
"GitHub isn't able to authenticate you.  So, either you aren't setup with an SSH key, because you haven't set one up on your machine, or your key isn't associated with your GitHub account.You can also use the HTTPS URL instead of the SSH/git URL to avoid having to deal with SSH keys.  This is GitHub's recommended method.Further, GitHub has a help page specifically for that error message, and explains in more detail everything you could check.You need to generate an SSH key (if you don't have one) and associate the public key with your Github account.  See Github's own documentation.This happened to me. For some reason my origin got messed up without my realizing it: Check if your settings are still correct git remote -vthe url needs to be something like ssh://git@github.com/YourDirectory/YourProject.git; if you don't see git@github.com, usegit remote set-url origin git://github.com/YourDirectory/YourProject.gitto set it right. Or you could use the github app to check and set the Primary Remote Repository url in the settings panel of your particular repository.Did you create a config file in your ~/.ssh directory?  It should have contents like these:Host github.com  IdentityFile ~/.ssh/github_rsaAssuming that you created an ssh key named github_rsaand uploaded it to GitHub...First, we need to check for existing ssh keys on your computer. Open up Terminal and run:cd ~/.sshls# Lists the files in your .ssh directoryAnd finally depending on what you see (in my case was): github_rsa  github_rsa.pub known_hostsJust try setting up your RSA and hopefully that will solve your ""git push origin"" issues$ ssh-keygen -lf ~/.ssh/github_rsa.pubMake sure ssh-add -l shows a fingerprint of an SSH key that's present in the list of SSH keys in your Github account.If the output is empty, but you know you have a private SSH key that works with your github account, run ssh-add on this key (found in ~/.ssh. It's named id_rsa by default, so you'll likely run ssh-add id_rsa).Else, follow these instructions to generate an SSH key pair .If you are using the GitHub for Mac UI, check preferences to make sure you're logged in.I know this problem. After add ssh key, add you ssh key to ssh agent too (from oficial docs https://help.github.com/articles/generating-ssh-keys/)ssh-agent -sssh-add ~/.ssh/id_rsaAfter it, all work fine, git can view proper key, before coudn't.you can use Https url to logini guess you are trying to login with ssh url when you say git push if it as asking only password consider you are connecting through ssh.better you use http url.I was using github earlier for one of my php project. While using github, I was using ssh instead of https. I had my machine set up like that and every time I used to commit and push the code, it would ask me my rsa key password.After some days, I stopped working on the php project and forgot my rsa password. Recently, I started working on a java project and moved to bitbucket. Since, I had forgotten the password and there is no way to recover it I guess, I decided to use the https(recommended) protocol for the new project and got the same error asked in the question.How I solved it?Ran this command to tell my git to use https instead of ssh:git config --global url.""https://"".insteadOf git://Remove any remote if any git remote rm originRedo everything from git init to git push and it works!PS: I also un-installed ssh from my machine during the debug process thinking that, removing it will fix the problem. Yes I know!! :)In case you are not accessing your own repository, or cloning inside a cloned repository (using some ""git submodule... "" commands):In the home directory of your repository:$ ls -a1. Open "".gitmodules"", and you will find something like this:[submodule ""XXX""]    path = XXX    url = git@github.com:YYY/XXX.gitChange the last line to be the HTTPS of the repository you need to pull:[submodule ""XXX""]    path = XXX    https://github.com/YYY/XXX.gitSave "".gitmodules"", and run the command for submodules, and "".git"" will be updated.2. Open "".git"", go to ""config"" file, and you will find something like this:[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true    precomposeunicode = true[remote ""origin""]    url = https://github.com/YYY/XXX.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch ""master""]    remote = origin    merge = refs/heads/master[submodule ""XXX""]    url = git@github.com:YYY/XXX.gitChange the last line to be the HTTPS of the repository you need to pull:    url = https://github.com/YYY/XXX.gitSo, in this case, the main problem is simply with the url. HTTPS of any repository can be found now on top of the repository page."
"There is two ways for Git SSH verification in Android Studio or IntelliJ, changing via:settings - Version Control - Git - SSH excuteable - ""Built-in"" or ""Native""Built-in : means using ssh key pair built in Git for authentication.you can generate it via ssh-keygen -t rsathe default saved path is ""~/.ssh/id_rsa"" and ""~/.ssh/id_rsa.pub"".You should add the Public key in your BitBucket account.the path like : manage account - SSH keys - add keysNative : means using the ssh pair generated by the native repository hosting service, such as BitBucket or GitHub, which is often auto-add in the service account. For example in GitHub. It generated a pair of SSH key,  ""~/.ssh/github_rsa.pub"" and ""~/.ssh/github_rsa"" and the Public key has been auto-added in my account via GitHub GUI maybe. So change the SSH executable to ""Native"" could be a simple way.Anyway, you can use the both way after you add the correct Public key in you acoount in repository hosting service.I ran across this myself, and found the existing answers were a bit incomplete.  tl;dr: Switching Android Studio/IntelliJ's SSH client from built-in to native may resolve the issue for you (it did for me).Android Studio (effectively a specialized IntelliJ IDEA) comes with its own built-in SSH client, but allows you to switch to native (platform / OS dependent) if you prefer.  You can change this by opening your Android Studio options, search for 'git', and choose 'native' in the SSH executable dropdown.In my case, I was unable to push to BitBucket through Android Studio, but git push worked just fine.  Switching to native (OSX SSH, in my case) resolved the issue - now I can push to BitBucket from Android Studio.Other answers touched on the subject, but there appears to have been some mixup between SSH executables and the keys that they use.Per Android Studio help under SSH Executable:Built-in: select this option to use the implementation provided by IntelliJ IDEA.Native: select this option to use native implementation.This is probably an Intellij problem. Your key are managed natively by ssh, and Intellij has it's own ssh program.Go to the settings, search git->ssh executable then  choose nativeAs seen  here : git with IntelliJ IDEA: Could not read from remote repository"
"You are getting this error because ""origin"" is not available. ""origin"" is a convention not part of the command. ""origin"" is the local name of the remote repository.For example you could also write:git remote add myorigin git@github.com:myname/oldrep.git  git remote add testtest git@github.com:myname/oldrep.gitSee the manual: http://www.kernel.org/pub/software/scm/git/docs/git-remote.htmlTo remove a remote repository you enter:git remote rm originAgain ""origin"" is the name of the remote repository if you want toremove the ""experimental"" branch on the remote.git remote rm experimentalThe previous solutions seem to ignore origin, and they only suggest to use another name. When you just want to use git push origin, keep reading.The problem appears because a wrong order of Git configuration is followed. You might have already added a 'git origin' to your .git configuration.You can change the remote origin in your Git configuration with the following line:git remote set-url origin git@github.com:username/projectname.gitThis command sets a new URL for the Git repository you want to push to.Important is to fill in your own username and projectnameIf you have mistakenly named the local name as ""origin"", you may remove it with the following:git remote rm originYou can simply edit your configuration file in a text editor.In the ~/.gitconfig you need to put in something like the following:[user]        name  = Uzumaki Naruto        email = myname@example.com[github]        user = myname        token = ff44ff8da195fee471eed6543b53f1ffIn the oldrep/.git/config file (in the configuration file of your repository):[remote ""github""]        url = git@github.com:myname/oldrep.git        push  = +refs/heads/*:refs/heads/*        push  = +refs/tags/*:refs/tags/*If there is a remote section in your repository's configuration file, and the URL matches, you need only to add push configuration. If you use a public URL for fetching, you can put in the URL for pushing as 'pushurl' (warning: this requires the just-released Git version 1.6.4).You don't have to remove your existing ""origin"" remote, just use a name other than ""origin"" for your remote add, e.g.git remote add github git@github.com:myname/oldrep.gitI got the same issue, and here is how I fixed it after doing some research:Download GitHub for Windows or use something similar, which includes a shellOpen the Git Shell from task menu. This will open a power shell including Git commands.In the shell, switch to your old repository, e.g. cd C:\path\to\old\repositoryShow status of the old repositoryType git remote -v to get the remote path for fetch and push remote. If your local repository is connected to a remote, it will show something like this:origin  https://user@bitbucket.org/team-or-user-name/myproject.git (fetch)origin  https://user@bitbucket.org/team-or-user-name/myproject.git (push)If it's not connected, it might show origin only.Now remove the remote repository from local repository by usinggit remote rm originCheck again with step 4. It should show origin only, instead of the fetch and push path.Now that your old remote repository is disconnected, you can add the new remote repository. Use the following to connect to your new repository.Note: In case you are using Bitbucket, you would create a project on Bitbucket first. After creation, Bitbucket will display all required Git commands to push your repository to remote, which look similar to the next code snippet. However, this works for other repositories, too.cd /path/to/my/repo # If haven't done yetgit remote add mynewrepo https://user@bitbucket.org/team-or-user-name/myproject.gitgit push -u mynewrepo master # To push changes for the first timeThat's it.You could also change the repository name you wish to push to in the REPOHOME/.git/config file(where REPOHOME is the path to your local clone of the repository).I had the same problem when I first set up using Bitbucket.My problem was that I needed to change the word origin for something self-defined. I used the name of the application. So:git remote add AppName https://someone@bitbucket.org/somewhere/something.gitYou should change the name of the remote repository to something else.git remote add origin git@github.com:myname/oldrep.gittogit remote add neworigin git@github.com:myname/oldrep.gitI think this should work.Yes, these are for repository init and adding a new remote. Just with a change of name."
"Find the diff with git fetch && git log Li..origin/Li. I would guess you've rebased or otherwise recut Li since last time you pushed, but that command should tell you exactly what's in the remote that isn't in the local. You can find what's in either (but not both) with the triple-dot syntax: git log Li...origin/Li.If the diff is expected, then just merge with git merge origin/Li and then git push. If the change is unwanted, overwrite the remote with git push -f origin Li. Only do this if you want to abandon the remote's changes.Updates were rejected because a pushed branch tip is behind its remote.git config --global push.default currentTry the command above to set the current branch as default and git push"
"When you push to an empty repository you must set on checkbox ""Push current branch to alternative branch"" and choose master as that alternative.It's because master is not created yet (repo is really empty). But doing this way you can pretend to initialize the repository.While that checkbox is off and repository is empty, IDEA can't push, because its interface must be safe and he will not just create new brach if the one in which you pushed last accidentally disappeared (or just not exist). You must force that ""branch creation""I've resolved this with turning on checkbox ""Push current branch to alternative branch"". Not sure, but we need this for first push to new branch as it have status as 'untracked'.In my case, after setting up my remote repository, I simply made a fetch and then the push worked just fine."
"I was facing same problem, here is what I did that worked for me.Use ssh instead of http. Remove origin if its http.git remote rm originAdd ssh urlgit remote add origin git@github.com:<username>/<repo>.gitGenerate ssh key inside .ssh/ folder. It will ask for path and passphrase where you can just press enter and proceed. cd ~/.sshssh-keygenCopy the key. You can view your key using. If you hadn't specified a different path then this is the default one.cat ~/.ssh/id_rsa.pubAdd this key to your github account. Next dossh -T git@github.comYou will get a welcome message in your console.cd into to your project folder. git push -u origin master now works!I just had to deal with this issue. @user3445140's answer helped me, but was much more than I needed to do.1. cat ~/.ssh/id_rsa.pub2. copy the key, including the ""ssh-rsa"" but *excluding your computer name at the end*3. Go to: https://github.com/settings/ssh4. Add your SSH keyYou probably have to add your public key to github. https://help.github.com/articles/generating-ssh-keysCheck this thread: github: newbie problems -> Permission denied (publickey). fatal: The remote end hung up unexpectedly"
"If anyone else has this problem, the solution is to change the login shell of the user 'git' (or whatever your user is called) to /bin/bash. This can be done via the command : usermod -s /bin/bash git (Link). The reason for changing the login shell is because the default shell for the git user is /sbin/nologin (or similar, depending on environment), which prevents the git application from logging in as the git user on the git server.Just for other users reference:fatal: protocol error: bad line length character: no scan be a truncated answer for ""No such project"".As in my case, this kind of error can be fixed by adding user (even yourself) to the project in gitlab:https://gitlab.com/username/your_project/project_membersalso, ensure your public key is set in your user Profile settings > SSH Key or in Project > Settings > Deploy Keyshttps://gitlab.com/profile/keysAnother thing to check is that your .bashrc does not print extra stuff.For example 'echo ""hello""' in .bashrc creates the error:kruus@borg:~/malt$ ssh snake01Last login: Tue Oct 21 10:44:31 2014 from 138.15.166.103hello...kruus@snake01:/net/snake01/usr/hydra/kruus/malt$ git pullfatal: protocol error: bad line length character: hellNote how saying hello caused one hell of a problem.Removing the 'echo ""hello""' from my .bashrc allows git to work as expected again. You may need to "">& /dev/null"" to remove output if your .bashrc does more complicated things.Another possibility is that you misspelled the repository name.I've done it twice in the last two days.  I added a remote and misspelled it and I misspelled the name when creating the project on GitLab.In both cases when I tried to push to remote I gotfatal: protocol error: bad line length character: No sSo check that spelling!Also, if you create the project under a different name (like a group) make sure that's the remote you add.The solution to my issue with this was that I'd forgotten to add in a deploy key for the project (for the user I was trying to deploy as).Adding a deploy key in https://gitlab/group/project/deploy_keys sorted me out.You can get the actual error message by doing:ssh git@yourgitlabserver.com ""git-upload-pack yournamespace/yourreponame.git""According to this git documentation git protocol expects at the beginning of each line its size and then the content. Looks like GitLab doesn't do that and sends the error message directly.I experienced this error message today (""No s""), and it actually had to do with me having no rights to push to the targeted repository. Even though the error message is very weird, this might help people continue to work.We use Gitlab.sudo gitlab-ctl reconfigureand thensudo gitlab-ctl restartshould do the trickIn my case, my username was changed and this repository's git config was not updated to match the new name.Check your git remotes to make sure they are pointing to correct place:git remote -vUpdate the config by editing the config manually:vim .git/configor through commandsgit remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git"
"Two problems:1 - You never told Git to start tracking any fileYou write that you rangit initgit commit -m ""first commit""and that, at that stage, you gotnothing added to commit but untracked files present (use ""git add"" to track).Git is telling you that you never told it to start tracking any files in the first place, and it has nothing to take a snapshot of. Therefore, Git creates no commit. Before attempting to commit, you should tell Git (for instance):Hey Git, you see that README.md file idly sitting in my working directory, there? Could you put it under version control for me? I'd like it to go in my first commit/snapshot/revision...For that you need to stage the files of interest, usinggit add README.mdbefore runninggit commit -m ""some descriptive message""2 - You haven't set up the remote repositoryYou then rangit remote add origin https://github.com/VijayNew/NewExample.gitAfter that, your local repository should be able to communicate with the remote repository that resides at the specified URL (https://github.com/VijayNew/NewExample.git)... provided that remote repo actually exists!However, it seems that you never created that remote repo on GitHub in the first place: at the time of writing this answer, if I try to visit the correponding URL, I getBefore attempting to push to that remote repository, you need to make sure that the latter actually exists. So go to GitHub and create the remote repo in question. Then and only then will you be able to successfully push withgit push -u origin masterI'm guessing you didn't run this command after the commit failed so just actually run this to create the remote : git remote add origin https://github.com/VijayNew/NewExample.gitAnd the commit failed because you need to git add some files you want to track."
"First, you don't have a master branch after cloning your repo.git clone details:--branch <name>-b <name>Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository's HEAD, point to <name> branch instead.  In a non-bare repository, this is the branch that will be checked out.--branch can also take tags and detaches the HEAD at that commit in the resulting repository.So in your case, if you want to create and track the local website branch to origin, you need to:git push -u origin website(after that, a simple git push will be enough: more on the push policies in ""git - push current vs. push upstream (tracking)"")Your other remote 'upstream' will also only track upstream/website branch:The git remote documentation does mention:With -t <branch> option, instead of the default glob refspec for the remote to track all branches under the refs/remotes/<name>/ namespace, a refspec to track only <branch> is created.  You can give more than one -t <branch> to track multiple branches without grabbing all branches. In your case, you are only tracking upstream/website (+refs/heads/website:refs/remotes/upstream/website) instead of the default refspec (+refs/heads/*:refs/remotes/upstream/*).Try git push origin websiteMay be you configured your master branch under this name. Try and let me know."
"You've created a new repository and added some files to the index, but you haven't created your first commit yet.  After you've done: git add a_text_file.txt ... do: git commit -m ""Initial commit.""... and those errors should go away.The quick possible answer: When you first successfully clone an empty git repository, the origin has no master branch. So the first time you have a commit to push you must do:git push origin masterWhich will create this new master branch for you. Little things like this are very confusing with git.If this didn't fix your issue then it's probably a gitolite-related issue:Your conf file looks strange. There should have been an example conf file that came with your gitolite. Mine looks like this:repo    phonegap                                                                                                                                                                               RW+     =   myusername otherusername                                                                                                                                               repo    gitolite-admin                                                                                                                                                                             RW+     =   myusername                                                                                                                                                               Please make sure you're setting your conf file correctly.Gitolite actually replaces the gitolite user's account with a modified shell that doesn't accept interactive terminal sessions. You can see if gitolite is working by trying to ssh into your box using the gitolite user account. If it knows who you are it will say something like ""Hi XYZ, you have access to the following repositories: X, Y, Z"" and then close the connection. If it doesn't know you, it will just close the connection.Lastly, after your first git push failed on your local machine you should never resort to creating the repo manually on the server. We need to know why your git push failed initially. You can cause yourself and gitolite more confusion when you don't use gitolite exclusively once you've set it up."
"Somebody has already committed to production branch.As @user1281385 said you shouldgit pull origin master:prooduction or better before review changes on production branch in other way.try git help pull to read more.remote changes are done on the repository. as the error messages says:Merge the remote changes (e.g. 'git pull') before pushing again.pull first, then push."
"Edit your .git/config file so that the url is using either ssh or git protocol instead of https:url = git@github.com:Grails48/airbrake-grails.git"
"git push feature/prizeFulfilment: feature/PrizefulfilmentThat is similar to this answer:For the record, I believe the root cause of this problem was the difference in capitalisation between the local and remote branch names, and the case-insensitive nature of the Windows share that hosted the remote repository.We just encountered this exact same error and were able to resolve the problem simply by renaming the local branch to match the capitalisation of the existing remote branch.Try and make sure to use the same capitalization between local and remote branches.You second command make the link between the prizeFulfilment and remote Prizefulfilment explicit, which is why it worked. But it isn't a good solution to keep a local branch with that kind of difference.Another possible reason of problems present also on case sensitive systems is conflicting breaches names.If remote repository contains branch a/b and you are trying push branch a/b/c same error will be reported by git (definitely this error description should be improved).https://coderwall.com/p/qkofma/a-caution-about-git-branch-names-with-shttps://ocroquette.wordpress.com/2011/07/10/git-failed-to-lock/What happened to me was that git was changing the capitalization of my local branch. I had an old branch named Feature/blahBlah and a new branch named feature/fooBar. The latter was renamed automatically to Feature/fooBar since git stores branches as folders and I couldn't have the same folder name with different capitalization. To fix it, I had to go into .git/refs/heads and rename 'Feature' to 'feature'` so all branches would be consistent."
"Did you install your key at GitHub? Have you read help section there?http://help.github.com/linux-set-up-git/http://help.github.com/common-issues-and-questions/http://help.github.com/ssh-issues/I had the same problem, my solution was simple.  I already have my keys setup and everything and kept trying to run:git config --global user.name IceMupppetAfter looking through my ~/.ssh/ I noticed that running:ssh-add -lI saw that to simply use the right git account I just added the right file:ssh-add ~/.ssh/id_IceMupppet_rsa... then a git push origin master  worked fine.  I have an alias on my ssh config to use different keys for my work and personal, but still had to do this step for some reason."
"Okay, so I fixed it, but the method is absolute witchcraft.I tried to isolate the problem by purging GIT, deleting the config file, reinstalling GIT, then creating a local bare repository, then cloning it, then attempting to push from there.  Pretty much like this:sudo apt-get purge git-corerm -f ~/.gitconfigsudo apt-get install git-corecd /gitmkdir foocd foogit init --barecd /var/wwwgit clone /git/foocd footouch blah.txtgit add -Agit config --global user.name ""Name""git config --global user.email ""user@email.com""git commit -m ""Blah""git push...same exact error message, no change there.  (Still some serious witchcraft.)Then, I deleted one of my repositories that doesn't have a local origin (it connects to its origin via SSH) and cloned the repository anew after deleting it (with a fresh git clone ssh://... command).I got an error from the clone command:remote: Malformed value for push.default: simpleremote: Must be one of nothing, matching, tracking or current.Ah ha!  Now it says remote instead of error.  So the remote doesn't support this behavior.  (That doesn't explain why the error persists on local-only repositories with local origins, then, though.)So I then SSH'ed into the remote server and updated the git-core there to the latest version, re-attempted to clone the repository from my local machine, and it worked.Now, I can finally git push.  Insanely, this also fixed it so I can git push from the entirely local /var/www/foo to the also entirely local /git/foo (the local origin bare repository).  SSH'ing into this remote server and updating it somehow - WITCHCRAFT - fixed my local machine's error.Why on earth the entirely local repos care about an entirely different machine's GIT version is... beyond me.  How utterly, utterly insane.Since it seems other people are having this issue, and I found a solution HERE, I thought I'd post the solution that worked for me. IN SHORT:The solution I found was at this page. Evidently the best solution is to upgrade to a newer version of Git (if possible). That was not an option for me, however. From a local machine, I typed the following command: git config ‰ÛÒglobal push.default upstreamThis got rid of the Malformed value for push.default: simple error I had been getting. I'm not entirely sure what upstream does, however. MY CONTEXT (for comparison): I had an empty (bare) repository on a remote computer, and I had a few repositories on a couple ""local"" workstations. I pull from the remote repository, do some work, and then push my work to the remote repository. Pushing/pulling was accomplished via SSH. Most of the time, while working on a local machine, pushing/pulling would result in the error described above. In short, before the fix, I had the following ~/.gitconfig file on the remote machine:[user]        name = Foo Bar        email = FooBarPerson@email.com[diff]        external = /Users/foobar/bin/git-diff-cmd.sh[color]        diff = auto        status = auto        branch = auto[push]        default = simpleAfter entering in the above command, my ~/.gitconfig file on the remote machine changed to:[user]        name = Foo Bar        email = FooBarPerson@email.com[diff]        external = /Users/foobar/bin/git-diff-cmd.sh[color]        diff = auto        status = auto        branch = auto[push]        default = upstreamVersion information:Remote machine (repository location): 1.9.4My laptop: 1.8.5.2 (Apple Git-48)Other computer I work on: 1.7.7.4Here's another site that may be useful to some people: http://www.lorrin.org/blog/2011/10/03/argumentless-git-pull-and-git-push/comment-page-1/I had the same error message on git push.For me it turned out that the remote user's git was an older version (1.7.2.5),and I had recently updated the remote ~/.gitconfig to include:[push]  default = simpleThe solution was to remove this setting from the remote's configuration."
"Your remote repository likely has the receive.denyNonFastForwards setting enabled in its configuration. The docs for this option state:If set to true, git-receive-pack will deny a ref update which is not a   fast-forward. Use this to prevent such an update via a push, even if that push   is forced. This configuration variable is set when initializing a shared   repository.You may be able to get around this by doing:git push origin :mastergit push origin masterThe leading colon on the branch name in the first command turns that into a request to delete the branch on the remote repository. After that is done pushing your current version of the branch would no longer be seen as a non-fast-forward push. But there's also an option which could be set on the remote repository to prevent the delete, receive.denyDeletes."
"cannot run None: No such file or directoryThat would mean your editor used for the commit message isn't properly set.Check the value of git config core.editorfatal: could not read Username for 'https://github.com': No such device or addressCheck, as in this answer, if you are not using a msysgit 1.8.5 (on Windows): more recent versions don't have this bug.See if your config does have a user.name and user.email declared. If https access fails consistently, try switching to ssh.But for https, you also can create an OAut token andgit config remote.origin.url https://{token}@github.com/username/project.gitgit config remote.origin.url https://{token}@github.com/slacktracer/lokapala.git# orgit remote set-url origin https://{token}@github.com/slacktracer/lokapala.gitThe OP slacktracer confirms in the comments that the issue seems limited on git-cola on lunbuntu.Using git-gui could be a workaround.Typing git push from the command-line allows to switch right back in any GUI.The issue 179 can help, as well as launching git cola with:GIT_COLA_TRACE=1 git cola"
"In step 18, I assume you mean ssh-add ~/.ssh/id_rsa?  If so, that explains this:I also suspect some local ssh caching weirdness because if i mv ~/.ssh/id_rsa KAKA and mv ~/.ssh/id_rsa.pub POOPOO, and do ssh git@github.com -v, it still Authenticates me and says it serves my /home/meder/.ssh/id_rsa when I renamed it?! It has to be cached?!... since the ssh-agent is caching your key.If you look on GitHub, there is a mederot account.  Are you sure that this is nothing to do with you?  GitHub shouldn't allow the same SSH public key to be added to two accounts, since when you are using the git@github.com:... URLs it's identifying the user based on the SSH key.  (That this shouldn't be allowed is confirmed here.)So, I suspect (in decreasing order of likelihood) that one of the following is the case:You created the mederot account previously and added your SSH key to it.Someone else has obtained a copy of your public key and added it to the mederot GitHub account.There's a horrible bug in GitHub.If 1 isn't the case then I would report this to GitHub, so they can check about 2 or 3.More :ssh-add -l check if there is more than one identify existsif yes, remove it by ssh-add -d ""that key file""After Googling for few days, i found this is the only one question are similar to my situations.Someday i just solved the problem!I think i have to write down my answer here to help the incoming searches.Here is what i did:Open ""Keychain Access.app"" (You can find it in Spotlight or LaunchPad)Select ""All items"" in CategorySearch ""git""Delete every old & strange itemsTry to Push again and it just WORKEDIts due to a conflict.Clear all keys from ssh-agentssh-add -d ~/.ssh/id_rsassh-add -d ~/.ssh/githubAdd the github ssh keyssh-add   ~/.ssh/githubIt should work now.I had the same problem as you. After a long time spent Googling, I found out my error was caused by multiple users that had added the same key in their accounts.So, here is my solution: delete the wrong-user's ssh-key (I can do it because the wrong-user is also my account). If the wrong-user isn't your account, you may need to change your ssh-key, but I don't think this gonna happen.And I think your problem may be caused by a mistyping error in your accounts name."
"I had the same issue and believe that it has to do with the size of the repo (edited- or the size of a particular file) you are trying to push.Basically I was able to create new repos and push them to github. But an existing one would not work. The HTTP error code seems to back me up it is a 'Length Required' error. So maybe it is too large to calc or greated that the max. Who knows.EDITI found that the problem may be  files that are large. I had one update  that would not push even though I had  successful pushes up to that point.  There was only one file in the commit  but it happened to be 1.6MSo I added the following config changegit config http.postBuffer 524288000To allow up to the file size 500M and  then my push worked. It may have been  that this was the problem initially  with pushing a big repo over the http  protocol.END EDITthe way I could get it to work (EDIT before I modified postBuffer) was to tar up my repo, copy it to a machine that can do git over ssh, and push it to github. Then when you try to do a push/pull from the original server it should work over https. (since it is a much smaller amount of data than an original push).Hope this helps.Looks like a server issue (i.e. a ""GitHub"" issue).If you look at this thread, it can happen when the git-http-backend gets a corrupted heap.(and since they just put in place  a smart http support...)But whatever the actual cause is, it may also be related with recent sporadic disruption in one of the GitHub fileserver.Do you still see this error message? Because if you do:check your local Git version (and upgrade to the latest one)report this as a GitHub bug.Note: the Smart HTTP Support is a big deal for those of us behind an authenticated-based enterprise firewall proxy!From now on, if you clone a repository over the http:// url and you are using a Git client version 1.6.6 or greater, Git will automatically use the newer, better transport mechanism.  Even more amazing, however, is that you can now push over that protocol and clone private repositories as well. If you access a private repository, or you are a collaborator and want push access, you can put your username in the URL and Git will prompt you for the password when you try to access it.Older clients will also fall back to the older, less efficient way, so nothing should break - just newer clients should work better.So again, make sure to upgrade your Git client first."
"You should ask whoever maintains the repo at git@mycogit/cit_pplus.git.Your commits were rejected by the pre-receive hook of that repo (that's a user-configurable script that is intended to analyze incoming commits and decide if they are good enough to be accepted into the repo). It is also a good idea to ask that person to update the hook, so it would print the reasons for the rejection.If the maintainer is you yourself, then it looks like you've got a problem with your setup on the server-side. Please share more information then.I'd bet that you are trying a non-fast-forward push and the hook blocks it. If that's the case, simply run git pull --rebase before pushing to rebase your local changes on the newest codebase."
"The GitHub help page, ""Error: Repository not found"" summarizes the possible causes:permission (which is what Monika refers to in the comments with ""Cloned directly from repo‰Û_get error when pushing"")  You might need to fork the repo, and, on your local repo, do a:git remote rename origin upstreamgit remote add origin https://YourUsername@github.com/YourUsername/YourForkspelling: the name of the repo is case sensitivenon-existent repo"
"The server where you are pushing to should use bare repository.How to convert a git repository from normal to bare ?Why Git won't let you push to non-bare repositoriesThe original poster says:One solution is to run the following command:git config receive.denyCurrentBranch ignoreAfter this it works, but I would like to know why I need to use this  option. Is this the only option? What are the consequences of doing  this?As I point out in my answer to a similar question, since Git version 1.6.2, Git won't let you push to a non-bare repository by default. This is because the git push command only updates the branch and HEAD references on the remote repository. What it doesn't do is also update the working-copy and staging-area in that non-bare remote.As a consequence, when you use git status in the remote repo, you'll see that the repo's previous state is still present in the working copy (and staged in the index):$ git statusOn branch masterChanges to be committed:  (use ""git reset HEAD <file>..."" to unstage)        new file:   previous-state.txtIf you look at the error message that you got when you first tried to push to your non-bare remote repo with the receive.denyCurrentBranch setting set to the default refuse value, you'll see that the message tells you basically the same thing:error: refusing to update checked out branch: refs/heads/mastererror: By default, updating the current branch in a non-bare repositoryerror: is denied, because it will make the index and work tree inconsistenterror: with what you pushed, and will require 'git reset --hard' to matcherror: the work tree to HEAD.error:error: You can set 'receive.denyCurrentBranch' configuration variable toerror: 'ignore' or 'warn' in the remote repository to allow pushing intoerror: its current branch; however, this is not recommended unless youerror: arranged to update its work tree to match what you pushed in someerror: other way.You should really just push to bare Git repositoriesAs pointed out in some of the other answers, you shouldn't really be pushing to a non-bare repository, for the reasons I pointed out above, and which Git itself is telling you.So like what this answer states, a simple way to convert an existing non-bare repo to a bare one is to simply reclone it as a bare repo:git clone --bare old-repoOr you could try messing around with the core.bare config setting, as detailed in this answer.You should have a bare repository on the server, not one with a checked-out working tree. Git is telling you it refuses to overwrite the branch that is currently checked out on the server.See this answer for information on how to convert your non-bare repository on the server to a bare one."
"Pushing with --no-thin argument works as a workaround for me:git push --no-thin omnigerrit HEAD:refs/for/android-4.4Are you using git > 1.8.4.2 ?I found incompatibility between git 1.8.4.3+ and gerrit 2.6, because ofhttps://github.com/git/git/commit/fbd4a7036dfa71ec89e7c441cef1ac9aaa59a315With this enhancement, if git finds out that the tree sha1 already exists in the server, it wont send it again, but gerrit wants to search the tree sha1 associated with the commit sha1 in the uploaded pack.It looks like I cannot reproduce it with gerrit 2.8-rc3, not with latest version of scm-manager. I would say this has been resolved in jgit, but cannot find which version yet.I just encountered this error as well.For my scenario, I was attempting to push an amended commit where none of the files had changed since the last time the same commit was pushed.  I literally had just amended the commit message for the change, and attempted to push again.  No files as part of the commit changed.My push was rejected with the same error message you posted.It seemed that Gerrit did not like a push with no changes other than the amended commit message.I literally made a one character change to a file, added the file, amended the commit again, and pushed, and the push succeeded.I'm using git == 1.8.4.2my caseI also encounter this problem too, and this take a long time to fix this problem.First, I notice one error info in gerrit log:Internal server error (user newptone account 1) during git-receive-pack                           '/neutron.git' com.google.gerrit.sshd.BaseCommand$Failure: fatal: Unpack error,   check server log......... Missing unknown 613fd2557fba30aff2dbd51c3807cc57561bab08What is 613fd2557fba30aff2dbd51c3807cc57561bab08 object?Then I use git review -l to search all opened patchset for this project neutron:1974  master  Add two interfaces for manipulate forwarding individuallyThen I find this patchset in gerrit dashboard by searching, I click the link and it seems error:613fd2557fba30aff2dbd51c3807cc57561bab08 cannot  foundAha, that's the reason!But why this object missing?The reason is my colleague tell me neutron project will use a new repo to replace the old, I delete the the old repo but didn't close all open patchset in gerrit. The open patchset will disappear in gerrit dashboard, but it still exist in gerrit database.how to fix itLogin in your reviewdb sql and find this record:First, make sure this is the one we want to modify:select * from changes where change_id=1974\G;Then update this record:update changes set open='N',status='A' where change_id=1974;I encountered this issue today and I was not using git > 1.8.4.2. I am on Gerrit 2.7.After around 5 minutes of frustration, I decided to just switch to the local version of the branch I was trying to push to and I did a pull. After that, my pushes started working again but I do not understand why.I just come with this issue just now,and my case is:Some one git init and push a whole new branch (that is to say,this branch is no relation with any revision in origin git in gerrit) to a git project in gerrit.I try many way but fail.In the end I am inspired by the answer of @obuseme ,follow this and fixed:git remote add gerrit GERRIT_GIT_PROJECT_URLgit fetch gerritAnd then upload again."
"It looks like it's an OpenOffice conflict from their libcurl. From my understanding, Openoffice put an old libcurl.dll in the system directory.Try to remove libcurl.dll from C:\Windows\sysWOW64 and/or C:\Windows\System32 (Reinstalling Git or uninstalling OpenOffice doesn't seem to fix the problem).Go to the folder where Git is installed (defalut: C:\Program Files\Git).Copy the file ""libcurl.dll"" in Git installation folder (C:\Program Files\Git\bin\libcurl.dll).Paste it in location where the git.exe exists (C:\Program Files\Git\libexec\git-core).This should fix the issue, since now it will check for the lib in current executing folder before falling back to systems folder.As a side note for anyone using pre-built libcurl in their projects: this can be caused because you have libcurl.dll in the root of the folder you are trying to push. Windows will load the library in your project folder before the one with Git first.The solution is simple -- remove or move libcurl.dll in your project.This is the same thing with the windows application installed in your local appdata directory. To copy the file from :C:\Users\YOUR-WINDOWS-COUNT\AppData\Local\GitHub\PortableGit_xxxx-A-BIG-NUMBER-XXXXXXXXXXXXX\libexec\git-core\bin\libcurl.dllto the directory:C:\Users\YOUR-WINDOWS-COUNT\AppData\Local\GitHub\PortableGit_xxxx-A-BIG-NUMBER-XXXXXXXXXXXXX\libexec\git-coreseems to work."
"See the ""pushing a branch"" section from GitHub help page:Dealing with ‰ÛÏnon-fast-forward‰Ûù errorsFrom time to time you may encounter this error while pushing:$ git push origin masterTo ../remote/ ! [rejected]        master -> master (non-fast forward)error: failed to push some refs to '../remote/'To prevent you from losing history, non-fast-forward updates were rejectedMerge the remote changes before pushing again.  See the 'non-fast forward'section of 'git push --help' for details.This error can be a bit overwhelming at first, do not fear.  Simply put, git cannot make the change on the remote without losing commits, so it refuses the push. Usually this is caused by another user pushing to the same branch.  You can remedy this by fetching and merging the remote branch, or using pull to perform both at once.In other cases this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase.  While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do. Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don‰Ûªt force-push.Mode details on the ""Note about fast-forwards"" of git push, as mentioned by Michael Mrozek in the comments.In addition to VonC's answer,In case you, intend to override the remote changes with your local,  $git push --forcewill do.Quite important: this can also occur if name of the branch you are on (and want to merge) and the branch upstream are not the same. Then work flow could look like this:git pull --rebase             # to retrieve upstream changes, replay yours on topgit push --dry-run --verbose origin HEAD:master   # always good idea: dry-runs..git push origin HEAD:master   # actually push current branch head (non-master) to upstream masterIf you are getting this error and your .git/config file is just fine then go through these steps (this is a common problem with a submodule in git repos - again do this from the submodule dir)git checkout mastergit pull(merge happens in background)git push"
"It is highly suggested NOT to use WebDAV if possible. If you must use HTTP/HTTPS then usage of the git-http-backend CGI script is recommended over WebDAV.Edit the following section of your .git/config file:[remote ""origin""]fetch = +refs/heads/*:refs/remotes/origin/*url = http://git.repository.url/repo.gitto[remote ""origin""]fetch = +refs/heads/*:refs/remotes/origin/*url = http://username:password@git.repository.url/repo.gitThen try git push origin master.Edit the authentication details in your config files for other repository URLs as required and push to the required branch.As in this post comment, what does your /Web/git/Logs/ErrorLog says about that error?After looking in /Web/git/Logs/ErrorLog, I found out there‰Ûªs a permission problem on the lock file.  In my httpd-dav.conf, I have the line‰Û_DavLockDB ‰ÛÏ/usr/var/DavLock‰ÛùI then checked the /usr/ directory, the ‰Û÷var‰Ûª directory was missing.$ mkdir var$ cd var$ chown www .$ chgrp www .And then repeating the process seems that now I can push!! =)As mentioned by Eddie in the comments and by Arrowmaster in his (upvoted) answer, the smart http protocol is now part of recent Git distribution.The git-http-backend CGI script can takes care of any git commands through http.The smarter protocols (git and ssh) would instead have a conversation with the git upload-pack process on the server which would determine the exact set of objects the client needs and build a custom packfile with just those objects and stream it over.you might need to add the user as a member for the repository and possibly update permissions.we had to do this with each member that will be contributing on our organizations github repository.I've got the same problem, and found the solutions, maybe it will be useful for someone. Here is my solution with git-http-backend configuration and ldap authentication.I had a similar issue in which I was able to clone and pull from the repository using the HTTP protocol, but I was not able to push. I solved this by doing the following.I changed the url for the remote in the project's .git/config file to match the GitHub SSH url. I then followed all of the instructions at ""https://help.github.com/articles/generating-ssh-keys#platform-linux"" and troubleshooted with ""https://help.github.com/articles/error-permission-denied-publickey"". The best part is that I did not have deal with Apache or change any HTTP settings on the remote server."
"What you should be doing is creating the remote repository as a bare repository. A bare repository is just the git repo, without a current checkout (that is, it is like just the contents of the .git dir in a regular Git repo, so it contains objects and refs, but it doesn't have an index or working copy of the file hierarchy). If you try pushing to a non-bare repository, the working copy will get out of sync with what is committed, and cause the kinds of problems you are seeing here.You can create a bare repository using git init --bare repo.git. Or you can clone an existing repository as a bare repo using git clone --bare original-repo new-repo.git.If you want to have a checked out copy of the repository on your server, you will need to create a new, non-bare repo on the server, and then pull into that repo from the bare repo that you push to."
"Add this to your Gemfile,group :production do  gem 'pg'endgroup :development, :test do  gem 'sqlite3'endthen do a bundle then repush to heroku. You cannot use sqlite3 on Heroku - which is the cause of the error.If you're still having the problem after removing sqlite3 from the Gemfile (or making it development-only) is that you haven't re-updated the file in the eyes of Heroku because it relies on Git.Quite simply: git add Gemfilegit commit -m ""Removed sqlite3 from Gemfile""git push heroku masterI bashed my head against this for a while before realizing that the changes weren't ""taking"" because I hadn't actually committed them to Heroku.This is what worked for me after a day of trying every fix prescribed in the numerous forums!First of all if you are using the Rails Tutorial book or online you need to move to the second version (there is a beta version online at http://ruby.railstutorial.org/).Open up your editor and add in the lines to your Gemfile:  group :production do        gem 'pg', '0.12.2'  end  group :development do      gem 'sqlite3', '1.3.4'  endNow you also need to commit your new edited Gemfile to Heroku so the next steps are in order.git add Gemfile  git commit -m ""Put Sqlite3 into development in the Gemfile""  git push heroku masterIf it is still not working for you after applying tibbon and animuson's instructions (happened to me), try comment off the ""gem 'sqlite3'"" line in Gemfile, then add-commit-push again."
"When you ssh into a box and get a prompt, you're actually going through a slight different process than when running a command.  Shells have rules about what configuration gets sourced based on whether it's a login shell and/or if it's an interactive session.  Try running:ssh user@host envThis will print your environment as seen by a non-interactive login session.  My guess is that /usr/local/git/bin is not on the path in this scenario.  You can work around this by using the --receive-pack option for git push:git push --receive-pack=/path/to/git-receive-pack/path/to/git-receive-pack is the path on the remote machine.  It tells git where to find the other end when ssh'ing into the remote.The best answer is to fix your shell configuration, but that can be tricky depending on the shell.  I mainly use ZSH, and I fix this by setting up a ~/.zshenv, which gets sourced by ZSH in a non-interactive shell.  I think things tend to be less clear with bash.  You may have to edit your ~/.bashrc and/or your ~/.bash_profile.Assuming you have a vanilla Linux installation on the remote end (which is probably the case), and that it's running the bash shell, the easiest fix is to change your .bashrc.  Edit ~/.bashrc, and add:export PATH=/path/to/your/installed/git/bin:$PATHWhere /path/to/your/installed/git/bin is where you installed git in your home directory.  I tend to put local installs in ~/.local/bin, so mine would look like:export PATH=$HOME/.local/bin:$PATHYour's may simply be:export PATH=$HOME/bin:$PATHYou don't say the location, so I can't give you the correct formulation.On most systems, .bashrc is sourced even when a command is provided to ssh.  After you make this change, try running ssh user@host env again.  You should see your the location of the bin folder holding the git binary in the path variable.  You should then be able to do something like ssh user@host git --version and see something like:git version 1.8.2If you see an error, then you likely didn't type the path correctly, or .bashrc isn't being picked up when you ssh into the machine.Sample .profile# if running bashif [ -n ""$BASH_VERSION"" ]; then    # include .bashrc if it exists    if [ -f ""$HOME/.bashrc"" ]; then    . ""$HOME/.bashrc""    fifi# set PATH so it includes user's private bin if it existsif [ -d ""$HOME/bin"" ] ; then    PATH=""$HOME/bin:$PATH""fiAutomatically using --receive-packAssuming your remote is named origin, you can do this:git config --local remote.origin.receivepack \    /path/to/git-receive-pack/on/the/remoteYou may need to fix upload pack as well:git config --local remote.origin.uploadpack \    /path/to/git-upload-pack/on/the/remote"
"You probably did some history rewriting? Your local branch diverged from the one on the server. Run this command to get a better understanding of what happened:gitk HEAD @{u}I would strongly recommend you try to understand where this error is coming from. To fix it, simply run:git push -fThe -f makes this a ‰ÛÏforced push‰Ûù and overwrites the branch on the server. That is very dangerous when you are working in team. Butsince you are on your own and sure that your local state is correctthis should be fine. You risk losing commit history if that is not the case.This happened to me when I was trying to push the develop branch (I am using git flow). Someone had push updates to master. to fix it I did:git co mastergit pullWhich fetched those changes. Then,git co developgit pullWhich didn't do anything. I think the develop branch already pushed despite the error message. Everything is up to date now and no errors."
"git fetch --unshallowAlso see: how to unshallow your repo"
"This error means that the master branch on Heroku contains commits that are not in your local branch.You can either pull the missing commits from Heroku and merge them into your local copy:git pull heroku masterOr, if you don't care about the missing commits you can force push to Heroku. This will overwrite the remote repo on Heroku with your local commits.git push --force heroku masterMake sure you really don't care about them as you will lose them from Heroku by doing this. Normally this doesn't matter as Heroku is not normally the canonical repo, somewhere else such as GitHub is."
"This happened to us a few weeks ago.  It means that you have a working directory checked out in your origin repository and you cannot push to overwrite.at the origin you need to bare the repository.  I don't know of a way to do it with one command.  What I did (at the origin repository)> mv repository repository.old> git clone --bare repository.old repositoryI see that the origin in your case is the o:/repository.  The origin, should not be a checked out working copy, so you can init a bare repository or copy as per above.  To get the scenario you described to pass:cd o:/repositorygit init  --barecd <working directory>git clone o:/repositorygit push origin masterthis should work just fine for you:good reading: http://www.gitready.com/advanced/2009/02/01/push-to-only-bare-repositories.htmlFor the first push you'll need something likegit push origin masterSee also the push.default option option.In any case, if you're later going to run into a problem of pushing to a non-bare repository, so you'll need to read about that too."
"Edit .git\config, change the url from yourname@https://code.google.com/p/xyz/ to https://code.google.com/p/xyz/. When you push to it, just input your username and password, now it works well."
"There's a git hook on the server that rejected the push. Quoting:These scripts run before and after pushes to the server. The pre hooks  can exit non-zero at any time to reject the push as well as print an  error message back to the client; you can set up a push policy that‰Ûªs  as complex as you wish.To find out why, you need to know what the hook does. Hooks are stored in hooks folder inside the git folder (on the remote end) - find the pre-receive hook or update hook and examine that."
"The message means that you're not allowed to do non-fast-forward push.Your remote repository has most likely denyNonFastforwards = true in its config. If you change that, git push -f should work.To change the setting do git config receive.denynonfastforwards false.The remote doesn't allow non-fast-forwards.Your best option is to git revert all of the commits that shouldn't be there and be more careful in future.git revert [commit] will create a new commit that undoes whatever [commit] did.Try using the -f flag and putting it after the remote branch name.git push origin master -f"
"No master exists yet on the remote (origin) repository.git push origin masterAfter this first push you can use the simplergit push"
"If you get error 413, then the issue doesn't lie with git but with your web server. It's your web server that is blocking big upload files. Solution for nginxJust load your nginx.conf and add client_max_body_size 50m; ( changing the value to your needs ) in the http block. Reload nginx to accept the new config by executing sudo service nginx reload and try again to push your commit over http.Solution for ApacheIn your httpd.conf add LimitRequestBody 52428800 ( changing the value to your needs ) inside a <Directory /> block. Doing this you can limit the request of the whole server filesystem, just a single Virtual Host or a directory.I hope this helps.I figured it out!!! Of course I would right after I hit post!I had the repo set to use the HTTPS url, I changed it to the SSH address, and everything resumed working flawlessly.command to change the remote url ( from https -> git@... ) is something like thisgit remote set-url origin git@github.com:GitUserName/GitRepoName.gitorigin here is the name of my remote ( do git remote and what comes out is your origin ).I already had ""HTTPS//"" in the git URL yet faced this error.All I did was to add option -u with push and it worked.git push -u origin masterFor those who use IIS 7 to host a git http/https endpoint:You need to increase your uploadReadAheadSize.Launch Internet Information Services (IIS) ManagerExpand the Server fieldExpand SitesSelect the site you want to make the modification for.In the Features section, double click Configuration EditorUnder Section select: system.webServer > serverRuntimeModify the uploadReadAheadSize section (The value must be between 0 and 2147483647.)Click ApplyRestart the WebsiteI got this problem when I try to clone a git repo in Linux machine.the following URL is working for me in windows http://swamy@git.swamy.com/scm/project/swamy-main.gitwhereas the following URL works in Linux machine and it has https in URL https://swamy@git.swamy.com/scm/project/swamy-main.githttps clone of gists fails (ssh works, see below):12:00 jean@laptop:~/tmp$ GIT_CURL_VERBOSE=1 git clone https://gist.github.com/123456.git usernameInitialized empty Git repository in /home/jean/tmp/username/.git/* Couldn't find host gist.github.com in the .netrc file; using defaults* About to connect() to gist.github.com port 443 (#0)*   Trying 192.30.252.142... * Connected to gist.github.com (192.30.252.142) port 443 (#0)* found 141 certificates in /etc/ssl/certs/ca-certificates.crt*        server certificate verification OK*        common name: *.github.com (matched)*        server certificate expiration date OK*        server certificate activation date OK*        certificate public key: RSA*        certificate version: #3*        subject: C=US,ST=California,L=San Francisco,O=GitHub\, Inc.,CN=*.github.com*        start date: Mon, 30 Apr 2012 00:00:00 GMT*        expire date: Wed, 09 Jul 2014 12:00:00 GMT*        issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance CA-3*        compression: NULL*        cipher: ARCFOUR-128*        MAC: SHA1> GET /123456.git/info/refs?service=git-upload-pack HTTP/1.1User-Agent: git/1.7.1Host: gist.github.comAccept: */*Pragma: no-cache< HTTP/1.1 301 Moved Permanently< Server: GitHub.com< Date: Fri, 01 Nov 2013 05:00:51 GMT< Content-Type: text/html< Content-Length: 178< Location: https://gist.github.com/gist/123456.git/info/refs?service=git-upload-pack< Vary: Accept-Encoding<* Ignoring the response-body* Expire cleared* Connection #0 to host gist.github.com left intact* Issue another request to this URL: 'https://gist.github.com/gist/123456.git/info/refs?service=git-upload-pack'* Couldn't find host gist.github.com in the .netrc file; using defaults* Re-using existing connection! (#0) with host gist.github.com* Connected to gist.github.com (192.30.252.142) port 443 (#0)> GET /gist/123456.git/info/refs?service=git-upload-pack HTTP/1.1User-Agent: git/1.7.1Host: gist.github.comAccept: */*Pragma: no-cache< HTTP/1.1 200 OK< Server: GitHub.com< Date: Fri, 01 Nov 2013 05:00:52 GMT< Content-Type: application/x-git-upload-pack-advertisement< Transfer-Encoding: chunked< Expires: Fri, 01 Jan 1980 00:00:00 GMT< Pragma: no-cache< Cache-Control: no-cache, max-age=0, must-revalidate< Vary: Accept-Encoding<* Connection #0 to host gist.github.com left intact* Couldn't find host gist.github.com in the .netrc file; using defaults* About to connect() to gist.github.com port 443 (#0)*   Trying 192.30.252.142... * connected* Connected to gist.github.com (192.30.252.142) port 443 (#0)* found 141 certificates in /etc/ssl/certs/ca-certificates.crt* SSL re-using session ID*        server certificate verification OK*        common name: *.github.com (matched)*        server certificate expiration date OK*        server certificate activation date OK*        certificate public key: RSA*        certificate version: #3*        subject: C=US,ST=California,L=San Francisco,O=GitHub\, Inc.,CN=*.github.com*        start date: Mon, 30 Apr 2012 00:00:00 GMT*        expire date: Wed, 09 Jul 2014 12:00:00 GMT*        issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance CA-3*        compression: NULL*        cipher: ARCFOUR-128*        MAC: SHA1> POST /123456.git/git-upload-pack HTTP/1.1User-Agent: git/1.7.1Host: gist.github.comAccept-Encoding: deflate, gzipContent-Type: application/x-git-upload-pack-requestAccept: application/x-git-upload-pack-resultContent-Length: 116< HTTP/1.1 301 Moved Permanently< Server: GitHub.com< Date: Fri, 01 Nov 2013 05:00:53 GMT< Content-Type: text/html< Content-Length: 178< Location: https://gist.github.com/gist/123456.git/git-upload-pack< Vary: Accept-Encoding<* Ignoring the response-body* Connection #0 to host gist.github.com left intact* Issue another request to this URL: 'https://gist.github.com/gist/123456.git/git-upload-pack'* Violate RFC 2616/10.3.2 and switch from POST to GET* Couldn't find host gist.github.com in the .netrc file; using defaults* Re-using existing connection! (#0) with host gist.github.com* Connected to gist.github.com (192.30.252.142) port 443 (#0)> GET /gist/123456.git/git-upload-pack HTTP/1.1User-Agent: git/1.7.1Host: gist.github.comAccept-Encoding: deflate, gzipContent-Type: application/x-git-upload-pack-requestAccept: application/x-git-upload-pack-result* The requested URL returned error: 400* Closing connection #0error: RPC failed; result=22, HTTP code = 400This works: git clone git@gist.github.com:123456.gitI had this error (error: RPC failed; result=22, HTTP code = 413) when I tried to push my initial commit to a new BitBucket repository. The error occurred for me because the BitBucket repo had no master branch. If you are using SourceTree you can create a master branch on the origin by pressing the Git Flow button.I had the same problem but I was using a reverse proxy. So I had to setclient_max_body_size 50m; inside both configure files : on the gitlab nginx web server (as said inside the previous answers)but also on the nginx reverse proxy hosted on the dedicated server."
"GitHub has a nice section called ""Dealing with ‰ÛÏnon-fast-forward‰Ûù errors""This error can be a bit overwhelming at first, do not fear.Simply put, git cannot make the change on the remote without losing commits, so it refuses the push.  Usually this is caused by another user pushing to the same branch. You can remedy this by fetching and merging the remote branch, or using pull to perform both at once.In other cases this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase.  While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do.  Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don‰Ûªt force-push.Git cannot make changes on the remote like a fast-forward merge, which a Visual Git Reference illustrates like:This is not exactly your case, but helps to see what ""fast-forward"" is (where the HEAD of a branch is simply moved to a new more recent commit).The ""branch master->master (non-fast-forward) Already-up-to-date"" is usually for local branches which don't track their remote counter-part.See for instance this SO question ""git pull says up-to-date but git push rejects non-fast forward"".Or the two branches are connected, but in disagreement with their respective history:See ""Never-ending GIT story - what am I doing wrong here?""This means that your subversion branch and your remote git master branch do not agree on something.  Some change was pushed/committed to one that is not in the other.  Fire up gitk --all, and it should give you a clue as to what went wrong - look for ""forks"" in the history.It means that there have been other commits pushed to the remote repository that differ from your commits. You can usually solve this with a git pullbefore you pushUltimately, ""fast-forward"" means that the commits can be applied directly on top of the working tree without requiring a merge.I found this description of fast-forward to be the clearest.http://365git.tumblr.com/post/504140728/fast-forward-mergeA fast-forward update is where the only changes one one side are after the most recent commit on the other side, so there doesn't need to be any merging.  This is saying that you need to merge your changes before you can push."
"You can follow the debug advices from the BitBucket article:Specifically, the 'result=55' portion.  This is the error code coming from libcurl, the underlying library used in http communications with Git. From the libcurl documentation, a result code of 55 means:CURLE_SEND_ERROR (55)    Failed sending network data.CauseThis can be caused by a variety of network related issues or even the Bitbucket service itself. It essentially means that the connection was dropped unexpectedly. Things to check would be to attempt the push from a machine on a 'clean' network outside of any corporate firewalls or proxies. Check all proxy servers to ensure they are properly moving SSL data and are fully permitted to complete. To help troubleshoot this issue, try running the push with the commandGIT_CURL_VERBOSE=1 git pushWorkaroundIf after checking all connections and proxy configurations the connection still fails consistently, please report the information above to support. Then switch to SSH. We have a guide to getting it setup for Git at Set up SSH for Git. If you should run into any configuration issues while setting up SSH, please refer to our SSH Troubleshooting guide.I experienced the issue due to a misconfiguration, where I pointed to a remote prefixed with http:// instead of https:// the answer hinted on SSL and this helped me to a solution for my issue.So my remote configuration should be written:$ git remote add origin https://github.com/jonasbn/perl-workflow.gitover:$ git remote add origin http://github.com/jonasbn/perl-workflow.gitTake care,jonasbn"
"The error message says it allERROR: Repository not found.Is there a git repository where you're looking?You need to create the repository on github first. It can't find the repository because it doesn't exist yet!Eric has already given the best answer for this question in the case that the repo does not exist, but I want to point out that the response pair of ""Repository not found. / remote end hung up unexpectedly"" is also given by GitHub when the repository does exist but the user does not have permission to push to it. If you're absolutely certain that the repository already exists on GitHub, make sure the account you're using has permission to push to that repository.Did you perhaps rename your repository? If you renamed your repository in github, you need to update the origin accordingly. This has happened to me once, where I renamed my repository and forgot to update the origin settings in my laptop.Either the repo doesn't exist or you don't have the right permission.More info here:https://help.github.com/articles/error-repository-not-foundAlso if you have multiple github accounts (which is actually disallowed), you need multiple ssh keys to be stored with github.More info here:http://net.tutsplus.com/tutorials/tools-and-tips/how-to-work-with-github-and-multiple-accounts/"
"I had a similar problem. My laptop ran out of battery during a git operation. Boo. I didn't have any backups. (N.B. Ubuntu One is not a backup solution for git; it will helpfully overwrite your sane repository with your corrupted one.)To the git wizards, if this was a bad way to fix it, please leave a comment. It did, however, work for me... at least temporarily. Step 1: Make a backup of .git (in fact I do this in between every step that changes something, but with a new copy-to name, e.g.  .git-old-1, .git-old-2, etc.): cp -a .git .git-oldStep 2: Run git fsck --fullnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullerror: object file .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e is emptyfatal: loose object 8b61d0135d3195966b443f6c73fb68466264c68e (stored in .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e) is corruptStep 3: Remove the empty file. I figured what the heck; its blank anyway. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e rm: remove write-protected regular empty file `.git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e'? yStep 3: Run git fsck again. Continue deleting the empty files. You can also cd into the .git directory and run find . -type f -empty -delete to remove all empty files. Eventually git started telling me it was actually doing something with the object directories: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: object file .git/objects/e0/cbccee33aea970f4887194047141f79a363636 is emptyfatal: loose object e0cbccee33aea970f4887194047141f79a363636 (stored in .git/objects/e0/cbccee33aea970f4887194047141f79a363636) is corruptStep 4: After deleting all of the empty files, I eventually came to git fsck actually running: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: HEAD: invalid sha1 pointer af9fc0c5939eee40f6be2ed66381d74ec2be895ferror: refs/heads/master does not point to a valid object!error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 5: Try git reflog. Fail because my HEAD is broken. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git reflogfatal: bad object HEADStep 6: Google. Find this. Manually get the last two lines of the reflog: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ tail -n 2 .git/logs/refs/heads/masterf2d4c4868ec7719317a8fce9dc18c4f2e00ede04 9f0abf890b113a287e10d56b66dbab66adc1662d Nathan VanHoudnos <nathanvan@gmail.com> 1347306977 -0400  commit: up to p. 24, including correcting spelling of my name9f0abf890b113a287e10d56b66dbab66adc1662d af9fc0c5939eee40f6be2ed66381d74ec2be895f Nathan VanHoudnos <nathanvan@gmail.com> 1347358589 -0400  commit: fixed up to page 28Step 7: Note that from Step 6 we learned that the HEAD is currently pointing to the very last commit. So let's try to just look at the parent commit:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git show 9f0abf890b113a287e10d56b66dbab66adc1662dcommit 9f0abf890b113a287e10d56b66dbab66adc1662dAuthor: Nathan VanHoudnos <nathanvan@XXXXXX>Date:   Mon Sep 10 15:56:17 2012 -0400    up to p. 24, including correcting spelling of my namediff --git a/tex/MCMC-in-IRT.tex b/tex/MCMC-in-IRT.texindex 86e67a1..b860686 100644--- a/tex/MCMC-in-IRT.tex+++ b/tex/MCMC-in-IRT.texIt worked!Step 8: So now we need to point HEAD to 9f0abf890b113a287e10d56b66dbab66adc1662d. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git update-ref HEAD 9f0abf890b113a287e10d56b66dbab66adc1662dWhich didn't complain.Step 9: See what fsck says:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 10: The invalid sha1 pointer in cache-tree seemed like it was from a (now outdated) index file (source). So I killed it and reset the repo.nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/indexnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git resetUnstaged changes after reset:M   tex/MCMC-in-IRT.texM   tex/recipe-example/build-example-plots.RM   tex/recipe-example/build-failure-plots.RStep 11: Looking at the fsck again...nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!dangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79aThe dangling blobs are not errors. I'm not concerned with master.u1conflict, and now that it is working I don't want to touch it anymore! Step 12: Catching up with my local edits: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git status# On branch master# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   tex/MCMC-in-IRT.tex#   modified:   tex/recipe-example/build-example-plots.R#   modified:   tex/recipe-example/build-failure-plots.R#< ... snip ... >no changes added to commit (use ""git add"" and/or ""git commit -a"")nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""recovering from the git fiasco""[master 7922876] recovering from the git fiasco 3 files changed, 12 insertions(+), 94 deletions(-)nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git add tex/sept2012_code/example-code-testing.Rnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""adding in the example code""[master 385c023] adding in the example code 1 file changed, 331 insertions(+) create mode 100644 tex/sept2012_code/example-code-testing.RSo hopefully that can be of some use to people in the future. I'm glad it worked.I solved this removing the various empty files that git fsck was detecting, and then running a simple git pull.I find it disappointing that now that even filesystems implement journaling and other ""transactional"" techniques to keep the fs sane, git can get to a corrupted state (and not be able to recover by itself) because of a power failure or space on device.I just had the same issue : after pulling the distant repository, when I did a git status I got :""error: object file (...) is empty""""fatal: loose object (...) is corrupted""The way I resolved this was to :git stashremoving git file in error (not sure that is necessary)git stash clearI dont know exactly what things happened, but that instructions seemed to make everything clean.This error happens to me when I am pushing my commit and my computer hangs.This is how I've fix it.Steps to fixgit statusshow the empty/corrupt object filerm .git/objects/08/3834cb34d155e67a8930604d57d3d302d7ec12remove itgit statusI got fatal: bad object HEAD messagerm .git/indexI remove the index for the resetgit resetfatal: Could not parse object 'HEAD'.git statusgit pulljust to check whats happeningtail -n 2 .git/logs/refs/heads/MY-CURRENT-BRANCHprints the last 2 lines tail -n 2 of log branch to show my last 2 commit hashgit update-ref HEAD 7221fa02cb627470db163826da4265609aba47b2I pick the last commit hashgit statusshows all my file as deleted because i removed the .git/index filegit resetcontinue to the resetgit statusverify my fixNote:    The steps starts when I landed on this question and used the answers as reference.The git object files have gone corrupt (as pointed out in other answers as well). This can happen during machine crashes, etc.I had the same thing. After reading the other top answers here I found the quickest way to fix the broken git repository with the following commands (execute in the git working directory that contains the .git folder):(Be sure to back up your git repository folder first!)find .git/objects/ -type f -empty | xargs rmgit fetch -pgit fsck --fullThis will first remove any empty object files that cause corruption of the repository as a whole, and then fetch down the missing objects (as well as latest changes) from the remote repository, and then do a full object store check. Which, at this point, should succeed without any errors (there may be still some warnings though!)PS. This answer suggests you have a remote copy of your git repository  somewhere (e.g. on GitHub) and the broken repository is the local repository that is tied to the remote repository which is still in tact. If that is not the case, then do not attempt to fix it the way I recommend.mv your folder app to make backup, i.e. mv app_folder app_folder_bk (it is like a git stash)git clone your_repositoryFinally,.  Open a merge tool (I use meld diff viewer linux or Winmerge Windows) and copy the changes from right(app_folder_bk)  to left( new app_folder)  (it is like a git stash apply).That's all. Maybe it is not the best way, but I think it is so practical .In my case, this error occurred because I was typing commit message and my notebook turned off.I did these steps to fix the error:git checkout -b backup-branch # Create a backup branchgit reset --hard HEAD~4 # Reset to the commit where everything works well. In my case, I had to back 4 commits in the head, that is until my head be at the point before I was typing the commit message. Before doing this step, copy the hash of the commits you will reset, in my case I copied the hash of the 4 last commitsgit cherry-pick <commit-hash> # Cherry pick the reseted commits (in my case 4, so I did this step 4 times) from the old branch to the new branch. git push origin backup-branch # Push the new branch to be sure everything works wellgit branch -D your-branch # Delete the branch locally ('your-branch' is the branch with problem)git push origin :your-branch # Delete the branch from remotegit branch -m backup-branch your-branch # Rename the backup branch to have the name of the branch that had the problemgit push origin your-branch # Push the new branchgit push origin :backup-branch # Delete the backup branch from remoteHere is a really simple and quick way to deal with this problem IF you have a local repo with all the branches and commits you need, and if you're OK with creating a new repo (or deleting the server's repo and making a new one in it's place):Create a new empty repo on the server (or delete the old repo and create a new one in its place)Change the remote URL of your local copy to point to the remote URL of the new repo.Push all branches from your local repo to the new server repo.This preserves all the commit history and branches that you had in your local repo.If you have collaborators on the repo, then I think in many cases all your collaborators have to do is change the remote URL of their local repo as well, and optionally push any commits they have that the server doesn't have.This solution worked for me when I ran into this same problem. I had one collaborator. After I pushed my local repo to the new remote repo, he simply changed his local repo to point to the remote repo URL and everything worked fine.If you don't care about keeping your historical commits, just run rm -r .gitThen answer yes to anything asking about deleting write-protected files.Problem solved in under a minute.Because I have to reboot my VM regularly, so somehow this problem happens to me very often. After few times of it, I realized I cannot repeat the process described by @Nathan-Vanhoudnos every time this happens, though it always works. Then I figured out the following faster solution.Step 1Move your entire repo to another folder.mv current_repo temp_repoStep 2Clone the repo from origin again.git clone source_to_current_repo.gitStep 3Remove Everything under the new repo except the .git folder.Step 4Move Everything from the temp_repo to the new repo except the .git folder.Step 5Remove the temp_repo, and we are done.After few times, I'm sure you can do this procedures very quickly."
"I found the answer in this blog post: http://www.btaz.com/misc/fatal-the-remote-end-hung-up-unexpectedly/ but I'll summarize here in case the link goes down for some reason.Try doing a git config ‰ÛÒlist.  If your remote.origin.url property looks like this remote.origin.url=git://git.some-domain.com/my-project, the problem is that you have a read-only URL.Use git config ‰ÛÒedit to change the url so something like git@git.some-domain.com:/my-project instead.This solved my problem.I also have a suggestion: If you don't know the answer, don't post.  Not even to ask a follow-up question.  It just adds noise.I can't tell you how many times I've found nothing but noise when looking for an answer to a simple question.  Its to the point where I often exclude stackoverflow.com from my query because it's easier to find the answer in someone's blog post than on this site."
"so i didn't dogit add .git commit -am 'initial commit' before I pushed.:/"
"GitHub doesn't support pushing over the Git protocol, which is indicated by your use of the URL beginning git://. As the error message says, if you want to push, you should use either the SSH URL git@github.com:my_user_name/my_repo.git or the ""smart HTTP"" protocol by using the https:// URL that GitHub shows you for your repository.If you want to change the URL of origin, you can just do:git remote set-url origin git@github.com:my_user_name/my_repo.gitMore information is available in 10.6 Git Internals - Transfer Protocols.Use Mark Longair's answer, but make sure to use the HTTPS link to the repository:git remote set-url origin https://github.com/my_user_name/my_repo.gitYou can use then git push origin master.Mark Longair's solution using git remote set-url... is quite clear.  You can also get the same behavior by directly editing this section of the .git/config file:before:[remote ""origin""]    fetch = +refs/heads/*:refs/remotes/origin/*    url = git://github.com/my_user_name/my_repo.gitafter:[remote ""origin""]    fetch = +refs/heads/*:refs/remotes/origin/*    url = git@github.com:my_user_name/my_repo.git(And conversely, the git remote set-url... invocation produces the above change.)If you go to http://github.com/my_user_name/my_repo you will see a textbox where you can select the git path to your repository. You'll want to use this!There is a simple solution to this for someone new to this:Edit the configuration file in your local .git directory (config). Change git: to https: below.[remote ""origin""]    url = https://github.com/your_username/your_repo"
"There are two types of Git repositories: bare and non-bare. A bare repository just contains the commits, branches, tags, and so on; a non-bare repository also contains a current working copy. If you look at a repository, you can tell if it's bare. If you have a directory containing the files in your project, as well as a .git directory, that's a non-bare repository; those files outside of the .git directory are the current working copy. If you have just the contents of the repository, such as refs, objects, and so on, that's a bare repository. It has no working copy.You can only push to bare repositories (unless you override the default configuration). You can pull from a non-bare repository, and pull into a non-bare repository, but you cannot push into one. This is to prevent problems updating the working copy. The working copy is a copy of your current state; you may have edited files, and so on. When you pull into a repository, the latest changes are checked out into your working copy; if you have some local changes that aren't checked in, they are merged with the changes from the repository you're pulling from, or the checkout is rejected and you need to fix up your local copy to be able to check out those new changes.On a repository you are pushing to, you are not able to immediately make changes if there's a conflict. The working tree will instead get out of date; what's in the repo and what's in the working tree will be out of sync. To prevent this, Git refuses to let you push into a non-bare repo.It's recommended to use a bare repo as your ""central"" repo, that you push to and pull from, use a non-bare repo for your working tree; where you actually do your work. Since it looks like you already have a repo that you have cloned from, you will need to create a bare repo from that, and update your origin to point to the bare repo instead of the non-bare one. You can create the bare repo with git clone --bare path/to/original/repo path/to/bare/repo.git (it's customary to name bare repos name.git). If this will be shared between multiple people on the same machine, you should also pass --shared to set up permissions correctly. Then in your working copy, run git remote set-url origin path/to/bare/repo.git, and git remote set-url --push origin path/to/bare/repo.git (or user@host:/path/to/bare/repo.git if you access it over SSH).The repository on the target is not 'bare'. That is, it has files checked out, and not just a .git database.The convention is to use bare 'repositories' as the targets of push.The error message tells you everything you need to know: you can change the configuration in the remote repo to permit this, or you can render it bare.Perhaps you should convert the remote to a bare repo without a working copy.ssh user@remotecd /path/containing/repogit clone --bare repo/ repo.gitNow, in your working repo, edit the .git/config to update the URL for the remote. Add a .git to the end of it.[remote ""origin""]    fetch = +refs/heads/*:refs/remotes/origin/*    url = user@remote:/path/to/repo.gitThen rungit push origin HEADto push the current branch."
"I actually once pushed with --force to git.git repository and got scolded by Linus BIG TIME.  It will create a lot of problems for other people.  A simple answer is ""don't do it"".I see others gave the recipe for doing so anyway, so I won't repeat them here, but here is a tip to recover from the situation after you have pushed out the amended commit with --force (or +master).First, you find the old commit that you amended (call it old, and we'll call the new commit you created by amending new).Then create a merge between old and new, recording the tree of new, like git checkout new && git merge -s ours old.Merge that to your master with git merge masterUpdate your master with the result with git push . HEAD:masterThen push the result out.Then people who were unfortunate enough to have based their work on the commit you obliterated by amending and forcing a push (which is your being a very very bad boy) will see the resulting merge will see that you favor new over old. Their later merges will not see the conflicts between old and new that resulted from your amending and they do not have to suffer.What you are seeing is a git safety feature. git refuses to update the remote branch with your branch because your branch's head commit is not a direct descendent of the current head commit of the branch that you are pushing to.If this were not the case, then two people pushing to the same repository at about the same time would not know that there was a new commit coming in at the same time and whoever pushed last would lose the work of the previous pusher without either of them realising this.If you know that you are the only person pushing and you want to push an amended commit or push a commit that winds back the branch, you can 'force' git to update the remote branch by using the -f switch.git push -f origin masterEven this may not work as git allows remote repositories to refuse non-fastforward pushes at the far end by using the config variable 'receive.denynonfastforwards'. If this is the case the rejection reason will look like this (note the 'remote rejected' part): ! [remote rejected] master -> master (non-fast forward)To get around this, you either need to change the remote repository's config or as a dirty hack you can delete and recreate the branch thus:git push origin :mastergit push origin masterIn general the last parameter to git push uses the format <local_ref>:<remote_ref>, where local_ref is the name of the branch on the local repository and remote_ref is the name of the branch on the remote repository. This command pair uses two shorthands. :master has a null local_ref which means push a null branch to the remote side master, i.e. delete the remote branch. A branch name with no : means push the local branch with the given name to the remote branch with the same name. master in this situation is short for master:master.Quick rant: The fact that no-one has posted the simple answer here demonstrates the desperate user-hostility exhibited by the Git CLI.Anyway, the ""obvious"" way to do this, assuming you haven't tried to force the push, is to pull first. This pulls the change that you ammended (and so no longer have) so that you have it again.Once you have resolved any conflicts, you can push again.So:git pullIf you get errors in pull, maybe something is wrong in your local repo config (I had a wrong ref in .git/config branch section)And aftergit pushMaybe you will get an extra commit with subject telling about a ""Trivial merge""Short answer: Don't push amended commits to a public repo.Long answer: A few Git commands, like git commit --amend and git rebase, actually rewrite the history graph. This is fine as long as you haven't published your changes, but once you do, you really shouldn't be mucking around with the history, because if someone already got your changes, then when they try to pull again, it might fail. Instead of amending a commit, you should just make a new commit with the changes.However, if you really, really want to push an amended commit, you can do so like this:$ git push origin +master:masterThe leading + sign will force the push to occur, even if it doesn't result in a ""fast-forward"" commit. (A fast-forward commit occurs when the changes you are pushing are a direct descendant of the changes already in the public repo.)I have solved it by discarding my local amended commit and adding the new changes on top:# rewind to commit before conflictinggit reset --soft HEAD~1# pull the remote versiongit pull# add the new commit on topgit add ...git commitgit pushHere is a very simple and clean way to push your changes after you have already made a ""commit --amend"" git reset --soft HEAD^git stashgit push -f origin mastergit stash popgit commitgit push origin masterWhich does the following:Reset branch head to parent commit.Stash this last commit.Force push to remote. The remote now doesn't have the last commit.Pop your stash.Commit cleanly.Push to remote.Had the same problem.accidentally amended the last commit that was allready pusheddone alot of changes locally, committed some 5 timestried to push, got an error, panicked, merged remote, got alot of not-my-files, pushed, failed, etc.As a GIT-newbie, I thought it was comlpete fubar.Solution: somewhat like @bara suggested + created a local backup branch# Rewind to commit just before the pushed-and-amended one. # Replace <hash> with the needed hash.# --soft means: leave all the changes there, so nothing is lost.git reset --soft <hash># Create new branch, just for a backup, still having all changes in it. # The branch was feature/1234, new one - feature/1234-gone-badgit checkout -b feature/1234-gone-bad# Commit all the changes (all the mess) not to lose it & not to carry aroundgit commit -a -m ""feature/1234 backup""# Switch back to the original branchgit checkout feature/1234# Pull the from remote (named 'origin'), thus 'repairing' our main problemgit pull origin/feature/1234# Now you have a clean-and-non-diverged branch and a backup of the local changes.# Check the needed files from the backup branchgit checkout feature/1234-gone-bad -- the/path/to/file.phpMaybe its not a fast and clean solution and I lost my history (1 commit instead of 5), but it saved a day's work.I had to fix this problem with pulling from the remote repo and deal with the merge conflicts that arose, commit and then push. But I feel like there is a better way."
"This error means that the upstream repository has made commits that would be lost if you were to push. First do a ""git pull"" to merge, and then push again.I'm the only person working on my app and only work on it from my desktop, so the possibility that I managed to get the heroku repository above dev didn't make sense. BUT! I recently had a Heroku support rep look into my heroku account for a cache issue involving gem installs and he had changed something that caused heroku to return the same error as the one listed above. A git pull heroku master was all it took. Then I found the reps minor change and reverted it myself.Execute this:$ rake assets:precompile$ git add .$ git commit -m ""Add precompiled assets for Heroku""$ git push heroku masterSource: http://ruby.railstutorial.org/ruby-on-rails-tutorial-bookIt would appear that you are not fully up-to-date. You would need to do a git pull and either ""--rebase"" or let it merge into your set.After this, you should then be able to push, since it would be a 'fast-forward' change that wouldn't remove history."
"A simpler way to do this is to add a post-receive script which runs the chmod commandafter every push to the 'hub' repo on the server. Add the following line to hooks/post-receive inside your git folder on the server:chmod -Rf u+w /path/to/git/repo/objectsI had this error for two weeks, and the majority of the solutions stated 'chmod -R' as the the answer, unfortunately for me my git repos (local / remote / shared - with team) were all on Windows OS, and even though chmod -Rv showed all the files changed to 'rwxrwxrwx', a subsequent 'ls -l' still showed all files as 'rwxr-xr-x' and the error repeated itself. I eventually saw this solution by Ariejan de Vroom. It worked and we were all able to pull and push again.On both local (the local that is having trouble pushing) and remote repos, run the following commands:git fsckgit prunegit repackgit fsckOn a side note, I tried using Windows' native file permissions / ACL and even resorted to elevating the problem user to Administrator, but none of that seemed to help. Not sure if the environment is important, but it may help someone with a similar setup - problem team member and remote (Windows Server 2008 R2 Standard), my local (Windows 7 VM).It is a permission error. The way that was most appropriate and secure for me was adding users to a supplementary group that the repo. is owned by (or vice versa):groupadd gitchgrp -R git .gitchgrp -R git ./usermod -G -a git $(whoami)In case anyone else is stuck with this: it just means the write  permissions are wrong in the repo that you‰Ûªre pushing to. Go and chmod  -R it so that the user you‰Ûªre accessing the git server with has write access.http://blog.shamess.info/2011/05/06/remote-rejected-na-unpacker-error/It just works.I use gitosis for managing this kind of stuff. Gitosis has a single user (usually called ""git"") that owns all the repositories, and it uses public-key-based access control to each repo. It might not suit your setup but is probably worth checking out (no pun intended).For what it worth, I had the same problem over my own VPS and it was caused by my low hard disk space on VPS. Confirmed by df -h command and after i cleaned up my VPS' hard disk; the problem was gone.Cheers.I was having trouble with this too, thinking my remote gitolite-admin was corrupted or something wrong.    My setup is Mac OS X (10.6.6) laptop with remote Ubuntu 10 server with gitolite.It turned out that the problem was with my local checkout of gitolite-admin.  Despite the ""unpack failed"" error, it turned out the the problem was local.I figured this out by checking it out again as gitolite-admin2, making a change, and the pushing.  Voila!  It worked!This problem can also occur after Ubuntu upgrades that require a reboot.If the file /var/run/reboot-required exists, do or schedule a restart."
"On the first machine, you created a non-bare repository, or a repository that has a working copy. Pushing to a non-bare repo can get a little exciting, so make sure that's actually what you want.On the second machine, you created a new repository in the current directory (git init), then cloned gitrepo into a sub-directory as a second repo. Again, that's fine, just make sure it's what you wanted.Here's how it would work with a bare repo on the first machine and one repo on the second:First machine:git init --bare gitrepo.gitSecond machine:git clone user@server:~/gitrepo.gitcd gitrepotouch testgit add testgit commit -a# '-u' tells git to track the remote master branch with your local master branchgit push -u origin mastergit push [remote-name] [branch-name]. e.g. git push origin master"
"It looks like you have an extra copy of your refs tree within refs/remotes/origin. Notice how within refs/remotes/origin, you have an extra refs directory? I don't know how this got there, but it's probably what is causing your problems. Due to the way Git handles abbreviations of refs (allowing you to drop the prefix, using only the suffix like origin/master), it is probably getting confused by having both refs/remotes/origin/master and refs/remotes/refs/remotes/origin/master.I don't know how it got into this state; possibly a bug in a Git tool, possibly a typo that you made at some point. You fixed half of the problem by deleting the remote branch that was tracking this duplicate branch. I would be willing to bet you can fix the other half of the problem, and be able to do git push again, if you delete the refs/remotes/origin/refs directory."
"Now it is working! I didn't even change a thing. This kind of an error ' result=52 ' is an error with github itself. Github.com was going down and when I tried uploading I got the error. Now the site is back up and I can commit like normal.This same error also happens if your HTTP post buffer is too small for the changes you want to push.In this case, the solution is to increase it, for example usinggit config http.postBuffer 524288000Bitbucket has the same error message. Often it is related to degraded server performance. Before you start doing anything else, check:http://status.bitbucket.org/https://status.github.com/messagesThis could happen if you have a faulty internet connection too, Yeah I am experiencing one at this time.. :).I ran into this problem when trying to clone/fetch from a Bitbucket repository over http. It turns out the repository is too big (+1gb) and Bitbucket replies with this error:error: RPC failed; result=52, HTTP code = 0fatal: The remote end hung up unexpectedlyI switched to the SSH protocol and now it works fine. Afterwards, you can set the remote back to the http version if you need to, and it will keep working."
"You may explicitly specify to which remote branch you're pushing:git push origin myBranch:existing_remote_branchActually it seems that you perform many excessive steps and generally the workflow is much simpler. Also it's worth to check Configure a local branch for push to specific branchUpdate:Assuming git is relatively modern, I would go as follows:git clone ""$myurl"" ""$myfolder""cd ""$myfolder""git checkout ""$mybranch""git remote set-head origin ""$mybranch""... add and commit your changes here ...git push origin ""$mybranch""I'd like to ask why you created two different git repositories, one in ""$myfolder"" and another in ""$myfolder/<project_name>"" ? Is that expected behavior? (I can imagine cases when it may be useful, but they're ""corner-cases"", at best)"
"We have had the same problem - Windows PCs using Netbeans pushing to a RHEL server with the main repo.The only solution I have found so far is to run git fsck, git prune and git repack remote/origin/master followed by a final git fsck. The first git fsck will show that you have one or more dangling commits and the subsequent commands clean up the repo and you'll then be able to push from Netbeans. I have tried to inspect these but they appear to be nonexistent, so it's a mystery where they come from. The problem doesn't occur if I push from another Linux box, from the command line. All this is over SSH.It's fine when just one user is pushing to the repo, but as soon as someone else does, then the first user will (after doing a pull to be non-fast-forward) get this error. I suspect Netbeans is doing something odd with the push but I don't know what.EDIT:This is basically to do with WRITE privileges as per the comment to this answer, but I've solved it by doing the following(assuming that ""developers"" is our group that we want to allow to push and that example.com.git is the repo)[tim@dev git]# chgrp -R developers example.com.git[tim@dev git]# chmod -R g+swX example.com.gitSee this answer at Serverfault for more info"
"You can use the convert command with a filemap to strip the git repo from the repository. After that it will be gone from the history, and the repository will be safe for importing to git.Example:$ echo ""exclude path/to/.git"" > my-filemap$ hg convert --filemap my-filemap originalrepo newrepoNote that convert is a bundled extension which you first need to enable in your .hgrc like so:[extensions]convert =For more information see hg help convert."
"From git branch it appears that somehow your local branch name is ""origin"".You can rename the branch with -mv flag, like this: git branch -mv origin masterAfter this git branch should show master :-)Just to make sure the name is indeed the only thing that went astray, you can run git log and look at the last few commits - and compare them to the last few commits on bitbucket website.This should help yougit initgit add .git commit -m 'Initial Commit'git push -u origin master"
"The problem is that git push assumes that remote branch can be fast-forwarded to your local branch, that is that all the difference between local and remote branches is in local having some new commits at the end like that:Z--X--R         <- origin/some-branch (can be fast-forwarded to Y commit)       \                T--Y    <- some-branchWhen you perform git rebase commits D and E are applied to new base and new commits are created. That means after rebase you have something like that:A--B--C------F--G--D'--E'   <- feature-branch       \          D--E                <- origin/feature-branchIn that situation remote branch can't be fast-forwarded to local. Though, theoretically local branch can be merged into remote (obviously you don't need it in that case), but as git push performs only fast-forward merges it throws and error.And what --force option does is just ignoring state of remote branch and setting it to the commit you're pushing into it. So git push --force origin feature-branch simply overrides origin/feature-branch with local feature-branch.In my opinion, rebasing feature branches on master and force-pushing them back to remote repository is OK as long as you're the only one who works on that branch.One solution to this is to do what msysGit's rebasing merge script does - after the rebase, merge in the old head of feature with -s ours.  You end up with the commit graph:A--B--C------F--G (master)       \         \        \         D'--E' (feature)         \           /          \       --           \    /            D--E (old-feature)... and your push of feature will be a fast-forward.In other words, you can do:git checkout featuregit branch old-featuregit rebase mastergit merge -s ours old-featuregit push origin feature(Not tested, but I think that's right...)It may or may not be the case that there is only one developer on this branch, that is now (after the rebase) not inline with the origin/feature.As such I would suggest to use the following sequence:git rebase mastergit checkout -b feature_branch_2git push origin feature_branch_2Yeah, new branch, this should solve this without a --force, which I think generally is a major git drawback.Other's have answered your question. If you rebase a branch you will need to force to push that branch. Rebase and a shared repository generally do not get along. This is rewriting history. If others are using that branch or have branched from that branch then rebase will be quite unpleasant.In general, rebase works well for local branch management. Remote branch management works best with explicit merges (--no-ff). We also avoid merging master into a feature branch. Instead we rebase to master but with a new branch name (e.g adding a version suffix). This avoids the problem of rebasing in the shared repository.What is wrong with a git merge master on the feature branch? This will preserve the work you had, while keeping it separate from the mainline branch.A--B--C------F--G       \         \        D--E------HEdit: Ah sorry did not read your problem statement. You will need force as you performed a rebase. All commands that modify the history will need the --force argument. This is a failsafe to prevent you from losing work (the old D and E would be lost).So you performed a git rebase which made the tree look like (although partially hidden as D and E are no longer in a named branch):A--B--C------F--G       \         \        D--E      D'--E'So, when trying to push your new feature branch (with D' and E' in it), you would lose D and E.I will use instead ""checkout -b"" and it is more easy to understand.git checkout myFeaturegit rebase mastergit push origin --delete myFeaturegit push origin myFeaturewhen you delete  you prevent to push in an exiting branch that contains different SHA ID.I am deleting only the remote branch in this case.As the OP does understand the problem, just looks for a nicer solution...How about this as a practice ?Have on actual feature-develop branch (where you never rebase and force-push, so your fellow feature developers don't hate you). Here, regularly grab those changes from main with a merge. Messier history, yes, but life is easy and no one get's interupted in his work.Have a second feature-develop branch, where one feature team member regulary pushes all feature commits to, indeed rebased, indeed forced. So almost cleanly based on a fairly recent master commit. Upon feature complete, push that branch on top of master.There might be a pattern name for this method already."
"Pushing to non-bare repositories (repositories that contain working trees with actual file contents) is considered bad practise. Instead you should create a central bare repository to and from which you push and pull changes from each individual dev repository.You can create a bare Git repository using git init --bare. Then just set the bare repo as a remote for a dev repository.For non-bare repositories only pulling is an option. You could push -f, but be sure to verify forced changeset pushing with your fellow developers who might be working on the same repositories.If you want, you can also create a hosted bare repository to Github, Bitbucket and the like."
"If you attempt to push a large set of changes to a Git repository with HTTP or HTTPS, you may get an error message such as error: RPC failed; result=22, HTTP code = 411. This is caused by a Git configuration default which limits certain HTTP operations to 1 megabyte.To change this limit run within your local repositorygit config http.postBuffer *bytes*where bytes is the maximum number of bytes permitted. For exmaple:git config http.postBuffer 524288000For 500MB (thanks @Hengjie)You can also do this globally - git config --global http.postBuffer 524288000That will allow all local repos to push up to 500MB of data.If you are using TortoiseGit for Windows, the easiest way is using the integrated configuration.In a file explorer press left mouse button, select TortoiseGit -> Settings. Accept the info message. Now, you can choose if you want to configure the property only for the current project or system whide. For systemwide configuration press ""edit systemwide gitconfig"" and add the next line to the section [http]:postBuffer = 524288000(it the section [http] doesn't exist, create it)None of the solutions provided worked for us.  We had to switch to ssh to make this work instead of the HTTPS solution."
"Your push command is to remote heroku-production but your pull command is to origin. The non-fast-foward message means the history in your current repo differs from the Heroku remote; likely someone has pushed a branch with some merges or rebases. I implore you to not use Heroku as the authoritative git remote. Assuming you are not, you can force push over the Heroku master branch to resolve this. git push -f heroku-production master:master"
"I made the mistake of using https instead of ssh for a fresh copy.I since then made modifications and commits but could not push for obvious reasons.To recover, I simple changed the section [remote ""origin""] in .git/config fromurl = https://github.com/AIFDR/riab_core.gitto url = git@github.com:AIFDR/riab_core.gitAfter that, I could push again.Faster HTTP Push with only git -  webDAV is not requiredThe new ""smart-http"" support since git 1.6.6.  The new method allows the entire pack to be transmitted at once, and not as individual files.YOu can also use gitweb to provide browable URLs  at the same location.Note: Because access is controlled by apache you can add any Auth requirements (htaccess or ldap, etc) to the  setup for each repository.This answer assumes you own the remote server and want to add/fix http support.FIRST:Check the apache logs, its likely a permission denied/unable to locate error when apache tries to execute the git-http-backed cgi scripts.Adding HTTP Support to gitJust make a new git_support.conf file, and include it in apache (add include statement in httpd.conf)##  Basic setup for git-http-backend#SetEnv GIT_PROJECT_ROOT /opt/git_reposSetEnv GIT_HTTP_EXPORT_ALLSetEnv REMOTE_USER=$REDIRECT_REMOTE_USER  #IMportant !!! This could be your problem if missing<Directory /opt/git>  # both http_backend and gitweb should be somewhere under here        AllowOverride None        Options +ExecCGI -Includes  #Important! Lets apache execute the script!        Order allow,deny        Allow from all</Directory># This pattern matches git operations and passes them to http-backendScriptAliasMatch \        ""(?x)^/git/(.*/(HEAD | \                        info/refs | \                        objects/(info/[^/]+ | \                                 [0-9a-f]{2}/[0-9a-f]{38} | \                                 pack/pack-[0-9a-f]{40}\.(pack|idx)) | \                        git-(upload|receive)-pack))$"" \        /opt/git/libexec/git-core/git-http-backend/$1# Anything not matched above goes to displayable gitweb interfaceScriptAlias /git /opt/git/cgi-bin/gitweb.cgi/The result is the ability to push/pull:me@machine /tmp/eddies $ git pullAlready up-to-date.me@machine /tmp/eddies $ touch changedFileme@machine /tmp/eddies $ git add .me@machine /tmp/eddies $ git commit -am""commiting change""[master ca7f6ed] commiting change 0 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 changedFileme@machine /tmp/eddies $ git push origin masterCounting objects: 3, done.Delta compression using up to 8 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (2/2), 239 bytes, done.Total 2 (delta 1), reused 0 (delta 0)To http://mysecretdomain.com/git/eddies   0f626a9..ca7f6ed  master -> masterAnd you can browse those changes online..Source:http://repo.or.cz/w/alt-git.git?a=blob_plain;f=gitweb/READMETo enable a ""git push"" over http, you have to enable WebDAV on the webserver. To do that for Apache Webserver, simply edit the configuration file:vim /etc/httpd/conf/httpd.confThen search for the line starting with:<Directory ""/var/www/html"">Add the following line just after it:Dav OnMake sure you have the following line also in httpd.conf uncommented:LoadModule dav_fs_module modules/mod_dav_fs.soAfter that you are ready. Restart Apache Webserver using:service httpd restartAlso make sure to make all the git repository files on the server be writable by the pache:apache user and group using:chown -R apache:apache /var/www/html/your_git_repositoryOtherwise, failing to set correct permissions will result in ""PUT error: curl result=22, HTTP code=403"" when performing a ""git push"".Now simply do a ""git push"" from your client machine and all should work.You can't push on a repository you cloned through HTTP.You need to update the URL to either a ssh:// or a git:// type URL.Edit the following section of your .git/config file:[remote ""origin""]fetch = +refs/heads/*:refs/remotes/origin/*url = http://git.repository.url/repo.gitto[remote ""origin""]fetch = +refs/heads/*:refs/remotes/origin/*url = http://username:password@git.repository.url/repo.gitThen try git push origin master.Edit the authentication details in your config files for other repository URLs as required and push to the required branch.I had the same problem with push operation with git-http-backend, ldap authentication config.Finally I've found the solution and describe it in this serverfault questionMaybe it will help someone with similar problem."
"This is just a hunch, but was your remote a bare repo or a working directory? If it was a working directory rather than a bare repo, the file.php file on the remote had uncommitted changes. Your git push command was trying to advance the HEAD at the remote which was causing conflicts due to the uncommitted changes.This is why you usually git pull to update a working directory, and use git push on bare repos. FYI, to setup a bare repo for use as something similar to a central CVS/SVN/etc repo, do the following on the remote:$ mkdir my-git-repo$ cd my-git-repo$ git init --bareThen in your local repo:$ cd my-git-repo.git$ git remote add origin user@host:/path/to/my-git-repo/$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master$ git push origin masterNow you have a bare repo to push/pull into/from that contains your master branch. You can repeat the last three local steps with any additional local branches you want to put on the remote. Cloning is the same as before and you don't need to use git config as remotes are set automatically and remote merging refs are set when you use tracking branches. Hope that helps.Try doing a git checkout file.php then git push again.Update:git pull tells the branch is up-to-date?git status doesn't show any unmerged file?git commit works?If you answered yes to all above, and your git push keeps failing even after a clean copy of the remote repository (read git clone), it's very likely the remote repository has an index problem.I would cut and paste my file.php locally out of the working folder. To your desktop lets say.Then do a pull, then git should fetch the lastest file.php from the server. Then just paste in your copy of file.php and overwrite the pulled one or open up both versions and just paste in your changes.I hope that does the trick.Try to do a git status and check if you've got any non commited changes to 'file.php'. You need to commit all the changes on the same files, or git could change your non-commited file.Try to make another commit after the pull, and then try to pull again, review any possible merge and push the data.If you want just to overwrite your local copy, checkout the file file.php  (git checkout HEAD^ file.php to checked version previous to last one) to a previous version, and then pull from the repository."
"There are changes in the central repository that you must pull before you can push.Do git add -Agit commit -m ""my local changes"" git pullResolve any conflicts. Then dogit pushAlternatively, if you have no valuable modifications locally, you can create a new clone of your repo, and start working from there:git clone https://johnsproject@bitbucket.org/johnsproject/proj.git new_repo_dirTry doinggit pull origin mastergit add -Agit commit -m ""modified code""git push origin masterYour local repository is likely out of sync with the remote repository."
"Check if your commits have Change-Id: ... in their descriptions. Every commit should have them.If no, use git rebase -i to reword the commit messages and add proper Change-Ids (usually this is a SHA1 of the first version of the reviewed commit).For the future, you should install commit hook, which automatically adds the required Change-Id.Execute scp -p -P 29418 username@your_gerrit_address:hooks/commit-msg .git/hooks/ in the repository directoryor download them from http://your_gerrit_address/tools/hooks/commit-msg and copy to .git/hookstry this:git commit --amendand copy paste the Change-Id: I55862204ef71f69bc88c79fe2259f7cb8365699a at the end of the file.save it and push it again!If you need to add Change-Id to multiple commits, you can download the hook from your Gerrit server and run these commands to add the Change-Ids to all commits that need them at once.  The example below fixes all commits on your current branch that have not yet been pushed to the upstream branch.tmp=$(mktemp)hook=$(readlink -f $(git rev-parse --git-dir))/hooks/commit-msggit filter-branch -f --msg-filter ""cat > $tmp; \""$hook\"" $tmp; cat $tmp"" @{u}..HEADIt is because Gerrit is configured to require Change-Id in the commit messages.http://gerrit.googlecode.com/svn-history/r6114/documentation/2.1.7/error-missing-changeid.htmlYou have  to change the messages of every commit that you are pushing to include the change id ( using git filter-branch ) and only then push."
"git pull <remote> master:dev will fetch the remote/master branch and merge it into your local/dev branch.git pull <remote> dev will fetch the remote/dev branch, and merge it into your current branch.I think you said the conflicting commit is on remote/dev, so that is the branch you probably intended to fetch and merge.In that case, you weren't actually merging the conflict into your local branch, which is sort of weird since you said you saw the incorrect code in your working copy.  You might want to check what is going on in remote/master.I fixed it, I'm not exactly sure what I did. I tried simply pushing and pulling using:git pull <remote> devinstead ofgit pull <remote> master:devHope this helps out someone if they are having the same issue.I had this error and it was because there was an update on the server but SourceTree was not showing any updates available (possibly because I was offline when it last checked). So I did a refresh in source tree and now it shows 2 items to push instead of 1 item. So be sure to press refresh or pull if you get this error and then try again."
"This could be a credential issue, as mentioned in ""An internal Exception occurred during push: cannot store objects"":I just reconfigured the eclipse and added my github account information and store it.  Then it worked. Team->Remote->Configure push to upstream->URI, Change->Add authentication detailsThe other classic issue is a capitalization problem in the url (""git-upload-pack not found""), but if it is working from the command line, this shouldn't be the case here."
"When you see this error outside of github, here's a remedy.Got this from:http://mapopa.blogspot.com/2009/10/git-insufficient-permission-for-adding.htmlssh me@myservercd repository/.gitsudo chmod -R g+ws *sudo chgrp -R mygroup *git config core.sharedRepository trueAfter this the git daemon should use the group file permissions when writing to .git/objects.Usually this problem is caused by wrong user and group permissions on your Git servers file-system. The git repository has to be owned by the user and also his group.Example:If your user is called ""git"", his group ""gitgroup"", and the location of the Git repo is: git@mygitserverxyz.com:path/to/repo.gitthen do a: sudo chown -R git:gitgroup path/to/repo.git/This fixed the git insufficient permission error for me.sudo chmod 777 -R .git/objectsNothing of the above worked for me. A couple of hours later I found the reason for the problem:I used a repo url of the typessh://git@example.com/~git/repo.gitUnfortunately I stored a putty session with the name example.com which was configured to login as user myOtherUser. So, while I thought git connects to the host example.com with the User 'git', Git/TortoiseGit has connected to the putty session example.com which uses the User myOtherUser. This leads to the exact same ..insufficient permission.. error (cause both users are in different groups).Solution: Rename the putty session example.com to myOtherUse@example.comchmod should be chown, so the correct line is:sudo chown -R gituser.gituser objectsOddly enough, I had this issue on one clone of the repo I had, but not another I had.  Aside from re-cloning the repo (which a coworker did to successfully get around this issue), I managed to do a ""git reset"" to the commit I had before the failures started.  Then I re-committed the changes, and I was able to push successfully after that.  So despite all the indications there was a problem on the server, in this case it apparently was indicative of some oddity in the local repo.This works:sudo chmod -R gituser.gituser objectsIf you still get this error later after setting the permissions you may need to modify your creation mask. We found our new commits (folders under objects) were still being created with no group write permission, hence only the person who committed them could push into the repository.We fixed this by setting the umask of the SSH users to 002 with an appropriate group shared by all users.e.g. umask 002where the middle 0 is allowing group write by default.After you add some stuff... commit them and after all finished push it! BANG!! Start all problems... As you should notice there are some differences in the way both new and existent projects were defined. If some other person tries to add/commit/push same files, or content (git keep both as same objects), we will face the following error:$ git pushCounting objects: 31, done.Delta compression using up to 2 threads.Compressing objects: 100% (17/17), done.Writing objects: 100% (21/21), 2.07 KiB | 0 bytes/s, done.Total 21 (delta 12), reused 0 (delta 0)remote: error: insufficient permission for adding an object to repository database ./objects  remote: fatal: failed to write objectTo solve this problem you have to have something in mind operational system's permissions system as you are restricted by it in this case. Tu understand better the problem, go ahead and check your git object's folder (.git/objects). You will probably see something like that:<your user_name>@<the machine name> objects]$ ls -latotal 200drwxr-xr-x 25 <your user_name> <group_name> 2048 Feb 10 09:28 .drwxr-xr-x  3 <his user_name> <group_name> 1024 Feb  3 15:06 ..drwxr-xr-x  2 <his user_name> <group_name> 1024 Jan 31 13:39 02drwxr-xr-x  2 <his user_name> <group_name> 1024 Feb  3 13:24 08*Note that those file's permissions were granted only for your users, no one will never can changed it... *Level       u   g   oPermission rwx r-x ---Binary     111 101 000Octal       7   5   0SOLVING THE PROBLEMIf you have super user permission, you can go forward and change all permissions by yourself using the step two, in any-other case you will need to ask all users with objects created with their users, use the following command to know who they are:$ ls -la | awk '{print $3}' | sort -u <your user_name><his user_name>Now you and all file's owner users will have to change those files permission, doing:$ chmod -R 774 .After that you will need to add a new property that is equivalent to --shared=group done for the new repository, according to the documentation, this make the repository group-writable, do it executing:$ git config core.sharedRepository grouphttps://coderwall.com/p/8b3ksgsudo su rootchown -R user:group dirThe dir is your git repo.Then do:git pull origin masterYou'll see changes about commits by others."
"In my case, the git repository was duplicated somehow in the config file:cat .git/configgave me:[remote ""origin""]    url = git@bitbucket.org:myUserName/myRepositoryName.git/myRepositoryName.git    fetch = +refs/heads/*:refs/remotes/origin/*As you can see, myRepositoryName is duplicated, so I removed that, and now the config file looks like this:[remote ""origin""]    url = git@bitbucket.org:myUserName/myRepositoryName.git    fetch = +refs/heads/*:refs/remotes/origin/*Doing this, my problem is solved. Now the push is correctly done. Hope this help someone.This error also occur when you rename your repo:Edit .git/config and change from:git remote add origin git@bitbucket.org:myname/myproject.gitto:git remote add origin git@bitbucket.org:myname/my_new_project_name.gitI managed to do this in the end by removing the origin and re-adding it.  Everything seemed ok after I did this.git remote rm origingit remote add origin git@github_or_bitbucket_or_whatever_linkYou get this error if the remote repository hasn't been created. Bitbucket is running a service called conq that handles pushes and you see the error message from it. Simply create a new (empty) repository and the push should succeed.Here I'm pushing to a non-existing repository:$ git push git@bitbucket.org:mg/testt.git masterconq: repository does not exist.fatal: The remote end hung up unexpectedlyand here I push to the correct path:$ git push git@bitbucket.org:mg/test.git masterCounting objects: 3, done.Writing objects: 100% (3/3), 203 bytes, done.Total 3 (delta 0), reused 0 (delta 0)remote: bb/acl: mg is allowed. accepted payload.To git@bitbucket.org:mg/gtest.git * [new branch]      master -> masterThe test repository was newly created on Bitbucket. If the problem persists, then I suggest deleting the empty repo from Bitbucket and re-creating it.I had a similar problem, and this thread helped me solve the issue, but my solution is slightly different:I was on a remote server, so first I had to change into the public_html (www) directory, then initialize the repo. (note you have to first add your .ssh key in bitbucket)$ git initwhich initialized an empty Git repositorythen add the remote$ git remote add origin git@bitbucket.org:myname/myproject.gitthen I was able to pull and checkout my branch$ git pull$ git checkout <branch-name>in my case, i mixed up usernames:in my scenario there are 2 accounts: i need to connect using my-account to the repository's owner-account:owner-acc   - created, maintaining the accountmy-acc           - me, a participantthe syntax in this case should beurl = git@bitbucket.org:owner-acc/repo-name.gitand NOT my username, nor my account-name.I assume bitbucket's instructions I followed previously took care of identifying me somehow (it's probably relating my-account with the public key i uploaded earlier).I had this error when trying to deploy with Capistrano. I was missing the deploy key for that Bitbucket repo. Here's how to solve the issue:Generate an SSH Key on your server: https://confluence.atlassian.com/display/STASH/Creating+SSH+keysFollow these instructions to get ssh-agent running, and load in the identity you just created: https://confluence.atlassian.com/display/BITBUCKET/Troubleshoot+SSH+IssuesOnce that's finished just go to the Bitbucket repo > Settings > Deploy Keys and copy and paste your newly created key.Did you encounter this error doing the Rails Tutorial?I did. And I'm very new to this so I was only doing was the tutorial explicitly told me to do. That got me into trouble because in chapter 3 it says it‰Ûªs a good idea to create a new repository at Bitbucket and push it up but it doesn't hold your hand through the process like it does in Chapter 2.Don't forget to create the new repository at BitBucket before pushing to that repository. From Chapter 2: You should also create a new repository by clicking on the ‰ÛÏCreate‰Ûù button at Bitbucket.I did that and it fixed the problem."
"This should only be the case if you're amending an already-pushed commit. Generally you should never do that as you're then modifying published history. In your case however, you should be able to get away with push -f, which will overwrite the remote commit with your amended revision.you amended the pulled commit as ingit pull origin mastergit commit -a --amend -m ""...""git pushyou can solve the issue by reverting the amended commit:git reset --mixed origin/masterand then making it again as a full fledged commitYup, you should not do that (pushing a commit, then changing it and trying to push it again).Instead, do the following:> git reset --mixed origin/master> git add .> git commit -m ""This is a new commit for what I originally planned to be an amendmend""> git push origin masterthis will create a new commit with the changes you were about to amend."
"First, you and those you're working with need to agree whether a topic/devel branch is for shared development or just your own. Other developers know not to merge on my development branches because they'll be rebased at any time. Usually the workflow is as follows:o-----o-----o-----o-----o-----o       master \   o-----o-----o                      devel0                \                  o-----o-----o       devel1Then to stay up-to-date with remote I'll do the following: git fetch origin git checkout master git merge --ff origin/masterI do this for two reasons. First because it allows me to see if there are remote changes without needing to switch from my devel branch. Second it's a safety mechanism to make sure I don't overwrite any un-stashed/committed changes. Also, if I can't fast-forward merge to the master branch that means either someone has rebased the remote master (for which they need to be flogged severely) or I accidentally committed to master and need to clean up my end.Then when remote has changes and I've fast forwarded to the latest I'll rebase:git checkout devel0git rebase mastergit push -f origin devel0Other developers then know they'll need to rebase their devel branches off my latest:git fetch <remote>git checkout devel1git rebase <remote>/devel0Which results in much cleaner history:o-----o                                 master       \         o-----o-----o                  devel0                      \                        o-----o-----o   devel1Don't merge commits back and forth at your whim. Not only does it create duplicate commits and make history impossible to follow, finding regressions from a specific change becomes near impossible (which is why you're using version control in the first place, right?). The problem you're having is the result of doing just this.Also it sounds like other developers may be making commits to your devel branches. Can you confirm this?The only time to merge is when your topic branch is ready to be accepted into master.On a side note. If multiple developers are committing to the same repository you should all consider having named branches to distinguish between developers devel branches. For example:git branch 'my-name/devel-branch'So all developers topic branches reside within their own nested set.You need to force the push as you have moved the commits further down the line git is expecting you to add commits to the tip of the branch. git push -f origin myNewFeature will fix your problem.Tip: Above is a legitimate usage of force pushing. Never ever rewrite the history on a publicly accessible repository or a lot of people will hate you.The main thing to keep in mind here is what pull and rebase are doing behind the scenes.A pull will basically do two things: fetch and merge.  When you include --rebase it will do a rebase instead of the merge.A rebase is pretty much like stashing all of your local changes since you branched, fast forwarding your branch to the latest commit on the target, and unstashing your changes in order on top.You never want to push rebased changes to remote branches as this is rewritting history.  Ofcoarse, never is a bit strong as there are almost always exceptions.  The case that you need to maintain a remote version of your local repository to work on a specific environment for example.This will require you to push rebased changes at times either using force:git push -f origin newfeatureOr in some cases your administrator may have removed the ability to force so you must delete and recreate:git push origin :newfeaturegit push origin newfeatureIn either case you must be absolutely sure you know what you are doing if someone else is collaborating with you on your remote branch.  This may mean that you work together initially with merges and rebase those into a more manageable commit format just before going to master and removing your working branch.Remember you can almost always fallback on git's GC by taking advantage of:git reflogThis is a HUGE life saver as you can reset back to a more stable state if you get lost in all of your rebase/conflict management.You need to perform a forced push, i.e. git push -f origin myNewFeatureOh, and you better make damn sure that people don't base anything on your dev branch - usually you aren't supposed to publish branches where you are rewriting history at all (or rather do not rewrite history once published). One way would be using a branch name like wip/myNewFeature and then mentioning that wip branches will be rebased to master from time to time."
"The error is that somebody else has pushed in the master branch and you would overwrite their change if git allowed you to push (this is what non-fast forward error means). So you need to merge your local master branch with the remote master branch.This can happen if you did the git pull while the local branch was not the master branch. If you only want to push the branch you are working on and not the master branch, you need to tell it to git using the complete form of git-push:$ git push remote local-branch:remote-branchThe best possible answer is on Git help hereDealing with non-fast-forward errorsFrom time to time, you may encounter this error while pushing commits (git push origin master) to GitHub:To https://github.com/user/repo.git   ! [rejected]        master -> master (non-fast-forward)  error: failed to push some refs to 'https://github.com/user/repo.git'  To prevent you from losing history, non-fast-forward updates were rejected  Merge the remote changes (e.g. 'git pull') before pushing again.  See the  'Note about fast-forwards' section of 'git push --help' for details.This error can be a bit overwhelming at first; do not fear!Simply put, Git can't make the change on the remote without losing commits, so it refuses the push. Usually, this is caused by another user pushing to the same branch.You can remedy this by fetching and merging the remote branch:git fetch origingit merge origin masterOr, you can simply use git pull to perform both commands at once:git pull origin masterIn some cases, this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase. While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do. Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don't force-push.Be sure to verify that the pull actually worked.  It is possible the merge (which is part of a pull) failed.When I had this error message I failed to notice the pull failed.  The pull failed due to some uncommitted file changes (unrelated to the files I was trying to push) which caused the merge to fail. I reverted those file changes (because they were not important) and then did a pull again.  After the successful pull, the push worked."
"For me the problem was the execution of clone via sudo.If you clone to a directory where you have user permission ( /home/user/git) it will work fine.(Explanation: Running a command a superuser will not work with the same public key as running a command as user. Therefore github refused the connection.) This solutionr requires a SSH key already to be set up: https://help.github.com/articles/generating-ssh-keysI had to add my public key to github. https://help.github.com/articles/generating-ssh-keysYes, It's a public key Problem.I'm a windows user,and the page below help me resolve this problem.http://help.github.com/win-set-up-git/more precisely this link should be helpful https://help.github.com/articles/error-permission-denied-publickeyType the following command using your username and repository name:git clone https://github.com/{user name}/{repo name}in Ubuntu this works perfectly.I got a solution after a long time in tutorials.I followed the github tutorial on this link -> https://help.github.com/articles/error-permission-denied-publickey and I was able to connect in every step.But when I was trying to git push -u origin master I got this error:Permission denied (publickey). fatal: Could not read from remote  repository.Please make sure you have the correct access rightsThats how I`ve fixed it!!Go to the project directory using the Terminal and check it out$git remote -vYou will get something like this:origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (fetch)origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (push)If you are using anything different then git@github.com, open the config file on git directory by typing the command:vi .git/configAnd configure the line[remote ""origin""]url = ssh://git@github.com/yourGithubUserName/yourRepo.gitfetch = +refs/heads/*:refs/remotes/origin/In my case, I had to setup the public key for another user, as I already had one for my main user. once I switched users and performed the commands in the link above I was able to perform the setup for my test server without a problem.after you created the RSA key pair, you must to add it to SSH using:ssh-add ~/.ssh/id_rsaor wherever you created your rsa key pair.I had this problem, but none of the solutions above worked. I could clone and fetch but couldn't push. Eventually, I figured out the problem was in the url in my .git/config, it should be:git@github.com:<username>/<project>(not ssh://github.com/<username>/<project>.git or https://github.com/<username>/<project>.git).A good one if you have installed git on your computer:http://help.github.com/mac-set-up-git/Given that none of the answers here worked for me, I finally tracked down my issue connecting to Bitbucket (or Github, doesn't matter in this case) with ssh -vT git@bitbucket.org.In my case, the failure was due to using a DSA key instead of RSA, and apparently my SSH client no longer allows that.debug1: Skipping ssh-dss key /c/Users/USER/.ssh/id_dsa for not in PubkeyAcceptedKeyTypesThe solution was to add this to .ssh/config:Host *    PubkeyAcceptedKeyTypes +ssh-dssThis elegantly appends the ssh-dss key type to all existing accepted public key types and after this was done, git can now ssh into Bitbucket no problem.I faced a similar issue when running SSH or Git Clone in Windows. Following findings helps to solve my problem:When you run ‰ÛÏrhc setup‰Ûù or other ssh methods to generate ssh key, it will create the private key file id_rsa in .ssh folder in your home folder, default is C:\User\UserIDGit for windows has its own .ssh folder in its installation directory. When you run git/ssh, it will look for private key file id_rsa in this folderSolved the problem by copying id_rsa from the home folder .ssh folder to the .ssh folder in the git installation directoryAlso, I think there  a way to ‰ÛÏtell‰Ûù git to use the default .ssh folder in home folder but still need to figure out how."
"You must have made a mistake in the remote URL, double-check the output with git remote -v and fix it with  git remote set-url origin <new-url>assuming the remote name is originThe problem solved right after update to git version 1.8.xIn my case, user permission was the problem. I added myself as a valid user of the repository after which 'Push' worked.Make sure your url has the correct username and passwordgit remote set-url origin http : //username:password..For people who using TFS git repositories while on Windows. My Windows password recently changed therefor i had error RPC failed; result=22, HTTP code = 401 fatal: The remote end hung up unexpectedlywhen doing diffrent things like fetch, push or pull. We using TFS git repo. I fixed this problem deleting my tfs password from Windows Credential Manager through Control Panel. http://windows.microsoft.com/en-us/windows7/what-is-credential-manager ."
"It looks like your remote isn't configured properly. You can view your configured remotes withgit remote -vGitHub remotes generally look likegit@github.com:user/repo.git for SSH connections (note the git@ and :), orhttps://github.com/user/repo.git (note the https://) for HTTP connectionsYour remote appears to be an HTTP remote without the protocol portion.To update your remote (assuming its name is origin; you can see this in the output of git remote -v from before):git remote set-url origin https://github.com/bbenavides/datasciencecoursera.gitgit remote set-url --push origin https://github.com/bbenavides/datasciencecoursera.gitIt's usually best to copy the URL directly from GitHub, which helps to prevent these kinds of typos."
"Those are OS X internal files. Somebody must have checked them in by mistake. Just move them to a different folder, do the merge, move back and add the .DS_Store folder to .gitignore and you should be fine."
"Try pasting this in the terminal:sudo xcode-select -switch /Applications/Xcode-Beta.appIt will update the path, for the new Xcode name. Another alternative is just changing the app name back to Xcode, this, of course, considering you don't have the current one installed.Also, to remove dependency from XCode app you can manually install Command line developer tools and use the following command to update developer path:sudo xcode-select -switch /Even i also faced the same problem after updating my XCode to 6.3Resolved my problem by Updating Command line tools$ sudo xcode-select -switch /"
"It can be due to several issues:Repository size limitgithub limit its repository size to GB (yours is ~500MB)github limit the maximum of single file size to 100MBhttps://help.github.com/articles/working-with-large-files/git config http.postBuffer 524288000This config that you have set up is simply increasing the buffer size that git will use when sending data to the webhttp.postBuffer  Maximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system. For requests larger than this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a massive pack file locally. Default is 1 MiB, which is sufficient for most requests.Wrong remote configuration.Try to set the remote using this command: git remote add origin https://github.com/xxx/xxx.git in addition to the set-url that you have already added.Your proxy settingsIn some proxies there is a limit on the size of the post file, since your repository is big one (>500MB) it might be the case here.What to do?Try to eliminate the above possible issues by eliminating them one by oneCommit fewer files and try to commit them. If this is working so the problem is with the size of the pack file that is being send over the network.Clean your repository with gc --aggressive --prune=now"
"When doing a push, try specifying the refspec for the upstream master:git push upstream upstreammaster:masterJarret Hardie is correct.  Or, first merge your changes back into master and then try the push.  By default, git push pushes all branches that have names that match on the remote -- and no others.  So those are your two choices -- either specify it explicitly like Jarret said or merge back to a common branch and then push.There's been talk about this on the Git mail list and it's clear that this behavior is not about to change anytime soon -- many developers rely on this behavior in their workflows.Edit/ClarificationAssuming your upstreammaster branch is ready to push then you could do this:Pull in any changes from the upstream.$ git pull upstream masterSwitch to my local master branch$ git checkout masterMerge changes in from upstreammaster$ git merge upstreammasterPush my changes up$ git push upstreamAnother thing that you may want to do before pushing is to rebase your changes against upstream/master so that your commits are all together.  You can either do that as a separate step between #1 and #2 above (git rebase upstream/master) or you can do it as part of your pull (git pull --rebase upstream master)First, attempt to pull from the same refspec that you are trying to push to.If this does not work, you can force a git push by using git push -f <repo> <refspec>, but use caution: this method can cause references to be deleted on the remote repository.Is your repository at ""upstream"" a bare repository? I got the same error, but when I change to bare they no longer happen.first usegit pull https://github.com/username/repository masterand then trygit push -u origin master"
"I just ran into this issue as well. I had been added to an existing project. I cloned it and committed a local change. I went to push and got the ERROR: Repository not found. error message. I realized that the person who added me only gave me read-only access to the repo. A quick email to him and I'm able to push. Check to see if you have read-write access.Good luck!I was getting the same errorERROR: Repository not found.   fatal: The remote end hung up unexpectedlyand I had created the repository on Github and cloned it locally.I was able to solve by opening .git/config and removing the [remote ""origin""] section.[remote ""origin""]      url = git@github.com:alexagui/my_project.git     fetch = +refs/heads/*:refs/remotes/origin/*then I ran the following (again)git remote add origin git@github.com:alexagui/my_project.git  git push -u origin masterand this time I was able to push to the repository.I ran into the same issue and I solved it by including my username and password in the repo url:git clone https://myusername:mypassword@github.com/path_to/myRepo.gitI got this error (but before was working). My problem was the missing ssh key binded with the Github account. You can check you current ssh keys with ssh-add -l.If your key is missing, you can add it with ssh-add ~/.ssh/your_keygit remote rm origingit remote add origin <remote url>Had similar issue. The root of the problem was that I followed some online tutorial about adding a new repository to Github. Just go to Github, create a new repo, it will ask you to add a README, don't add it. Create it, and you'll get instructions on how to push.It's similar to the next two lines:git remote add origin https://github.com/YOUR_USER/your-repo.gitgit push -u origin masterIf you belong to a group in Github check that you have Write Access.If you include your username and the repo name we can reasonably help you, at the moment we have no reason to think the repo does actually exist.Additionally, if the repo is private and you don't have access to it, github returns ""Does not exist"" to avoid disclosing the existance of private repos.EDIT: If you're not able to clone it because it's saying it doesn't exist and it's private, it's because you're not sending authentication. Ensure that your public key is added to your keyring, or use HTTP basic auth for the time being.Changing the content of the .git/config file helps as Alex said above. I experienced the same problem and I think it was because I changed my Github username. The local files could not be updated with the changes. So perhaps anytime you change your username you might consider running git remote add origin your_ssh_link_from_githubI hope this helps ;)I had the same problem. My issue was misunderstanding that I had to first create the empty repo on github before pushing to it. Doh! Including this here for anyone else who doesn't realize.You need to check your SSH access as the following: ssh -T git@github.comthis issue was because i don't add the person response on SSH in repository, read more about SSH link-1, link-2.Have experienced the same problem. Everything was working fine for years and then suddenly this error.The problem turns out was that I added a deploy key for another repo to my SSH agent before my user's github SSH key (which I always used to access the repo in question). SSH agent tried the deploy key for another repo first, and GitHub for some totally unexplainable reason was sayingERROR: Repository not found.Once I've removed the deploy key from SSH agent, everything was back to normal.I had this issue and realized I was using a different account from the one whose repo it was. Logging in as the original user resolved the issue.I had a similar problem.  The incorrect credentials were cached in OS X's key-chain.Check out: https://help.github.com/articles/updating-credentials-from-the-osx-keychain"
"just makegit checkout developgit pullgit pushyou have this error because there are some new commits in the remote develop branch which you do not have in your local develop branch , this changes has to be fetch firstmake fetch first then push as this indicats that something changed at the remote"
"(This answer is a workaround, not a solution.)I've just had the same problem (can't push my changes anymore using TortoiseGit/msysgit). Since the problem occurs during unpacking, it can be avoided by disabling compression:Context Menu on the folder/TortoiseGit/Settings""Edit local .git/config""Add compression = 0 to the [core] section.Obviously, disabling compression might affect performance, so use this workaround at your own discretion."
"This issue is due to the actions I'd performed previously. I was trying to push a new change, on top of a change which was still up for review, who's parent also was up for review. Trunk ------ Parent A ----- Parent B ----- New change(merged)     (unmerged)     (unmerged)I had used cherry-pick to obtain these two changes locally (Parent A and Parent B), and then a third cherry-pick to get my change from a local branch before attempting to push. That is what caused the issue, because my personal change was essentially trying to re-write history.The correct process would be to only pull Parent B when at trunk. This automatically pulls up any commits between trunk and it (in this case just Parent A). Then cherry-pick my new change on top of that and push will work fine.It sounds like you are doing everything correctly as far as verifying you have made a change that Gerrit should pick up.git push origin master:refs/for/masterMaybe this is the problem?  If your changes aren't on your local version of the master branch, you aren't pushing your changes.  Instead try:git push origin HEAD:refs/for/masterHEAD is a shortcut that represents your current commit in git.If you are trying to update a set of reviews, each with their own change-id that you want to maintain (say, after a rebase where you swap the order of two commits), you might get rejected if some of the commits in the pile remain unchanged. You should force a new hash to be generated by rewording the commits, or something similar."
"There are two types of repositories: bare and non-bareBare repositories do not have a working copy and you can push to them. Those are the types of repositories you get in Github! If you want to create a bare repository, you can usegit init --bareSo, in short, you can't push to a non-bare repository (Edit: Well, you can't push to the currently checked out branch of a repository. With a bare repository, you can push to any branch since none are checked out. Although possible, pushing to non-bare repositories is not common). What you can do, is to fetch and merge from the other repository. This is how the pull request that you can see in Github works. You ask them to pull from you, and you don't force-push into them.Update: Thanks to VonC for pointing this out, in the latest git versions (currently 2.3.0), pushing to the checked out branch of a non-bare repositories is possible. Nevertheless, you still cannot push to a dirty working tree, which is not a safe operation anyway.I solved this problem by first verifying the that remote did not have anything checked out (it really was not supposed to), and then made it bare with:$ git config --bool core.bare trueAfter that git push worked fine.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.Autopsy of the problemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.As there's already an existing repository, runninggit config --bool core.bare trueon the remote repository should sufficeFrom the core.bare documentationIf true (bare = true), the repository is assumed to be bare with no working directory associated. If this is the case a number of commands that require a working directory will be disabled, such as git-add or git-merge (but you will be able to push to it).This setting is automatically guessed by git-clone or git-init when the repository is created. By default a repository that ends in ""/.git"" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).TLDRPull & push again: git pull &&& git push.Still a problem? Push into different branch: git push origin master:foo and merge it on remote repo.Alternatively force the push by adding -f (denyCurrentBranch needs to be ignored).Basically the error means that your repository is not up-to-date with the remote code (its index and work tree is inconsistent with what you pushed).Normally you should pull first to get the recent changes and push it again.If won't help, try pushing into different branch, e.g.:git push origin master:foothen merge this branch on the remote repository back with master.If you changed some past commits intentionally via git rebase and you want to override repo with your changes, you probably want to force the push by adding -f/--force parameter (not recommended if you didn't do rebase). If still won't work, you need to set receive.denyCurrentBranch to ignore on remote as suggested by a git message via:git config receive.denyCurrentBranch ignorecd into the repo/directory that you're pushing into on the remote machine and enter$ git config core.bare trueMaybe your remote repo is in the branch which you want to push. You can try to checkout another branch in your remote machine. I did this, than these error disappeared, and I pushed success to my remote repo. Notice that I use ssh to connect my own server instead of github.com."
"This looks similar to How do I get github to default to ssh and not https for new repositories.Probably it's worth trying to switch from http protocol to ssh:$ git remote add origin git@github.com:username/project.gitThe problem is due to git/https buffer settings.In order to solve it (taken from Git fails when pushing commit to github)git config http.postBuffer 524288000And run the command againCause : The default file post size for Git has been exceeded.Solution : Navigate to repo.Run the following command to increase the buffer to 500MB after navigating to the repository:git config http.postBuffer 524288000You might get an error like this error: could not lock config file .git/config: No such file or  directorythat is because you dont have a local .git/config file You can get it working by this commandgit config --global http.postBuffer 524288000Just to add this (because this was the first entry when I googled):This error can also be thrown by missing writing access for the repository.In my case I created the repo with the root account of my server and actually forgot about that later so the git user couldn't write the pushes into the directory.In our case, the problem was a clone that wrote a .git/config file which contained a url entry that was a read only access method.  Changing the url from the :// method to the @ method fixed the problem. Running git remote -v illuminated the issue some.Another addition, since I encountered this error a different way and Google took me here.My problem was a mismatch of case; one camelCase and one not. Apparently, GIT stops you doing this without telling you why. So if your branches are different from the remote only in the capitalization, try changing them to be identical.See:Git: 'Master cannot be resolved to branch' after merge"
"$HOME/.gitconfig is your global config for git.There are three levels of config files. cat $(git rev-parse --show-toplevel)/.git/config(mentioned by bereal) is your local config, local to the repo you have cloned.you can also type from within your repo:git remote -vAnd see if there is any remote named 'origin' listed in it.If not, if that remote (which is created by default when cloning a repo) is missing, you can add it again:git remote add origin url/to/your/forkThe OP mentions:Doing git remote -v gives: upstream git://git.moodle.org/moodle.git (fetch) upstream git://git.moodle.org/moodle.git (push)So 'origin' is missing: the reference to your fork.See ""What is the difference between origin and upstream in github""I faced the same problem when I renamed by repository on GitHub. I tried to push at which point I got the errorfatal: 'origin' does not appear to be a git repositoryfatal: The remote end hung up unexpectedlyI had to change the URL usinggit remote set-url origin ssh://git@github.com/username/newRepoName.gitAfter this all commands started working fine. You can check the change by using git remote -vIn my case after successfull change it showed correct renamed repo in URL[aniket@alok Android]$ git remote -vorigin  ssh://git@github.com/aniket91/TicTacToe.git (fetch)origin  ssh://git@github.com/aniket91/TicTacToe.git (push)This does not answer your question, but I faced a similar error message but due to a different reason. Allow me to make my post for the sake of information collection.I have a git repo on a network drive. Let's call this network drive RAID. I cloned this repo on my local machine (LOCAL) and on my number crunching cluster (CRUNCHER).For convenience I mounted the user directory of my account on CRUNCHER on my local machine. So, I can manipulate files on CRUNCHER without the need to do the work in an SSH terminal.Today, I was modifying files in the repo on CRUNCHER via my local machine. At some point I decided to commit the files, so a did a commit. Adding the modified files and doing the commit worked as I expected, but when I called git push I got an error message similar to the one posted in the question.The reason was, that I called push from within the repo on CRUNCHER on LOCAL. So, all paths in the config file were plain wrong.When I realized my fault, I logged onto CRUNCHER via Terminal and was able to push the commit.Feel free to comment if my explanation can't be understood, or you find my post superfluous."
"Use git push --no-thin instead of git push. From Git docs: A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is --thin.Back it up... back it up right this second before you try anything.Now, that sounds unfortunate. It's also a shame that it doesn't sound like you have a regular backup to go to. There is good news to be had, though: I bet your developers have this file, though it may be in a pack file. Try the following in somebody else's .git directory. Note that git uses the first two characters of the hash for the directory name.find . -name d62f0ed4385e3f68f226ac133fa9932a9c65c9If that shows up, copy that file to the same relative path on your server, and life should move on nicely. If not, then try this:find . -name \*.idx -exec cat {} \; | git show-index | grep 14d62f0ed4385e3f68f226ac133fa9932a9c65c9That won't show you which pack file it is (you can quickly script this or do it manually), but it will tell you its there. Find the right pack file and expand it...git unpack-objects $FILEFrom there, copy the file to the same relative path on your server. If that doesn't solve it, further work is needed. Swapping a developer's up-to-date-enough repository might fix things. You may also want to explore https://git.wiki.kernel.org/index.php/GitFaq#How_to_fix_a_broken_repository.3F, or post update comments and wait for me to get back around to this.Try a git pull --rebase.I saved the diff (git show > ~/mychanges.txt, took out the commit msg at the top of the file). The checked out a new branch (git checkout -b newbranch) applied the changes (git apply ~/mychanges.txt), and then did a git pull --rebase. Then everything worked.I am getting this same error on my tortiuse git. I finally get the root cause of this error.The steps which causes this error;Create a new branch on head.Do some modifications on new branchsSomebody also make modifications on head branchTry to push your branchThis error will occur if a local branch is created and not pushed until some modifications ara made in head branch. This is a normal thing, since remote head branch do not now anything about your local branch until a push action.To solve this error, switch the head branch get a full pull action. Then switch your branch and try a push.If not on master branch, you can simply delete the remote branch by:git push --delete origin <branch_name>And then push your branch back to the remote:git push -u origin <branch_name>"
"You must be trying to push a new commit to replace an existing commit already push (""history rewritten"")You need to do a git push --force, or select a similar option (if supported) in the git push wizard dialog of NetBeans.And that suppose that the ""push --force"" is authorized on the remote repo (which isn't always the case).If other have already pulled from the remote repo, rewriting its history is generally not a good idea."
"When you pulled the branch, did you use the ""--track"" option (in order to keep you local branch tracking the remote branch). If you did not, it can explain that the ""merge"" command that does not work.You can do the merge manually:git fetchgit merge origin/groupsTo compare local and remote repos, I suggest you this command (add it in an alias, it is usefull):git log --graph --oneline --all --decorateIt will print the project history tree, showing the branch labels. So you will see where your branch and the origin branch diverge.Note: if you want to preserve a linear history, instead of a ""merge"", you can do a ""rebase"" of your local branch on the remote before pushing:git rebase origin/groupsgit push origin groupsI came here with a different problem.My git was set up to push all branches.  I was on a branch FOO, but it was also trying to push master, which was not up to date.  The trick was noticing it was trying to push master:To git@git.machine:repo ! [rejected]        master -> master (non-fast-forward)I added the following to my .gitconfig to only push the current branch by default:[push]    default = current"
"The answer you mention suggests to change the url from an https one to an ssh one.  That would only work if you have a ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub, with the latter (public key) published in your GitHub ssh keys.Check your Egit ssh configuration.For step by step procedure as of how to generate SSH key and set it in your GitHub setting here is the link."
"This is where you went wrong:git rebase origin/sprint_branch1You should not rebase published branches. This command should have been agit merge origin/sprint_branch1In general you should be careful with git rebase ‰ÛÒ there seems to be some kind of religion around it, even though it is a very dangerous tool.How can you proceed?If you are absolutely sure nobody else is going to touch the feature branch again and nobody did any changes to it since your last pull, you can just dogit push -fThat will overwrite the HEAD on the server with your HEAD.If you are sure that there were no changes since your last pull, but other people use your branch, you can do the above and tell everybody with a copy of your branch that they need to rungit fetch origingit checkout feature_branchgit reset --hard origin/feature_branchThat will erase all their local changes since their last push though.The safest way would be for you to rename your local feature_branch to somethengi else, find the commits you added, branch of the current origin/feature_branch and cherry-pick all your changes.Run gitk feature_branch origin/feature_branch to get an understanding of what is going on.Git says hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')hint: before pushing again.You might just need to use the rebase workflow to pull rebase from the remote branch after you have made the commit, then push to remote.git commit -m 'add another date again'git pull --rebaseThis may lead to rebase conflicts which you would have to solve and then continue rebase. This is primarily cause the version of tree in the sprint_branch1 is behind the feature_branch.You should make sure the right commits are going in as well. In a general sense when you are merging with the sprint_branch1, its better to do agit checkout feature_branchgit merge sprint_branch1This instead of rebase, since rebase rewrites your commits which could cause issues.After you merge if you just push it should work fine.EDIT 1: If you need to rebase and still avoid this error, you can usegit push --force origin feature_branchHowever this is not recommended especially in distributed teams, as it will rewrite the remote branch with your local branch irrespective of any changes others might have pushed to it."
"Clone a backup of your repository. If the corrupted object id is $OBJECTID, do this:In new repository:git cat-file -t $OBJECTID > object-typegit cat-file $(cat object-type) $OBJECTID > object-contentsMove those two new files to the old repositoryIn corrupt repository, move away your corrupt object:mv .git/objects/XX/XXXXXXXXXXXXXXXXXX .git hash-object -t $(cat object-type) -w object-contentsThis should write the object into git's database, and output $OBJECTID to STDOUT. If it outputs some other SHA1 id, you have made a mistake and you should delete that wrong object.looks like it is one of your own recent objects that you are trying to push that contains a corrupt object. Do git fetchthen rebase your changes on top of the remote tracking branch. If you're in a fast forward situation, this should do nothinggit rebase origin/yourbranchif it's not a ff situation, you should be getting an error on the commit that is either itself corrupt or something it points to in the tree and blob structure it points to.If this was a ff situation, do agit rebase -i origin/yourbranchdon't change anything. Save and quit and git will rewrite the commits on top of where they are. This should fail no a commit that will help you track down the bad object.hope this helps"
"I had this problem because I had master as a protected branchOnce I unprotected the branch I was able to push fine"
"As illustrated in the doc ssh troubleshooting, this is probably caused by an incorrect path during cloning.The documentation (some parts below were only valid for Gitolite V2) mentions:The second error (ie. ""you are able to clone repositories but are unable to push changes back (the error complains about the GL_RC environment variable not being set, and the hooks/update failing in some way)happens if you use git@server:repositories/reponame.git (assuming default $REPO_BASE setting -- in Gitolite V3, it always is ~/repositories) -- that is, you used the full unix path.  Since the ""prefixing"" mentioned above is not required, the shell finds the repo and clones ok.  But when you push, gitolite's update hook kicks in, and fails to run because some of the environment variables it is expecting are not present.The message that appears on a successful run of the ""easy-install"" program clearly includes the following warning:*Your* URL for cloning any repo on this server will be        gitolite:reponame.git    *Other* users you set up will have to use        <user>@<server>:reponame.git    However, if your server uses a non-standard ssh port, they should use        ssh://<user>@<server>:<port>/reponame.gitSo in your case, you must have cloned your repo with:git clone git@ganesh:repositories/testing.gitinstead of:git@ganesh:testing.gitThe ssh troubleshooting document at http://sitaramc.github.com/gitolite/doc/ssh-troubleshooting.html (as well as in the gitolite source repo) has been totally re-worked now.   I'm hoping that it flows much better and explains things easier, including this specific error.I'll also add that you should ideally read that document in full, at least the first time.SitaramJust got the same error.Correct answer is you need to use git clone gitolite:repo_name command to clone the repository and git push gitolite:repo_name to push changes, instead of git clone git@yourservername:repo_name.Try to:ssh git@ganeshYou should see gitolite-shell instead of bash:ssh git@localhostPTY allocation request failed on channel 0 helloid_rsa, the gitolite version here is 2.0.3-2 (Debian) the gitoliteconfig gives you the following access:     R   W  gitolite-admin    @R_ @W_ testingConnection to localhost closed.If not it means you bypass gitolite-shell and use bash instead.The reason might be, that by running gl-setup your_pub_key.pub you added your key to the bottom of /home/git/.ssh/authorized_keys file. Therefore, this key is never reached, because there are other keys at the top. So, you simply need to open /home/git/.ssh/authorired_keys and move the recently added gitolite key to the top of the file.After moving this record to the top of the file, you should be able to use:git clone git@ganesh:testing.gitinsead ofgit clone git@ganesh:repositories/testing.gitThe second one clones the repo but leads to the error, because you run ""git push"" via bash instead of gitolite-shell"
"You're trying to push to a non-bare repo (i.e. a repo with a working tree, just like your local clone), but there's nothing done at the other end to account for this specially.You look like you're trying to let a git push deploy your site. Here's how to do that:Ignore the error message git is giving you now by running this in the repo on your server:git config receive.denyCurrentBranch ignoreThis tells git ""I'll work it out, trust me.""Now if you push, it'll update the repo, but the index and working copy will be left untouched. This means it'll always look like you've staged changes to revert everything you've pushed.We need a way to update the index and working copy whenever a push occurs. Sounds like it's time to ‰Û_Set up a post-receive hook.  Add the file .git/hooks/post-receive on the server's repository:#!/bin/bash# Drop the env var given to post-receive by default, as it'll mess up our# attempts to use git ""normally.""export -n GIT_DIR# Move back to the base of the working tree.cd ..# *Drop all changes* to index and working tree.git reset --hardNote that this assumes you only ever want your tracked changes live‰ÛÓanything you change directly on the live site will disappear when you next push (excepting untracked files, but you shouldn't have those either).I add a git status at the end so I can see what the lay of the land is after a push (as it gets transmitted back to the client)‰ÛÓthis is particularly so I can catch untracked files and either add them to .gitignore, or track them.Don't forget to mark post-receive as executable!Aside: why shouldn't you have untracked files?Ability to rollback: this is for deploying a live site.  If you want to be able to really rollback a failed deployment, then you need everything that went together to make that deployment.That definitely includes the core CMS.  Right now, it's only on the server, and it's untracked, so you've got no hope of detecting an error.Ability to redeploy: if your server's harddrive goes down, you get to unzip the core CMS, layer your git repo over it again, and hope it works.Ability to notice what's accidentally untracked: if you have several dozen untracked files, and they're all ""meant"" to be untracked, it's easy for a new file to sneak in and get lost in the noise. If your git status is clean by default, then you'll notice unexpected untracked files as soon as they pop up."
"Simple solution is to increase the HTTP post buffer size to allow for larger chunks to be pushed up to the remote repo. To do that, simply type:git config http.postBuffer 52428800The number is in bytes, so in this case I have set it to 50MB. The default is 1MB."
"I suspect you have other branches named release/<something> on your uat remote. The push command you are running is trying to convert a local branch release/1.1 into a remote branch release, but the remote refuses to remove release/<something> because that would lose information. Try git push uat release/1.1:newrelease or something similar to avoid the conflict of trying to have a single branch named the same thing as a ""subdirectory"" containing other branches (it's not truly a subdirectory, but the way git works internally, it is sometimes stored as an actual subdirectory).git remote show uat or git branch -r will show you what branches your uat remote has."
"This seems to be an authorization problem. I would suggest you try to use the ssh protocol rather than https:git@github.com:<user>/<reponame>.git (source)Also, make sure that in your global .gitconfig you have[http]      sslVerify = trueYou can fix that from the command line by issuinggit config --global http.sslVerify true(source)"
"According to this article git repack remote/origin/master might help in case your local repository was corrupted. To check that you can try cloning your remote repo into new directory and test push from it.If your git repo is self hosted, check the file system rights on the remote git directory. If this gets corrupted, it is possible that your git server just doesn't have rights. For instance, I host my own gitosis system on Ubuntu server. When I create the git repo on the server, I run sudo git init --bare <repo name> I then have to run sudo chgrp -R gitosis <repo name> && sudo chown -R gitosis <repo name>.This also occurs when the remote has no space left on it, try free up some space."
"You can simply convert your remote repository to bare repository (there is no working copy in the bare repository - the folder contains only the actual repository data).Execute the following command in your remote repository folder:git config --bool core.bare trueThen delete all the files except .git in that folder. And then you will be able to perform git push to the remote repository without any errors.I just had the same error while I began learning Git. Some of the other answers are clearly not for someone new to Git!(I am going to use non technical terms to get the idea across.) Anyway, what is happening is that you have two repositories, one is the original you first made, and the other the work one you just made.Right now you are in your work repository and are using the ""master"" branch. But you also happen to be ""logged in"" in your original repository to the same ""master"" branch. Now since you're ""logged in"" in the original, Git fears you might mess up because you might be working on the original and screw things up. So you need to return to the original repository and do a ""git checkout someotherbranch"", and now you can push with no problems.I hope this helps.The error message describes what has happened. More modern versions of Git refuse to update a branch via a push if that branch is checked out.The easiest way to work between two non-bare repositories is either toalways update the repositories by pull (or fetch and merge) or, if you have to,by pushing to a separate branch (an import branch) and then merging that branch into the master branch on the remote machine.The reason for this restriction is that the push operation operates only on the remote Git repository, it doesn't have access to the index and working tree. So, if allowed, a push on the checked-out branch would change the HEAD to be inconsistent with the index and working tree on the remote repository.This would make it very easy to accidentally commit a change that undoes all of the pushed changes and also makes it very difficult to distinguish between any local changes that have not been committed and differences between the new HEAD, the index and the working tree that have been caused by push moving HEAD.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.There are multiple solutions, depending on your needs.Solution 1: Use a Bare RepostioryAs suggested, if on one machine, you don't need the working directory, you can move to a bare repository. To avoid messing with the repository, you can just clone it:machine1$ cd ..machine1$ mv repo repo.oldmachine1$ git clone --bare repo.old repoNow you can push all you want to the same address as before.Solution 2: Push to a Non-Checked-Out BranchBut if you need to check out the code on your remote <remote>, then you can use a special branch to push. Let's say that in your local repository you have called your remote origin and you're on branch master. Then you could domachine2$ git push origin master:master+machine2Then you need to merge it when you're in the origin remote repo:machine1$ git merge master+machine2Autopsy of the ProblemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.You can get around this ""limitation"" by editing the .git/config on the destination server. Add the following to allow a git repository to be pushed to even if it is ""checked out"":[receive]denyCurrentBranch = warnor[receive]denyCurrentBranch = falseThe first will allow the push while warning of the possibility to mess up the branch, whereas the second will just quietly allow it.This can be used to ""deploy"" code to a server which is not meant for editing. This is not the best approach, but a quick one for deploying code.I like the idea of still having a usable repository on the remote box, but instead of a dummy branch, I like to use:git checkout --detachThis seems to be a very new feature of Git - I'm using git version 1.7.7.4.I had the same issue. For me, I use Git push to move code to my servers. I never change the code on the server side, so this is safe.In the repository, you are pushing to type:git config receive.denyCurrentBranch ignoreThis will allow you to change the repository while it's a working copy.After you run a Git push, go to the remote machine and type this:git checkout -fThis will make the changes you pushed be reflected in the working copy of the remote machine.Please note, this isn't always safe if you make changes on in the working copy that you're pushing to.You can recreate your server repository and push from your local branch master to the server master.On your remote server:mkdir myrepo.gitcd myrepo.gitgit init --bareOK, from your local branch:git push origin master:masterWith a few setup steps you can easily deploy changes to your website using a one-liner like git push productionWhich is nice and simple, and you don't have to log into the remote server and do a pull or anything. Note that this will work best if you don't use your production checkout as a working branch! (The OP was working within a slightly different context, and I think @Robert Gould's solution addressed it well. This solution is more appropriate for deployment to a remote server.) First you need to set up a bare repository somewhere on your server, outside of your webroot.mkdir mywebsite.gitcd mywebsite.gitgit init --bareThen create file hooks/post-receive:#!/bin/shGIT_WORK_TREE=/path/to/webroot/of/mywebsite git checkout -fAnd make the file executable:chmod +x hooks/post-receiveOn your local machine, git remote add production git@myserver.com:mywebsite.gitgit push production +master:refs/heads/masterAll set! Now in the future you can use git push production to deploy your changes!Credit for this solution goes to http://sebduggan.com/blog/deploy-your-website-changes-using-git/. Look there for a more detailed explanation of what's going on.With git config --local receive.denyCurrentBranch updateInstead on the server repository, it also updates the working tree if no untracked overwrite would happen.It was added in Git 2.3 as mentioned by VonC in the comments.I've compiled Git 2.3 and gave it a try. Sample usage:git init servercd servertouch agit add .git commit -m 0git config --local receive.denyCurrentBranch updateInsteadcd ..git clone server localcd localtouch bgit add .git commit -m 1git push origin master:mastercd ../serverlsOutput:abYay, b got pushed!You should only be pushing to a bare repository.  A bare repository is a repository that has no checked out branches.  If you were to cd to a bare repository directory, you'd only see the contents of a .git directory.In fact, set the remote to a non-checked out branch is sufficient. After you checked out your remote in a different branch, you can push.I had the same problem using Git to synchronise repositories on my Android phone and laptop. The solution for me was to do a pull instead of a push, as @CharlesBailey suggested.git push origin master on the Android repository fails for me with the same error messages that @hap497 got because of a push to a nonbare checkout of a repository + working-copy.git pull droid master on the laptop repository and working-copy works for me. Of course, you need to have previously run something like git remote add droid /media/KINGSTON4GB/notes_repo/.Older versions of Git used to allow pushes to the currently checked out branch of a non-bare repository.  It turns out this was a terribly confusing thing to allow.  So they added the warning message you see, which is also terribly confusing.If the first repository is just acting as a server then convert it to a bare repository as the other answers recommend and be done with it.If however you need to have a shared branch between two repos that are both in use you can achieve it with the following setupRepo1  - will act as the server and also be used for developmentRepo2  - will be for development only Setup Repo1 as followsCreate a branch to share work on.git branch shared_branchTo be safe, you should also create a $(REPO).git/hooks/update that rejects any changes to anything other than shared_branch, because you don't want people mucking with your private branches.repo1/.git/hooks  (GIT_DIR!)$ cat update#!/bin/shrefname=""$1""oldrev=""$2""newrev=""$3""if [ ""${refname}"" != ""refs/heads/shared_branch"" ]then   echo ""You can only push changes to shared_branch, you cannot push to ${refname}""   exit 1fiNow create a local branch in repo1 where you will do your actual work.git checkout -b my_work --track shared_branchBranch my_work set up to track local branch shared_branch.Switched to a new branch 'my_work'(may need to git config --global push.default upstream in order for git push to work)Now you can create repo2 with git clone path/to/repo1 repo2 git checkout shared_branch At this point you have both repo1 and repo2 setup to work on local branches that push and pull from shared_branch in repo1, without needing to worry about that error message or having the working directory get out of sync in repo1.  Whatever normal workflow you use should work.You have 3 optionsPull and push again:git pull; git pushPush into different branch:git push origin master:fooand merge it on remote (either by git or pull-request)git merge fooForce it (not recommended unless you deliberately changed commits  via rebase):git push origin master -fIf still refused, disable denyCurrentBranch on remote repository:git config receive.denyCurrentBranch ignoreHere is one test you can do to see how the bare server stuff work:Imagine you have a workstation and a server with live site hosted on it, and you want to update this site from time to time (this also applies to a situation where two developers are sending their work back and forth through a bare middleman).InitializationCreate some directory on your local computer and cd into it, then execute these commands:# initializationgit init --bare server/.gitgit clone server contentgit clone server localFirst you create a bare server directory (notice the .git at the end). This directory will serve as a container for your repository files only.Then clone your server repository to a newly created content directory. This is your live/production directory which will be served by your server software.The first two directories resides on your server, the third one is a local directory on your workstation.WorkflowNow here is the basic workflow:Enter the local directory, create some files and commit them. Finally push them to the server:# create crazy stuffgit commit -avgit push origin masterNow enter the content directory and update the server's content:git pullRepeat 1-2. Here content may be another developer that can push to the server too, and local as you may pull from him.OK, in case you want a normal remote repository, then create an extra branch and check it out. Push it into one branch (which is not checked out) and merge it with one which is currently active later after pushing from locally.For example, on a remote server:git branch devgit checkout devOn the local setup:git push On remote server:git merge devI had to re-run git --init in an existing bare repository, and this had created a .git directory inside the bare repository tree - I realized that after typing git status there. I deleted that and everything was fine again :)(All these answers are great, but in my case it was something completely different (as far as I can see), as described.)I'm sure most people viewing this question will stop at the first two huge answers, but I'd still like to offer my solution.I had an Eclipse + EGit web project setup when encountering the described error. What helped me was simply using the GitHub app, which seemed to magically resolve the issue. While EGit would always refuse the push, the GitHub desktop app would just shrug its shoulders and push my changes. Maybe it handles the multi-login-situation more gracefully.An article I found that might be useful to others is Git in 5 minutes.I had an Xcode project under Git version control that I wanted to push up to a Virtual Distributed Ethernet (VDE) I have in a DC. The VDE runs Centos 5.None of the articles I read about Git talked about bare repositories. It all sounded so simple until I tried what I thought should be easy coming from an SVN background.The suggestions here to make the remote repository bare worked. Even better for my requirements was to clone the Xcode project to projectname.git, copy that to the remote server; then pushes magically worked. The next step will be getting Xcode to push without errors about commits, but for now I'm okay doing it from Terminal.So:cd /tmp (or another other directory on your system)<br/>git clone --bare /xcode-project-directory projectname.git<br/>scp -r projectname.git sshusername@remotehost.com:repos/<br/>To push changes from your Xcode project after you've committed in Xcode:cd /xcode-project-directory<br/>git push sshusername@remotehost.com:repos/projectname.git<br/>I'm certain there is a smoother more sophisticated way of doing the above, but at a minimum this works. Just so everything is clear, here are some clarifications:/xcode-project-directory is the directory your xcode project is stored in. It's probably /Users/Your_Name/Documents/Project_Name.projectname is literally the name of the project, but it can be anything you care to call it. Git doesn't care, you will.To use scp you need to have a user account on the remote server that's allowed SSH access. Anyone running their own server will have this. If you're using shared hosting or the like, you might be out of luck.remotehost.com is the name of your remote host. You could as easily use its IP address. Just for further clarity I'm using Gitosis on the remote host with SSH keys, so I'm not prompted for passwords when I push. The article Hosting Git Repositories, the Easy (and Secure) Way tells you how to set all that up.The best way to do this is:mkdir ..../remotecd ..../remotegit clone --bare .../currentrepo/This will clone the repository, but it won't make any working copies in .../remote. If you look at the remote, you'll see one directory created, called currentrepo.git, which is probably what you want.Then from your local Git repository:git remote add remoterepo ..../remote/currentrepo.gitAfter you make changes, you can:git push remoterepo masterI just ran into this problem with a deployment git repository on Heroku.I don't know why Heroku has a non-bare repository on their side, but as a workaround I was able to reset the remote repository, and reupload.You shouldn't use Heroku's copy of your repository as your only git repository for collaboration, but just in case, I'll say clearly: Do not do this unless you are sure you have a full copy of your repository stored securely somewhere other than Heroku. Doing a reset will delete the repository contents.To reset:Install the Heroku toolbelt (which contains the command line client) if you haven't already.Install the heroku-repo plugin if you haven't already.heroku plugins:install https://github.com/heroku/heroku-repo.gitDo the reset, which deletes the repository and creates a new, empty oneheroku repo:resetPush to your Heroku remote as you normally would; it will reupload everything."
"I have already seen that 504 error message in conjunction with GitHub trouble.And that seems consistent with last night GitHub status message:21:51 UTC We are currently working to resolve problems affecting a subset of repositories on a single fileserver. So, if the error message is now gone, that would confirm the possibility of a server-side (GitHub) issue, as opposed to a more permanent client-side problem."
"I experienced the same issue. Resolution follows:Delete origin push and fetch in remote(Eclipse view --> Git repositories).Close Eclipse.Go to .ssh folder(Users/.ssh) and delete the key files(public and private).Start eclipse and regenerate the keys(Window --> Preferences --> General tab --> Network connections --> SSH2).Copy the key and add it to github/SSH KeysIn Eclipse add new remote and push. EditYou may not need to delete all the key files. If you have already added a key file previously (perhaps while setting up native Git), you can just add the name of that file in list of keys, and it will work.This seemed to work for me:Do everything Firoz and Nishant say except push: http://stackoverflow.com/a/9889350Create or edit the following file on your desktop:File    : ~/.ssh/configContent :Host github.com    User [your_github_username]    Hostname github.com    PreferredAuthentications publickey    IdentityFile [path_to_private_key]In your Eclipse Git Setup for your project do the following:URI      : git@github.com:[repo_owner_username]/[repo_name].gitProtocol : sshUsername : gitPassword : [leave_blank]Save and push.See this GitHub SSH Help page for useful info: http://help.github.com/ssh-issues/Worked for me after initially suffering through ""session is down"" and ""cannot open git-upload-pack"" errors. Hope it helps everyone else too.Good luck!I faced the same problem and I found out solution which is extremely foolish. I took following steps: I logged into git repository of my project from browser and didn't sign out.I copied the http url to push or pull from project repository from github.I pasted the url in my eclipse plugin while pushing code (didn't use the already stored one even though both of them were same)I don't know what and why but above steps have worked for me whenever I have faced above problem. I don't know why does eclipse throw such exceptions and why does it gets solved this way.You can also try pushing using other ways outside of eclipse. for eg. `TortoiseGit` or `SmartGit` etc."
"I found the answer on this blog comment https://coderwall.com/p/ssxp5qIf you come across the ""Updates were rejected because the tip of your current branch is  behind. Merge the remote changes (e.g. 'git pull')"" problem when you're pushing (due to  whatever reason, esp screwing about with git history) then you'll need to nest git  commands so that you can force a push to heroku. e.g, given the above example:git push heroku `git subtree split --prefix pythonapp master`:master --forceOn windows the nested command doesn't work:git push heroku `git subtree split --prefix pythonapp master`:master --forceYou can just run the nested bit first:git subtree split --prefix pythonapp masterThis will (after a lot of numbers) return a token, e.g.157a66d050d7a6188f243243264c765f18bc85fb956Use this in the containing command, e.g:git push heroku 157a66d050d7a6188f243243264c765f18bc85fb956:master --forceUse the --onto flag:# DOESN'T WORK: git subtree push --prefix=public/shared project-shared master --onto=project-shared/master[EDIT: unfortunately subtree push doesn't forward --onto to the underlying split, so the operation has to be done in two commands! With that done, I see that my commands are identical to those in one of the other answers, but the explanation is different so I'll leave it here anyway.]git push project-shared $(git subtree split --prefix=public/shared --onto=project-shared/master):masterOr if you're not using bash:git subtree split --prefix=public/shared --onto=project-shared/master# This will print an ID, say 0123456789abcdef0123456789abcdef,# which you then use as follows:git push project-shared 01234567:masterI spent hours poring through the git-subtree source to figure this one out, so I hope you appreciate it ;)subtree push starts by running subtree split, which rewrites your commit history into a format which should be ready to push. The way it does this is, it strips public/shared/ off the front of any path which has it, and removes any information about files that don't have it. That means even if you pull non-squashed, all the upstream sub-repository commits are disregarded since they name the files by their bare paths. (Commits that don't touch any files under public/shared/, or merge commits that are identical to a parent, are also collapsed. [EDIT: Also, I've since found some squash detection, so now I'm thinking it's only if you pulled non-squashed, and then the simplistic merge commit collapsing described in yet another answer manages to choose the non-squashed path and discard the squashed path.]) The upshot is, the stuff it tries to push ends up containing any work someone committed to the current host repository you're pushing from, but not work people committed directly to the sub-repository or via another host repository.However, if you use --onto, then all the upstream commits are recorded as OK to use verbatim, so when the rewriting process comes across them as one of the parents of a merge it wants to rewrite, it will keep them instead of trying to rewrite them in the usual way.I have encountered this problem before as well, and here is how I solved it.What I found out was I had a branch that was not attached to the local master branch. This branch exists and its just hanging in the void. In your case, its probably called project-shared. Assuming this is the case and when you do a git branch you can see a local project-shared branch, then you can 'append' new commits to your existing project-shared branch by doing a:git subtree split --prefix=public/shared --onto public-shared --branch public-sharedThe way I understood is git subtree will start creating new branch from --onto, in this case its the local public-shared branch. Then the branch means creating a branch, which just replaces the old public-shared branch.This will keep all the previous SHA of the public-shared branch. Finally, you can do agit push project-shared project-shared:masterAssuming that you have a project-shared remote as well; this will push the local hanging in the void project-shared branch to the master branch of the remote project-shared.This is because of the limitation of original algorithm. When handling merge-commits, the original algorithm uses a simplified criteria for cutting off unrelated parents. In particular, it checks, if there is a parent, which has the same tree. If such a parent found, it would collapse the merge commit and use the parent commit instead, assuming that other parents have changes unrelated to the sub-tree. In some cases this would result in dropping parts of history, which has actual changes to the sub-tree. In particular it would drop sequences of commits, which would touch a sub-tree, but result in the same sub-tree value.Lets see an example (which you can easily reproduce) to better understand how this works. Consider the following history (the line format is: commit [tree] subject):% git log --graph --decorate --pretty=oneline --pretty=""%h [%t] %s""*   E [z] Merge branch 'master' into side-branch|\| * D [z] add dir/file2.txt* | C [y] Revert ""change dir/file1.txt""* | B [x] change dir/file1.txt|/*   A [w] add dir/file1.txtIn this example, we are splitting on dir. Commits D and E have the same tree z, because we have commit C, which undone commit B, so B-C sequence does nothing for dir even though it has changes to it. Now lets do splitting. First we split on commit C.% git log `git subtree split -P dir C` ...* C' [y'] Revert ""change dir/file1.txt""* B' [x'] change dir/file1.txt* A' [w'] add dir/file1.txtNext we split on commit E.% git log `git subtree split -P dir E` ...* D' [z'] add dir/file2.txt* A' [w'] add dir/file1.txtYes, we lost two commits. This results in the error when trying to push the second split, since it doesn't have those two commits, which already got into the origin.Usually you can tolerate this error by using push --force, since dropped commits generally won't have critical information in them. In the long term, the bug needs to be fixed, so the split history would actually have all commits, which touch dir, as expected. I would expect the fix to include a deeper analysis of parent commits for hidden dependencies.For reference, here is the portion of original code, responsible for the behavior.copy_or_skip()  ...  for parent in $newparents; do      ptree=$(toptree_for_commit $parent) || exit $?      [ -z ""$ptree"" ] && continue      if [ ""$ptree"" = ""$tree"" ]; then          # an identical parent could be used in place of this rev.          identical=""$parent""      else          nonidentical=""$parent""      fi  ...  if [ -n ""$identical"" ]; then      echo $identical  else      copy_commit $rev $tree ""$p"" || exit $?  fi"
"The syntax of 'git push' supports both an explicit and a shorthand version.The explicit version git push github master works for you. The shorthand version git push does not.If you use the shorthand version you do not tell git what remote to use and what local branch shall be pushed to what remote branch. Hence git has to guess what you mean.You can configure this with the setup of your remote and the push.default config:   push.default       Defines the action git push should take if no refspec is given on       the command line, no refspec is configured in the remote, and no       refspec is implied by any of the options given on the command line.       Possible values are:       åá    nothing - do not push anything.       åá    matching - push all matching branches. All branches having the           same name in both ends are considered to be matching. This is           the default.       åá    upstream - push the current branch to its upstream branch.       åá    tracking - deprecated synonym for upstream.       åá    current - push the current branch to a branch of the same           name.Have a look at git branch -vv to check what branch is tracked by your current branch. Then check git config --get push.default to verify it is doing what you expect.The explanation could be related to the default refspec used for remote ""github"":+refs/heads/*:refs/remotes/github/*A simple git push would push:to the remote associated to master (here ""github""), because master is the current branch (according to the git status)all the other branches (master and add_command branches)add_command is the one which is not in sync with github remote.git checkout add_command git pull githubThen a git push would work."
"You fixed the push, but, independently of that push issue (which I explained in ""Why do I need to explicitly push a new branch?""), you need now to resolve the authentication issue.That depends on your url (ssh as in 'git@github.com/yourRepo, or https as in https://github.com/You/YourRepo)For https url:If your account is protected by the two-factor authentication, your regular password won't work (for https url), as explained here or here.  Same problem if your password contains special character (as in this answer)If https doesn't work (because you don't want to generate a secondary key, a PAT: personal Access Token), then you can switch to ssh, as I have shown here.Also you can use the following command:git push -u origin masterThis creates (-u) another branch in your remote repo. Once the authentication using ssh is done that is.Apparently you also get this error message when you forget the --all parameter when pushing for the first time. I wrotegit push -u originwhich gave this error, it should have beengit push -u origin --allOh how I love these copy-paste errors ..."
"Could this be of any help?Quote:Did you forget to add your public key to the github project settings?  Also check to make sure your private key is in your .ssh directory.Goto https://github.com/[username here]/[project name here]/edit and  make sure your public key is set.Read this too: http://help.github.com/mac-key-setup/If you're just creating a repo,  there's no need to do a git push; git init will create the repo. Also, I would stay away from using sudo when running git. You might also want to go to this site to help you understand git: http://progit.org/book/ch1-3.htmlIf you are using github, you might want to read this: http://help.github.com/linux-set-up-git/Hello it could be because you're trying to git push as root, with sudo, did you set your public key or root key, usually you just supply your key and not the root key, that could be why you're getting such error.If you think it's because of false lock, try removing the lock file:Mac or *nixrm -v .git/config.lockWindowsdel .git/config.lock"
"Had the same error while using SourceTree connected to BitBucket repository.When navigating to repository url on bitbucket.org the warning message appeared:This repository is in read-only mode. You caught us doing some quick maintenance.After around 2 hours repository was accessible again.You can check status and uptime of bitbucket here:http://status.bitbucket.org/here you can see the latest updated status form their website bitbucket site statusif     Git via HTTPS   status is  Major Outage, you will not be able to pull/push, let this status to get greenHTTP Error 503 - Service unavailableIts problem at bitbucket's end. You can check status of their services at http://status.bitbucket.org/Currently there is HTTPS outage at bitbucket.  see belowYou can use SSH option. I just used SSH option with sourcetree.Try disabling all the system wide HTTP and HTTPS proxies:export http_proxy="""" export https_proxy=""""export HTTP_PROXY=""""export HTTPS_PROXY=""""As in ""CocoaPods - pod setup http request failed"", a 503 error on accessing (cloning) a public repository is likely to be the result of a GitHub glitch (availability issue)Retrying later usually works.A 50X error is an internal server error. There's nothing wrong on your end, but something's up on the server's end.http://www.checkupdown.com/status/E503.htmlThe Web server (running the Web site) is currently unable to handle  the HTTP request due to a temporary overloading or maintenance of the  server. The implication is that this is a temporary condition which  will be alleviated after some delay.Just be patient and wait. :-)"
"Just do:git push origin master --forceor if you have a specific repo:git push https://git.... --forceThis will delete your previous commit(s) and push your current one.It may not be proper, but if anyone stumbles upon this page, thought they might want a simple solution...Short flagAlso note that -f is short for --force, sogit push origin master -fwill also work.And if push --force doesn't work you can do push --delete. Look at 2nd line on this instance:git reset --hard HEAD~3  # reset current branch to 3 commits agogit push origin master --delete  # do a very very bad bad thinggit push origin master  # regular pushBut beware...Never ever go back on a public git history!In other words:Don't ever force push on a public repository.Don't do this or anything that can break someone's pull.Don't ever reset or rewrite history in a repo someone might have already pulled.Of course there are exceptionally rare exceptions even to this rule, but in most cases it's not needed to do it and it will generate problems to everyone else.Do a revert instead.And always be careful with what you push to a public repo. Reverting:git revert -n HEAD~3..HEAD  # prepare a new commit reverting last 3 commitsgit commit -m ""sorry - revert last 3 commits because I was not careful""git push origin master  # regular pushIn effect, both origin HEADs (from the revert and from the evil reset) will contain the same files.edit to add updated info and more arguments around push --forceConsider pushing force with lease instead of push, but still prefer revertAnother problem push --force may bring is when someone push anything before you do, but after you've already fetched. If you push force your rebased version now you will replace work from others.git push --force-with-lease introduced in the latest 1.8.5 git release (thanks to @VonC comment on the question) tries to address this specific issue. Basically, it will bring an error and not push if the remote was modified since your latest fetch.This is good if you're really sure a push --force is needed, but still want to prevent more problems. I'd go as far to say it should be the default push --force behaviour. But it's still far from being an excuse to force a push. People who fetched before your rebase will still have lots of troubles, which could be easily avoided if you had reverted instead.And since we're talking about git --push instances...Why would anyone want to force push?@linquize brought a good push force example on the comments: sensitive data. You've wrongly leaked data that shouldn't be pushed. If you're fast enough, you can ""fix""* it by forcing a push on top.* The data will still be on the remote unless you also do a garbage collect, or clean it somehow. There is also the obvious potential for it to be spread by others who'd fetched it already, but you get the idea.First of all, I would not make any changes directly in the ""main"" repo. If you really want to have a ""main"" repo, then you should only push to it, never change it directly.Regarding the error you are getting, have you tried git pull from your local repo, and then git push to the main repo? What you are currently doing (if I understood it well) is forcing the push and then losing your changes in the ""main"" repo. You should merge the changes locally first.I would really recommend to:push only to the main repomake sure that main repo is a bare repo, in order to never have any problem with the main repo working tree being not in sync with its .git base. See ""How to push a local git repository to another computer?""If you do have to make modification in the main (bare) repo, clone it (on the main server), do your modification and push back to itIn other words, keep a bare repo accessible both from the main server and the local computer, in order to have a single upstream repo from/to which to pull/pull.If I'm on my local branch A, and I want to force push local branch B to the origin branch C I can use the following syntax:git push --force origin B:C"
"$ git push heroku masterWarning: Permanently added the RSA host key for IP address '50.19.85.156' to the list of known hosts.Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.heroku keys:add fixed this for meI was getting similar response:$ git push heroku masterexec request failed on channel 0fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.After visiting application URL push went ok. I suppose error has to do something with Heorku idling applications which are not used in past hour (mine was on free/dev account).The repository was corrupt.The Heroku support took over a week to fix it."
"You can specify the username that SSH should send to the remote system as part of your remote's URL.  Put the username, followed by an @, before the remote hostname.git remote set-url website abc@***.com:path/to/repoMake sure you have correct url in .git/configurl = git@github.com:username/repo.gitIf it's your first push, you'll need to set up correct upstream$ git push -u origin masterYou can check which key is used by:$ ssh -vvv git@github.comThe reply should contain something like this:debug1: Next authentication method: publickeydebug1: Offering RSA public key: ~/.ssh/id_rsa...You've successfully authenticated, but GitHub does not provide shell access.Also it's possible to define rules for ssh in ~/.ssh/config, e.g. based on aliases:   Host github      HostName github.com       User git      IdentityFile ""~/.ssh/id_rsa""   Host git      HostName github.com       User git      IdentityFile ""~/.ssh/some_other_id""You can set connect to different ports, use different username etc. for each alias.Try removing the GIT_SSH environment variable with unset GIT_SSH.  This was the cause of my problem.After doing some research I've finally got solution for this, you have declared a environment variable to plink.exe path. So if you remove that path, reopen the git bash and try cloning through SSH it will work.Refer to this linkhttp://sourceforge.net/p/forge/site-support/2959/#204cI had the same error. The solution was following:I've corrected my url in .git/config.Just copied that from HTTPS clone URL. That would be something like that:url = https://github.com/*your*git*name*/*your*git*app*.gitIt worked.Make sure ssh-agent is running:eval ""$(ssh-agent -s)""https://help.github.com/articles/generating-ssh-keys/#step-3-add-your-key-to-the-ssh-agenti just wanted to share that i found a easy fix for that:Access denied.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.just logout from gitlab and login again. The problems should then be fixed."
"As this comment led to a solution (see edit at end of question), here it is reposted as an answer:Are you using MSysGit? This has been known to happen if you have a large number of tags. See This post."
"(a worthwhile tl;dr from @NeTeInStEiN:The nuclear option is rm -rf .git/refs/remotes/origin, and that's what it took here)edit: I've run across part of this behavior in one of my own repos, I can get git to reproduce the f-e-r failure without the rm .git/refs/remotes/origin/master hack:clone a repodelete the origin's primary branch (the one its HEAD's attached to)run git fetch --prune in the cloneThe fetch will produce a dangling-ref warning, and git for-each-ref will fail with a familiar message:~/sandbox/20/buddy$ git fetch --pruneFrom /home/jthill/sandbox/20/source/. x [deleted]         (none)     -> origin/master   (refs/remotes/origin/HEAD has become dangling)~/sandbox/20/buddy$ git f-e-rfatal: missing object 0000000000000000000000000000000000000000 for refs/remotes/origin/HEADbut that doesn't break the push, I've tried with every setting of push.default, nor does it break git update-ref -d.However, googling the push message did get me this:I had just rebooted from a BSOD the other day [...] then git push.  And that‰Ûªs when I got a complaint about ‰ÛÏUnable to resolve reference refs/remotes/origin/master‰Û_‰Ûù. [...]  So, I opened up the master file and it was full of spaces!  Well, that‰Ûªs no good.  In order to fix it, I did this: [your rm, and then git fetch]See comments above for the blow-by-blow, tl;dr is, because these were remote refs, which git fetch completely refreshes, and because the damage was such that for-each-ref and git update-ref failed to work at all, the nuclear option rm -rf refs/remotes/origin; git fetch was guaranteed to restore the remote properly.In other circumstances,  if there'd been no easy way to restore the damaged refs or for  curiosity, find .git/refs/remotes/origin -type f to check for locks or using reflogs (those files are in .git/logs) to recover content would have helped but it wasn't necessary here.  I think I missed a bet by not doing the find first, *.lock files from a kill -9ed earlier command look likely here, but I suspected an ambiguous ref and f-e-r is my first step for those.Note: with Git 2.5 (July 2015), git for-each-ref will be a bit more precise when it fails on a ""missing object"".See commit 501cf47, commit f551707 (03 Jun 2015), and commit 8afc493, commit c3e23dc (02 Jun 2015) by Michael Haggerty (mhagger).(Merged by Junio C Hamano -- gitster -- in commit 9d71c5f, 24 Jun 2015)for-each-ref: report broken references correctlyIf there is a loose reference file with invalid contents, ""git for-each-ref"" incorrectly reports the problem as being a missing  object with name NULL_SHA1:$ echo '12345678' >.git/refs/heads/nonsense$ git for-each-reffatal: missing object 0000000000000000000000000000000000000000 for refs/heads/nonsenseWith an explicit ""--format"" string, it can even report that the  reference validly points at NULL_SHA1:$ git for-each-ref --format='%(objectname) %(refname)'0000000000000000000000000000000000000000 refs/heads/nonsense$ echo $?0NULL_SHA1 is used to indicate an ""invalid object name"" throughout our  code (and the code of other git implementations), so it is vastly more  likely that an on-disk reference was set to this value due to a  software bug than that NULL_SHA1 is the legitimate SHA-1 of an actual  object.Therefore, if a loose reference has the value NULL_SHA1,  consider it to be broken."
"It sounds like the trouble you're having is that you think you can push directly to hhru/subscribe without having commit access to that repository. While anyone can clone or fork your code from GitHub, only people you give commit access to a repository can change it directly in your repository.In order to make a pull request, you need to first fork the repository, push your changes to your own repository, and then create a pull request from the GitHub website.How this is done is explained in the Fork A Repo and Using Pull Requests sections of the GitHub documentation.Further reading:Collaborating in the GitHub documentation."
"Since this is the master branch, i.e., the one running your generated pages, you need to drop into the _deploy directory, then do the git pull origin master. Somehow your deploy directory has gotten out of sync. Do you have more than one local repo you write to and deploy from? (Say on different machines...) If you do, then you should always make sure to sync your the sources on the various repos as well.docd _deploygit reset --hard origin/mastercd ..and try againrake generaterake deployTry:git checkout sourcerake gen_deploy"
"The problem is due to git/https buffer settings. In order to solve it run this below command:-git config http.postBuffer 524288000And try git push again"
"You need to specify both the remote alias and the branch you wish to push (if there are many branches and you only want to push one).From the docs for push:[to commit to a remote repo] you run git push [alias] [branch] which will attempt to make your [branch] the new [branch] on the [alias] remote.If you wish to push all branches to the remote repo (or only have one to push), you can omit the branch specifier and do agit push [alias]For your specific case, as Mike specified in his comment,git push remote test-1.6should work.You probably already have a remote for your repository, but your new branch hasn't been configured to use it. This should work:git push --set-upstream remote test-1.6Having done that once, there is now a tracking branch in place and you can simply use ""git push"" in future -- assuming you've configured upstream push of the current branch as the default, like so:git config --global push.default trackingOr (preferred) as of git 1.7.4:git config --global push.default upstreamtry to add a remote repo withgit remote add remote http://.../repo.gitthen you can do agit push remote test-1.6"
"Why not follow the instructions GitHub gives you?git remote add origin git@github.com:darkoram/shpero_tracker.gitgit push -u origin masterThe commands you're issuing are saying ""push to the remote repo named origin the branch named git@github.com:/darkoram/shpero_tracker.git"", which is obviously not correct.Please consider the case (uppercase, lowercase) you are using for those remote addresses:git remote add origin git@github.com:darKoram/shpero_tracker.git# NOT:git remote add origin git@github.com:darkoram/shpero_tracker.git # won't work#                                      ^^^#                                       |See:""Why are Github project document page urls case sensitive? What are the negative effects?""""GitHub pushing/pulling error""In the end, i was able to connect, but when trying git push origin master i was getting ""fast forward"" errors despite the fact that my repo was created with only the default Readme.md.I tried the suggestions in the man pages, but in the end, when my dev folderswere pushed to github the folder showed up as green and could not be opened.The git pull --rebase I did also somehow excluded my dev files from my local gitrepo and i've found no way to add them back.In the end, i had to create a new github repo and a new local repo.  The key in the process isstep 3 which pulls the nearly empty (except for Readme.md) repo before attempting to push to it.create github repogit add remote origin (https://... the url in the window on github page)git clone origin mastercreate local repo; add; commit;git push originI suppose if i didn't accept the dialog box offer to create Readme for repo that 3 would be un-necessary, but it's strange to me that this default option derails the simple repo creation process as elaborated in so many tutorials on the subject.The original poster's original question says:I usegit push origin git@github.com:/darkoram/shpero_tracker.gitI also triedgit push origin https://github.com/darKoram/sphero_tracker.gitboth times I getremote part of refspec is not a valid name in https://github.com/darKoram/sphero_tracker.gitThe error refers to the fact that you're not using a valid refspec. A refspec takes the following form (items in [] are optional, and items in <> are parameters):[+]<source>[:<destination>]In the format above, both the source and the destination are references, and branches in Git are references, so you can use branches as refspecs. For example, the following are both valid and equivalent refspecs:mastermaster:masterUsing the two refspecs with git push:git push origin mastergit push origin master:masterwill both push the local branch master to the branch named master on the remote origin.Your ProblemYou usedgit push origin git@github.com:/darkoram/shpero_tracker.gitgit@github.com:/darkoram/shpero_tracker.git is not a vaid reference/branch, it's the URL for your remote repo. That's probably why Git is complaining that the refspec is not valid.The correct way to push a branch would begit push origin <branch>See AlsoFor a more detailed explanation for refspec syntax, see the official Linux Kernel documentation for git push.For another explanation of refspecs, see Pro Git å_ 9.5 Git Internals - The Refspec."
"Here is what helped me, the following command increases git buffer to 500mb:git config http.postBuffer 524288000from here: Git: error: RPC failed; result=22, HTTP code = 411Kind of a hack, but I got around this using Fiddler2 and setting the proxy in .gitconfig to pass through Fiddler[http]proxy = http://USER:PASSWORD@127.0.0.1:8888Downside is you need to launch Fiddler before doing any remote options and the plain text password, but at least it seems to work."
"This happened to me on my Vagrant VirtualBox VM running Ubuntu 12.04. The vagrant instance had been up for several days. I restarted the VM (vagrant reload), ssh'd back in, and it worked.What's the cause? Not sure. Someone else can speculate. However, I always like to reboot three times just to be sure ;)I've faced the same error when I changed the network that my laptop was connected. Editing /etc/resolv.conf properly solved the problem:nameserver 8.8.8.8Making resolv.conf blank and reboot might solve it too.On debian 2.6.32-5-amd64 + VirtualBox 4.2.12.git config --global --unset http.proxy git config --global --unset https.proxyworks for meOne solution, if this is a repository under you control, would be to use an SSH key for your repository access instead of HTTP. Update your remote accordingly by dropping the origin remote with: git remote rm origingit remote add origin <ssh_path_from_github>You can find the ssh path in github here:Make sure to preface it with ssh:// when you re-add the remote. If this doesn't work then we'll look at the http proxy settings, but based on your faux github link, I'm hoping it's a repository under your control.I gave the follwoing command to restart my network services. This would work for sure:service network restartI have experienced the same error when wanted to push code on github. The problem was that I had messed up some environment variables on my Ubuntu machine. This happened because I wanted to use a manual proxy on google chrome.If you are using linux use the following command to see if http_proxy and https_proxy are set to some ip address.env | grep http_proxyThen use the following commands to unset the value of these two variables.unset http_proxyunset https_proxyTry to use git again. If it does not work then do a reboot. It worked for me."
"git push -f origin myBranch should work (provided you are aware this can be dangerous if MyBranch was already fetched by others in their own repo)Note: if your remote repo ('origin') has its config set withreceive.denyNonFastForwards trueit will deny any non fast-forward push (even when forced).See ""Is there a way to configure git repository to reject 'git push --force'?"".The OP user654019 reportsI managed to solve the problem this time by setting denyNonFastForwards to false and using -f to force the pushIf the OP didn't have access to the repo, he/she would have to:reset the local HEAD to its original position (see ""Recover from git reset --hard?""):git reset HEAD@{1}make a new commit which cancel your merge, as described in the ProGit book, with git revert:git revert -m 1 HEAD~ (in your case)By example:$ git revert -m 1 [sha_of_C8]Finished one revert.[master 88edd6d] Revert ""Merge branch 'jk/post-checkout'"" 1 files changed, 0 insertions(+), 2 deletions(-)A complete discussion on how to revert a merge can be found here.The idea remains to generate only new commits, including one reverting the changes introduced by the merge commit.You then can push that new commit, as a fast-forward change."
"A common key error is: Permission denied (publickey). You can fix this by using keys:add to notify Heroku of your new key.heroku keys:add ~/.ssh/id_rsa.pubhttps://devcenter.heroku.com/articles/keysUPDATE, solution from the following blog post worked.Create a new public keyssh-keygen -t rsaUpload to herokuheroku keys:add /root/.ssh/id_rsa.pub"
"As it has already been mentioned in che's answer about adding the remote part, which I believe you are still missing.Regarding your edit for adding remote on your local USB drive. First of all you must have a 'bare repository' if you want your repository to be a shared repository i.e. to be able to push/pull/fetch/merge etc..To create a bare/shared repository, go to your desired location. In your case:$ cd /Volumes/500gb/   $ git init --bare myproject.gitSee here for more info on creating bare repositoryOnce you have a bare repository set up in your desired location you can now add it to your working copy as a remote.$ git remote add origin /Volumes/500gb/myproject.gitAnd now you can push your changes to your repository$ git push origin masterYour config file does not include any references to ""origin"" remote. That section looks like this:[remote ""origin""]    url = git@foo.com:repository.git    fetch = +refs/heads/*:refs/remotes/origin/*You need to add the remote using git remote add before you can use it.Here are the instructions from github:touch README.mdgit initgit add README.mdgit commit -m ""first commit""git remote add origin https://github.com/tqisjim/google-oauth.gitgit push -u origin masterHere's what actually worked:touch README.mdgit initgit add README.mdgit commit -m ""first commit""git remote add origin https://github.com/tqisjim/google-oauth.gitgit clone origin masterAfter cloning, then the push command succeeds by prompting for a username and passwordMay be you forgot to run ""git --bare init"" on the remote?That was my problemWhen you create a repository in bitbucket.org, it gives you instructions on how to set up your local directory.  Chances are, you just forgot to run the code:  git remote add origin https://username@bitbucket.org/username/reponame.gitmy case was a little different - unintentionally I have changed owner of git repository (project.git directory in my case), changing owner back to the git user helped"
"This is a general error message that is returned by Gerrit if a push is not allowed, e.g. because the pushing user has no sufficient privileges.In particular this error occurs:If you push a commit for code review to a branch for which you don‰Ûªt have upload permissions (access right Push on refs/for/refs/heads/*)if you bypass code review without Push access right on refs/heads/*if you push an annotated tag without Push Annotated Tag access right on refs/tags/*if you push a signed tag without Push Signed Tag access right on refs/tags/*if you push a lightweight tag without the access right Create Reference for the reference name refs/tags/*if you push a tag with somebody else as tagger and you don‰Ûªt have the Forge Committer access right for the reference name refs/tags/*if you push to a project that is in state Read OnlyFor new users it often happens that they accidentally try to bypass code review. The push then fails with the error message prohibited by Gerrit because the project didn‰Ûªt allow to bypass code review. Bypassing the code review is done by pushing directly to refs/heads/* (e.g. refs/heads/master) instead of pushing to refs/for/* (e.g. refs/for/master).copied from prohibited by GerritMore description: I have same problem with new installation of gerrit 2.7, searched and found this stackoverflow question, but my case was number 5 of this description(light weight tags), so i added Create Reference permission for refs/tags/*, and problem solved.This line gives you a hint:! [remote rejected] v1.0 -> v1.0 (prohibited by Gerrit)Gerrit prohibited the push as your user is not in a group with the ""Push Annotated Tag"" right.You need to add the following project's permissions for [refs/tags/*]:Create Reference: to create a new tag.Forge Committer Identity: allow different tag uploader (you) to original tagger.Forge Author Identity: allows handling of commit belonging to other users.Refer to Gerrit access controls for details"
"It looks like there is a push that you didn't pull before you push your changes, so it would overwrite the master branch. You should pull the master branch and then merge with your changeset after you can push the whole.Alternatively if you have permission you can use push -f, however it kill anyone else's push."
"You are pushing master from your clone to the origin repo, where the origin repo itself has master checked out, and the origin repo is not a bare repo. GIT doesn't allow that.To achieve what you are trying to do, Either use a bare intermediate repo to which you push, and then pull in from this repo.git clone  --bare <origin/repo> intermediateOn your original local repogit remote add upstream <path/to/intermediate>git push upstream masterOn your origin repogit remote add downstream <path/to/intermediate>git pull downstream master    Or push to some other branch on the origin repo, and merge that branch into the master branch in the origin repo.From local repogit push origin master:master_to_be_mergedOn origin repogit checkout mastergit merge master_to_be_mergedOr ignore these warnings and push anywayIn this case, you will have to take extra care that nothing is breaking, and this is anyway not recommended.On origin repo, run git config receive.denyCurrentBranch ignoreAnd now from your local clone, dogit push origin master"
"Writing this for those just getting started with Git and BitBucket on Windows & who are not as familiar with Bash (since this is both a common issue and a high ranking Google result when searching for the error message within the question).For those who don't mind HTTPS and who are looking for a quick fix, scroll to the bottom of this answer for instructions under FOR THE LAZYFor those looking to solve the actual problem, follow the instructions below:Fixing the SSH issue as fast as possibleThis is a set of instructions derived from the URL linked to by VonC.  It was modified to be as resilient and succinct as possible.Don't type the $ or any lines that do not begin with $ (the $ means this is something you type into GitBash).Open GitBashSet your global info if you haven't already:$ git config --global user.name ""Your Name""$ git config --global user.email ""you@example.com""Check for OpenSSH:$ ssh -v localhostOpenSSH_4.6p1, OpenSSL...See something like that?Yes: Continue.No: Skip to the FOR THE LAZY section or follow the linked article from VonC.See if you have generated the keys already:$ ls -a ~/.ssh/id_*If there are two directories, you can skip the next step.$ ssh-keygenLeave everything as the defaults, enter a passphrase.  You should now see results with this command:$ ls -a ~/.ssh/id_*Check for an existing config file:$ ls -a ~/.ssh/configIf you get a result, check this file for erroneous information.  If no file exists, do the following:$ echo ""Host bitbucket.org"" >> ~/.ssh/config$ echo "" IdentityFile ~/.ssh/id_rsa"" >> ~/.ssh/configConfirm the contents:$ cat ~/.ssh/configHost bitbucket.org IdentityFile ~/.ssh/id_rsaThe single space before ""IdentityFile"" is required.Check you are starting the SSH agent every time you run GitBash:$ cat ~/.bashrcIf you see a function called start_agent, this step has already been completed.If no file, continue.If there is a file that does not contain this function, you're in a sticky situation.  It's probably safe to append to it (using the instructions below) but it may not be! If unsure, make a backup of your .bashrc before following the instructions below or skip ahead to FOR THE LAZY section.Enter the following into GitBash to create your .bashrc file:$ echo ""SSH_ENV=$HOME/.ssh/environment"" >> ~/.bashrc$ echo """" >> ~/.bashrc$ echo ""# start the ssh-agent"" >> ~/.bashrc$ echo ""function start_agent {"" >> ~/.bashrc$ echo ""    echo \""Initializing new SSH agent...\"""" >> ~/.bashrc$ echo ""    # spawn ssh-agent"" >> ~/.bashrc$ echo ""    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > \""\${SSH_ENV}\"""" >> ~/.bashrc$ echo ""    echo succeeded"" >> ~/.bashrc$ echo ""    chmod 600 \""\${SSH_ENV}\"""" >> ~/.bashrc$ echo ""    . \""\${SSH_ENV}\"" > /dev/null"" >> ~/.bashrc$ echo ""    /usr/bin/ssh-add"" >> ~/.bashrc$ echo ""}"" >> ~/.bashrc$ echo """" >> ~/.bashrc$ echo ""if [ -f \""\${SSH_ENV}\"" ]; then"" >> ~/.bashrc$ echo ""     . \""\${SSH_ENV}\"" > /dev/null"" >> ~/.bashrc$ echo ""     ps -ef | grep \${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {"" >> ~/.bashrc$ echo ""        start_agent;"" >> ~/.bashrc$ echo ""    }"" >> ~/.bashrc$ echo ""else"" >> ~/.bashrc$ echo ""    start_agent;"" >> ~/.bashrc$ echo ""fi"" >> ~/.bashrcVerify the file was created successfully (yours should only differ where ""yourusername"" appears):$ cat ~/.bashrcSSH_ENV=/c/Users/yourusername/.ssh/environment# start the ssh-agentfunction start_agent {    echo ""Initializing new SSH agent...""    # spawn ssh-agent    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > ""${SSH_ENV}""    echo succeeded    chmod 600 ""${SSH_ENV}""    . ""${SSH_ENV}"" > /dev/null    /usr/bin/ssh-add}if [ -f ""${SSH_ENV}"" ]; then     . ""${SSH_ENV}"" > /dev/null     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {        start_agent;    }else    start_agent;fiClose GitBash and re-open it.You should be asked for your passphrase (for the SSH file you generated earlier).If no prompt, you either did not set a passphrase or GitBash isn't running the .bashrc script (which would be odd so consider reviewing the contents of it!)If you didn't enter a passphrase, you would have seen something like this when starting GitBash:Initializing new SSH agent...succeededIdentity added: /c/Users/yourusername/.ssh/id_rsa (/c/Users/yourusername/.ssh/id_rsa)And the following should return results:$ ssh-add -lHowever, if you get the following from ssh-add -l:Could not open a connection to your authentication agent.It didn't spawn the SSH agent and your .bashrc is likely the cause.If, when starting GitBash, you see this:Initializing new SSH agent...sh.exe"": : No such file or directoryThat means you forgot to escape the $ with a \ when echoing to the file (ie. the variables were expanded).  Re-create your .bashrc to resolve this.Verify the agent is running and your keys have been added:$ ssh-add -lShould return something similar to this:2048 0f:37:21:af:1b:31:d5:cd:65:58:b2:68:4a:ba:a2:46 /Users/yourusername/.ssh/id_rsa (RSA)Run the following command to get your private key:$ cat ~/.ssh/id_rsa.pub(it should return something starting with ""ssh-rsa ......""Click the GitBash window iconClick EditClick MarkHighlight the public key using your mouse (including the leading ssh-rsa bit and the trailing == youremail@yourdomain.com bit)Right-click the window (performs a copy)Paste your public key into Notepad.Delete all the newlines such that it is only a single line.Press CTRL+A then CTRL+C to copy the public key again to your clipboard.Configure your private key with BitBucket by performing the following steps:Open your browser and navigate to the BitBucket.org siteLogin to BitBucket.orgClick your avatar (top-right)Click Manage AccountClick SSH Keys (under Security on the left-hand menu)Click Add KeyEnter Global Public Key for the LabelPaste the public key you copied from NotepadA Global Public Key entry should now be visible in your list of keys.Return to GitBashcd into the directory containing your projectChange your origin to the SSH variation (it will not be if you ran the FOR THE LAZY steps)Check your remotes:$ git remote -vSwitch to the SSH url:$ git remote set-url origin git@bitbucket.org:youraccount/yourproject.gitCheck things are in working order:$ git remote show originYou should see something like this:Warning: Permanently added the RSA host key for IP address '...' to the list of known hosts.* remote origin  Fetch URL: git@bitbucket.org:youruser/yourproject.git  Push  URL: git@bitbucket.org:youruser/yourproject.git  HEAD branch: master  Remote branch:    master tracked  Local ref configured for 'git push':    master pushes to master (fast-forwardable)DONE!You can opt to use HTTPS instead of SSH.  It will require you to type your password during remote operations (it's cached temporarily after you type it once).  Here is how you can configure HTTPS:FOR THE LAZYYou should fix the SSH issue as described by VonC; however, if you're in a rush to commit and don't have the tools/time/knowledge to generate a new public key right now, set your origin to the HTTPS alternative:> https://accountname@bitbucket.org/accountname/reponame.gitUsing a GUI tool such as TortoiseGit or command line tools.Here is the documentation of this alternative origin URL.Command line to add an origin if one does not exist:git remote add origin https://accountname@bitbucket.org/accountname/reponame.gitCommand line to change an existing origin:git remote set-url origin https://accountname@bitbucket.org/accountname/reponame.gitNOTE: your account name is not your email.You may also want to set your global info:git config --global user.name ""Your Name""git config --global user.email ""you@example.com""Then try your push again (no need to commit again)git push origin masterReformatted means you probably deleted your public and private ssh keys (in ~/.ssh).You need to regenerate them and publish your public ssh key on your BitBucket profile, as documented in ""Use the SSH protocol with Bitbucket"", following ""Set up SSH for Git with GitBash"".Accounts->Manage Accounts->SSH Keys:Then: Images from ""Integrating Mercurial/BitBucket with JetBrains software""This error also occurs if you forgot adding the private key to ssh-agent. Do this with:ssh-add ~/.ssh/id_rsaI had the same problem. My SSH keys were set correctly. I fixed this problem like this.After creating new project in Bitbucket, use clone. Enter cloning command in terminal and it should clone empty project to your computer.After that you can copy your files to this directory and start committing and pushing to bitbucket."
"That reminds me of issue 313, where GIT_SSH environment variable contains spaces in its path.Other than that, did you followed the GitHub Help page and checking if your ssh connection worked?$ ssh git@github.comThe authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of known hosts.ERROR: Hi tekkub! You've successfully authenticated, but GitHub does not provide shell accessConnection to github.com closed.I'm not sure if it was just stupid of myself, but I've solved the problem...Here's what I did (from advice, from work colleagues):I was attempting to push changes in a local repo to an empty repo on github...what i should have done was clone the empty repo, add the files locally to my cloned repo, added the files, commited the adds, and THEN push to the github repo...$ git clone git@github.com:christopherdebeer/yUML-Diagram.git // added files$ git add *$ git commit -m ""first commit locally""$ git push origin masterMy original problems might have been due to my totaly naivety as to gits usage...I'm not sure if this is only a smartgit issue, but when this happens in that program its actually a permissions issue on the temp folder.  It seems like windows 7 and 8 occasionally reset the permissions on the temp directory and you need to change them back to full read and write perms."
"Well I did following stepsGoogle the errorGot to SO Links(here, here) which suggested the same thing, that I have to update the Git Config for proxy setting Damn, can not see proxy information from control panel. IT guys must have hidden it. I can not even change the setting to not to use proxy.Found this wonderful tutorial of finding which proxy your are connected toUpdated the http.proxy key in git config by following commandgit config --global http.proxy  http[s]://userName:password@proxyaddress:portError - could not resolve proxy some@proxyaddress:port. It turned out my password had @ symbol in it. Encode @ in your password to %40 because git splits the proxy setting by @git config --global http.proxy  http[s]://userName:password(encoded)@proxyaddress:portBaam ! It worked !Note - I just wanted to answer this question for souls like me, who would come looking for answer on SO :DIf your country block github, e.g. China mainland,then you can build a proxy, e.g. use goagent & gae,then set proxy address for git, e.g.git config --global http.proxy 127.0.0.1:8087UpdateRecently, a project called xx-net base on goagent become popular, it's more easier to use & more powerful.If your git was already set to something and you only copied that folder to some other location, simply run:git config --global http.proxy """"And git will set itself straight, after what, you can pull again :)Mine was fixed by just using this command :-      >git config --global http.proxy XXX.XXX.XXX.XXX:ZZwhere XXX.XXX.XXX.XXX is the proxy server address   and ZZ is the port number of the proxy server.There was no need to specify any username or password in my case.I got so:git config --global http.proxy http://{domain}\\\{username}:{password}@{proxy ip}:{proxy port}git config --global http.sslverify falseMy problem was solved using this commandgit config --global http.proxy http://login:password@proxyServer:proxyPortWas getting the same error in SourceTree,go to Tools>Options>Network and check Add proxy server configuration to Git/Mercurial if you had already set the proxy settingsOn Windows 7 setting the proxy to global config will resolve this issuegit config --global http.proxy http://user:password@proxy_addr:portbut the problem here is your password will not be encrypted.. Hopefully that should not be much problem as most of time you will be sole owner of your PC.I got an error when I used <git config --global http.proxy http://user:password@proxy_addr:port>The error is that the config file cannot be identified as there is no such file. I changed the command to <git config --system http.proxy http://user:password@proxy_addr:port>I am running git on the Windows 7 command prompt.The above command references the config file in GIT_HOME/etc/gitconfig.The --global option does not.ipconfig /renew - solved this issue for me."
"We experienced this issue recently but none of the above solved it. In the end we pushed patches a few at a time (binary chop) until we found that one was causing the problem.The version of Git on the server was older than our local Git and did not support one of the headers in the commit.An easy way to see if this affects you is to run git fsck in your repository directory. This will report any potential issues.In my case this was due to a GNUtls error, which showed up after running GIT_CURL_VERBOSE=1 git clone https:<URL>The workaround that worked for me was to build git using the openssl library instead of gnutls. For Ubuntu systems this link offers a way of achieving this.It is worth noting that I'm behind a company proxy, and this may be triggering the problem.Some info on the error here: https://confluence.atlassian.com/pages/viewpage.action?pageId=301663267(from the linked article) Try this command to get more info about your error:GIT_CURL_VERBOSE=1 git pushChange protocol git from https to ssh will resolve this problem.This is guide using for bitbuckethttps://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git"
"I ran into the same error message trying to get Git, Git Extensions, and GitHub working with 64-bit Windows 7.  I was able to solve the problem while continuing to use Putty.I created a .profile file in C:\Users\MyUserName with the following contents:GIT_SSH=""/c/Program Files (x86)/Git/bin/ssh.exe""Had to use ""touch .profile"" within git bash to create the file since Windows GUI chastises you for trying to create files starting with period.Can't take credit.  I just put a windows spin on the answer provided here.The solution is somehow change default ssh client for git from pegeant to openSsh. E.g. reinstall git and check openSSH in the corresponding window (not pegeant or something), if you have just installed git and haven't started to work woth it yet.When I choose plink.exe to perform the authentication, Here are my stepsuse ""puttygen.exe"" to generate the public and private keys and save the private key in putty private key file format( filename.ppk ). Paste the public key generated in ""puttygen.exe"" into github account setting. Launch pageant.exe (Putty Authentication Agent) , and add the private key generated in step 1.Could the section ""No supported authentication methods available"" on GitHub help at all?You should be aware of the environment variable GIT_SSH, which is used by git to find your ssh-speaking client, if ssh doesn‰Ûªt work for you.  The git install may be using plink.exe (via GIT_SSH) to perform the authentication.  If so, make sure you have pageant.exe running, and the key you created for github loaded into it. This provides the key to plink.exe; without it, the above error will occur.See this post for a longer discussion."
"The url with git://github.com/my_username/my_repo.gitgit:// Only gives read only access as mentioned in the side too..Whereas,git@github.com:my_username/my_repo.gitgives read and write access as mentioned in siteThough, https://github.com/my_username/my_repo.git also has read and write access but it was not working in your case because you trying to create a new remote with the same name instead of resetting it. The correct syntax as mentioned was git remote set-url origin git@github.com:my_username/my_repo.gitAndgit remote set-url origin https://github.com/my_username/my_repo.gitwould also work.git remote set-url origin git@github.com:my_username/my_repo.git"
"git remote set-url origin ""https://github.com/somegitrepo.git"" will change address of origin.Problem with using git:// version may be caused by badly configured (or just lacking) SSH keys."
You should only push to bare repositories
"It seems that what you are trying to do isgit push heroku masteror, meaning the same if you are currently on branchnamegit push heroku branchname:masterFrom manpage:git push [repository [refspec...]]refspec...   Specify what destination ref to update with what source object. The format of a <refspec> parameter is an optional   plus +, followed by the source object <src>, followed by a colon :, followed by the destination ref <dst>."
"The command (or the URL in it) to add the github repository as a remote isn't quite correct. If I understand your repository name correctly, it should be;git remote add demo_app 'git@github.com:levelone/demo_app.git'You are referring to the section ""2.3.5 Deploying the demo app"" of this ""Ruby on Rails Tutorial "":In section 2.3.1 Planning the application, note that they did:$ git remote add origin git@github.com:<username>/demo_app.git$ git push origin masterThat is why a simple git push worked (using here an ssh address).Did you follow that step and made that first push? www.github.com/levelone/demo_appwouldn't be a writable URI for pushing to a GitHub repo.  https://levelone@github.com/levelone/demo_app.gitshould be more appropriate.Check what git remote -v returns, and if you need to replace the remote address, as described in GitHub help page, use git remote --set-url.git remote set-url origin https://levelone@github.com/levelone/demo_app.gitor git remote set-url origin git@github.com:levelone/demo_app.git"
"There are some details missing from the question, but I'll attempt to answer anyways. First of all, if you both have your own copies of the repo, then you both should be able to commit changes to your own local copies.If your friend is trying to push his changes to your local repo, it sounds like it's not working because you currently have master checked out, which would make sense as a safety feature...you wouldn't want to have Git silently swap out your working copy from right under your nose without warning. You can allow Git to move your master branch/reference/label/pointer by checking out the commit it's on directly:$ git checkout headThen your friend would probably be able to push his changes to your repo.  After he's done, be sure to checkout the master branch again in your local repo (if you want to work on it):$ git checkout masterHowever, people don't usually push changes to other people's personal/private repos. They usually send each other pull requests instead, and fetch each other's changes. So you could add your friend's remote and fetch his changes and then merge them in (or pull to do both):$ git add <friend name> <url or path to friend remote>$ git fetch <friend remote>$ git merge <friend>/master# Or combine fetch and merge using pull$ git pull <friend> masterAlternatively, instead of fetching and merging (or pulling) your friend's changes into your local master branch, you can rebase your local changes on top of his changes:$ git fetch <friend remote>$ git rebase <friend>/master masterJust don't use push. Add each other as remote and use git fetch/merge, cherry-pick, rebase or whatever you find appropriate to pull in each others contributions.@cupcake's answer is fine, but there is nothing overkill about setting up a bare repo on your machine which acts as a central remote repository for both you and your friend. It's actually a lot simpler and makes life easier once its setup:Prepare your new bare repositorymkdir newrepocd newrepogit init --bareBack to your existing repo:git remote add new_repo_alias /path/to/newrepogit push new_repo_alias somethingYour friend does the same using ssh://..., but you have already figured out that part.easy!"
"In your .ssh/config write this :Host git_heroku  Hostname heroku.com  User git  ProxyCommand corkscrew 10.3.100.211 8080 %h %p  Port 443and in your .git/config changegit@heroku.comtogit_herokuThe full line for a remote will look something like:[remote ""appname""]  url = git_heroku:appname.git  fetch = +refs/heads/*:refs/remotes/appname/*git_heroku is an alias; you need to change your git config to use that alias.In addition to answer above in your .ssh/config:use ssh.heroku.com for Hostname instead of heroku.commake sure you include your identity file IdentityFile ""path to identity file""don't specify PortSo my .ssh/config file looks something like this:Host git_herokuProxyCommand corkscrew proxy.usurt.ru 3128 %h %pHostName ssh.heroku.comUser gitIdentityFile ""~/.ssh/id_rsa.pub""And appropriate lines in .git/config file:[remote ""heroku""]    url = git_heroku:still-taiga-2820.git    fetch = +refs/heads/*:refs/remotes/heroku/*"
"Try this:git config --global pack.windowMemory ""32m"""
"You need RW+ permission for ref changes/deletionRW+, for ""push -f"" or ref deletion allowed (i.e., destroy information)Also, if you're using V2 this may apply:RWD and RW+D, for ref deletion. Once you use this in a repo, a normal RW+ can no longer delete a ref; it can only rewindSources:http://sitaramc.github.com/gitolite/g2/conf.htmlhttp://sitaramc.github.com/gitolite/rules.html"
"do i need to configure proxy settings? because my office has got proxy servers. Yes, you can do so by setting HTTP_PROXY, and HTTPS_PROXY environment variables.See ""Syncing with github"":set HTTPS_PROXY=http://<login_internet>:<password_internet>@aproxy:aportset HTTP_PROXY=http://<login_internet>:<password_internet>@aproxy:aportset NO_PROXY=localhost,my.companyNote the NO_PROXY, to allow to access internal site to your companyYou also can register that in your git config:git config --global http.proxy http://<login_internet>:<password_internet>@aproxy:aportI got a similar error, and it's caused by incorrect proxy setting. This command saved me:git config --global --unset http.proxyhttps version:git config --global --unset https.proxyanother possibility, I ran into this problem myself. But it was after I had installed a VPN (which was unrelated and running)turning off the VPN, fixed the issue.for the record, I was running ""Viscosity"" VPN on my MacBookPro192.30.252.128 is the current IP of github.com which can be set in your local DNS (/etc/hosts in Linux and C:\Windows\System32\drivers\etc\hosts)In my case, on a Windows box, my TCP/IP stack seems to have needed to be reset.  Resetting the TCP/IP stack of the client PC caused git to start behaving properly again.  Run this command in Administrator mode at a command prompt and retry the git command:netsh int ip resetManually disabling and re-enabling the network adapter via the Control Panel produces a similar result.I suspect DNS resolution problems inside the TCP stack on my Windows box.Spent a couple hours trying to fix this. Re-connecting my wifi did the trick.All,I want to let you all know that I was having this same issue. I solve it by resetting my remote URL git remote set-url origin https://new.url.here I found how to do this from this answer but I had to change hit to https: How to change a remote repository URI using Git?I had this very similar error as following.C:\wamp\www\myrepository [master]> git pushfatal: unable to access 'https://github.com/myaccount/myrepository.git/': Couldn't resolve host 'github.com'Actually, the prompt message has told us where's wrong.https://github.com/myaccount/myrepository.git/When I check my github, I found my github repository's HTTPS url ishttps://github.com/myaccount/myrepository.gitI don't know how this happened. The wrong url has been set up by installed Git Shell automatically.Once I remove the '/' at the end, I can push successfully."
"The error: ""fatal: unable to create thread: Resource temporarily unavailable"" strongly suggests you've run out of memory on the server, which can happen if you have a repository with lots of large files, which can cause re-packing to take a lot of memory, or limited virtual memory - either in general, or just for that account due to the ulimit setting.Anyways, here's the commands you can run to limit the amount of memory that packing may take by logging into the remote system (as the user that git runs as) and typing these commands:git config --global pack.windowMemory ""100m""git config --global pack.SizeLimit ""100m""git config --global pack.threads ""1""Hope this works.I've also stumbled upon this error. To make it simpler, this error occurs because you want to copy a 100mb file into a hdd with free space of 50mb (or less). To fix this, SSH into the server and run the following commands:git config --global pack.windowMemory ""100m""git config --global pack.SizeLimit ""100m""""unable to create thread: Resource temporarily unavailable"" means an issue with the remote server (like no more memory available).Regarding delta, you have the following config to tweak:pack.deltaCacheSizeThe maximum memory in bytes used for caching deltas in git-pack-objects(1) before writing them out to a pack.  This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found.  Repacking large repositories on machines which are tight with memory might be badly impacted by this though, especially if this cache pushes the system into swapping.  A value of 0 means no limit.  The smallest size of 1 byte may be used to virtually disable this cache. Defaults to 256 MiB. pack.deltaCacheLimitThe maximum size of a delta, that is cached in git-pack-objects(1).  This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Defaults to 1000. The SO question ""Git pull fails with bad pack header error"" references other pack-related configs."
"The problem is most likely because your git buffer is too low.You will need to increase Git‰Ûªs HTTP buffer by setting.git config --global http.postBuffer 2M"
"Github drops the connection because of the large commit size. Consider this help page: https://help.github.com/articles/working-with-large-filesIf you use SSH you will see something like thisremote: warning: Large files detected.remote: error: File giant_file is 123.00 MB; this exceeds GitHub's file size limit of 100 MBIn this case your commit will be rejected. Using HTTPS there is currently no way to transmit the error message to your client."
"This is probably resolved by now. But here is what worked for me.Location:If locked repository is on the server-side:ssh to your git repository on the server. Login as user which has permissions to modify the repository and navigate to the repository on your server.If locked repository is local only:Open the git console and navigate to the repository directory.Run this command:git update-server-infoFix the permissions on your (remote or/and local) repository if you have to. In my case I had to chmod to 777 and chown to apache:apacheTry to push again from the local repository:git pushThis is how it works for me.look up the Apache DAV lock file on your server (e.g. /var/lock/apache2/DAVlock)delete itrecreate it with write permissions for the webserverrestart the webserverEven faster alternative:look up the Apache DAV lock file on your server (e.g. /var/lock/apache2/DAVlock)Empty the file: cat /dev/null > /var/lock/apache2/DAVlockrestart the webserverThis sounds like a permissions issue - is it possible you had two windows open, executing with separate rights? Perhaps check ownership of the .git folder.Perhaps check to see if there is an outstanding file lock open, maybe use lsof to check, or the equivalent for your OS.In case of bettercodes.org, the solution is more poetic - the only problem may be in rights assigned to the project members. Simple members don't have write rights! Please make sure that you have the Moderator or Administrator rights. This needs to be set at bettercodes.org at the project settings by an Administrator, of course."
"I have run into these kinds of issues.Rather than spending hours trying to resolve and fix these issues, my 'solution' is usually to take the code I want, copy it into a new directory, delete the .git files and then create a new github for it and then connect the two as usual.Although this may not be a specific answer to the details you raise, I find that there can be a number of ways that git/github issues can happen and rather than wishing I was a 'git expert' now (it's happening but it takes time), I do the above and continue with my actual application development.The problem you have is that you are trying to read objects that are not part of your 'tree'. They exist but they have been orphaned. However, git allows you to merge one project to another so this is one way you can keep your commits without starting again, something like the following:git remote add -f somename git://somegitplace.com/user/some.gitgit merge -s ours --no-commit somename/mastergit read-tree --prefix=ext/somename -u somename/mastergit commit -m 'external merge'git pull -s subtree somename masterHope that helps. Let me know if not and we can attack it again"
"I just ran into this issue and was able to resolve by:git remote add shared $urlgit fetch sharedgit subtree push -P $prefix shared $branchMight not help for all but saved me from having to hack on the repo structures.I have figured this out; I found the reference of the errant sha in the commit information. The easiest way to fix this is to:stop using the subtree split that'd been created, move the content to a different subdirectory and then resplit the subtree. Kind of messy but much less error prone than backing out commits to the problematic commit and then reapplying them (suggested in an answer to a somewhat similar question). Not beautiful, but it got the job done.I came across similar issue: git subtree push ... used to work on the computer, where I did git subtree add ..., but wouldn't work on second computer:$ git subtree push --prefix lib git@github.com:lib/lib.git master......fatal: bad object {sha} Fix was to pull changes from the repository first (even though there were no changes):git subtree pull --prefix lib git@github.com:lib/lib.git masterand even though it didn't pull anything, push worked fine then:git subtree push --prefix lib git@github.com:lib/lib.git master"
"It sounds like you have file in the git repo owned by root.  Since you're ssh'ing in as 'username' to do the push, the files must be writable by username.  The easiest thing is probably to create the repo as the user, and use the same user to do your pushes.  Another option is to create a group, make everything writable by the group, and make your user a member of that group.Ok, I figured it out. The issue was that I didn't have the correct permissions set for myrepo.git and the parent directory git. As root I logged into the server and used:$ chown username /home/username/gitThis then returns drwxrwxr-x 4 username root 4096 2012-10-30 15:51 /home/username/git with the following:$ ls -ld /home/username/gitI then make a new directory for myrepo.git inside git:$ mkdir myrepo.git$ ls -ld myrepo.git/drwxr-xr-x 2 root root 4096 2012-10-30 18:41 myrepo.git/but it has the user set to root, so I change it to username the same way as before.$ chown username myrepo.git/$ ls -ld myrepo.git/drwxr-xr-x 2 username root 4096 2012-10-30 18:41 myrepo.git/I then sign out of root and sign into server as username:Inside git directory:$ cd myrepo.git/$ git --bare initInitialized empty Git repository in /home/username/git/myrepo.git/On local machine:$ git remote add origin      ssh://username@server.com/home/username/git/myrepo.git$ git push origin masterSUCCESS!Hopefully this comes in handy for anyone else that runs into the same issue in the future!Resourceshttp://www.cyberciti.biz/tips/unix-or-linux-commands-for-changing-user-rights.htmlhttp://www.cyberciti.biz/faq/how-to-use-chmod-and-chown-command/It would seem like your user doesn't have permission to write to that directory on the server. Please make sure that the permissions are correct. The user will need write permissions on that directory."
"I recently (Jul 2014) had a similar issue and found on OS X (10.9.4) that there was a ""DigiCert High Assurance EV Root CA"" certificate had expired (although I had another unexpired one as well).Open Keychain Accesssearch Certificates for ""DigiCert""View menu > Show Expired CertificatesI found two certificates named ""DigiCert High Assurance EV Root CA"", one expiring Nov 2031 and the expired one at July 2014 (a few of days previously). Deleting the expired certificate resolved the issue for me. Hope this helps.if you use self generated ssl key, you can try this.git config --global http.sslVerify falseReferhttps://confluence.atlassian.com/display/FISHKB/Unable+to+clone+Git+repository+due+to+self+signed+certificate"
"The error message is clear (and correct):ERROR: Repository not found.The problem is that origin is set to git@github.com:SWEngineer7sample_app.git which is surely wrong. Obviously, you didn't press SHIFT-7, but only 7 when entering the repo path, therefore there's a 7 where there should be a /. Simply a typo.origin should be defined same as sample (git@github.com:SWEngineer/sample_app.git), then GitHub will also find a repo.To resolve this,git remote rm origingit remote add origin git@github.com:SWEngineer/sample_app.gitYou might also get ""ERROR: Repository not found"" if you are trying to push to a repo for which you do not have push access.  It would be nice if the error were more clear, but if (for example) you are pushing to someone else's repo, check with the owner to make sure you have push access.According to Help.GitHub - Remotes:First you need a repo on GitHub you can push to. Either create a new repo, gain collaborator permissions on someone else‰Ûªs repo, or fork someone else‰Ûªs repo. You can only push to an ssh URL like git@github.com:user/repo.git or an https URL such like https://user@github.com/user/repo.git. If you cloned another repo with a read-only URL you can add a second remote for your URL or remove or rename the existing remote."
"When you have to unlink file, you have to have permission 'w' for directory, in which file is, not for the file...FWIW - I had a similar problem and I'm not sure if this alleviated it (beyond the permission mod):  Closing Eclipse that was using the branch with this problem.If you are using any IDE most likely the problem is that file was used by some process. Like your tomcat might be using the file. Try to identify that particular process and close it. That should solve your problem."
"In Windows, right click on your repository --> click on open a shell hereYou will see a command prompt.type git push in it. (been aware after seeing SimonBoudrias comment)The command prompt will suggest you to type some other command or shows an error.If the command prompt suggest you to type something else, then type that. It will work.If the command prompt shows error then please post the detailed error here.Info: You might want to check this appOpen a shell in your repository. Then typegit push --set-upstream origin master --forceThis will upload your local repo to the server no matter what, overwriting if necessary. This should only be done if you're sure nobody else is publishing to your repo at the moment.I had the same issue as mentioned here, but none of the solutions mentioned above helped. Then I found this answer which talks about Proxy settings, which is exactly why GitHub was failing to commit on my machine. Hope this helps somebody elseTo set up your Proxy Settings, you just need to use this command:git config --global http.proxy  http[s]://userName:password@proxyaddress:portTo fix it, open a command prompt in the repo. For example by pressing the cog in the top right in the repo view and selecting ""open a shell here"".In the command prompt, type git push --set-upstream origin masterEither this will work, or it will say ! [rejected] master -> master (fetch first)If this happens, type git pull origin master (add --rebase if you like)In GitHub the Publish-button might still be visible instead of the sync button. If this is the case, simply restart GitHub.What this does is resetting the default remote branch for your local branch to master.Maybe you just forget type something to the Description area when you commit your files.  Someone like me only type the summery.So make sure you have fill in the Summary and Description when you commmit.  Just type something to the Description textarea when commiting. Then i published successfully.what i do?1 Go to the folder of your repository in Windows Explorer2 delete the file your want to publish. and recreat it.3 Open GitHub For Windows and  click on your Repository .then you will find Uncommitted changes on  left side.4 type your Summary5 type your Description.(the most important step !!!)6 commit to master 7 Hit Publish and You should be successful.This is my first answer. so i have no 10 reputation to post an image......hope help you.Another possibility is a temporary unavailability of GitHub servers. I'm just having the same problem and confirmed that it's a server issue: https://status.github.com/Sample screenshot:"
"this sounds very similar to my current work set up.  it seems that you already have set up your separate ssh-keys so you also need to create a ~/.ssh/config file and populate it with information similar to this:Host work.github.com    HostName github.com    User WORK_GITHUB_USERNAME    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_work_rsa    IdentitiesOnly yesHost personal.github.com    HostName github.com    User PERSONAL_GITHUB_USERNAME     PreferredAuthentications publickey    IdentityFile ~/.ssh/id_personal_rsa    IdentitiesOnly yesEvery property sounds pretty self explanatory but the IdentitiesOnly one.  I won't try to explain what that is for, but that is in my current setup and works fine.It's also worth noting that the Host URL is just a pointer to grab the correct user settings and does not have any affect on getting the files correctly to your target HostName url.Now you just need to make sure your origin (or any remote in general) url match the correct Host url in your respective repos depending on your user name.  If you already have existing personal repos, you can edit that repo's .git/config file in your text editor:[remote ""origin""]    fetch = +refs/heads/*:refs/remotes/origin/*    url = git@personal.github.com:PERSONAL_GITHUB_USERNAME/project.gitor do it via command line:git remote set-url origin git@personal.github.com:PERSONAL_GITHUB_USERNAME/project.gitLikewise to your work one:[remote ""origin""]    fetch = +refs/heads/*:refs/remotes/origin/*    url = git@work.github.com:your_work_organization/project.gitor again, via command line:git remote set-url origin git@work.github.com:your_work_organization/project.gitOf course, you can always set one of your Host urls in your ~/.ssh/config file as justHost github.comI only used work.github.com to see the config relationships easier.Once these are all set, you should be able to push to each respective remote.EDITOne thing to note that I just found out myself is that if you ever set global git config values for your user.email value (and i'm guessing user.name would send a different value as well), git will show your commits as that email user.  To get around this, you can override the global git config settings within your local repository:$ git config user.name ""John Doe""$ git config user.email johndoe@example.comThis should now send up commits as the correct user for that repo.github identifies you by the ssh key it sees, not by any setting from git.Therefore, you need to ensure that your work account's ssh key is not in your keyring when you try to push as your personal account and vice versa.  Use ssh-add -l to determine which keys are in your keyring, and ssh-add -d keyfile to remove a key from your keyring.Also, you may need to check ~/.ssh/config if you have configured it to present certain ssh keys to github.  Finally, I don't know how github deals with two accounts having the same ssh public key, so make sure you don't do that.You can also just switch to https, rather than ssh.  If you use https, it will respect the .git/config settings.  So, in .git/config, change:url = git@github.com:USER/PROJECT.gittourl = https://USER@github.com/USER/PROJECT.git(these values are on the git project page, click on the SSH and HTTP buttons to ge tthe new values);This is a way to do this: you can use different ssh configurations for different ssh accounts.Updated on Feb 22:Check out this link: https://gist.github.com/2351996I had the same issue recently cause I created a new github account. Ive tried the answers above but it didn't help. Then I saw a post somewhere about deleting github from Keychain Access (only if you are using mac). When I git push, it then ask for username and password, and it worked!I had the same problem. It turns out I had two accounts on GitHub using the same SSH key and GitHub defaulted to using the wrong account that did not have permission to the repo I was after. I removed the SSH key from the account I did not to use all worked as expected. You can test which account GitHub is authenticating yourself with:ssh -T git@github.comFor me, this originally showed the wrong username, but after removing the duplicate SSH key from that account, it then showed the correct username and my pull and push to my repo worked well.If changing the SSH key associated with the account doesn't work, change the email associated with the account.Go to Github > Account Settings > Emails and verify the email address you are using to commit matches the email on the account.To see what email address you're using to commit, run the following command: git config --global user.email. If you need to change the email address that you are using to commit, run git config --global user.email ""your_email@youremail.com"".I ran into this problem as well and none of the above solutions worked even after I deleted my ssh key and made a new one. Turns out ssh-agent was using a cached key, so I had to run killall ssh-agent and then it worked. Found the solution here. http://fzysqr.com/2012/08/28/quick-tip-wrong-ssh-key-cached-with-github-after-changing-users-and-keys/I got the same issue. Below is what happen in my case:I previously made git to not ask my credential every time I talk with remote repository by this:git config --global credential.helper wincredI resolved the issue by running the same command with ""none"" replacing ""wincred""git config --global credential.helper noneThen git ask my username/pass again and everything go well"
"I would update the git version: 1.7.10 (or thereabouts) had authentication improvements. It's possible that these improvements were only related to proxies though -- I've forgotten the details already.Speaking of proxies, you could double-check git config: You wouldn't have proxies or anything like that configured on the macbook but not on the cent machine?"
"Create the repo on github; add a README file on github and then clone the github repository.  Creating the README file (or any file actually) is needed in order to get a master branch.Notice how github prompts for creating a README when creating a repository:Instead of creating a new repository on Github, cloning that, or reinitializing your local repository, the following command would have been sufficient:git push -u origin masterorigin stands for the remote name (default is origin), and master is the branch you want to push, in your case it's master, otherwise you would have to change that in the command.-u means, that your local branch will be setup to track the new created master branch on the origin repository (the master on the origin will be the upstream branch of your local branch).If the branch master doesn't exist on the remote repository, it will be created, otherwise it will be updated (the -u works no matter if it exists or not).The following command worked for me:git branch --set-upstream-to=origin/master masterI had this problem today on my own remote repository, not Github and realized I had not made any commits to my local repository before trying to push to the remote repository.git add -Agit commitgit push origin masteri faced the same problem just tell github to use the current head branch of your local repository:git push --set-upstream origin masterwish it help you and others"
"For the record, I believe the root cause of this problem was the difference in capitalisation between the local and remote branch names, and the case-insensitive nature of the Windows share that hosted the remote repository.We just encountered this exact same error and were able to resolve the problem simply by renaming the local branch to match the capitalisation of the existing remote branch.See here how to rename a local branch.In Windows, due to capitalization, you may need to take two steps:git branch -m example foogit branch -m foo EXAMPLEdo a git fsck --full on the remote repo. The remote repo may have become corrupt. Clone another one from the remote. Replace the original remote with this one. You should now be able to push again. Something has happened to the remote repo. Nothing you're doing is out of line with regular use.An error I found was trying to push a branch develop to a repository that had branches named: develop/1148 and develop/693. git isn't ok with this (I forget why), so deleting those branches (if possible) fixed this hangup.Thanks, git fsck --full reported ""dangling commit""so git prune blew away the offending stuff and I got to type it in again. Btu at least the trees are all resolved..Thanks for the help."
"You need to add your own repo as the remote (of course you need to create a first_app repo on Github first):$ git remote rm origin$ git remote add origin git@github.com:tomkim/first_app.git$ git push -u origin masterAnd tomkim is your github account name, right? If not, change it to yours."
"I've stated this in the comments to another answer, but it's really the answer (and I've edited the appropriate section of the comments into the question where it belongs).The URL for the remote was not configured correctly, for whatever reason. It's set to ""git@github.com:"", which is clearly missing the path, producing precisely the error you see. You need to reconfigure it correctly. You could simply edit .git/config, changing the appropriate line to contain the path. Or you could do this:git remote rm origingit remote add origin 'git@github.com:rosdabos55/sample_app.git'You almost certainly made some small typo or careless mistake when you added the remote the first time - perhaps you hit enter in the middle of it, perhaps you typed a space after the colon. (For some reason, git does not appear to throw an error when you provide an extra argument after remote add <name> <url> - it just ignores it.) The upshot is that you didn't actually run that command, and you added a remote with an incomplete URL.You may need to git pull origin before you git push origin master."
"There are two flavors of git repository:bare bare repository are used to share the code among developers. You normally will clone from it and push to it.non-bare non-bare repos are used to do the coding work. They are generally clone from a bare repo for which you generally will push your commitsThe repo you are trying to push to is not a bare repo, and thus is has a checked out branch. Newer git versions will not allow you to push to a current checked out branch of a non bare repo as it would cause you to overwrite someone else works as non-bare repo are supposed to be the working repo of someone else.So you have tree option:- do what the message says : You can set 'receive.denyCurrentBranch' configuration variable to  remote: error: 'ignore' or 'warn' in the remote repository to allow pushing into  remote: error: its current branch; however, this is not recommended unless you  remote: error: arranged to update its work tree to match what you pushed in some  remote: error: other way.checkout another branch on the target repoor the best thing to do is to use a bare repo (git clone --bare) to be the shared repo."
"The complaint is actually that the remote didn't reply with a proper git response - ie, there's a problem on the server running .  (The first four bytes should be the line length - instead, they were the characters Unab...  probably an error message of some kind.)What happens when you run ssh <host> git-receive-pack <path-to-git-repository>?  You should see the error message that your git client is barfing on.Maybe you have a statement in the server's .bashrc that produces output. I, for example had this:[[ -s ""$HOME/.rvm/scripts/rvm"" ]] && source ""$HOME/.rvm/scripts/rvm""rvm use ruby-1.9.3-p194@rails32In this case the output from the rvm use will be (wrongly) interpreted as coming from git. So replace it by:rvm use ruby-1.9.3-p194@rails32 > /dev/nullYou can redirect any output from .bashrc to stderr:# inside .bashrcecho 'some error/warning/remind message' 1>&2git will ignore this symbolsCheck your startup files on the account used to connect to the remote machine for ""echo"" statements. For the Bash shell these would be your .bashrc and .bash_profile etc. Edward Thomson is correct in his answer but a specific issue that I have experienced is when there is some boiler-plate printout upon login to a server via ssh. Git will get the first four bytes of that boiler-plate and raise this error. Now in this specific case I'm going to guess that ""Unab"" is actually the work ""Unable..."" which probably indicates that there is something else wrong on the Git host.I had a similar problem on Windows using Git Bash. I kept getting this error when trying to do a git clone. The repository was on a Linux box with GitLab installed.git clone git@servername:path/to/repofatal: protocol error: bad line length character: git@I made sure the ssh key was generated. The public key was added on GitLab. The ssh-agent was running and the generated key was added (github link).I ran out of options and then finally tried closing Git Bash and opening it again by right clicking 'Run as Administrator'. Worked after that.The error transformed in:fatal: protocol error: bad line length character: fataafter adding the location of git-upload-pack to the system path.The problem seem to be an apostrophe added around the repository name: Looking with a tool like Process Monitor (from sys internals), that were added by the git client. It seems to be a git specific windows problem.I tried the same command line in the prompt of the server: the full error was ""fatal: not a given repository (or any of the parent directories): .git""In conclusion, to me it seems like a software bug. Be advised that I am not a git expert, it is first time I use git, i come from subversion and perforce.I had the same problem as Christer Fernstrom. In my case it was a message I had put in my .bashrc that reminds me do do a backup when I haven't done one in a couple of days.i also encounter that error once in a while, but when it does, it means that my branch is not up-to-date so i have to do git pull origin <current_branch>FYI I got this same error message after I upgraded a CentOS6 container to CentOS7 -- some git operations started failing when building the container, e.g.# git remote show originfatal: protocol error: bad line length character: InvaRunning ssh gave me an error I could search on:# ssh git@bitbucket.orgInvalid clock_id for clock_gettime: 7That led me to https://github.com/wolfcw/libfaketime/issues/63 where I realized I had forgotten I had a LD_PRELOAD=/usr/local/lib/faketime/libfaketime.so.1 in a parent Dockerfile. Commenting that out fixed the error.After loading the SSH private key in Git Extensions, this issue gets resolved."
"In the Target Ref Name, probably you have to add refs/heads:refs/heads/name_of_your_new_branchIn your specific case:refs/heads/workingBranch(at least, it is the way with Bitbucket - egit, the Eclipse plugin for Eclipse)"
"You need to remove existing .lock file and try to push,Linuxrm -f .git/refs/heads/master.lockWindowsdel .git\refs\heads\master.lockIt is because some other git operation might have died ( or even still running in the rare ) in the middle and left a lock file. Once you see that no git related process is running on the server, just to be safe, you can delete the file and try to push again."
"this documentation might help. ie:1) Get out of current repo and make a fresh clone:cd ..git clone https://github.com/danielfpedro/simple-modal.git simple-modal-webpage2) Create a gh-pages branch(without any parents) and remove all content from the working directory and index:cd simple-modal-webpagegit checkout --orphan gh-pagesgit rm -rf . 3) Add content and pushecho ""My GitHub Page"" > index.htmlgit add index.htmlgit commit -a -m ""First pages commit""git push origin gh-pagesAfter your push to the gh-pages branch, your Project Page will be available at danielfpedro.github.io/simple-modal4) Delete the cloned folder(simple-modal-webpage) and pull the branch gh-pages in original repo(simple-modal):cd ..rm -r simple-modal-webpagecd simple-modalgit fetch --allgit checkout -b gh-pages origin/gh-pages   #New git just use --> git checkout gh-pages5) that is it, now you have 1 more branch gh-pages. use it to commit changes for github webpage:git checkout gh-pages<made changes to documentation>git add .git commit -m ""documentation improvements""git push -u origin gh-pagesHave you set up a new ""orphan"" branch in your repository? If not do this from your repository:git checkout --orphan gh-pagesAnd create some content:echo ""Sample"" > index.htmlgit add index.htmlgit commit -a -m ""Sample page""git push origin gh-pagesNow you should see your page (after some minutes)."
"It looks like you want to move the tag. Tags are designed to mark a specific state of your project, like release 1.0. This shouldn't be changed on daily basis. If you want to change (move) a tag anyway, you can do it using the -f (force) switch twice:git tag -f TAG_I_MOVEgit push --tags -fIn your case I would use branches to mark the ""developer bleeding edge""git branch -f DEVEL_BLEEDINGEDGE HEADgit push --tagsHere no ""-f"" switch for push needed, as long as you move your DEVEL_BLEEDINGEDGE branch forward within the same history path."
"You might try changing the URL to use SSH instead of HTTPS. In the root of your repo:git remote set-url origin git@github.com:thestranger/cfinder.gitThis will require that you have a public key registered on your GitHub account.https should be supported, but you need  git 1.7.10+"
"This happens if you initialized a new github repo with README and/or LICENSE filegit remote add origin [//your github url]//pull those changesgit pull origin master//now, push your work to your new repogit push origin masterNow you will be able to push your repository to github. Basically, you have to merge those new initialized files with your work. git pull fetches and merges for you. You can also fetch and merge if that suits you.The error possibly comes because of the different structure of the code that u are committing and that present on GitHub. It creates conflicts which can be solved by git pullMerge conflicts resolving:git pushIf you confirm that your new code is all fine you can use:git push -f origin master.Where -f stands for ""force commit""."
"It's probably because your SSH key has been compromised. Make a new one and add it to your GitHub account.for me I simply had to add configure my git username and email with the following commands:git config --global user.email ""you@example.com""git config --global user.name ""Your Name""git-bash reports fatal: Unable to create '/.git/index.lock': File exists. Deleting index.lock makes the error go away.If you're running windows 7: I was trying to decide the best way to do this securely, but the lazy way is right-click the parent folder -> click the ""properties"" button -> click the ""security"" tab -> click the ""edit"" button - > click the group that starts with ""Users"" - > click the checkbox that says ""full control"" -> click all the OK's to close the dialogs. I realize this might circumvent windows ""security"" features, but it gets the job done.In my case a folder in my directory named as the git-repository on the server caused the failure.on win7 64:git-gui gives a good answer: a previous git has crashed and left a lock file. Manually remove.In my case, this was in .git/ref/heads/branchname.lock.delete, and error 128 goes away. It surprises that tortoisegit doesn't give such an easy explanation.In my case, it was because of the proxy. A proxy was needed in the corporate network and TortoiseGit / Git does not seems to automatically get information from Windows internet settings. Setting up the proxy address solved the issue.For me, I tried to check out a SVN-project with TortoiseGit. It worked fine if I used TortoiseSVN though. (May seem obvious, but newcomers may stumble on this one)I was having this same issue and I resolved it in the following way...I have the NVIDIA ""Tegra Android Development Pack"" installed and it seems to also have a version of mysysgit.exe with it. TortoiseGit automatically found that installation location (instead of the standard git installation) and auto-populated it in the settings menu.To correct this, go to: ""Settings -> General"" and there is a field for the path to mysysgit.exe. Make sure this is pointing to the correct installation.Deleting index.lock worked for meAn quick solution would be to create a new local directory for example c:\git_2014, In this directory rightklick and choose Git Clone"
"Just had this problem too. I did the following to solve it: (assuming you're in project dir)rm -rf .gitgit init git add .git commit -m ""First commit""heroku create --stack cedargit push heroku masterA slightly involved solution to create a new application, but at least it works. Hope that helps!You probably need to add a requirements.txt file. check the python app docsI had a similar issue and in my case was because my apps were outside of my project folder. Heroku expects to have this structure:Procfilerequirements.txtstatic/myproject/  manage.py  app1/  app2/  ..Since Django is a python app, you'll need to have requirements.txt and setup.py sit in the root of your repo and not the src sub-directory. See https://github.com/heroku/heroku-buildpack-python/blob/master/bin/detectrm -rf .gitgit init git add .git commit -m ""First commit""heroku create --stack cedargit push heroku masterThis worked for me as well !My stupid error was to mispell requirements.txt as the erroneous requirments.txt.  I didn't need setup.py.Additionally I need to actually store the git repository in Github.  Just creating it locally wasn't enough.For everyone deleting their Git history to make this work... the only reason that works is because the initial commit in the new repository contains the necessary files for Heroku to recognize your app.I ran into this problem because I added the Procfile and requirements.txt for my app and tried to push to Heroku before actually committing them. So when I pushed to Heroku, I wasn't pushing those files!Making a commit with all the necessary files and then pushing should solve this problem, and is vastly preferable to deleting your entire Git history.Hope this helps!Heroku needs a requirements.txt file, which helps Heroku know what dependencies need to be installed for your Django project. You can use a tool generate your requirements.txt file.Run in command linepip freeze > requirements.txtwhich will create a requirements.txt file with all your installed packages, such as Django, django-registration, etc...This link may be helpful: http://tutorial.djangogirls.org/deploy/README.htmlMy situation is that my codes are needed to save both on Github and Heroku, if I use the following solution, rm -rf .git will delete the connection to my Github, therefore I can't push my codes to Github. rm -rf .gitgit init git add .git commit -m ""First commit""heroku create --stack cedar-14git push heroku masterInstead, my solution is as follows:$ heroku create$ heroku config:add BUILDPACK_URL=git://github.com/heroku/heroku-buildpack-python.git$ git push heroku masterI struggled with this issue for a long time and the only solution was Vincent van Leeuwen's, but I didn't understand why. The problem turned out to be that I was working from a local branch other than master. So when I was running git push heroku masterI was actually pushing (local) master->(heroku) masterand not (local) current_branch -> (heroku) masteras I intended. This failed because my local master branch didn't have requirements.txt, Procfile, etc.The solution is:git push heroku current_branch:masterSee heroku docs for more.Hope this helps."
"Looks like someone committed, pushed, rebased, committed, and then did a force push to rewrite the history.A symptom of Brian Campbell's answer: Git non-fast-forward rejectedI believe what you are running into is that someone rewrote history in the repo.  Not a great situation to be in.  Have you pulled?  You may need to clone a new copy of the repo since your history is no longer in line with the server's history and make your changes again."
"I had the same issue: public repos don't force git to authenticate on the first request, and git doesn't offer authentication (at least as of version 1.7.9) on subsequent requests of the same push.This pull request for GitLab should fix it; tested on GitLab 6.3 but it may apply fine on older versions too (please let me know if it fails along with the version string).https://github.com/gitlabhq/gitlabhq/pull/5760After some debugging I realized that I recently activated ""Public clone access"" on the project. The remote URL is an http:// URL.Error 401 simply means ""access denied"" - so even the account is stored in my system, git tries to push without account information which causes this error."
"May be git is suboptimal tool for handling large amount of big blobs.You can disable multi-threaded compression to save memory: git config pack.threads 1 (in addition to other memory limiting options, like core.bigfilethreshold in newer Git)The following command fixed the issue for me:git config --global pack.windowMemory 256mThis affects effectiveness of delta compression so you might want to try a bigger size first, something like 1g, depending on your hardware and bandwidth.More details here: https://www.kernel.org/pub/software/scm/git/docs/git-pack-objects.htmlgit config --global pack.threads 1I had the same issue with a git clone.  The repo was 25GB.  I used an alternative command, for me it required root control of the source, rsync -avz -e ssh --progress user@computerName:repo/Directory destination/folderafter this I was able to commit and pull just like any other repository."
"I solve my problem like this:vim /home/git/gitlab-shell/hooks/updatechange first line from#!/usr/bin/env rubyTO#!/usr/local/bin/rubyNow my push work fine!Thinks VonCFirst, pushing with an http url means ssh isn't involved at all:Setting GIT_SSH makes no difference.  Setting GIT_CURL_VERBOSE=1 would make a difference in the output of the git push.Second, as illustrated by issue 3373, issue 2285, issue https://github.com/gitlabhq/gitlabhq/issues/3349, ... it is a ruby version issue.I am 99% sure that you have 1.9.3 installed from RVM but you have also system ruby (check /usr/bin/ruby --version).  When you connect trough git@gitlab (ssh) - you are launching shell so rvm is being properly initialized and used and everything works but when you run through HTTP, gitlab is launching gitlab-shell directly and for some reason rvm doesn't work and the system version is used.I solved my problem as Ramazan said above vim /home/git/gitlab-shell/hooks/updatechange first line from!/usr/bin/env rubyTO!/usr/local/bin/ruby"
"I don't know if something's changed in the latest version, but before sbt-release was warning you before this push step, that git sends it's info on stderr and so it will be shown with error messages in sbt although the process goes perfectly fine. So it's ok, don't worry."
"Couple of points to check out:problem of disk space on the pushing side (like ""out of disk space"" in $GIT_DIR or $TMP_DIR ?)right issues (under which account the process is executed ?)Platform-specific issue: on Mac OS, you can have a MacPort configuration problem.difference of version between the git on the pushing side and the one on the remote site (meaning for instance if you try to push submodules on the remote peer, with a git binary which doesn't know about submodule, you could have some trouble like this)Note: Since is an error message associated with the pack_object() function, so check if git pack still works.static void pack_objects(int fd, struct ref *refs){    for (;;) {    	int status, code;    	pid_t waiting = waitpid(pid, &status, 0);    	if (waiting < 0) {    		if (errno == EINTR)    			continue;    		return error(""waitpid failed (%s)"", strerror(errno));    	}    	if ((waiting != pid) || WIFSIGNALED(status) ||    	    !WIFEXITED(status))    		return error(""pack-objects died with strange error"");    	code = WEXITSTATUS(status);    	if (code)    		return -code;    	return 0;    }}Note-bis: there are some recent cases for this error message when pushing to GitHub (late January 2009)Unfortunately, the error messages aren't very helpful. But your problem isn't coming from Git pack; the first error message is from OpenSSH, which was able to reach the remote server but not sign in:Connection to SERVER closed by remote host.This is not a password problem (which has a different error message) but could be a permissions problem (like a group that doesn't have proper permission, which I see occasionally on OSX) or an unrecognized account name (on some systems this reports with password problems) or a timeout.  You might try signing in from the command line:$ ssh username@servernameto discover what kind of problem you are having. You might also try repairing permissions; OS X seems particularly vulnerable to recurring permissions problems and to running from odd groups.Sidenote -- since you're on Leopard, I suggest you install SSHKeychain, which manages SSH identities and will store your SSH passphrases in the system keychain automatically. It won't help your current problem, but might prevent similar problems in the future."
"As mentioned here:The 504 Gateway Timeout error is an HTTP status code that means that one server did not receive a timely response from another server that it was accessing while attempting to load the web page or fill another request by the browser.This usually means that the other server is down or not working properly.And that is coherent with the current GitHub status (22d of Dec.):We are currently experiencing major service outages across all services.So while the cause is quite punctual and specific to the current network issue on GitHub side, you question can help others with a similar error message: 504 means: the upstream server is in trouble."
"Try git fetch so that your local repository gets all the new info from github. It just takes the information about new branches and no actual code. After that the git checkout should work fine.I got this error for a branch that was remote and had no local tracking branch. Even though I'm certain I've checked out remote branches via a simplegit checkout feature/fooin the past, to get around this error I had togit checkout -t -b feature/foo origin/feature/fooI have no idea what I did to get myself into that situation either.I was getting following error when I tried to checkout new brancherror: pathspec 'BRANCH-NAME' did not match any file(s) known to git.When I tried git checkout origin/<BRANCH-NAME> it went to detached HEAD (detached from origin/)Did following to resolve the issuegit remote updategit fetch git checkout --track origin/<BRANCH-NAME>""error: pathspec 'foo' did not match any file(s) known to git.""This happenned to me when the full repo was not fetched.try:$ git fetchGit Windows users beware - without the --icase-pathspecs or GIT_ICASE_PATHSPECS = 1 env var setting, that git pathspecs will be case-sensitive, in which case git checkout origin/FooBranch ""Some/Path/To/File.txt""is not the same as git checkout origin/FooBranch ""some/path/to/file.Txt""I got this when I did the following:Used IntelliJ IDE, connected to gitCreated a new file, and added to gitRenamed the new fileWhen I tried to check in the directory, I got this error.To fix:I opened the repo in git extensions. I saw that the file (with the old name) was staged. But since it didnt exist anymore, it could not be committed.I simply unstaged this file. Then I re-added the file (this time correctly named) into git and committed without errors.If it happens on Windows, it is probably the filename case issue. I had this error today - I've created new file, added to GIT, then I changed one letter in filename from lower to upper and then I couldn't to anything - commit, revert, delete file from repo. The only solution I found was changing the filename again back to exact same case when I added this file to GIT, then doing GIT revert to remove this file from GIT, then changing filename again as I want. After those changes I could commit to repo and then push without any problem.None of these answers solved my issue:Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git log --format=onelineb9cc6a9078312865280fb5432a43e17eff03a5c6 Formatted README288772f36befe6bd60dd41b8185f1e24e0119668 Updated README documentationd2bdbe18f4169358d46fad50eacfb89786df3bf8 Version object v3.0.0-SNAPSHOTa46b1910a3f548b4fa254a6055d25f68d3f217dd VersionFactory is now Platform agnostic24179ae569ec7bd28311389c0a7a85ea7b4f9594 Added internal.Platform abstraction252b684417cf4edd71aed43a15da2c8a59c629a7 Added IPlugin implementation for Spongee3f8d21d6cf61ee4fc806791689c984c149b45e3 Added IPlugin implementation for Bukkitaeb403914310b4b10dee9e980cf64472e2bfda79 Refactored Version.javaef50efcff700c6438d57f70fac30846de2747a7e Refactored TesterFactorya20808065878d4d28657ae362235c837cfa8e625 Added IPlugin abstraction9712a3575a70060d7ecea8b62bb5e888fdc32d07 Heavily refactored Tester02d025788ae740dbfe3ef76a132cea8ca4e47467 Added generic Predicate<T> interface9c565777abea9be6767dfdab4ab94ed1173750dd Minor refactoring of testCompareTo()2ff2a28c221681e256dcff28770782736d3a796a Version object v2.0.1d4b2e2bd830f77cdbc2297112c2e46b6555d4393 Fix compareTo()05fe7e012b07d1a5b8de29804f96d9a6b24229a1 Make compareTo() fail6e85371414357a41c1fc0cec0e75adba92f96832 Fix VersionFactory passing nullc1fd1f032f87d860d5ed9d6f6679c9fa522cff8d Version object v2.062c3a92c008a2ed11f0a4d016080afc3541d0700 Version object v1.2c42e9e617128085e872c51b4d977a04e48d69e8f Deprecated, doc'd, future-proofed getNmNikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 3a796aerror: pathspec '3a796a' did not match any file(s) known to git.I was trying to go back and build the commit for Version object v2.0.1. Luckily, I got the idea to try the whole hash code and it worked ! Which means that I was using the wrong end of the hash code.Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 2ff2aNote: checking out '2ff2a'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example:  git checkout -b new_branch_nameHEAD is now at 2ff2a28... Version object v2.0.1Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version ((2ff2a28...))$As shown above, for partial hash codes, you must supply the front-end, not the back-end.If you deleted a folder and pulled/cloned again your repo, you may need to create your local branch again. Try: git checkout -b yourbranchnameIn my case I had renamed a file changing the case of the file, i.e.   SomeFile.js -> someFile.jsI think that was related to the problem.  Doing a git fetch didn't fix the issue.I moved the files out of my project, did a fetch, and did a push without them.  Then I did a fetch, added them back, and did a push, and it worked.  I don't know if all those steps were needed, but it did ultimately work.in my case I enter submodule directory without doing git submodule init git submodule updateSo git was linked to the parent folder that indeed missed that branch.On Windows OS by default git is instaled with core.ignorecase = trueThis means that git repo files will be case insensitive, to change this you need to execute:\yourLocalRepo> git config core.ignorecase falseyou can find this configuration on .git\config file$ cat .git/refs/heads/feature/user_controlled_site_layouts3af84fcf1508c44013844dcd0998a14e61455034Can you confirm that the following works:$ git show 3af84fcf1508c44013844dcd0998a14e61455034It could be the case that someone has rewritten the history and that this commit no longer exists (for whatever reason really).This can be caused when upstream rewrites history.When this happens, I toss all affected repos, clone them fresh from upstream, and use 'git format-patch' / 'git am' to ferry any work in progress from old world to new.When I have this issue I install a new version of git. If I can't do that from a binary package, I install it from source into my $HOME directory like this:mkdir $HOME/binexport version=1.7.10.3  wget http://git-core.googlecode.com/files/git-$version.tar.gz  tar zxf git-$version.tar.gz  cd git-$version  ./configure --prefix=$HOME  make && make install  echo ""export PATH=$HOME/bin:\$PATH"" >> ~/.bashrc  chmod +x ~/.bashrc      which git      git --versionthe last two lines are to verify.(updated with code from user FractalSpace - thanks!)I had this problem today i was trying to git checkout foo and got error: pathspec 'testing' did not match any file(s) known to git. turns out i was in the wrong repo.. So lesson learned check your repo before freaking out.Happened to me after renaming an uncommitted file in Android Studio.Git seemed to have the old version in its repository, even if it didnå«t exist anymore.fetch, pull, checkout, add all and so on did not help in my case!So I opened the Git GUI of TortoiseGit which showed me the exactly file which caused trouble.Afterwards I deleted the file from the repository withgit rm -r --cached /path/to/affected/fileand the problem was goneI faced a similar issue. What led me into this trouble was:I had multiple remote branches and I deleted the folder that had the code.I did a get pull. : git pull git@git.corp......Then I added remote repository : git remote add upstream git@git.corp.......Then I tried to change branch to some other branch say AAAA and I got errorerror: pathspec 'AAAA' did not match any file(s) known to git.After spending an hour I found a solution.I deleted the source folder again.Then I did a git pull :git pull git@git.corp......Then I changed branch before linking it to remote repository : git checkout AAAthen I added it to remote repositorygit remote add upstream git@git.corp......After this I can easily switch branches.Although this is not a standard way but it worked for me after I tried all of above options.I faced this problem last time, and the thing I have done is remove the folder (or source code) related to that branch.Ex: the branch origin/foo create folder foo at your local, so I just delete it and use git fetch $ checkout to get code back from remote.Or you can do it by create folder at local same as the branch you intended to checkout.Ex: create folder foo at local, after that, use Git command: git branch --set-upstream-to=origin/foo foo, that all. Use git pull to get code."
"If you're trying to use SSH authentication, Github is probably seeing the first ssh key and associating it with the first account, then denying that account access to the second account's repos. I suggest switching one or both of the accounts to http based access.For example, over SSH my repo URL would be: git@github.com:opie4624/repoA.git while the HTTP equivalent would be: https://github.com/opie4624/repoA.git.When pushing or pulling with the HTTP url, git will prompt for the username and password allowing you to specify which of the two Github accounts to use. That also saves you from mucking about with ssh keys.Hope this helps!"
"The commands that were unsuccessful were:git push master finalgit push finalgit push masterAn first push, if you have a remote named 'final', should begit push final master(in order to establish a link to the upstream repo new created branch 'master')So you either have to push to an exisiting remote, like git push devhub masterOr add a remote named final:git remote add final /an/existing/pathMake sure those path are without typo: they must point to a path!that exists (case sensitive path)that is accessible (check if you have read/write access)"
"The remote may not be set up correctly. If I were you, I would just go and do that from the command line.See if your remote is setup for pushing:git remote show originYou should see whether the branch is set up for that. If you get an error at this point, you have to check that your ssh keys are setup correctly. Whichever site you are using to push to, there are instructions in the support section on how to do that.If it is, test it with:git push origin masterLet us know how it goes.Hope this helps.An old question I know, but I just had this problem.You need to use the SSH remote url, not the HTTP one:"
"git push doesn't push all of your local branches: how would it know which remote branches to push them to?  It only pushes local branches which have been configured to push to a particular remote branch.On my version of git (1.6.5.3), when I run git remote show origin it actually prints out which branches are configured for push:Local refs configured for 'git push':  master pushes to master (up to date)  quux   pushes to quux   (fast forwardable)Q. But I could push to master without worrying about all this!When you git clone, by default it sets up your local master branch to push to the remote's master branch (locally referred to as origin/master), so if you only commit on master, then a simple git push will always push your changes back.However, from the output snippet you posted, you're on a branch called develop, which I'm guessing hasn't been set up to push to anything.  So git push without arguments won't push commits on that branch.When it says ""Everything up-to-date"", it means ""all the branches you've told me how to push are up to date"".Q. So how can I push my commits?If what you want to do is put your changes from develop into origin/master, then you should probably merge them into your local master then push that:git checkout mastergit merge developgit push             # will push 'master'If what you want is to create a develop branch on the remote, separate from master, then supply arguments to git push:git push origin developThat will: create a new branch on the remote called develop; and bring that branch up to date with your local develop branch; and set develop to push to origin/develop so that in future, git push without arguments will push develop automatically.If you want to push your local develop to a remote branch called something other than develop, then you can say:git push origin develop:something-elseHowever, that form won't set up develop to always push to origin/something-else in future; it's a one-shot operation.Try:git push --all originThis happened to me when my Sourcetree app crashed during staging. And on the command line, it seemed like the previous git add had been corrupted. If this is the case, try:git initgit add -Agit commit -m 'new horizons'git pushOr the last command, you might need to set the branch.git push --all origin masterBear in mind that this is enough if you haven't done any branching or any of that sort. In that case, make sure you push to the correct branch like git push origin developRight now, it appears as you are on the develop branch. Do you have a develop branch on your origin? If not, try git push origin develop. git push will work once it knows about a develop branch on your origin.As further reading, I'd have a look at the git-push man pages, in particular, the examples section.Also make sure your pushing to the correct branch."
"It seems that you're not sending the right public key to Heroku to verify your identity.You can try running git push heroku master with the --verbose option and see which publickey is really sent.Tryheroku keys:addin your app directory"
"Even if it is about a different context (git+ssh), check the ACL associated with your repo.See for instance this blog post.As suggested in the SO question ""Git pull error: unable to create temporary sha1 filename"" (which has other interesting suggestions as well), try redoing your bare repo, this time with the config:git config core.sharedRepository true"
"On the server I ran sudo chown -R git:git /srv/git/ - this fixed my problem but I am wondering if this was the correct thing to do?Absolutely. The problem previously was that the git user, who you're logging in as via SSH, could not write to the repository.Depending on your needs, you may consider different combinations of users and SSH keys, or one of the many additional programs (gitolite etc) that can be used to more finely control access.First, fix file permissions in your remote .git dir e.g.sudo chmod -R ug+w /var/www/.gitsudo chown -R git:git /var/www/.gitor root:root if you want to assign members of root group for push access.Then git repository on the destination host needs to be set as shared, so the following command on remote needs to be run: git config core.sharedRepository group"
"After having this problem myself i found a working solution for me.Error message:     ssh -v git@github.com    OpenSSH_5.8p1, OpenSSL 1.0.0d 8 Feb 2011    debug1: Connecting to github.com [207.97.227.239] port 22.    debug1: connect to address 207.97.227.239 port 22: Connection timed out    ssh: connect to host github.com port 22: Connection timed out    ssh: connect to host github.com port 22: Bad file numberYou will only see the bad file number message when on windows using the MINGGW shell. Linux users will just get Timed out.Problem:SSH is probably blocked on port 22. You can see this by typing    $nmap -sS github.com -p 22    Starting Nmap 5.35DC1 ( http://nmap.org ) at 2011-11-05 10:53 CET    Nmap scan report for github.com (207.97.227.239)    Host is up (0.10s latency).    PORT   STATE    SERVICE    22/tcp ***filtered*** ssh    Nmap done: 1 IP address (1 host up) scanned in 2.63 secondsAs you can see the state is Filtered, which means something is blocking it.You can solve this by performing an SSH to port 443 (your firewall / isp wont block this).Whats also important that you need to ssh to ""ssh.github.com"" instead of github.com.Else you will report to the webserver instead of ssh server.Below all the steps needed to solve this problem.Solution:(First of all make sure you generated your keys like explained on http://help.github.com/win-set-up-git/)create file ~/.ssh/config (ssh config file located in your user directory. On windows probably C:\Users\USERNAME\.ssh\configPaste the following code in it:    Host github.com    User git    Hostname ssh.github.com    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa    Port 443Save the file.Perform ssh like usual:$ssh -T github.com     $Enter passphrase for key '.......... (you can smile now :))Note that i dont have to supply the username nor port number.The key information is written in @Sam's answer but not really salient, so let's make it clear. ""Bad file number"" is not informative, it's only a sign of running git's ssh on Windows.The line which appears even without -v switch:ssh: connect to host (some host or IP address) port 22: Bad file numberis actually irrelevant.If you focus on it you'll waste your time as it is not a hint about what the actual problem is, just an effect of running git's ssh on Windows.  It's not even a sign that the git or ssh install or configuration is wrong.  Really, ignore it.The very same command on Linux produced instead this message for me, which gave an actual hint about the problem:ssh: connect to host (some host or IP address) port 22: Connection timed outActual solution: ignore ""bad file number"" and get more informationFocus on lines being added with -v on command line. In my case it was:debug1: connect to address (some host or IP address) port 22: Attempt to connect timed out without establishing a connectionMy problem was a typo in the IP address, but yours may be different.Is this question about ""bad file number"", or about the many reasons why a connection could time out ?If someone can prove that ""bad file number"" only appears when the actual reason is ""connection time out"" then it makes some sense to address why connection could time out.Until that, ""bad file number"" is only a generic error message and this question is fully answered by saying ""ignore it and look for other error messages"".  EDIT: Qwertie mentioned that the error message is indeed generic, as it can happen on ""Connection refused"" also. This confirms the analysis.Please don't clutter this question with general hints and answer, they have nothing to do with the actual topic (and title) of this question which is ""Git SSH error: ‰ÛÏConnect to host: Bad file number‰Ûù"". If using -v you have more informative message that deserve their own question, then open another question, then you can make a link to it.This worked for me:ssh -v git@github.com -p 443What I found is that, this happens when your connection is poor.I had it a few minutes ago when pushing to my repo, it kept failing and a while after that, the connection went down.After it came back up, the push immediately went through.I believe it can be caused by either a drop in connection from either your side or theirs.You can also try to:telnet example.com 22to see if you have connectivity to the server. I saw this message and it ended up being the VPN I was on was blocking access. Disconnected from the VPN and I was good to go.Try to quit the git bash instance through which you made the setup and try reopening. It eventually worked for me.Maybe your firewall or a blocker application (PeerBlock etc.) is blocking your portI just had the same problem and tried every solution that I could find, but none worked. Eventually, I tried quitting Git Bash and re-opening it, and everything worked perfectly.So, try quitting Git Bash and re-opening it.If SSH is blocked over 22just update your origin to https git remote set-url origin https://github.com/ACCOUNT_NAME/REPO_NAME.gitverify that changes were madegit remote -vOn windows I tried to do quit git bash and re-run but didn't work, finally me(frustated) did a restart and it worked the next time :)Double check that you have published your public keys through your GitHub Administration interface.Then make sure port 22 isn't somehow blocked (as illustrated in this question)"
I just fixed my problem with update the git version to the newest(2.1.2)
"You need to have common ancestor before pushing, the easiest way is to do git pull (or git pull --rebase if you want to avoid merge commit and rebase is not an issue for you).The solution to your problem is:""Commit"" the changes so that these are committed to your local repository.Then ""Pull"" the code from github/git serverThen ""Push"" the code to github/git server and you will not face any issue.Read more under heading ""Pushing a Branch"" in the following url:Dealing with ""non-fast forward rejects""Hope it helps.ThanksI had this exact problem, it was due to the following:A local branch in my machine (with different origin) that was not updated (and had been modified by another user). You must move to the branch that has not been updated (git checkout [branch in question]) and do a git pull. That solved my problem. In this particular case, due to this message""! [rejected]        master -> master (non-fast-forward)!""You must move to the master branch (git checkout master) do a git pull, then move back to whatever branch you are working on (git checkout whateverBranch) and now you should be able to do a push without problems. I'm not positive on why this happens; it may be that the nature of git push is to check all local branches that are not properly updated when doing a push."
"You are probably not fetching with the prune option enabled. Use: git fetch --prune.Use:git remote prune originto drop references that are already removed remotely.  Or:git fetch -p originwhich does the same thing, or:git remote update --prune(I'm not really sure why there are so many ways to do this)."
"You've got the syntax for the scp-style way of specifying a repository slightly wrong - it has to be:[user@]host.xz:path/to/repo.git/... as you can see in the git clone documentation.  You should use instead the URL:git@skarp.beanstalkapp.com:/gittest.giti.e. in the URL you're using, you missed out the : (colon)To update the URL for origin you could do:git remote set-url origin git@skarp.beanstalkapp.com:/gittest.gitThis is typically because you have not set the origin alias on your Git repository.Trygit remote add origin URL_TO_YOUR_REPOThis will add an alias in your .git/config file for the remote clone/push/pull site URL. This URL can be found on your repository Overview page.I met a similar problem when I tried to store my existing repo in my Ubunt One account, I fixed it by the following steps:Step-1: create remote repo$ cd ~/Ubuntu\ One/$ mkdir <project-name>$ cd <project-name>$ mkdir .git$ cd .git$ git --bare initStep-2: add the remote $ git remote add origin /home/<linux-user-name>/Ubuntu\ One/<project-name>/.gitStep-3: push the exising git reop to the remote$ git push -u origin --all"
"Here is what helped, the following command increases git buffer to 500mb:git config http.postBuffer 524288000"
"The actual reason is that, in a new repo (git init), there is no branch (no master, no branch at all, zero branches)So when you are pushing for the first time to an empty upstream repo (generally a bare one), that upstream repo has no branch of the same name.And:the default push policy was 'matching' (push all the branches of the same name, creating them if they don't exist), the default push policy is now 'simple' (push only the current branch, and only if it has a similarly named remote tracking branch on upstream, since git 1.7.11)In both cases, since the upstream empty repo has no branch:there is no matching named branch yetthere is no upstream branch at all (with or without the same name! Tracking or not)That means your local first push has no idea:where to push what to push (since it cannot find any upstream branch being either recorded as a remote tracking branch, and/or having the same name)So you need at least to do a:git push origin masterBut if you do only that, you:will create an upstream master branch on the upstream (now non-empty repo): good.won't record that the local branch 'master' needs to be pushed to upstream (origin) 'master' (upstream branch): bad.That is why it is recommended, for the first push, to do a:git push -u origin masterThat will record origin/master as a remote tracking branch, and will enable the next push to automatically push master to origin/master.git checkout mastergit pushAnd that will work too with push policies 'current' or 'upstream'.In each case, after the initial git push -u origin master, a simple git push will be enough to continue pushing master to the right upstream branch.Output of git push when pushing a new branch> git checkout -b new_branchSwitched to a new branch 'new_branch'> git pushfatal: The current branch new_branch has no upstream branch.To push the current branch and set the remote as upstream, use    git push --set-upstream origin new_branchA simple git push assumes that there already exists a remote branch that the current local branch is tracking. If no such remote branch exists, and you want to create it, you must specify that using the -u (short form of --set-upstream) flag.Why this is so? I guess the implementers felt that creating a branch on the remote is such a major action that it should be hard to do it by mistake. git push is something you do all the time.""Isn't a branch a new change to be pushed by default?"" I would say that ""a change"" in Git is a commit. A branch is a pointer to a commit. To me it makes more sense to think of a push as something that pushes commits over to the other repositories. Which commits are pushed is determined by what branch you are on and the tracking relationship of that branch to branches on the remote.You can read more about tracking branches in the Remote Branches chapter of the Pro Git book.You don't, see belowI find this 'feature' rather annoying. If you want it to implicitly push for the current branch regaurdless of if that branch exists on origin just issue this command once and you will never have to again anywhere:git config --global push.default currentSo if you make branches like this:git checkout -b my-new-branchand then make some commits and then do agit pushto get them out to origin (being on that branch) and it will create said branch for you if it doesn't existI couldn't find a rationale by the original developers this quickly, but I can give you an educated guess based on a few years of Git experience.No, not every branch is something you want to push to the outside world. It might represent a private experiment.Moreover, where should git push send all the branches? Git can work with multiple remotes and you may want to have different sets of branches on each. E.g. a central project GitHub repo may have release branches; a GitHub fork may have topic branches for review; and a local Git server may have branches containing local configuration. If git push would push all branches to the remote that the current branch tracks, this kind of scheme would be easy to screw up."
"Repair PermissionsAfter you have identified and fixed the underlying cause (see below), you'll want to repair the permissions:cd /path/to/repo.gitchgrp -R groupname .chmod -R g+rwX .find . -type d -exec chmod g+s '{}' +If you do not fix the underlying cause, the error will keep coming back and you'll have to keep re-running the above commands over and over again.Underlying CausesThe error could be caused by one of the following:The repository isn't configured to be a shared repository (see core.sharedRepository in git help config).  If the output of:git config core.sharedRepositoryis not group or true or 1 or some mask, try running:git config core.sharedRepository groupand then re-run the recursive chmod and chgrp (see ""Repair Permissions"" above).The operating system doesn't interpret a setgid bit on directories as ""all new files and subdirectories should inherit the group owner"".When core.sharedRepository is true or group, Git relies on a feature of GNU operating systems (e.g., every Linux distribution) to ensure that newly created subdirectories are owned by the correct group (the group that all of the repository's users are in).  This feature is documented in the GNU coreutils documentation:... [If] a directory's set-group-ID bit is set, newly created subfiles inherit the same group as the directory, and newly created subdirectories inherit the set-group-ID bit of the parent directory. ... [This mechanism lets] users share files more easily, by lessening the need to use chmod or chown to share new files.However, not all operating systems have this feature (NetBSD is one example).  For those operating systems, you should make sure that all of your Git users have the same default group.  Alternatively, you can make the repository world-writable by running git config core.sharedRepository world (but be careful‰ÛÓthis is less secure).The file system doesn't support the setgid bit (e.g., FAT).  ext2, ext3, ext4 all support the setgid bit.  As far as I know, the file systems that don't support the setgid bit also don't support the concept of group ownership so all files and directories will be owned by the same group anyway (which group is a mount option).  In this case, make sure all Git users are in the group that owns all the files in the file system.Not all of the Git users are in the same group that owns the repository directories.  Make sure the group owner on the directories is correct and that all users are in that group.For Ubuntu (or any Linux)From project root,cd .git/objectsls -alsudo chown -R yourname:yourgroup *You can tell what yourname and yourgroup should be by looking at the permissions on the majority of the output from that ls -al commandNote: remember the star at the end of the sudo lineA good way to debug this is the next time it happens, SSH into the remote repo, cd into the objects folder and do an ls -al.If you see 2-3 files with different user:group ownership than this is the problem.It's happened to me in the past with some legacy scripts access our git repo and usually means a different (unix) user pushed / modified files last and your user doesn't have permissions to overwrite those files. You should create a shared git group that all git-enabled users are in and then recursively chgrp the objects folder and it's contents so that it's group ownership is the shared git group. You should also add a sticky bit on the folder so that all the files created in the folder will always have the group of git.chmod g+s directory-nameUpdate: I didn't know about core.sharedRepository. Good to know, though it probably just does the above.I just wanted to add my solution. I had a repo on OS X that had ownership of root on some directories and Home (which is my user directory) on others which caused the same error listed above.The solution was simple thankfully. From terminal:sudo chown -R Home projectdirectoryThis can easily happen if you ran git init with a different user from the one you are planning to use when pushing changes.If you blindly follow the instructions on [1] this will happen as you probably created the git-user as root and then immediately moved on to git init without changing user in between.[1] http://git-scm.com/book/en/Git-on-the-Server-Setting-Up-the-ServerSolved for me...just this:sudo chmod 777 -R .git/objectssudo chmod -R ug+w .;This has fixed the issue for me. Basically .git/objects file does not had a write permission, the above line grants permission to all the files and folders in the directory.After you add some stuff... commit them and after all finished push it! BANG!! Start all problems... As you should notice there are some differences in the way both new and existent projects were defined. If some other person tries to add/commit/push same files, or content (git keep both as same objects), we will face the following error:$ git pushCounting objects: 31, done.Delta compression using up to 2 threads.Compressing objects: 100% (17/17), done.Writing objects: 100% (21/21), 2.07 KiB | 0 bytes/s, done.Total 21 (delta 12), reused 0 (delta 0)remote: error: insufficient permission for adding an object to repository database ./objects  remote: fatal: failed to write objectTo solve this problem you have to have something in mind operational system's permissions system as you are restricted by it in this case. Tu understand better the problem, go ahead and check your git object's folder (.git/objects). You will probably see something like that:<your user_name>@<the machine name> objects]$ ls -latotal 200drwxr-xr-x 25 <your user_name> <group_name> 2048 Feb 10 09:28 .drwxr-xr-x  3 <his user_name> <group_name> 1024 Feb  3 15:06 ..drwxr-xr-x  2 <his user_name> <group_name> 1024 Jan 31 13:39 02drwxr-xr-x  2 <his user_name> <group_name> 1024 Feb  3 13:24 08*Note that those file's permissions were granted only for your users, no one will never can changed it... *Level       u   g   oPermission rwx r-x ---Binary     111 101 000Octal       7   5   0SOLVING THE PROBLEMIf you have super user permission, you can go forward and change all permissions by yourself using the step two, in any-other case you will need to ask all users with objects created with their users, use the following command to know who they are:$ ls -la | awk '{print $3}' | sort -u <your user_name><his user_name>Now you and all file's owner users will have to change those files permission, doing:$ chmod -R 774 .After that you will need to add a new property that is equivalent to --shared=group done for the new repository, according to the documentation, this make the repository group-writable, do it executing:$ git config core.sharedRepository grouphttps://coderwall.com/p/8b3ksgFor my case none of the suggestions worked. I'm on Windows and this worked for me:Copy the remote repo into another folderShare the folder and give appropriate permissions.Make sure you can access the folder from your local machine. Add this repo as another remote repo in your local repo. (git remote add foo //SERVERNAME/path/to/copied/git)Push to foo. git push foo master. Did it worked? Great! Now delete not-working repo and rename this into whatever it was before. Make sure permissions and share property remains the same."
"It appears that git created files in .git/objects for the new commit, but didn't successfully write to them. I solved it by deleting them one at a time and re-running git fsck --full to find the next one. I started with the one originally reported by git fsck:% rm -f .git/objects/43/46883490a0990e68db0187241abc1642765a73% git fsck --fullChecking object directories: 100% (256/256), done.error: inflate: data stream error (incorrect header check)error: unable to unpack 86e7247af5865e857a3b61eed99986e2d9538df1 headererror: inflate: data stream error (incorrect header check)fatal: loose object 86e7247af5865e857a3b61eed99986e2d9538df1 (stored in .git/objects/86/e7247af5865e857a3b61eed99986e2d9538df1) is corrupt% rm -f .git/objects/86/e7247af5865e857a3b61eed99986e2d9538df1% git fsck --fullChecking object directories: 100% (256/256), done.error: inflate: data stream error (incorrect header check)error: unable to unpack a94406345ac44982b00cf57b4b9660a35436637f headererror: inflate: data stream error (incorrect header check)fatal: loose object a94406345ac44982b00cf57b4b9660a35436637f (stored in .git/objects/a9/4406345ac44982b00cf57b4b9660a35436637f) is corruptAnd so on. I deleted five objects before git fsck came up clean, corresponding (as I suppose) to the five files in the commit I was trying to make. I guess that the file history was not corrupted at all.Incidentally, I thought of another method that seems to work as well. git clone copies the bad objects, but git push does not. After backing up, I created a new empty repository (--bare, because otherwise you can't push to master), then unstaged my changes and pushed both branches into the new repository. Then it was just a matter of checking it out again and restoring the latest changes from my backups.Still interested if anyone cares to shed light on the failure mechanism here. Thanks jkyako for the help.Simple answer to this question for anyone facing this problem: the git clone command is the fix, if have a remote repo then clone it to the local folder (after deleting the corrupted local repo), in case you dont have remote repo then try to push the corrupt repo to github and then clone it from there, I think that corrupted objects wont be pushed and it will fix the problem"
"Happened to me too, it was the comma i missed in the .json file. I got the same error - expected separator.You probably didn't put that comma in line 13 right away, and you commited  },Commit again and then push to herokuI just got the same exact error. In my case the problem was in the package.json file because I missed the comma after I manually added ""engines"" to it:{    ""engines"": {        ""node"": ""0.10.x""    },  <-- missed this comma here    ""name"": ""heroku"",...What's occurred is you've committed your code to git with an error a missing colon/comma. You need to git commit -a before running git push heroku master in order to get your fix into the code being pushed to heroku."
"You can't push after rebasing. The commits now have different SHA1s as their history is different. If the updated ref does not contain the old ref in it's ancestry, it's a potentially harmful operation and git won't allow it.Your only alternate is to merge if you don't want to force.Forcing is not so bad if you are working alone and don't need to have others committing to this branch.A short answer to your question: you can do the reverse by rebasing master against featureA (but don't push yet), and reset featureA to that point. This is actually cherry picking the commits from master onto featureA, the downside is that you will end up with duplicate commits on two branches. It will solve your immediate problem (if that's your intention) but in the long run you should not be rebasing commits that have already been pushed to a remote branch. The best solution in your scenario is actually to merge."
"The remote repo is not empty; it contains a README that you probably created through the GitHub web interface. You have to pull it before you can push to it:git pull --rebase origin mastergit push(The --rebase is not strictly necessary but avoids an ugly merge commit.)"
"Instead of adding a new remote, try to change the existing one with the following command:git remote set-url origin git@github.com:<username>/demo_app.gitEdit: so, here are the commands to make it work without losing your code.rm -rf .gitgit init .git remote add origin git@github.com:<username>/demo_app.gitgit commit --allow-empty -m 'First commit'git push origin masterIf you got here because you're on a proxyTry:ssh -T -p 443 git@ssh.github.comIf that works then you can add settings to your ~/.ssh/config to always connect through 443:Host github.com  Hostname ssh.github.com  Port 443 More info here:https://help.github.com/articles/using-ssh-over-the-https-port/"
"Old question, but for future reference:Make sure you did setup a push remote. It worked for me when I got both the Cannot get remote repository refs-problems (""... Passphrase for..."" and ""Auth fail"" in the ""Push..."" dialog).Provided that you already:Setup your SSH keys with Github (Window > Preferences > General > Network Connections > SSH2)Setup your local repository (you can follow this guide for that) Created a Github repository (same guide)... here's how you do it:Go to the Git Repositories view (Window > Show View > Other > Git Repositories)Expand your Repository and right click Remotes --> ""Create Remote""""Remote Name"": origin, ""Configure push"": checked --> click ""OK""Click the ""Change..."" buttonPaste your git URI and select protocol ssh --> click ""Finish""Now, click ""Save and Push"" and NOW you should get a password prompt --> enter the public key passphrase here (provided that you DID (and you should) setup a passphrase to your public key) --> click ""OK""Now you should get a confirmation window saying ""Pushed to YourRepository - origin"" --> click ""OK""Push to upstream, but this time use ""Configured remote repository"" as your Destination Git repositoryGo get yourself a well earned cup of coffee!Check my solution from this related question:Auth problem with Egit and GithubBriefly: set GIT_SSH environment variable with a path to the system ssh executable before launching Eclipse. Far from nice but works.For Ubuntu:> export GIT_SSH=/usr/bin/ssh> eclipseI finally fixed this on my platform (mainly was a key issue but also critical not to have a leading slash before the repo path in the dialog pictured above). You can see more details in my post here, if you like:http://www.eclipse.org/forums/index.php?t=msg&goto=648905&S=9bcfa96ab726d744d41a19c7fb02d723#msg_648905Good luck!MelissaDO not forget to add .git to the repository name in the URI : fieldfor example if ur username is Decoderx and git repository name is fooURI :https://github.com/Decoderx/foo.gitand not ""https://github.com/Decoderx/foo""  this solved this problem for me."
"To permanently accept a specific certificate, try http.sslCAPath or http.sslCAInfo. Adam Spiers's answer gives some great examples. This is the most secure solution to the question.To disable TLS/SSL verification for a single git command, try passing -c to git with the proper config variable, or use Flow's answer:git -c http.sslVerify=false clone https://domain.com/path/to/gitTo disable SSL verification for that singular repository, assuming it's completely under your control, you can try:git config http.sslVerify falseDisabling TLS(/SSL) certificate verification globally is a terribly insecure practice. Don't do it. Do not issue the above command with a --global modifier.There are quite a few  SSL configuration options in git. From the man page of git config:http.sslVerify    Whether to verify the SSL certificate when fetching or pushing over HTTPS.    Can be overridden by the GIT_SSL_NO_VERIFY environment variable.http.sslCAInfo    File containing the certificates to verify the peer with when fetching or pushing    over HTTPS. Can be overridden by the GIT_SSL_CAINFO environment variable.http.sslCAPath    Path containing files with the CA certificates to verify the peer with when    fetching or pushing over HTTPS.    Can be overridden by the GIT_SSL_CAPATH environment variable.A few other useful SSL configuration options:http.sslCert    File containing the SSL certificate when fetching or pushing over HTTPS.    Can be overridden by the GIT_SSL_CERT environment variable.http.sslKey    File containing the SSL private key when fetching or pushing over HTTPS.    Can be overridden by the GIT_SSL_KEY environment variable.http.sslCertPasswordProtected    Enable git's password prompt for the SSL certificate. Otherwise OpenSSL will    prompt the user, possibly many times, if the certificate or private key is encrypted.    Can be overridden by the GIT_SSL_CERT_PASSWORD_PROTECTED environment variable.You can set GIT_SSL_NO_VERIFY to true:GIT_SSL_NO_VERIFY=true git clone https://domain.com/path/to/gitNote that if you don't verify SSL/TLS certificates, then you are susceptible to MitM attacks.I'm not a huge fan of the existing answers, because disabling security checks should be a last resort, not the first solution offered.  Even though you cannot trust self-signed certificates on first receipt without some additional method of verification, using the certificate for subsequent git operations at least makes life a lot harder for attacks which only occur after you have downloaded the certificate.  In other words, if the certificate you downloaded is genuine, then you're good from that point onwards.  In contrast, if you simply disable verification then you are wide open to any kind of man-in-the-middle attack at any point.To give a specific example: the famous repo.or.cz repository provides a self-signed certificate.  I can download that file, place it somewhere like /etc/ssl/certs, and then do:# Initial cloneGIT_SSL_CAINFO=/etc/ssl/certs/rorcz_root_cert.pem \    git clone https://repo.or.cz/org-mode.git# Ensure all future interactions with origin remote also workcd org-modegit config http.sslCAInfo /etc/ssl/certs/rorcz_root_cert.pemNote that using local git config here (i.e. without --global) means that this self-signed certificate is only trusted for this particular repository, which is nice.  It's also nicer than using GIT_SSL_CAPATH since it eliminates the risk of git doing the verification via a different Certificate Authority which could potentially be compromised.I keep coming across this problem, so have written a script to download the self signed certificate from the server and install it to ~/.gitcerts, then update git-config to point to these certificates.  It is stored in global config, so you only need to run it once per remote.https://github.com/iwonbigbro/tools/blob/master/bin/git-remote-install-cert.sh"
"Try to add this to your config file in the bare repository:[http]       receivepack = trueJust for the record, because this comes up high on google when searching ""git-http-push failed return code 22"":With https git and htpasswd on the server, it seems that the user name sent includes the domain: user@domain.tld, but the expected name is only user.The solution for me was to add this in ~/.netrc :machine host.domain.tldlogin the_user_namepassword the_password/repo/.ssh/authorized_keys won't mean anything to your ssh daemon on your server: sshd will look for that file under the home of the user making the ssh query: /home/user/.ssh/authorized_keyPlus, if you are using https://... urls, you won't use ssh at all anyway. For an ssh url to work, you would need an Apache server properly configure to call the git-http-backend script.See for instance this git-http-backend question."
"The only ""pipe closed"" error on Egit is mentioned in bug 314107 and isn't related to your case.The only suspicious element in your scenario is the address of your remote repo.With the file protocol, I would specify:file:///192.168.100.28/Git/repo.gitAs the OP Abhay comments, the destination folder was write protected, which was enough to trigger that error message.This issue is not specific to Egit. It occurs when git cannot write to the destination folder on the remote system. This could be, as noted in another answer, that the folder did not have the correct permissions. It could also be for other reasons, such as in my case where the file system had reached full capacity."
"Make sure that your rails app is in the root of the repo, the Gemfile is present and properly named. It is basically not able to detect your code base as one of the supported project types and hence failing it. Also, even if your do have a proper project, make sure it is part of the repo and your have committed it fine (git status will help you here and a ls should help you verify the project structure)You might also want to check for Heroku telling you there's a typo in your CSS file. Read through the long boring messages in the terminal closely after you push. There may be something like this: Invalid CSS after. It means Heroku has found a typo and you need to fix it in the CSS file.You can do a find for rake aborted! and directly after that it should say why the push failed.If you run $ heroku logs you may get a ""hint"" to what the problem is. For me, Heroku could not detect what type of app I was creating. It required me to set the buildpack. Since I was creating a Node.js app, I just had to run $ heroku buildpacks:set https://github.com/heroku/heroku-buildpack-nodejs. You can read more about it here: https://devcenter.heroku.com/articles/buildpacks. No pushing issues after that.I know this is an old question, but still posting this here incase someone else gets stuck.The package setuptools/distribute is listed in requirements.txt.Please remove the same."
"As the error message indicates, there is already a remote configured with the same name. So you can either add the new remote with a different name or update the existing one if you don't need it:To add a new remote, called for example github instead of origin (which obviously already exists in your system), do the following:$ git remote add github git@github.com:ppreyer/first_app.gitRemember though, everywhere in the tutorial you see ""origin"" you should replace it with ""github"". For example $ git push origin master should now be $ git push github master.However, if you want to see what that origin which already exists is, you can do a $ git remote -v. If you think this is there by some error, you can update it like so:$ git remote set-url origin git@github.com:ppreyer/first_app.gitIn Short,git remote rm origingit remote add origin git@github.com:username/myapp.gitWorked !Cheers!For those of you running into the ever so common error ""fatal: remote origin already exists."", or when trying to remove origin and you get ""error: could not remove config section remote.origin"", what you need to do is to set the origin manually. Window's POSH~Git for Windows PowerShell (and GitHub for Windows' app) has a problem with this.I ran into this, like I do so often, again when setting up my octopress.  So, here's how I got it working. First, check your remotes:C:\gd\code\octopress [source +2 ~3 -0 !]> git remote -voctopress       https://github.com/imathis/octopress.git (fetch)octopress       https://github.com/imathis/octopress.git (push)originYou'll first note that my origin has no url.  Any attempt to remove it, rename it, etc all fails.So, change the url manually:git remote set-url --add origin https://github.com/eduncan911/eduncan911.github.io.gitThen you can confirm it worked by running git remote -v again:C:\gd\code\octopress [source +2 ~3 -0 !]> git remote -voctopress       https://github.com/imathis/octopress.git (fetch)octopress       https://github.com/imathis/octopress.git (push)origin  https://github.com/eduncan911/eduncan911.github.io.git (fetch)origin  https://github.com/eduncan911/eduncan911.github.io.git (push)This has fixed dozens of git repos I've had issues with, GitHub, BitBucket GitLab, etc.You can see what remote repositories you are configured to connect to viagit remote -vThat will return a list in this format:origin  git@github.com:github/git-reference.git (fetch)origin  git@github.com:github/git-reference.git (push)That might help you figure out what the original 'origin' pointed to.If you want to keep the remote connection that you see with the -v, but still want to follow the Rails tutorial without having to remember 'github' (or some other name) for your tutorial's repo, you can rename your other repository with the command:git remote rename [current name] [new name]as in:git remote rename origin oldrepoYou should then be able to resume your tutorial.If you need to check which remote repos you have connected with your local repos, theres a cmd:git remote -vNow if you want to remove the remote repo (say, origin) then what you can do is:git remote rm originFirst do a:git remote rm originthen git remote add origin https://github.com/your_user/your_app.gitand voila! Worked for me!That error message indicates that you already have a remote in your git directory.If you are satisfied with that remote, your can push your code. If not or if you can't push just:git remote remove origingit remote add origin git@github.com:ppreyer/first_app.gitVoilÌÊ !"
"What does$ git config --get-regexp '^(remote|branch)\.'returns (executed within your git repository) ?Origin is just a default naming convention for referring to a remote Git repository.If it does not refer to GitHub (but rather a path to your teammate repository, path which may no longer be valid or available), just add another origin, like in this Bloggitation entry$ git remote add origin2 git@github.com:myLogin/myProject.git$ git push origin2 master(I would actually use the name 'github' rather than 'origin' or 'origin2')Permission denied (publickey).  fatal: The remote end hung up unexpectedly   Check if your gitHub identity is correctly declared in your local Git repository, as mentioned in the GitHub Help guide. (both user.name and github.name -- and github.token) Then, stonean blog suggests (as does Marcio Garcia):$ cd ~/.ssh$ ssh-add id_rsaAral Balkan adds: create a config fileThe solution was to create a config file under ~/.ssh/ as outlined at the bottom of the OS X section of this page.Here's the file I added, as per the instructions on the page, and my pushes started working again:Host github.comUser gitPort 22Hostname github.comIdentityFile ~/.ssh/id_rsaTCPKeepAlive yesIdentitiesOnly yesYou can also post the result ofssh -v git@github.comto have more information as to why GitHub ssh connection rejects you.Check also you did enter correctly your public key (it needs to end with '==').Do not paste your private key, but your public one.  A public key would look something like:ssh-rsa AAAAB3<big string here>== tek...@gmail.com (Note: did you use a passphrase for your ssh keys ? It would be easier without a passphrase)Check also the url used when pushing (git@github.com/..., not git://github.com/...)Check that you do have a SSH Agent to use and cache your key.Try this: $ ssh -i path/to/public/key git@github.comIf that works, then it means your key is not being sent to GitHub by your ssh client.This is a problem with your remote. When you do git push origin master, origin is the remote and master is the branch you're pushing.When you do this:git remoteI bet the list does not include origin. To re-add the origin remote: git remote add origin git@github.com:your_github_username/your_github_app.gitOr, if it exists but is formatted incorrectly:git remote rm origingit remote add origin git@github.com:your_github_username/your_github_app.gitVonC's answer is best, but the part that worked for me was super simple and is kind of buried among a lot of other possible answers. If you are like me, you ran into this issue while running a ""getting started with rails"" tutorial and you had NOT setup your public/private SSH keys. If so, try this: $>cd ~/.ssh$>lsIf the output of ls is known_hosts and nothing else, visit: http://help.github.com/mac-key-setup/ and start following the instructions from the ""Generating a key"" section and down. After running those instructions, my ""git push origin master"" command worked.I have the same problem and i think the firewall is blocking the git protocol. So in the end I have to resort to using https:// to fetch and push. However this will always prompt the user to enter the password...here is the example what working for me (just to share with those cant use git:// protocol :)  git fetch https://[user-name]@github.com/[user-name]/[project].gitif the above works, you can remove the origin and replace with  git remote rm origin  git remote add origin https://[user-name]@github.com/[user-name]/[project].gitI think that's another case of git error messages being misleading.  Usually when I've seen that error it's due to ssh problems.  Did you add your public ssh key to your github account?Edit: Also, the xinet.d forum post is referring to running the git-daemon as a service so that people could pull from your system.  It's not necessary to run git-daemon to push to github.I got the same problem and I just added the content of ~/.ssh/id_rsa.pub to my account in GitHub. After that just try again git push origin master, it should work."
"When you type git push without any arguments, its behavior depends on the value of the push.default setting.  The default value of push.default is matching, which, according to git help config, does the following:matching -- push all branches having the same name in both ends.  This is for those who prepare all the branches into a publishable shape and then push them out with a single command.  It is not appropriate for pushing into a repository shared by multiple users, since locally stalled branches will attempt a non-fast forward push if other users updated the branch.In other words, if your local repository has a branch named acceptance and the remote repository has a branch named acceptance, then git push will try to make the remote acceptance branch match your acceptance branch even if you don't have acceptance checked out.So, my guess is that you checked out acceptance at some point in the past, but someone else on the project (or maybe you from a different clone of the repository) pushed new commits to acceptance.  This caused your local acceptance branch to be behind the remote acceptance branch.  Now whenever you type git push, your Git tries to back up the remote acceptance branch to the version you have in your local repository.To fix, I recommend setting push.default to simple (or upstream if simple isn't available in your Git version -- it was only added in 1.7.11).There probably is a branch you have to merge with to be able to push a fast-forwardable commit. To find out, first do$ git fetchThen do$ git log --graph --decorate --oneline --allYou should see that the branch you are trying to push is not in the same line and ahead of the remote branch you are trying to merge with.By the way, git push by itself always pushes all of your tracked branches to their origin/ counterparts, and you might have branches that aren't up to date with their origin counterparts. In that case, just ignore the warning. You can make this warning less wordy by:$ git config advice.pushNonFastForward falseBut I now see that your real problem is probably that test_branch doesn't get pushed with git push. To fix that, type:$ git branch --set-upstream test_branch origin/test_branch"
"is it possible you have the environment variable GIT_SSH set?n.b.: if you have installed TortoiseGIT, you can answer that question with ""yes"".So, if you have GIT_SSH set, you can fix your issue in several ways:add your key to plink / pageantset GIT_SSH to use your preffered (Open)SSHFor a lengthy explanation, read http://guides.beanstalkapp.com/version-control/git-on-windows.html"
"If you have already made some commits, you can do the followinggit pull --rebaseThis will place all your local commits on top of newly pulled changes.I would do it this this way:Stage all unstaged changes.git add .Stash the changes.git stash saveSync with remote.git pull -rReapply the local changes.git stash poporgit stash apply"
"Projects in Gerrit can be configured to require a Signed-off-by in the footer of the commit message to enforce that every change is signed by the author, committer or uploader. If for a project a Signed-off-by is required and the commit message footer does not contain it, Gerrit rejects to push the commit with this error message.This policy can be bypassed by having the access right Forge Committer.This error may happen for different reasons if you do not have the access right to forge the committer identity:missing Signed-off-by in the commit message footerSigned-off-by is contained in the commit message footer but it‰Ûªs neither from the author, committer nor uploaderSigned-off-by from the author, committer or uploader is contained in the commit message but not in the footer (last paragraph)To be able to push your commits you can amend your commit and add the signed off line or use forge committer option in your local gerrit"
"It seems like you indeed have merge conflicts with the upstream. I suggest the following:1. run git fetch origin2. run git log ..origin/master to see what's new in the original that you still don't have. Note that 'git push -f' will override these commits if you attempt it...3. run git pull --rebase (this might again fail with merge conflicts). After a successful pull and rebase your push should work. I would, however, pay close attention to those merge conflicts since it seems in your case they stem from a garbled history (maybe a previous merge/rebase gone awry?)4. If all else fails, create a new branch, pointing at the origin/master (git checkout -b new_master origin/master), and then, using git-log and git-cherry-pick - fish out the only commits that are truly new in relation to origin/master. Then push this new branch and archive the old master.Assuming the above four ways all fail, there might be a problem on the remote repository."
"According to bitbucket knowledgebase it may also be caused by the owner of the repository being over the plan limit.If you look further down the page it seems to also be possible to trig this error by using a too old git version (1.7 is needed at the moment).You can get more information with # Windowsset GIT_CURL_VERBOSE=1set GIT_TRACE_PACKET=2# Unixexport GIT_CURL_VERBOSE=1export GIT_TRACE_PACKET=2And then try a git push.Double-check your proxy settings if you have one.Note: git 2.8 (March 2016) adds more information on an error 35:See commit 0054045 (14 Feb 2016) by Shawn Pearce (spearce).(Merged by Junio C Hamano -- gitster -- in commit 97c49af, 24 Feb 2016) remote-curl: include curl_errorstr on SSL setup failuresFor curl error 35 (CURLE_SSL_CONNECT_ERROR) users need the additional text stored in CURLOPT_ERRORBUFFER to debug why the connection did not start.  This is curl_errorstr inside of http.c, so include that in the message if it is non-empty.Also check out the common causes for that message:If it was working before, and not working today, it is possible the SSL private key has expired on the BitBucket side (see below, reason #3), but that doesn't seem to be the case here (the certificate is valid until 12/03/2014).The Destination Site Does Not Like the ProtocolFiring off a request like the following, results in the Unknown SSL Protocol error:curl --sslv2 https://techstacks-tools.appspot.com/Why? Well, in this case it is because the techstacks tools site does not support SSLv2, thus, generating the curl (35) error.The Destination Site Does Not Like the CipherYou could be trying to connect to the site using an ssl cipher that the site is configured to reject.  For example, anonymous ciphers are typically disabled on ssl-encrypted sites that are customer-facing. (Many of us set a blanket rejection policy on any SSL-encrypted web site‰ÛÓregardless of it's purpose.)  The following command string ""can"" also result in the curl (35) error:curl --ciphers ADH-RC4-MD5 https://some_web_site.some_domain.com/Unfortunately, the type of error response you can get from curl depends largely upon the ssl server. On some sites, you'll receive the Unknown SSL Protocol error but on my techstacks-tools site, I get:curl: (35) error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failureKudos to Google because this particular error is a bit more descriptive than the one my websites at work generate because this at least tells you that a ssl socket was started but because of handshake failures, the socket was never able to complete.Try connecting to the site with a cipher that the site supports. Not sure which cipher to use?   Well, let me introduce my cryptonark ssl cipher tester...The SSL Private Key Has ExpiredI came across this one earlier today working with an old WebSeAL site.  In IBM GSKit, you can specify how long the private key password is valid. After reaching a certain date, you will still be able to get webseal started and listening on port 443 (or whatever you set your https-port value to) but you will not be able to successfully negotiate an SSL session.  In today's case, the old WebSEAL instance was using long-expired kdb file with a long expired private key password. Once replaced with the correct, more-up-to-date version, everything worked again.Improper redirectionSome ISP's and DNS providers like to intercept your failed DNS queries in order to redirect you to a search engine results-style page offering you alternative URLs or ""Did you mean...?"" counter-query results.  If you see an error like this:  error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol, it could be due to you typing the hostname incorrectly or the hostname is not yet tabled in your DNS. You can verify that with a simple ""host"" or ""nslookup"".Note (August 2015): Git 2.6+ (Q3 2015) will allow to specify the SSL version explicitly:http: add support for specifying the SSL versionSee commit 01861cb (14 Aug 2015) by Elia Pinto (devzero2000).Helped-by: Eric Sunshine (sunshineco).(Merged by Junio C Hamano -- gitster -- in commit ed070a4, 26 Aug 2015) http.sslVersionThe SSL version to use when negotiating an SSL connection, if you want to force the default.  The available and default version depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the 'CURLOPT_SSL_VERSION' option; see the libcurl documentation for more details on the format of this option and for the ssl version supported.  Actually the possible values of this option are:sslv2sslv3tlsv1tlsv1.0tlsv1.1tlsv1.2Can be overridden by the 'GIT_SSL_VERSION' environment variable.  To force git to use libcurl's default ssl version and ignore any explicit http.sslversion option, set 'GIT_SSL_VERSION' to the empty string.In many cases it is linked to proxy problems.If so just config your git proxy    git config --global http.proxy HOST:PORTThis error also comes up with the Server is down. Email from tech support on the issue:""We experienced an outage where it affected traffic to the website, as  well as Mercurial and Git traffic over HTTPS. SSH was unaffected  though. Feel free to check this page for more info:http://status.bitbucket.org/""So try again later and it could work itself out. Did for meSetting the following git setting fixed this for me git config --global --add http.sslVersion tlsv1.0I'm guessing the corporate proxy server did not like the default encryption protocol."
"The remote repository is not a bare repository and has master checked out. And, by default, git doesn't allow you to push to the checked out branch of a non-bare repo.Remote repos to which you push should be set up as bare repo (git init --bare) ideally.manojlds' answer is correct, however it might help to know what the purpose of your remote repo is.If the remote repo is just for backup / collaboration purposes -> you've got the right idea, just replace the remote repo with a 'bare' one and go from there.If the remote repo is the production server, then you're doing things wrong -> you should have a different configuration.A good confiruation so that you can ""push to production"" is to have your 'bare' repo for backup / collab purposes, then you have a seperate repo which is setup on the deployment server and is cloned from the bare repo. Then on the bare repo and you can put a 'post-receive hook' which makes the deployment repo do a pull.I'm sure there are guides on how to do this... I followed one myself once :)When i was new to github my mentor gave me this thumb rule to follow:Make modifications to your code locally. When it is time to commit, do the following:do git pull (very important to sync the inner reference headers of remote repo to your local repository)If there are any conflicts in different files Merge them carefully by either choosing your copy or remote copy or a mix of both by opening both the files in Kdiff. Once you have resolved all the conflicts push the merge. After step 2 do git push to save the local changes you made to the code which you wanted to commit in the first place.Subversion can be a pain but it is extremely important to maintain the sync. These set of rules have helped me a lot to maintain sub version usingg github.Hope this helped."
"You would not be working with a detached head by any chance ?As in: indicating that your latest commit is not a branch head.$ git log -1# note the SHA-1 of latest commit$ git checkout master# reset your branch head to your previously detached commit$ git reset --hard <commit-id>As mentioned in the git checkout man page (emphasis mine):It is sometimes useful to be able to checkout a commit that is not at the tip of one of your branches.  The most obvious example is to check out the commit at a tagged official release point, like this:$ git checkout v2.6.18Earlier versions of git did not allow this and asked you to create a temporary branch using the -b option, but starting from version 1.5.0, the above command detaches your HEAD from the current branch and directly points at the commit named by the tag (v2.6.18 in the example above).You can use all git commands while in this state.  You can use git reset --hard $othercommit to further move around, for example.You can make changes and create a new commit on top of a detached HEAD.  You can even create a merge by using git merge $othercommit.The state you are in while your HEAD is detached is not recorded by any branch (which is natural --- you are not on any branch).  What this means is that you can discard your temporary commits and merges by switching back to an existing branch (e.g. git checkout master), and a later git prune or git gc would garbage-collect them.  If you did this by mistake, you can ask the reflog for HEAD where you were, e.g.$ git log -g -2 HEADErr.. If you are a git noob are you sure you have git commit before git push? I made this mistake the first time!Another situation that is important to be aware of: The sort of default state for git is that you are working in the ""master"" branch. And for a lot of situations, you'll just hang out in that as your main working branch (although some people get fancy and do other things).Anyway, that's just one branch. So a situation I might get into is:My active branch is actually NOT the master branch. ... But I habitually do the command: git push (and I had previously done git push origin master, so it's a shortcut for THAT).So I'm habitually pushing the master branch to the shared repo ... which is probably a good clean thing, in my case ...But I have forgotten that the changes I have been working on are not yet IN the master branch !!! So therefore everytime I try git push, and I see ""Everything up to date"", I want to scream, but of course, it is not git's fault! It's mine.So instead, I merge my branch into master, and then do push, and everything is happy again.Maybe you're pushing a new local branch?A new local branch must be pushed explicitly:git push origin your-new-branch-nameJust one of those things about git... You clone a repo, make a branch, commit some changes, push... ""Everything is up to date"". I understand why it happens, but this workflow is extremely unfriendly to newcomers.See VonC's answer above - I needed an extra step:$ git log -1- note the SHA-1 of latest commit$ git checkout master- reset your branch head to your previously detached commit$ git reset --hard <commit-id>I did this, but when I then tried to git push remoterepo master, it said ""error: failed to push some refs. To prevent you from losing history, non-fast-forward updates were rejected, Merge the remote changes (e.g. 'git pull') before pushing again.""So I did 'git pull remoterepo master', and it found a conflict. I did git reset --hard <commit-id> again, copied the conflicted files to a backup folder, did git pull remoterepo master again, copied the conflicted files back into my project, did git commit, then git push remoterepo master, and this time it worked.Git stopped saying 'everything is up to date' - and it stopped complaining about 'fast forwards'.From your git status, you probably has a different situation from mine.But anyway, here is what happened to me.. I encountered the following error:fatal: The remote end hung up unexpectedlyEverything up-to-dateThe more informative message here is that the remote hung up. Turned out it is due to exceeding the http post buffer size. The solution is to increase it withgit config http.postBuffer 524288000I have faced a similar situation; when I made the changes and tried to git push origin master, it was saying everything was up to date.I had to git add the changed file and then git push origin master.  It started working from then on."
"This looks like you ran git as root locally, thus changing ownership on some of the files tracking the location of the origin branch.Fix the file ownership, and you should be fine:# run this from the root of the git working treesudo chown -R ""${USER:-$(id -un)}"" .Please first give the permissions from root account like belowchmod -R 777 foldernameafter that run the commit command"
"git push origin :notmaster, which basically means ""push nothing to the notmaster remote"".You can also use git branch -d -r origin/notmaster, but I'm not sure what Git version supports the -d -r combination.I had the same issue. I had both a branch and a tag named 3.2.That's why it says there's more than one match:git error: dst refspec 3.2 matches more than one.Here's how to delete the branch:git push origin :heads/3.2And here's how to delete the tag:git push origin :tags/3.2git push origin --delete notmasterIf you're using Git 1.7.0 or later, this will do the trick. Prior to Git 1.7.0, you needed to use the less intuitive (but equally effective) syntax:git push origin :notmasterThe older syntax still works in newer versions of Git, but the newer syntax seems more humane and easier to remember. If I want to delete a branch, typing --delete seems like the natural thing to do.From the 1.7.0 release notes:""git push"" learned ""git push origin --delete branch"", a syntactic sugar for ""git push origin :branch"".This happened because the name of the branch and tag is same.To delete the branch use  git push origin :refs/heads/branchnameTo delete the tag use  git push origin :refs/tags/tagnameThis will delete the branch and tag from remote.To delete from local you can use git branch -d branchname and git tag -d tagname respectively"
"Looks like your remote url is wrong.Try running the following commands:git remote rm origingit remote add origin git@github.com:ppreyer/first_app.gitgit push origin master"
"The ""Push Confirmation"" step isn't an error:This will open the Push Confirmation dialog showing a preview which changes will be pushed to the destination repository.  If this does not match your expectation click Back and correct your push specs accordingly. That message means the only way to complete the push is to force it (you would erase the remote history, replacing it with the one your are pushing).The prudent course of action is first to make a git pull: see ""Pulling New Changes from Upstream Branch"" for the EGit version."
"** Also posted this response here: git push heroku master says ""Everything up-to-date"", but the app is not currentEven though this is an old issue, I wanted to update with what worked for me (a newbie) should anyone else run into this:After following the instructions here (from Hudson), what finally did the trick for me was doing a ""git pull"" after checking out the ""master"" branch. Perhaps ""git push heroku master"" pushes out only the local branch of master?Of course, this assumes all required changes have been correctly merged into your master. I hadn't pulled from master on my local since the project set up because all merges (from development to master) were handled on GitHub and I had been working on new branches that were later merged with development. So, to restate steps above from Hudson:git checkout mastergit pull(here, I updated README to have a change to commit, like ""Heroku deploy [date, time]""git add .git commit -am ""xxxyyzzz"" git push heroku masterheroku run rake db:migrateheroku restartGood luck!"
"It would appear that you have the file nbproject/private/rake-d.txt in your local repository, but not tracked by git.Meanwhile, it has been added to the remote repository since your last pull, so doing a pull would overwrite that file, and thus git is warning you that that would happen and aborting the pull.To resolve this, you'll need to go and either delete or rename the file.If you want to automate this, run a git clean to clean out the folder of untracked files (that is, delete them). It might be a good idea to run git clean -n first, though, which merely lists the files it's going to delete, letting you see if there's anything important it plans on deleting.Alternatively, you could add the file to the repository (remember to commit it), and then pull. git will then try to merge your local copy with the remote one.You could use first git clean -f -d(or git reset --hard HEAD ) to clean your untracked files then do a git pullKeep in mind this will delete any untracked filesWhat you need to do is remove the local untracked copy. What's happening is that a file exists remotely, but not locally. git will not allow you to overwrite a local untracked file.you have to use ctrl+shift+F10 its usefulif you are getting the pulling error due to untracked worked.... try it...go to your project location $ cd /usr/local    $ git fetch origin    $ git reset --hard origin/master"
"If you are running git under a file system that is not case sensitive (Windows or OS X) this will occur if there are two branches with the same name but different capitalisation, e.g. user_model_changes and User_model_changes as both of the remote branches will match the same tracking ref.Delete the wrong remote branch (you shouldn't have branches that differ only by case) and then git remote prune origin and everything should workPermanent Fixgit update-ref -d resolved my instance of this error, e.g.git update-ref -d refs/remotes/origin/userNote that this doesn't impact remote.In my case, a subsequent git fetch fetched that branch again, and following git fetches/pulls no longer gave the error ""remote ref is at but expected"".If that doesn't work, a temporary fix:Note also that if you don't care about the branch in question (e.g. you just want to update master, not origin/user), a git pull workaround is to fetch then just merge the particular branch you care about, e.g.git fetch # may give an error for a particular branch, but other branches will still be successfully fetchedgit merge origin/master"
"You quote the following error moessage in your question:your local changes to the following files would be overwritten by mergeThis error message is essentially saying that git is stopping you from potentially losing work.  You have some changes in your working tree that you haven't committed yet, and the pull would modify those files - this might end up with you losing your local changes.  Once you've committed your changes to those files, the pull will work.  (Or, you could skip the ""fetch"" stage of git pull and just run git merge origin/master to try the merge stage again.)  Martin Ogden's answer gives an example of using git stash as an alternative, which is more suitable if you're not ready to commit your work yet.The latter error message is:To prevent you from losing history, non-fast-forward updates were rejected.Basically, you're only allowed to push if the commit you're pushing already contains the history of branch you're pushing to.  The usual solution is to pull first.  This is another error message that is preventing you from losing work - you wouldn't (in general) want to wipe out the work that other people have pushed to that branch.You could either:Add / commit local changes before pulling from remote repositoryStash local changes before the pull and pop the local changes back in after the pull:git stash --include-untrackedgit pullgit stash pop"
"You can simply convert your remote repository to bare repository (there is no working copy in the bare repository - the folder contains only the actual repository data).Execute the following command in your remote repository folder:git config --bool core.bare trueThen delete all the files except .git in that folder. And then you will be able to perform git push to the remote repository without any errors.I just had the same error while I began learning Git. Some of the other answers are clearly not for someone new to Git!(I am going to use non technical terms to get the idea across.) Anyway, what is happening is that you have two repositories, one is the original you first made, and the other the work one you just made.Right now you are in your work repository and are using the ""master"" branch. But you also happen to be ""logged in"" in your original repository to the same ""master"" branch. Now since you're ""logged in"" in the original, Git fears you might mess up because you might be working on the original and screw things up. So you need to return to the original repository and do a ""git checkout someotherbranch"", and now you can push with no problems.I hope this helps.The error message describes what has happened. More modern versions of Git refuse to update a branch via a push if that branch is checked out.The easiest way to work between two non-bare repositories is either toalways update the repositories by pull (or fetch and merge) or, if you have to,by pushing to a separate branch (an import branch) and then merging that branch into the master branch on the remote machine.The reason for this restriction is that the push operation operates only on the remote Git repository, it doesn't have access to the index and working tree. So, if allowed, a push on the checked-out branch would change the HEAD to be inconsistent with the index and working tree on the remote repository.This would make it very easy to accidentally commit a change that undoes all of the pushed changes and also makes it very difficult to distinguish between any local changes that have not been committed and differences between the new HEAD, the index and the working tree that have been caused by push moving HEAD.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.There are multiple solutions, depending on your needs.Solution 1: Use a Bare RepostioryAs suggested, if on one machine, you don't need the working directory, you can move to a bare repository. To avoid messing with the repository, you can just clone it:machine1$ cd ..machine1$ mv repo repo.oldmachine1$ git clone --bare repo.old repoNow you can push all you want to the same address as before.Solution 2: Push to a Non-Checked-Out BranchBut if you need to check out the code on your remote <remote>, then you can use a special branch to push. Let's say that in your local repository you have called your remote origin and you're on branch master. Then you could domachine2$ git push origin master:master+machine2Then you need to merge it when you're in the origin remote repo:machine1$ git merge master+machine2Autopsy of the ProblemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.You can get around this ""limitation"" by editing the .git/config on the destination server. Add the following to allow a git repository to be pushed to even if it is ""checked out"":[receive]denyCurrentBranch = warnor[receive]denyCurrentBranch = falseThe first will allow the push while warning of the possibility to mess up the branch, whereas the second will just quietly allow it.This can be used to ""deploy"" code to a server which is not meant for editing. This is not the best approach, but a quick one for deploying code.I like the idea of still having a usable repository on the remote box, but instead of a dummy branch, I like to use:git checkout --detachThis seems to be a very new feature of Git - I'm using git version 1.7.7.4.I had the same issue. For me, I use Git push to move code to my servers. I never change the code on the server side, so this is safe.In the repository, you are pushing to type:git config receive.denyCurrentBranch ignoreThis will allow you to change the repository while it's a working copy.After you run a Git push, go to the remote machine and type this:git checkout -fThis will make the changes you pushed be reflected in the working copy of the remote machine.Please note, this isn't always safe if you make changes on in the working copy that you're pushing to.You can recreate your server repository and push from your local branch master to the server master.On your remote server:mkdir myrepo.gitcd myrepo.gitgit init --bareOK, from your local branch:git push origin master:masterWith a few setup steps you can easily deploy changes to your website using a one-liner like git push productionWhich is nice and simple, and you don't have to log into the remote server and do a pull or anything. Note that this will work best if you don't use your production checkout as a working branch! (The OP was working within a slightly different context, and I think @Robert Gould's solution addressed it well. This solution is more appropriate for deployment to a remote server.) First you need to set up a bare repository somewhere on your server, outside of your webroot.mkdir mywebsite.gitcd mywebsite.gitgit init --bareThen create file hooks/post-receive:#!/bin/shGIT_WORK_TREE=/path/to/webroot/of/mywebsite git checkout -fAnd make the file executable:chmod +x hooks/post-receiveOn your local machine, git remote add production git@myserver.com:mywebsite.gitgit push production +master:refs/heads/masterAll set! Now in the future you can use git push production to deploy your changes!Credit for this solution goes to http://sebduggan.com/blog/deploy-your-website-changes-using-git/. Look there for a more detailed explanation of what's going on.With git config --local receive.denyCurrentBranch updateInstead on the server repository, it also updates the working tree if no untracked overwrite would happen.It was added in Git 2.3 as mentioned by VonC in the comments.I've compiled Git 2.3 and gave it a try. Sample usage:git init servercd servertouch agit add .git commit -m 0git config --local receive.denyCurrentBranch updateInsteadcd ..git clone server localcd localtouch bgit add .git commit -m 1git push origin master:mastercd ../serverlsOutput:abYay, b got pushed!You should only be pushing to a bare repository.  A bare repository is a repository that has no checked out branches.  If you were to cd to a bare repository directory, you'd only see the contents of a .git directory.In fact, set the remote to a non-checked out branch is sufficient. After you checked out your remote in a different branch, you can push.I had the same problem using Git to synchronise repositories on my Android phone and laptop. The solution for me was to do a pull instead of a push, as @CharlesBailey suggested.git push origin master on the Android repository fails for me with the same error messages that @hap497 got because of a push to a nonbare checkout of a repository + working-copy.git pull droid master on the laptop repository and working-copy works for me. Of course, you need to have previously run something like git remote add droid /media/KINGSTON4GB/notes_repo/.Older versions of Git used to allow pushes to the currently checked out branch of a non-bare repository.  It turns out this was a terribly confusing thing to allow.  So they added the warning message you see, which is also terribly confusing.If the first repository is just acting as a server then convert it to a bare repository as the other answers recommend and be done with it.If however you need to have a shared branch between two repos that are both in use you can achieve it with the following setupRepo1  - will act as the server and also be used for developmentRepo2  - will be for development only Setup Repo1 as followsCreate a branch to share work on.git branch shared_branchTo be safe, you should also create a $(REPO).git/hooks/update that rejects any changes to anything other than shared_branch, because you don't want people mucking with your private branches.repo1/.git/hooks  (GIT_DIR!)$ cat update#!/bin/shrefname=""$1""oldrev=""$2""newrev=""$3""if [ ""${refname}"" != ""refs/heads/shared_branch"" ]then   echo ""You can only push changes to shared_branch, you cannot push to ${refname}""   exit 1fiNow create a local branch in repo1 where you will do your actual work.git checkout -b my_work --track shared_branchBranch my_work set up to track local branch shared_branch.Switched to a new branch 'my_work'(may need to git config --global push.default upstream in order for git push to work)Now you can create repo2 with git clone path/to/repo1 repo2 git checkout shared_branch At this point you have both repo1 and repo2 setup to work on local branches that push and pull from shared_branch in repo1, without needing to worry about that error message or having the working directory get out of sync in repo1.  Whatever normal workflow you use should work.You have 3 optionsPull and push again:git pull; git pushPush into different branch:git push origin master:fooand merge it on remote (either by git or pull-request)git merge fooForce it (not recommended unless you deliberately changed commits  via rebase):git push origin master -fIf still refused, disable denyCurrentBranch on remote repository:git config receive.denyCurrentBranch ignoreHere is one test you can do to see how the bare server stuff work:Imagine you have a workstation and a server with live site hosted on it, and you want to update this site from time to time (this also applies to a situation where two developers are sending their work back and forth through a bare middleman).InitializationCreate some directory on your local computer and cd into it, then execute these commands:# initializationgit init --bare server/.gitgit clone server contentgit clone server localFirst you create a bare server directory (notice the .git at the end). This directory will serve as a container for your repository files only.Then clone your server repository to a newly created content directory. This is your live/production directory which will be served by your server software.The first two directories resides on your server, the third one is a local directory on your workstation.WorkflowNow here is the basic workflow:Enter the local directory, create some files and commit them. Finally push them to the server:# create crazy stuffgit commit -avgit push origin masterNow enter the content directory and update the server's content:git pullRepeat 1-2. Here content may be another developer that can push to the server too, and local as you may pull from him.OK, in case you want a normal remote repository, then create an extra branch and check it out. Push it into one branch (which is not checked out) and merge it with one which is currently active later after pushing from locally.For example, on a remote server:git branch devgit checkout devOn the local setup:git push On remote server:git merge devI had to re-run git --init in an existing bare repository, and this had created a .git directory inside the bare repository tree - I realized that after typing git status there. I deleted that and everything was fine again :)(All these answers are great, but in my case it was something completely different (as far as I can see), as described.)I'm sure most people viewing this question will stop at the first two huge answers, but I'd still like to offer my solution.I had an Eclipse + EGit web project setup when encountering the described error. What helped me was simply using the GitHub app, which seemed to magically resolve the issue. While EGit would always refuse the push, the GitHub desktop app would just shrug its shoulders and push my changes. Maybe it handles the multi-login-situation more gracefully.An article I found that might be useful to others is Git in 5 minutes.I had an Xcode project under Git version control that I wanted to push up to a Virtual Distributed Ethernet (VDE) I have in a DC. The VDE runs Centos 5.None of the articles I read about Git talked about bare repositories. It all sounded so simple until I tried what I thought should be easy coming from an SVN background.The suggestions here to make the remote repository bare worked. Even better for my requirements was to clone the Xcode project to projectname.git, copy that to the remote server; then pushes magically worked. The next step will be getting Xcode to push without errors about commits, but for now I'm okay doing it from Terminal.So:cd /tmp (or another other directory on your system)<br/>git clone --bare /xcode-project-directory projectname.git<br/>scp -r projectname.git sshusername@remotehost.com:repos/<br/>To push changes from your Xcode project after you've committed in Xcode:cd /xcode-project-directory<br/>git push sshusername@remotehost.com:repos/projectname.git<br/>I'm certain there is a smoother more sophisticated way of doing the above, but at a minimum this works. Just so everything is clear, here are some clarifications:/xcode-project-directory is the directory your xcode project is stored in. It's probably /Users/Your_Name/Documents/Project_Name.projectname is literally the name of the project, but it can be anything you care to call it. Git doesn't care, you will.To use scp you need to have a user account on the remote server that's allowed SSH access. Anyone running their own server will have this. If you're using shared hosting or the like, you might be out of luck.remotehost.com is the name of your remote host. You could as easily use its IP address. Just for further clarity I'm using Gitosis on the remote host with SSH keys, so I'm not prompted for passwords when I push. The article Hosting Git Repositories, the Easy (and Secure) Way tells you how to set all that up.The best way to do this is:mkdir ..../remotecd ..../remotegit clone --bare .../currentrepo/This will clone the repository, but it won't make any working copies in .../remote. If you look at the remote, you'll see one directory created, called currentrepo.git, which is probably what you want.Then from your local Git repository:git remote add remoterepo ..../remote/currentrepo.gitAfter you make changes, you can:git push remoterepo masterI just ran into this problem with a deployment git repository on Heroku.I don't know why Heroku has a non-bare repository on their side, but as a workaround I was able to reset the remote repository, and reupload.You shouldn't use Heroku's copy of your repository as your only git repository for collaboration, but just in case, I'll say clearly: Do not do this unless you are sure you have a full copy of your repository stored securely somewhere other than Heroku. Doing a reset will delete the repository contents.To reset:Install the Heroku toolbelt (which contains the command line client) if you haven't already.Install the heroku-repo plugin if you haven't already.heroku plugins:install https://github.com/heroku/heroku-repo.gitDo the reset, which deletes the repository and creates a new, empty oneheroku repo:resetPush to your Heroku remote as you normally would; it will reupload everything."
"I had this same issue, and the fetch/rebase answer didn't work for me. Here's how I solved it:I deleted the file that was causing the issue, checked it out, and then pulled successfully.rm file/name/path/some/more/filenamepathgit checkout file/name/path/some/more/filenamepathgit pullYou should:fetch (updating all remote tracking branches, like origin/master)rebase your current branch on top of origin/master in order to replay your 2 commits on top of the 7 updated commits that you just fetched.That would be:git checkout mastergit fetchgit rebase origin/masterA shorter version of the above set of commands would be the following single command:git pull --rebase"
"You should always start with a git clone (and I'd suggest you do that), but if you want to continue from here, here's the way:You can use git remote add origin https://github.com/PrincetonUniversity/EVCM.git to add a remote, and set its name to origin. You can check this tutorial if you want to know more. This, I hope, will fix your problem. If you encounter other problems, just do a git clone."
"My team and I ran into this error, unable to update local ref, when doing a pull in SourceTree.We used : git gc --prune=nowThis removes any duplicate reference objects which should fix the issue.Here are a few links where you can learn more about git references and pruning :git tip of the weekgit-prune documentationgit referencesEnsure the user that is executing the git pull is the same user that created the repository. The file permissions are incorrect.I solved as below:git remote prune originI discoverd the same Error message trying to pull from a Bitbuck Repo into my lokal copy. There is also only one Branche Master and the command git pull origin master lead to this Error Message From https://bitbucket.org/xxx * branch            master     -> FETCH_HEADerror: Couldn't set ORIG_HEADfatal: Cannot update the ref 'ORIG_HEAD'.Solution as followsgit reflog find the number of the last commitgit reset --hard <numnber> reset to the last commit git pull origin master pull again without error"
"find a *.pack.temp in .git/objects/pack in your local repository. Then find an .idx file with same basename, and move both of them away (or remove them, but it is better to be safe than sorry). Rerun git fetch and it should work (well, it did for me). For example:% git fetcherror: Unable to find a4fb0b54b2609df8a1ee4b97c268d205fc5bf9f1 under https://www.example.com/~someuser/something.gitCannot obtain needed object a4fb0b54b2609df8a1ee4b97c268d205fc5bf9f1error: fetch failed.% ls -l .git/objects/packtotal 65872-rw-r--r-- 1 someuser someuser    64072 Feb 12  2014 pack-2e31e66e67d8596f1193bbbc06c87293900c6e45.idx-rw-r--r-- 1 someuser someuser    16920 Jul 21  2013 pack-3d76e0bf6c67d71913efc0711d56f04c7f79b95d.idx-rw-r--r-- 1 someuser someuser    62224 Feb 11  2014 pack-74107fa80989df6619479874d94b5f8ed010fd2f.idx-rw-r--r-- 1 someuser someuser    96552 Oct 30 22:55 pack-bb75633331ea0e74d4d3cb29f7660e1ba00fb899.idx-rw-r--r-- 1 someuser someuser    73228 Mar  6  2014 pack-de0c1bcf3550cd7a2fd0c5a981bc17d15f1144c0.idx-r--r--r-- 1 someuser someuser   129144 Feb  2 18:57 pack-ffb25d036dea040923468e2de07023f9b497aeb7.idx-r--r--r-- 1 someuser someuser 46413554 Feb  2 18:57 pack-ffb25d036dea040923468e2de07023f9b497aeb7.pack-r--r--r-- 1 someuser someuser   129312 Feb  2 19:10 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.idx-rw-r--r-- 1 someuser someuser 20450545 Feb  2 19:09 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.pack-rw-r--r-- 1 someuser someuser   129312 Feb  2 18:36 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.idx-rw-r--r-- 1 someuser someuser  9863168 Feb  2 18:37 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.pack.temp% mv .git/objects/pack/pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.idx /tmp/% mv .git/objects/pack/pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.pack.temp /tmp/% git fetchFrom https://www.example.com/~someuser/something   3288ab9..a4fb0b5  master     -> origin/masterTry these commands:git fsckgit gcman git-fscksays to use rsync :Any corrupt objects you will have to find in backups or other archives  (i.e., you can just remove them and         do an rsync with some other site in the hopes that somebody else has the object you have corrupted).rsync -av user@host:repo/.git ./.gitworked for me"
"Someone else (or you on some other machine) has pushed a changeset to the remote repository. You, on your local machine dont have those changes yet. So to solve the situation you first have to git pulland then git pushHowever, you wont be able to git pull while you have changes in your working tree, so before you pull/push, you first have to commit or stash your local changes. This, potentialy, might bring up a merge situation if remote changes overlap with your local ones."
"It seems like the first one isn't working because your user doesn't have the permissions for changing that directory, and the second because your root user doesn't have the right SSH keys for accessing that git repository.Depending on what you're trying to do, it might be better to clone the repository to a different directory, or maybe chown the current directory to have full access for your userCheck if you have enough permissions on the .git/ directory. You should have write permissions. You can set them with the following command.Go to your project folder:chown -R youruser:yourgroup .git/This is a UNIX permission problem. Do not use sudo for cloning the repository. You don't have the same ssh keys as root and you shouldn't work as root anyway. Try ls -la to find the permissions on the files and use chmod (or sudo chown) to fix them. Hope that helps.In my case, I only had read access to the .git/FETCH_HEAD file.  I had to do ""sudo chmod g+w .git/FETCH_HEAD"" in order to be able to do a pull request.I was having the first issue (FETCH_HEAD permission denied) on Windows.I fixed it by running Git Bash as an administrator (right click, run as administrator).The answer to this issue make sure .git/FETCH_HEAD has write privileges and you will be all set.I had this issue on Windows and it was resolved by giving write permissions.In unix one can run chmod a+rw .git/FETCH_HEAD from the project repository after which it should work.If you want to give the permission to the group,sudo chmod g+w .git -Rworked best for me.In my case work fine after it:rm -f .git/FETCH_HEADRunning Windows 7, when I had this issue it was because I had hidden the .git folder. The permissions were fine, it was just hidden. Showing the folder resolved it.Look at the owner and group of .git directory with (first go to parent directory of .git) ll .git , look at the group and owner of the directory,add your user to group of of the owner with sudo usermod -a -G yourusername  groupsofonwner, then logout => login and everything getting work.So in summeriesgo to parent directory of git       $cd your pathfind group owner of the .git direcotry$ll .git     add your user to that group $usermod -a -G yourusername ownergroupofgitLogout and login to system to this change take effect.Enjoy it ;)"
"Try cleaning-up your local repository with:$ git gc --prune=now$ git remote prune originman git-gc(1):git-gc - Cleanup unnecessary files and optimize the local repositorygit gc [--aggressive] [--auto] [--quiet] [--prune=<date> | --no-prune]       Runs a number of housekeeping tasks within the current repository, such as compressing file revisions       (to reduce disk space and increase performance) and removing unreachable objects which may have been       created from prior invocations of git add.       Users are encouraged to run this task on a regular basis within each repository to maintain good disk       space utilization and good operating performance.man git-remote(1):git-remote - manage set of tracked repositoriesgit remote prune [-n | --dry-run] <name>           Deletes all stale remote-tracking branches under <name>. These stale branches have already been           removed from the remote repository referenced by <name>, but are still locally available in           ""remotes/<name>"".Happened to me as well. In my case, the bad ref was master, and I did the following:rm .git/refs/remotes/origin/mastergit fetchThis made git restore the ref file. After that everything worked as expected again.This did the job for me:git gc --prune=nowI had this same issue and solved it by going to the file it was erroring on:\repo\.git\refs\remotes\origin\masterThis file was full of nulls, I replaced it with the latest ref from github.This works for me:git gc --prune=nowOn SourceTree requires one more pull to fix.For me it worked to remove the files files that are throwing errors from the folder .git/refs/remotes/origin/"
"In my case I could not see the Resolve the conflicts option because I had local changes not committed yet and I was trying to sync with the remote changes. As soon as I committed my local changes and then tried a sync again, Resolve the conflicts link appeared.So the point here is: commit your changes first and then try to sync. A merge will start and Visual Studio will allow you to go through each of the conflicts.I have encountered the same issue where ""An error occurred. Detailed message: 1 conflict prevents checkout"" is shown where there's no option to resolve the conflict as shown in Leinel's answer.The reason was due to an untracked file that is the same file that is to be pulled. I just deleted the untracked file and retried the pull.I had the same issue. It turns out that I had an untracked file that needed to be included. Therefore, check in Changes tab for untracked files.I did not have any ""Changes"" (untracked or otherwise) listed on either branch, so the other answers did not work for me.I decided to go command line:Click Sync on both branches.Switch to the branch you want to ""merge into"" (master in my case).In Team Explorer under Manage Branches, do Action -> Open Command Line.In the command line type git merge BRANCH_NAME.  (my work branch / merge ""from"")Now the Resolve the conflicts button is available.If the conflicts during the pull are about end of line charaters:git config --global core.autocrlf falseThat should avoid any automatic eol conversion.You can see more in ""Why does git think each line of an untouched file has changed"" how to detect that situation in the working tree (git diff --word-diff-regex=.)."
"If the GitHub repo has seen new commits pushed to it, while you were working locally, I would advice for:git pull --rebasegit pushThe full syntax is:git pull --rebase origin mastergit push origin masterThat way, you would replay (the --rebase part) your local commits on top of the newly updated origin/master (or origin/yourBranch: git pull origin yourBranch).See a more complete example in the chapter 6 Pull with rebase of the Git Pocket Book.I would recommend a:git push -u origin masterThat would establish a tracking relationship between your local master branch and its upstream branch.After that, any future push for that branch can be done with a simple:git pushSee ""Why do I need to explicitly push a new branch?"".Since the OP already reset and redone its commit on top of origin/master:git reset --mixed origin/mastergit add .git commit -m ""This is a new commit for what I originally planned to be amended""git push origin masterThere is no need to pull --rebase.Note: git reset --mixed origin/master can also be written git reset origin/master, since the --mixed option is the default one when using git reset.If you just used git init and have added your files with git add . or something similar and have added your remote branch it might be that you just haven't committed (git commit -m 'commit message') anything locally to push to the remote... I just had this error and that was my issue.I find the solution to this problem in github help.You can see it from:Dealing with non-fast-forward errorsIt says:You can fix this by fetching and merging the changes made on the remote branch with the changes that you have made locally:  $ git fetch origin# Fetches updates made to an online repository$ git merge origin branch# Merges updates made online with your local workOr, you can simply use git pull to perform both commands at once:$ git pull origin branch# Grabs online updates and merges them with your local work"
"There is a bug in Visual Studio 2013 through Update 3 that will prevent you from merging in certain circumstances when you have core.autocrlf set to true yet the files in your repository are incorrectly normalized.  We are comparing the contents of your working folder (which has Windows-style '\r\n line endings) to the contents of your repository, which you have claimed (by setting core.autocrlf=true) have Unix style \n line endings.If, in fact, your repository contains files with \r\n line endings, then we will incorrect report these files as modified in your working directory and prevent the merge.  (We should, of course, be looking at the timestamp in the index and not bothering to test these files at all.)While this is a bug in Visual Studio (and will be fixed in the next Update), it is obscuring the fact that your repository is not configured correctly.  You should configure a .gitattributes file and correct the line endings in your repository to avoid these sorts of problems.In the meantime, you can use Git for Windows on the command-line to solve this problem, please be sure to configure alternate credentials in Visual Studio Online."
"This error occurs due to Git's HTTPS protocol. To view the error in detail, you can set the GIT_CURL_VERBOSE environment variable. For example:$ GIT_CURL_VERBOSE=1 git pullYour Antivirus or Firewall could be modifying the HTTP packets in transit. See git clone failed due to antivirus for example. Finally, it could be an unreliable network connection. I am using an OSX machine connected to Wifi, and the problem disappeared when I switch to a LAN connection.I faced the similar error. Tried to configure http.postBuffer but it didn't work.I found about the same error (with solution) over here: Git Clone Fails - error: RPC failed; result=56, HTTP code = 200As suggested in the above link, I solved it out by using SSH to perform the clone.Here is a good tutorial on how to Setup SSH for Git."
"This is most probably a problem with GitHub service. I recommend contacting them and explain what the problem is.This is how Wikipedia explains the 500 response code:500 Internal Server ErrorA generic error message, given when an unexpected condition was   encountered and no more specific message is suitable.Basically, something went wrong on the GitHub endpoint.But, since you already have set your SSH keys, you can use the ssh url to clone your repository:git clone git@github.com:owner/repo.git"
"Had the same error while using SourceTree connected to BitBucket repository.When navigating to repository url on bitbucket.org the warning message appeared:This repository is in read-only mode. You caught us doing some quick maintenance.After around 2 hours repository was accessible again.You can check status and uptime of bitbucket here:http://status.bitbucket.org/here you can see the latest updated status form their website bitbucket site statusif     Git via HTTPS   status is  Major Outage, you will not be able to pull/push, let this status to get greenHTTP Error 503 - Service unavailableIts problem at bitbucket's end. You can check status of their services at http://status.bitbucket.org/Currently there is HTTPS outage at bitbucket.  see belowYou can use SSH option. I just used SSH option with sourcetree.Try disabling all the system wide HTTP and HTTPS proxies:export http_proxy="""" export https_proxy=""""export HTTP_PROXY=""""export HTTPS_PROXY=""""As in ""CocoaPods - pod setup http request failed"", a 503 error on accessing (cloning) a public repository is likely to be the result of a GitHub glitch (availability issue)Retrying later usually works.A 50X error is an internal server error. There's nothing wrong on your end, but something's up on the server's end.http://www.checkupdown.com/status/E503.htmlThe Web server (running the Web site) is currently unable to handle  the HTTP request due to a temporary overloading or maintenance of the  server. The implication is that this is a temporary condition which  will be alleviated after some delay.Just be patient and wait. :-)"
"You need to add the origin remote:Delete the current onegit remote rm originAdd the git remote link ex: (https://user@bitbucket.org/test.git or https://github.com/user/test.git)git remote add origin linkgit pull origin master (or other branch)If you are trying to pull you app from herokugit pull heroku masterOr if you try to upload a new version to herokugit push heroku master[EDIT]Please fallow this tutorial, when you reach the bottom of the page click on Rails."
"I had faced similar issue, behind corporate firewall. Did the following, and able to clone repository using git shell from my system running Windows 7 SP1.Set 'all_proxy' environment variable for your user. Required by curl.export all_proxy=http://DOMAIN\proxyuser:proxypwd@proxy.server.com:8080Set 'https_proxy' environment variable for your user. Required by curl.export https_proxy=http://DOMAIN\proxyuser:proxypwd@proxy.server.com:8080I am not sure if this has any impact. But I did this and it worked: git config --global http.sslverify falseUse https:// for cloninggit clone https://github.com/project/project.gitNote-1: Do not use http://. Using that can give the below error. It can be resolved by using https://. error: RPC failed; result=56, HTTP code = 301Note-2: Avoid having @ in your password. Can use $ though.What worked for me is something similar to what rohitmohta is proposing ; in regular DOS command prompt (not on git bash) :firstgit config --global http.proxy http://username:password@proxiURL:proxiPortthengit config --global http.sslVerify false(I confirm it's necessary : if set to true getting ""SSL certificate problem: unable to get local issuer certificate"" error)in my case, no need of defining all_proxy nor https_proxy variablesand finally git clone https://github.com/someUser/someRepo.gitI had the same problem in a Windows environment.I just resolved with NTLM-APS (a Windows NT authentication proxy server)Configure your NTML proxy and set Git to it:git config --global http.proxy http://<username>:<userpsw>@localhost:<port>I had to setup all 4 things in .gitconfig with:git config --global http.sslVerify falsegit config --global https.sslVerify falsegit config --global http.proxy http://user:pass@yourproxy:portgit config --global https.proxy http://user:pass@yourproxy:portOnly then the cloning was successful."
"Do git status, this will show you what files have changed.  Since you stated that you don't want to keep the changes you can do git checkout -- <file name> or git reset --hard to get rid of the changes.For the most part, git will tell you what to do about changes. For example, your error message said to git stash your changes. This would be if you wanted to keep them. After pulling, you would then do git stash pop and your changes would be reapplied.git status also has how to get rid of changes depending on if the file is staged for commit or not.First start with agit statusSee if you have any pending changes.To discard them, rungit reset --hardPulling with rebase is a good practice in general.However you cannot do that if your index is not clean, i.e. you have made changes that have not been committed.You can do this to work around, assuming you want to keep your changes:stash your changes with: git stashpull from master with rebasereapply the changes you stashed in (1) with: git stash apply stash@{0} or the simpler git stash popYou can always dogit fetch && git merge --ff-only origin/masterand you will either get (a) no change if you have uncommitted changes that conflict with upstream changes or (b) the same effect as stash/pull/apply: a rebase to put you on the latest changes from HEAD and your uncommitted changes left as is."
"See the 'non-fast forward' section of 'git push --help' for details.You can perform ""git pull"", resolve potential conflicts, and ""git push"" the result. A ""git pull"" will create a merge commit C between commits A and B.Alternatively, you can rebase your change between X and B on top of A, with ""git pull --rebase"", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A.You can also force a push by adding the + symbol before your branch name.git push origin +some_branchYou probably have changes on github that you never merged. Try git pull to fetch and merge the changes, then you should be able to push. Sorry if I misunderstood your question.If you ""git pull"" and it says ""Already up-to-date."", and still get this error, it might be because one of your other branches isn't up to date.  Try switching to another branch and making sure that one is also up-to-date before trying to ""git push"" again:Switch to branch ""foo"" and update it:$ git checkout foo$ git pullYou can see the branches you've got by issuing command:$ git branchYou can force it to push, but please do this ONLY when you're quite sure what you are doing.The command is:git push -fThis problem can also occur when you have conflicting tags. If your local version and remote version use same tag name for different commits, you can end up here.You can solve it my deleting the local tag:$ git tag --delete foo_tagWhen I got this error, I backed up my entire project folder.  Then I did something like$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master...depending on your branch name (if it's not master).Then I did git pull --rebase.  After that, I replaced the pulled files with my backed-up project's files.  Now I am ready to commit my changes again and push."
"I would update the git version: 1.7.10 (or thereabouts) had authentication improvements. It's possible that these improvements were only related to proxies though -- I've forgotten the details already.Speaking of proxies, you could double-check git config: You wouldn't have proxies or anything like that configured on the macbook but not on the cent machine?"
"I think the cleanest solution for this for now is to change the initial command in your iTerm session to be/usr/bin/login -f <your user name>This fixes the issue for me.A further data point for analysis of the issue: It seems that in 10.10, multiple copies of the PATH environment variable exist and subshells seem to prefer the second copy. You can reproduce this by launching any cocoa application on the console as launched by iTerm. You'll get a warning that looks like this:2014-06-04 19:23:09.859 gitx[14676:362580] *** -[NSProcessInfo environment]: Warning: duplicate definition for key 'PATH' found in environment -- subsequent definitions are ignored.  The first definition was '(the path I have configured in my shell)', the ignored definition is '/usr/bin:/bin:/usr/sbin:/sbin'.I believe this to be a problem in 10.10 and not iTerm, but something iTerm is doing is causing it to manifest itself (this doesn't happen in Terminal.app)Update: This is caused by iTerm doing ""interesting"" stuff to the environment. Update to the official release of iTerm 2.0 to make this problem go away.I believe this is a bug in iTerm when using zsh.  They deliberately don't invoke /usr/bin/login, and they don't use execle to clear the environment variables like they should be.Downloading the newest version of iTerm2 fixed this for me!Another solution, modify your iTerm2 cd /Applications/iTerm.app/Contents/MacOSmv iTerm iTerm-bincat > iTerm <<EOF#!/bin/shunset PATH\${0}-binEOFchmod +x iTermDone.Enjoy your iTerm2 with Yosemite!As a temp solution I modified git-pull lines 11, 12, and 336 to be:. /usr/local/Cellar/git/2.0.0/libexec/git-core/git-sh-setup. /usr/local/Cellar/git/2.0.0/libexec/git-core/git-sh-i18neval=""/usr/local/Cellar/git/2.0.0/libexec/git-core/git-merge $diffstat $no_commit $verify_signatures $edit $squash $no_ff $ff_only""This fixes git-pull for now, but I'm sure there is a better solution.Here's a temporary fix (assuming Homebrew and Git 2.0.0) if you need Git to work before an official fix comes out. I setup two shell variables:export GIT_PATH=""/usr/local/Cellar/git/2.0.0/bin""export GIT_CORE_PATH=""/usr/local/Cellar/git/2.0.0/libexec/git-core""... and then replaced instances of git with appropriate absolute links. You can use the following Gists to do the same:Replace /usr/local/Cellar/git/2.0.0/libexec/git-core/git-sh-setup/ with git-sh-setupReplace /usr/local/Cellar/git/2.0.0/libexec/git-core/git-stash/ with git-stashReplace /usr/local/Cellar/git/2.0.0/libexec/git-core/git-pull/ with git-pullThis is a hack for sure, but it will get you going.EDIT: Make sure you look at the answer from @pilif before doing this...Ubiquill's workaround applies for git rebase (and presumably whichever other functions don't work) as well. In that case, it requires replacing lines 47 and 48 with the following *:. /usr/local/Cellar/git/2.0.0/libexec/git-core/git-sh-setup. /usr/local/Cellar/git/2.0.0/libexec/git-core/git-sh-i18n* This path assumes that you have git installed with homebrew, and it lives inside of /usr/local/Cellar/git/2.0.0/.Edit your git-pull file and add this line on top of it (just after the comment block)PATH=""$(dirname $0):$PATH""Or just copy paste this in your terminal :ed -s $(which git-pull) <<< $'6i\nPATH=""$(dirname $0):$PATH""\n.\nwq'Update: As presumed by pilif, since last iTerm2 update (1.0.0.20140629), git-pull run properly without this PATH override."
"If you want remove all local changes from your working copy, simply stash them:git stash save --keep-indexIf you don't need them anymore, you now can drop that stash:git stash dropIf you want to overwrite only specific parts of your local changes, there are two possibilities:Commit everything you don't want to overwrite and use the method above for the rest.Use git checkout path/to/file/to/revert for the changes you wish to overwrite. Make sure that file is not staged via git reset HEAD path/to/file/to/revert.Alright with the help of the other two answers I've come up with a direct solution:git checkout HEAD^ file/to/overwritegit pullHere is a solution that throws away changes:git reset file/to/overwritegit checkout file/to/overwriteYou can either commit your changes before you do the merge, or you stash them:git stashgit merge origin/mastergit stash popMy solution to solve this issue was:git checkout -- <file>Then I could overwrite the file just using:git pullThis works for me to override all local changes and does not require an identity:git reset --hardgit pullIf your repo contains few files which is removed from master:git checkout mastergit fetch origingit reset --hard origin/mastergit checkout -b newbranchIf you want to overwrite specific changes, you need some way of telling it which ones you want to forget.You could try selectively stashing the changes you want to abandon using git stash --patch and then dropping that stash with git stash drop. You can then pull in the remote changes and merge them as normal.You can use this for overwrite filegit checkout file_to_overwriteSometimes, none of these work.  Annoyingly, due to the LF thing I think, what will work is deleting the files, then pulling.  Not that I recommend this solution, but if the file doesn't exist, git won't uselessly inform you that your changes (which may not even be changes) will get overridden, and will let you continue.Use at your own risk."
"Did you try inserting the username/password in the clone URL? git clone https://username:password@github.com/blah/blahblah.gitSee this thread with a lot of good info:How to give username and password when do ""git clone git@remote.git""?The answer by @mrjoltcola should work, but if you would prefer not to place your github password in your server's bash_history in plaintext on the command line then you can omit the password and be prompted for it:git clone https://username@github.com/organizationname/reponame.gitPassword:I like that better."
"Say the remote is origin and the branch is master, and say you already have master checked out, might try the following:git fetch origingit reset --hard origin/masterThis basically just takes the current branch and points it to the HEAD of the remote branch.WARNING: As stated in the comments, this will throw away your local changes and overwrite with whatever is on the origin.Or you can use the plumbing commands to do essentially the same:git fetch <remote>git update-ref refs/heads/<branch> $(git rev-parse <remote>/<branch>)git reset --hardEDIT: I'd like to briefly explain why this works.The .git folder can hold the commits for any number of repositories. Since the commit hash is actually a verification method for the contents of the commit, and not just a randomly generated value, it is used to match commit sets between repositories.A branch is just a named pointer to a given hash. Here's an example set:$ find .git/refs -type f.git/refs/tags/v3.8.git/refs/heads/master.git/refs/remotes/origin/HEAD.git/refs/remotes/origin/masterEach of these files contains a hash pointing to a commit:$ cat .git/refs/remotes/origin/masterd895cb1af15c04c522a25c79cc429076987c089bThese are all for the internal git storage mechanism, and work independently of the working directory. By doing the following:git reset --hard origin/mastergit will point the current branch at the same hash value that origin/master points to. Then it forcefully changes the working directory to match the file structure/contents at that hash.To see this at work go ahead and try out the following:git checkout -b test-branch# see current commit and diff by the followinggit show HEAD# now point to another locationgit reset --hard <remote>/<branch># see the changes againgit show HEADI've had luck with git checkout -f <branch>in a similar situation.http://www.kernel.org/pub//software/scm/git/docs/git-checkout.htmlUndo delete in GITAssuming you want to throw away any changes you have, first check the output of git status. For any file that says ""unmerged"" next to it, run git add <unmerged file>. Then follow up with git reset --hard. That will git rid of any local changes except for untracked files."
"For other googlers who get here: this is also another less drastic approach: Navigate to .git\refs\remotes\origin directory - delete the master file,Then do another git pull and it synchronizes successfully.I've found this error's cause:Someone has created another branch with the same name, but different case.What happened?Git for windows isn't case sensitive. So, things just got crazy! Git couldn't distinguish one from another, mistaking the hash of each's head.Solution:Just cut the evil by it's root. Wrong remote branch was deleted and evererything is nice as ever."
"I just ran into this issue as well. I had been added to an existing project. I cloned it and committed a local change. I went to push and got the ERROR: Repository not found. error message. I realized that the person who added me only gave me read-only access to the repo. A quick email to him and I'm able to push. Check to see if you have read-write access.Good luck!I was getting the same errorERROR: Repository not found.   fatal: The remote end hung up unexpectedlyand I had created the repository on Github and cloned it locally.I was able to solve by opening .git/config and removing the [remote ""origin""] section.[remote ""origin""]      url = git@github.com:alexagui/my_project.git     fetch = +refs/heads/*:refs/remotes/origin/*then I ran the following (again)git remote add origin git@github.com:alexagui/my_project.git  git push -u origin masterand this time I was able to push to the repository.I ran into the same issue and I solved it by including my username and password in the repo url:git clone https://myusername:mypassword@github.com/path_to/myRepo.gitI got this error (but before was working). My problem was the missing ssh key binded with the Github account. You can check you current ssh keys with ssh-add -l.If your key is missing, you can add it with ssh-add ~/.ssh/your_keygit remote rm origingit remote add origin <remote url>Had similar issue. The root of the problem was that I followed some online tutorial about adding a new repository to Github. Just go to Github, create a new repo, it will ask you to add a README, don't add it. Create it, and you'll get instructions on how to push.It's similar to the next two lines:git remote add origin https://github.com/YOUR_USER/your-repo.gitgit push -u origin masterIf you belong to a group in Github check that you have Write Access.If you include your username and the repo name we can reasonably help you, at the moment we have no reason to think the repo does actually exist.Additionally, if the repo is private and you don't have access to it, github returns ""Does not exist"" to avoid disclosing the existance of private repos.EDIT: If you're not able to clone it because it's saying it doesn't exist and it's private, it's because you're not sending authentication. Ensure that your public key is added to your keyring, or use HTTP basic auth for the time being.Changing the content of the .git/config file helps as Alex said above. I experienced the same problem and I think it was because I changed my Github username. The local files could not be updated with the changes. So perhaps anytime you change your username you might consider running git remote add origin your_ssh_link_from_githubI hope this helps ;)I had the same problem. My issue was misunderstanding that I had to first create the empty repo on github before pushing to it. Doh! Including this here for anyone else who doesn't realize.You need to check your SSH access as the following: ssh -T git@github.comthis issue was because i don't add the person response on SSH in repository, read more about SSH link-1, link-2.Have experienced the same problem. Everything was working fine for years and then suddenly this error.The problem turns out was that I added a deploy key for another repo to my SSH agent before my user's github SSH key (which I always used to access the repo in question). SSH agent tried the deploy key for another repo first, and GitHub for some totally unexplainable reason was sayingERROR: Repository not found.Once I've removed the deploy key from SSH agent, everything was back to normal.I had this issue and realized I was using a different account from the one whose repo it was. Logging in as the original user resolved the issue.I had a similar problem.  The incorrect credentials were cached in OS X's key-chain.Check out: https://help.github.com/articles/updating-credentials-from-the-osx-keychain"
"Edit: For newer versions of Git, --set-upstream master has been deprecated, you should use --set-upstream-to instead:git branch --set-upstream-to=origin/master masterAs it prompted, you can just run:git branch --set-upstream master origin/masterAfter that, you can simply run git pull to update your code.I had the same problem and fixed it with this command:$ git push -u origin masterFrom the help file the -u basically sets the default for pulls:-u, --set-upstream`  For every branch that is up to date or successfully pushed, add   upstream (tracking) reference, used by argument-less git-pull(1) and  other commands. For more information, see branch.<name>.merge in   git-config(1).Try these commands:git pull origin mastergit push -u origin master@alesko : it is not possible to only do only git pull after checkout my_branch to update master branch only.Because git pull will also merge to the current branch -> in your scenario to the my_branch@Simon: that will do also the push. why is that?$ git branch -u origin/masterBranch master set up to track remote branch master from origin.and acording to docs:-u <upstream>  Set up <branchname>'s tracking information so <upstream> is considered    <branchname>'s upstream branch. If no <branchname> is specified,    then it defaults to the current branch.First, make sure you are on the right branch.Then (one time only):  git branch --trackAfter that this works again:git pullSwitch back to the master branch using$ git checkout masterand then run the git pull operation$ git pull origin/masterAfterwards, you can switch back to your my_branch again.You might have multiple branch. And your current branch didn't set its upstream in remote.Steps to fix this:git checkout branch_namegit branch --set-upstream-to=origin/remote_branch_name local_branch_namee.g.// this set upstream of local branch develop to remote branch  origin/develop,git branch --set-upstream-to=origin/develop developAfter doing this, when you do git pull, it pull from specified branch.You need to set up your tracking (upstream) for the current branchgit branch --set-upstream master origin/masterIs already deprecated instead of that you can use --track flaggit branch --track master origin/masterI also like the doc reference that @casey notice:-u <upstream>  Set up <branchname>'s tracking information so <upstream> is considered    <branchname>'s upstream branch. If no <branchname> is specified,    then it defaults to the current branch.What worked for me was:git branch --set-upstream-to=origin masterWhen I did a pull again I only got the updates from master and the warning went away.Try thisgit checkout mastergit pull origin master"
"What is currently happening is, that you have a certain set of files, which you have tried merging earlier, but they threw up merge conflicts.Ideally, if one gets a merge conflict, he should resolve them manually, and commit the changes using git add file.name && git commit -m ""removed merge conflicts"".Now, another user has updated the files in question on his repository, and has pushed his changes to the common upstream repo.It so happens, that your merge conflicts from (probably) the last commit were not not resolved, so your files are not merged all right, and hence the U(unmerged) flag for the files.So now, when you do a git pull, git is throwing up the error, because you have some version of the file, which is not correctly resolved.To resolve this, you will have to resolve the merge conflicts in question, and add and commit the changes, before you can do a git pull.Sample reproduction and resolution of the issue:# Note: commands below in format `CUURENT_WORKING_DIRECTORY $ command params`Desktop $ cd testFirst, let us create the repository structuretest $ mkdir repo && cd repo && git init && touch file && git add file && git commit -m ""msg""repo $ cd .. && git clone repo repo_clone && cd repo_clonerepo_clone $ echo ""text2"" >> file && git add file && git commit -m ""msg"" && cd ../reporepo $ echo ""text1"" >> file && git add file && git commit -m ""msg"" && cd ../repo_cloneNow we are in repo_clone, and if you do a git pull, it will throw up conflictsrepo_clone $ git pull origin masterremote: Counting objects: 5, done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From /home/anshulgoyal/Desktop/test/test/repo * branch            master     -> FETCH_HEAD   24d5b2e..1a1aa70  master     -> origin/masterAuto-merging fileCONFLICT (content): Merge conflict in fileAutomatic merge failed; fix conflicts and then commit the result.If we ignore the conflicts in the clone, and make more commits in the original repo now,repo_clone $ cd ../reporepo $ echo ""text1"" >> file && git add file && git commit -m ""msg"" && cd ../repo_cloneAnd then we do a git pull, we getrepo_clone $ git pullU   filePull is not possible because you have unmerged files.Please, fix them up in the work tree, and then use 'git add/rm <file>'as appropriate to mark resolution, or use 'git commit -a'.Note that the file now is in an unmerged state and if we do a git status, we can clearly see the same:repo_clone $ git statusOn branch masterYour branch and 'origin/master' have diverged,and have 1 and 1 different commit each, respectively.  (use ""git pull"" to merge the remote branch into yours)You have unmerged paths.  (fix conflicts and run ""git commit"")Unmerged paths:  (use ""git add <file>..."" to mark resolution)        both modified:      fileSo, to resolve this, we first need to resolve the merge conflict we ignored earlierrepo_clone $ vi fileand set its contents totext2text1text1and then add it and commit the changesrepo_clone $ git add file && git commit -m ""resolved merge conflicts""[master 39c3ba1] resolved merge conflictsYou are attempting to add one more new commits into your local branch while your working directory is not clean.  As a result, Git is refusing to do the pull.  Consider the following diagrams to better visualize the scenario:remote: A <- B <- C <- D local:  A <- B*   (*indicates that you have several files which have been modified but not committed.)There are two options for dealing with this situation.  You can either discard the changes in your files, or retain them.Option one: Throw away the changes You can either use git checkout for each unmerged file, or you can use git reset --hard HEAD to reset all files in your branch to HEAD.  By the way, HEAD in your local branch is B, without an asterisk.  If you choose this option, the diagram becomes:remote: A <- B <- C <- D local: A <- BNow when you pull, you can fast-forward your branch with the changes from master.  After pulling, you branch would look like master:local: A <- B <- C <- DOption two: Retain the changes If you want to keep the changes, you will first want to resolve any merge conflicts in each of the files.  You can open each file in your IDE and look for the following symbols:<<<<<<< HEAD   // your version of the code   =======   // the remote's version of the code   >>>>>>>Git is presenting you with two versions of code.  The code contained within the HEAD markers is the version from your current local branch.  The other version is what is coming from the remote.  Once you have chosen a version of the code (and removed the other code along with the markers), you can add each file to your staging area by typing git add.  The final step is to commit your result by typing git commit -m  with an appropriate message.  At this point, our diagram looks like this:remote: A <- B <- C <- D local: A <- B <- C'Here I have labelled the commit we just made as C' because it is different from the commit C on the remote.  Now, if you try to pull you will get a non-fast forward error.  Git cannot play the changes in remote on your branch, because both your branch and the remote have diverged from the common ancestor commit B.  At this point, if you want to pull you can either do another git merge, or git rebase your branch on the remote.Getting a mastery of Git requires being able to understand and manipulate uni-directional linked lists.  I hope this explanation will get you thinking in the right direction about using Git.Theres a simple solution to it. But for that you will first need to learn the following vimdiffTo remove conficts, you can usegit mergetoolThe above command basically opens local file, mixed file, remote file (3 files in total), for each conflicted file. The local & remote files are just for your reference, and using them you can choose what to include (or not) in the mixed file. And just save and quit the file.You have some files locally that need to be merged before you can pull. You could checkout the files and then pull to overwrite your local files.git checkout app/config/app.php app/config/database.php app/routes.phpgit pull origin master"
"My guess is that someone else has accidentally committed this file. How to resolve this:Remove your local .pyc filerm rtb_redis_connections/redis_connections.pycDo the pullgit pullRemove the file from git and push up the changesgit rm rtb_redis_connections/redis_connections.pycgit commit -m ""Remove pyc file""git push origin masterAssuming that you are working on the master branch that is.Why don't you put them to .gitignore?You either need to add te rtb_redis_connections directory to the repository so that it tracks to the remote, or add the files or directory to .gitignore."
"I resolved this problem. I think it happened maybe because of https but I am not very sure.You can Switch remote URLs from HTTPS to SSH.1.Pls refer to this link for details:https://help.github.com/articles/changing-a-remote-s-url/Also I had to config the ssh key.2.Follow this:https://help.github.com/articles/generating-ssh-keys/I came across this problem because I replaced my mac, but I do the transfer of data,I think it is probably because the key reasons.I solved such a problem by replacing https part of my remote origin with http. It is also a workaround. I think it may help someone in the future."
"I suppose your remote named origin doesn't reference the opehshift repo.Type:git remote -vIf the url of the remote repo is wrong, change it with:git remote set-url origin /url/openshift/repoSee also ""Using the Git Repository"" of the Getting Started with OpenShift Online doc for rhc specific commands."
"You could specify what branch you want to pull:git pull origin masterOr you could set it up so that your local master branch tracks github master branch as an upstream:git branch --set-upstream-to=origin/master mastergit pullThis branch tracking is set up for you automatically when you clone a repository (for the default branch only), but if you add a remote to an existing repository you have to set up the tracking yourself. Thankfully, the advice given by git makes that pretty easy to remember how to do.See: git checkout tag, git pull fails in branchIf like me you need to do this all the time, you can set up an alias to do it automatically by adding the following to your .gitconfig file:[alias]    set-upstream = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`When you see the message There is no tracking information..., just run git set-upstream, then git push again.Thanks to https://zarino.co.uk/post/git-set-upstream/"
"The problem is in your cygwin as you can see. in compatible dll version.Can you try and install the git form git-scm and see if the problem still happens?https://git-scm.com/download/win"
"Try git fetch so that your local repository gets all the new info from github. It just takes the information about new branches and no actual code. After that the git checkout should work fine.I got this error for a branch that was remote and had no local tracking branch. Even though I'm certain I've checked out remote branches via a simplegit checkout feature/fooin the past, to get around this error I had togit checkout -t -b feature/foo origin/feature/fooI have no idea what I did to get myself into that situation either.I was getting following error when I tried to checkout new brancherror: pathspec 'BRANCH-NAME' did not match any file(s) known to git.When I tried git checkout origin/<BRANCH-NAME> it went to detached HEAD (detached from origin/)Did following to resolve the issuegit remote updategit fetch git checkout --track origin/<BRANCH-NAME>""error: pathspec 'foo' did not match any file(s) known to git.""This happenned to me when the full repo was not fetched.try:$ git fetchGit Windows users beware - without the --icase-pathspecs or GIT_ICASE_PATHSPECS = 1 env var setting, that git pathspecs will be case-sensitive, in which case git checkout origin/FooBranch ""Some/Path/To/File.txt""is not the same as git checkout origin/FooBranch ""some/path/to/file.Txt""I got this when I did the following:Used IntelliJ IDE, connected to gitCreated a new file, and added to gitRenamed the new fileWhen I tried to check in the directory, I got this error.To fix:I opened the repo in git extensions. I saw that the file (with the old name) was staged. But since it didnt exist anymore, it could not be committed.I simply unstaged this file. Then I re-added the file (this time correctly named) into git and committed without errors.If it happens on Windows, it is probably the filename case issue. I had this error today - I've created new file, added to GIT, then I changed one letter in filename from lower to upper and then I couldn't to anything - commit, revert, delete file from repo. The only solution I found was changing the filename again back to exact same case when I added this file to GIT, then doing GIT revert to remove this file from GIT, then changing filename again as I want. After those changes I could commit to repo and then push without any problem.None of these answers solved my issue:Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git log --format=onelineb9cc6a9078312865280fb5432a43e17eff03a5c6 Formatted README288772f36befe6bd60dd41b8185f1e24e0119668 Updated README documentationd2bdbe18f4169358d46fad50eacfb89786df3bf8 Version object v3.0.0-SNAPSHOTa46b1910a3f548b4fa254a6055d25f68d3f217dd VersionFactory is now Platform agnostic24179ae569ec7bd28311389c0a7a85ea7b4f9594 Added internal.Platform abstraction252b684417cf4edd71aed43a15da2c8a59c629a7 Added IPlugin implementation for Spongee3f8d21d6cf61ee4fc806791689c984c149b45e3 Added IPlugin implementation for Bukkitaeb403914310b4b10dee9e980cf64472e2bfda79 Refactored Version.javaef50efcff700c6438d57f70fac30846de2747a7e Refactored TesterFactorya20808065878d4d28657ae362235c837cfa8e625 Added IPlugin abstraction9712a3575a70060d7ecea8b62bb5e888fdc32d07 Heavily refactored Tester02d025788ae740dbfe3ef76a132cea8ca4e47467 Added generic Predicate<T> interface9c565777abea9be6767dfdab4ab94ed1173750dd Minor refactoring of testCompareTo()2ff2a28c221681e256dcff28770782736d3a796a Version object v2.0.1d4b2e2bd830f77cdbc2297112c2e46b6555d4393 Fix compareTo()05fe7e012b07d1a5b8de29804f96d9a6b24229a1 Make compareTo() fail6e85371414357a41c1fc0cec0e75adba92f96832 Fix VersionFactory passing nullc1fd1f032f87d860d5ed9d6f6679c9fa522cff8d Version object v2.062c3a92c008a2ed11f0a4d016080afc3541d0700 Version object v1.2c42e9e617128085e872c51b4d977a04e48d69e8f Deprecated, doc'd, future-proofed getNmNikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 3a796aerror: pathspec '3a796a' did not match any file(s) known to git.I was trying to go back and build the commit for Version object v2.0.1. Luckily, I got the idea to try the whole hash code and it worked ! Which means that I was using the wrong end of the hash code.Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 2ff2aNote: checking out '2ff2a'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example:  git checkout -b new_branch_nameHEAD is now at 2ff2a28... Version object v2.0.1Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version ((2ff2a28...))$As shown above, for partial hash codes, you must supply the front-end, not the back-end.If you deleted a folder and pulled/cloned again your repo, you may need to create your local branch again. Try: git checkout -b yourbranchnameIn my case I had renamed a file changing the case of the file, i.e.   SomeFile.js -> someFile.jsI think that was related to the problem.  Doing a git fetch didn't fix the issue.I moved the files out of my project, did a fetch, and did a push without them.  Then I did a fetch, added them back, and did a push, and it worked.  I don't know if all those steps were needed, but it did ultimately work.in my case I enter submodule directory without doing git submodule init git submodule updateSo git was linked to the parent folder that indeed missed that branch.On Windows OS by default git is instaled with core.ignorecase = trueThis means that git repo files will be case insensitive, to change this you need to execute:\yourLocalRepo> git config core.ignorecase falseyou can find this configuration on .git\config file$ cat .git/refs/heads/feature/user_controlled_site_layouts3af84fcf1508c44013844dcd0998a14e61455034Can you confirm that the following works:$ git show 3af84fcf1508c44013844dcd0998a14e61455034It could be the case that someone has rewritten the history and that this commit no longer exists (for whatever reason really).This can be caused when upstream rewrites history.When this happens, I toss all affected repos, clone them fresh from upstream, and use 'git format-patch' / 'git am' to ferry any work in progress from old world to new.When I have this issue I install a new version of git. If I can't do that from a binary package, I install it from source into my $HOME directory like this:mkdir $HOME/binexport version=1.7.10.3  wget http://git-core.googlecode.com/files/git-$version.tar.gz  tar zxf git-$version.tar.gz  cd git-$version  ./configure --prefix=$HOME  make && make install  echo ""export PATH=$HOME/bin:\$PATH"" >> ~/.bashrc  chmod +x ~/.bashrc      which git      git --versionthe last two lines are to verify.(updated with code from user FractalSpace - thanks!)I had this problem today i was trying to git checkout foo and got error: pathspec 'testing' did not match any file(s) known to git. turns out i was in the wrong repo.. So lesson learned check your repo before freaking out.Happened to me after renaming an uncommitted file in Android Studio.Git seemed to have the old version in its repository, even if it didnå«t exist anymore.fetch, pull, checkout, add all and so on did not help in my case!So I opened the Git GUI of TortoiseGit which showed me the exactly file which caused trouble.Afterwards I deleted the file from the repository withgit rm -r --cached /path/to/affected/fileand the problem was goneI faced a similar issue. What led me into this trouble was:I had multiple remote branches and I deleted the folder that had the code.I did a get pull. : git pull git@git.corp......Then I added remote repository : git remote add upstream git@git.corp.......Then I tried to change branch to some other branch say AAAA and I got errorerror: pathspec 'AAAA' did not match any file(s) known to git.After spending an hour I found a solution.I deleted the source folder again.Then I did a git pull :git pull git@git.corp......Then I changed branch before linking it to remote repository : git checkout AAAthen I added it to remote repositorygit remote add upstream git@git.corp......After this I can easily switch branches.Although this is not a standard way but it worked for me after I tried all of above options.I faced this problem last time, and the thing I have done is remove the folder (or source code) related to that branch.Ex: the branch origin/foo create folder foo at your local, so I just delete it and use git fetch $ checkout to get code back from remote.Or you can do it by create folder at local same as the branch you intended to checkout.Ex: create folder foo at local, after that, use Git command: git branch --set-upstream-to=origin/foo foo, that all. Use git pull to get code."
"Are you installed the beta of El Capitan?Read this: https://github.com/Homebrew/homebrew/issues/40519"
"I have solved the same problem by using the Git command prompt in Visual Studio, because it gives you more ability:http://msdn.microsoft.com/en-us/library/vstudio/dd286572.aspxYou also may install this extension to facilitate the work with it (it gives you ability do not enter passwords each time):http://gitcredentialstore.codeplex.com/Then I used this commands:git pull // I got an error on this stepgit stashgit pullmore information about commands here:http://git-scm.com/docs/git-pullhttp://git-scm.com/book/en/Git-Tools-Stashinghttp://git-scm.com/docs/git-commitAnd as CharlesB said it is due to ""conflict between your changes and the changes from another branch"".You have some uncommited changes, commit or undo it and git pull will workI experienced this issue during a pull via visual studio. There was a change to a hidden file: .ntvs_analysis.datSo I:Show hidden files via control panel => folder options => view => show hidden files and dirs just to see that is was thereIn the project dir use the git gui to undo the change to that fileAfter that the pull request was successful."
"First, turn off compression: git config --global core.compression 0Next, let's do a partial clone to truncate the amount of info coming down: git clone --depth 1 <repo_URI>When that works, go into the new directory and retrieve the rest of the clone: git fetch --unshallow or, alternately, git fetch --depth=2147483647Now, do a regular pull: git pull --allI think there is a glitch with msysgit in the 1.8.x versions that exacerbates these symptoms, so another option is to try with an earlier version of git (<= 1.8.3, I think).This error may occur for memory needs of git. You can add these lines to your global git configuration file, which is .gitconfig in $USER_HOME, in order to fix that problem.[core] packedGitLimit = 512m packedGitWindowSize = 512m [pack] deltaCacheSize = 2047m packSizeLimit = 2047m windowMemory = 2047mI got this error when git ran out of memory.Freeing up some memory (in this case: letting a compile job finish) and trying again worked for me.In my case it was a connection problem. I was connected to an internal wifi network, in which I had limited access to ressources. That was letting git do the fetch but at a certain time it crashed.This means it can be a network-connection problem. Check if everything is running properly: Antivirus, Firewall, etc.The answer of elin3t is therefore important because ssh improves the performance of the downloading so that network problems can be avoided"
"If you initially cloned your repository then:git push origin masterIf you are wanting to push local files to an empty repository you created on github, then:git remote add origin git@github.com:username/reponame.gitYou have to have a connection established to communicate properly.  Here is a more detailed answer to help.Here is a good Git tutorial site.EDIT:""You push your local repository to the remote repository using the git push command after first establishing a relationship between the two with the git remote add command. If you visit your Github repository, it will show you the URL to use for pushing. You'll first enter something like:git remote add origin git@github.com:username/reponame.git ""Replace git@github.com:username/reponame.git with the URL from the repository.  The URL is located on the right side bar, titled ""SSH clone URL""."
"As per GitHub help, the error you're getting is related to wrong SSH configuration. Please follow indications for setting up SSH for GitHub and check accordingly.The reason for the error is that you don't have your public key (~/.ssh/id_rsa.pub) uploaded to GitHub. Add it to your account(you may do this through the web panel provided by github) and it will work."
"You can't merge with local modifications. Git protects you from losing potentially important changes.You have three options. One is to commit the change usinggit commit -m ""My message""The second is to stash it. stashing acts as a stack, where you can push changes, and you pop them in reverse order.To stash type:git stashDo the merge, and than pull the stash:git stash popThe third options is to discard the local changes using git reset --hard.$ git stash$ git pull <remote name> <remote branch name> (or) switch branch$ git stash apply --indexFirst command store your changes temporarily and discard those changes from working directory Second command you can pull / switch branches  Third command to restore the important changes which you have discarded temporarily. (--index option is useful for those files are not staged are being upstaged) Refer Git - StashingSo the situation that I ran into was the following:error: Your local changes to the following files would be overwritten by merge:  wp-content/w3tc-config/master.php  Please, commit your changes or stash them before you can merge.except, right before that, was remote:so actually this:remote: error: Your local changes to the following files would be overwritten by merge:  some/file.ext  Please, commit your changes or stash them before you can merge.What was happening was (I think, not 100% positive) the git post receive hook was starting to run and screwing up due to movement changes in the remote server repository, which in theory, shouldn't have been touched.So what I ended up doing by tracing through the post-receive hook and finding this, was having to go to the remote repository on the server, and there was the change (which wasn't on my local repository, which, in fact, said that it matched, no changes, nothing to commit, up to date, etc.) So while on the local, there were no changes, on the server, I then did a git checkout -- some/file.ext and then the local and remote repositories actually matched and I could continue to work, and deploy. Not entirely sure how this situation occurred, though a couple dozen developers plus IT changes may had something to do with it."
"The problem is due to git/https buffer settings. In order to solve it run this below command:-git config http.postBuffer 524288000And try git push again"
"That should be fixed in Git 2.8 (March 2016)See commit d562102, commit dcacb1b, commit df617b5, commit 0898c96 (13 Jan 2016) by Johannes Schindelin (dscho).(Merged by Junio C Hamano -- gitster -- in commit 3c80940, 26 Jan 2016) fetch: release pack files before garbage-collectingBefore auto-gc'ing, we need to make sure that the pack files are released in case they need to be repacked and garbage-collected.  Many codepaths that run ""gc --auto"" before exiting kept packfiles mapped and left the file descriptors to them open, which was not friendly to systems that cannot remove files that are open.  They now close the packs before doing so.That fixes git-for-widows issue 500.Looking at the test used to validate that new approach, maybe you can (since Git 2.8 is not yet out) raise artificially gc.autoPackLimit.git config gc.autoPackLimit 10000git fetchgit config gc.autoPackLimit 50 # default value"
"Answering my own question due to the weirdness of the solution. The first step is as @Don Branson, @VonC and @robinst suggested. I did a clean clone into a new folder on my Windows machine.This did not seem to work, and git returned the exact same error.  However git status showed the offending folder as ""deleted"", even though a folder with the same name did exist and contained the proper files.I then staged and committed the ""deleted"" folder, pushed to the remote repo. and pulled the commit from my original repo. Lo-and-behold the branch was updated properly.When you git pull git will apply the commits in order.  So, even though the directories are consolidated by the final commit, they won't be in the commits it's applying to reach the HEAD.  I'd try a new git clone on the Windows machine.The problem could be that Git first tries to create the new files (under the new name name) before the old directory Name has been deleted. So when it tries to create the new directory name it doesn't notice that Name already exists, because it compares them case-sensitive.You could try the following (with a clean working directory of course):Recursively delete my/folder/Name (the old location).Do git reset --hard origin/branchname (the branch you are pulling).Alternatively, just do a fresh clone."
"I set-up a test to fail. This is what I got:$ git merge newbranchAuto-merging test.txtCONFLICT (content): Merge conflict in test.txtAutomatic merge failed; fix conflicts and then commit the result.$ echo $?1Git returns 0 when it merges correctly, as expected.In short, no. You're going to see exit code 1 for errors, and 0 for success.From a quick grepping of the source, there are some of the expected 127 and 128 for their specific purposes (command not found, errors already reported), and a few unusual codes in a few places, but for run of the mill errors, it's all exit(1).Running git status on a non-git repo returns 128, not 1, which is helpful in quickly determining whether a git repo exists or not.Error 128, with no error message from git, could be a catch-all for ""unexpected problem"".I was getting this on operations that needed to modify files under .git (e.g. ""git checkout -- myfile"" to revert a modified file) by a different user. (In my case ""chmod -R og+w .git"" fixed it; naturally, don't do that unless you understand the security implications for your case!)"
"First of all I would remove following files/directories from your project-folder:bin/build/.idea/.gradle/projectname.imlThen try to import the project again in AndroidStudio. This usually works for me, and to avoid that in the future, adjust the .gitignore file properly.If the first tip does not help: have you tried downloading a more recent gradle (1.12) locally and point to that directory? (Don't point AndroidStudio to download, but do it yourself first). You are not using a gradle-wrapper are you?"
"The simplest thing would be to completely remove your stash. Note that you‰Ûªll need to remove two files - not one file, as outlined in the linked solution:rm .git/refs/stash .git/logs/refs/stash"
"If you are getting an error while doing a git clone, then above needs to be changed to:git config --global http.sslVerify falseYou might have to disable the certificate verification in your case:git config http.sslVerify false(as in ""Git: ignore a self signed certificate"")The other option, similar to ""Unable to clone Git repository due to self signed certificate"" would be to import that certificate into git.That is: copied it at the end of the file /path/to/git/bin/curl-ca-bundle.crt.Check your .gitconfig file.If you've found the following line, Remove it![http]sslCAinfo = /bin/curl-ca-bundle.crtIt worked for me."
"I think you missed the name of the remote when pulling:git pull <remote> my_branch_nameRun this command:git remote -vAnd check what is the name of the remote you want to pull fromEDIT:If you are new to Git, I would recommend you this book. It covers from basic to advanced topics, is easy to understand and to readAs the first error message indicated, you need to tell git where to look when it pulls for that branch:In Git 1.8 and up, ensure you've checked out develop and run:git branch --set-upstream-to origin/develop or the shorter:-git branch -u origin/develop In Git prior to version 1.8:git branch --set-upstream develop origin/developOnce you've done that you can git pull without having to specify the remote or the branch.If the remote origin is not yet set up, first run:git remote add origin urltry this command:git pull origin mastergit push -u origin master"
"I had similar issues with Homebrew on 10.11. I was able to overcome them by updating Xcode, GIT, and Homebrew.Though they do warn that the pre-release version of OS X is not supported, I've found that at this point most packages have been updated.I updated Xcode through the App Store, then opened it to accept the new terms.Then at the command line I ran:brew install gitThen: brew updateI was then back to installing other packages immediately."
"I had a similar problem. My laptop ran out of battery during a git operation. Boo. I didn't have any backups. (N.B. Ubuntu One is not a backup solution for git; it will helpfully overwrite your sane repository with your corrupted one.)To the git wizards, if this was a bad way to fix it, please leave a comment. It did, however, work for me... at least temporarily. Step 1: Make a backup of .git (in fact I do this in between every step that changes something, but with a new copy-to name, e.g.  .git-old-1, .git-old-2, etc.): cp -a .git .git-oldStep 2: Run git fsck --fullnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullerror: object file .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e is emptyfatal: loose object 8b61d0135d3195966b443f6c73fb68466264c68e (stored in .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e) is corruptStep 3: Remove the empty file. I figured what the heck; its blank anyway. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e rm: remove write-protected regular empty file `.git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e'? yStep 3: Run git fsck again. Continue deleting the empty files. You can also cd into the .git directory and run find . -type f -empty -delete to remove all empty files. Eventually git started telling me it was actually doing something with the object directories: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: object file .git/objects/e0/cbccee33aea970f4887194047141f79a363636 is emptyfatal: loose object e0cbccee33aea970f4887194047141f79a363636 (stored in .git/objects/e0/cbccee33aea970f4887194047141f79a363636) is corruptStep 4: After deleting all of the empty files, I eventually came to git fsck actually running: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: HEAD: invalid sha1 pointer af9fc0c5939eee40f6be2ed66381d74ec2be895ferror: refs/heads/master does not point to a valid object!error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 5: Try git reflog. Fail because my HEAD is broken. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git reflogfatal: bad object HEADStep 6: Google. Find this. Manually get the last two lines of the reflog: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ tail -n 2 .git/logs/refs/heads/masterf2d4c4868ec7719317a8fce9dc18c4f2e00ede04 9f0abf890b113a287e10d56b66dbab66adc1662d Nathan VanHoudnos <nathanvan@gmail.com> 1347306977 -0400  commit: up to p. 24, including correcting spelling of my name9f0abf890b113a287e10d56b66dbab66adc1662d af9fc0c5939eee40f6be2ed66381d74ec2be895f Nathan VanHoudnos <nathanvan@gmail.com> 1347358589 -0400  commit: fixed up to page 28Step 7: Note that from Step 6 we learned that the HEAD is currently pointing to the very last commit. So let's try to just look at the parent commit:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git show 9f0abf890b113a287e10d56b66dbab66adc1662dcommit 9f0abf890b113a287e10d56b66dbab66adc1662dAuthor: Nathan VanHoudnos <nathanvan@XXXXXX>Date:   Mon Sep 10 15:56:17 2012 -0400    up to p. 24, including correcting spelling of my namediff --git a/tex/MCMC-in-IRT.tex b/tex/MCMC-in-IRT.texindex 86e67a1..b860686 100644--- a/tex/MCMC-in-IRT.tex+++ b/tex/MCMC-in-IRT.texIt worked!Step 8: So now we need to point HEAD to 9f0abf890b113a287e10d56b66dbab66adc1662d. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git update-ref HEAD 9f0abf890b113a287e10d56b66dbab66adc1662dWhich didn't complain.Step 9: See what fsck says:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 10: The invalid sha1 pointer in cache-tree seemed like it was from a (now outdated) index file (source). So I killed it and reset the repo.nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/indexnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git resetUnstaged changes after reset:M   tex/MCMC-in-IRT.texM   tex/recipe-example/build-example-plots.RM   tex/recipe-example/build-failure-plots.RStep 11: Looking at the fsck again...nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!dangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79aThe dangling blobs are not errors. I'm not concerned with master.u1conflict, and now that it is working I don't want to touch it anymore! Step 12: Catching up with my local edits: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git status# On branch master# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   tex/MCMC-in-IRT.tex#   modified:   tex/recipe-example/build-example-plots.R#   modified:   tex/recipe-example/build-failure-plots.R#< ... snip ... >no changes added to commit (use ""git add"" and/or ""git commit -a"")nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""recovering from the git fiasco""[master 7922876] recovering from the git fiasco 3 files changed, 12 insertions(+), 94 deletions(-)nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git add tex/sept2012_code/example-code-testing.Rnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""adding in the example code""[master 385c023] adding in the example code 1 file changed, 331 insertions(+) create mode 100644 tex/sept2012_code/example-code-testing.RSo hopefully that can be of some use to people in the future. I'm glad it worked.I solved this removing the various empty files that git fsck was detecting, and then running a simple git pull.I find it disappointing that now that even filesystems implement journaling and other ""transactional"" techniques to keep the fs sane, git can get to a corrupted state (and not be able to recover by itself) because of a power failure or space on device.I just had the same issue : after pulling the distant repository, when I did a git status I got :""error: object file (...) is empty""""fatal: loose object (...) is corrupted""The way I resolved this was to :git stashremoving git file in error (not sure that is necessary)git stash clearI dont know exactly what things happened, but that instructions seemed to make everything clean.This error happens to me when I am pushing my commit and my computer hangs.This is how I've fix it.Steps to fixgit statusshow the empty/corrupt object filerm .git/objects/08/3834cb34d155e67a8930604d57d3d302d7ec12remove itgit statusI got fatal: bad object HEAD messagerm .git/indexI remove the index for the resetgit resetfatal: Could not parse object 'HEAD'.git statusgit pulljust to check whats happeningtail -n 2 .git/logs/refs/heads/MY-CURRENT-BRANCHprints the last 2 lines tail -n 2 of log branch to show my last 2 commit hashgit update-ref HEAD 7221fa02cb627470db163826da4265609aba47b2I pick the last commit hashgit statusshows all my file as deleted because i removed the .git/index filegit resetcontinue to the resetgit statusverify my fixNote:    The steps starts when I landed on this question and used the answers as reference.The git object files have gone corrupt (as pointed out in other answers as well). This can happen during machine crashes, etc.I had the same thing. After reading the other top answers here I found the quickest way to fix the broken git repository with the following commands (execute in the git working directory that contains the .git folder):(Be sure to back up your git repository folder first!)find .git/objects/ -type f -empty | xargs rmgit fetch -pgit fsck --fullThis will first remove any empty object files that cause corruption of the repository as a whole, and then fetch down the missing objects (as well as latest changes) from the remote repository, and then do a full object store check. Which, at this point, should succeed without any errors (there may be still some warnings though!)PS. This answer suggests you have a remote copy of your git repository  somewhere (e.g. on GitHub) and the broken repository is the local repository that is tied to the remote repository which is still in tact. If that is not the case, then do not attempt to fix it the way I recommend.mv your folder app to make backup, i.e. mv app_folder app_folder_bk (it is like a git stash)git clone your_repositoryFinally,.  Open a merge tool (I use meld diff viewer linux or Winmerge Windows) and copy the changes from right(app_folder_bk)  to left( new app_folder)  (it is like a git stash apply).That's all. Maybe it is not the best way, but I think it is so practical .In my case, this error occurred because I was typing commit message and my notebook turned off.I did these steps to fix the error:git checkout -b backup-branch # Create a backup branchgit reset --hard HEAD~4 # Reset to the commit where everything works well. In my case, I had to back 4 commits in the head, that is until my head be at the point before I was typing the commit message. Before doing this step, copy the hash of the commits you will reset, in my case I copied the hash of the 4 last commitsgit cherry-pick <commit-hash> # Cherry pick the reseted commits (in my case 4, so I did this step 4 times) from the old branch to the new branch. git push origin backup-branch # Push the new branch to be sure everything works wellgit branch -D your-branch # Delete the branch locally ('your-branch' is the branch with problem)git push origin :your-branch # Delete the branch from remotegit branch -m backup-branch your-branch # Rename the backup branch to have the name of the branch that had the problemgit push origin your-branch # Push the new branchgit push origin :backup-branch # Delete the backup branch from remoteHere is a really simple and quick way to deal with this problem IF you have a local repo with all the branches and commits you need, and if you're OK with creating a new repo (or deleting the server's repo and making a new one in it's place):Create a new empty repo on the server (or delete the old repo and create a new one in its place)Change the remote URL of your local copy to point to the remote URL of the new repo.Push all branches from your local repo to the new server repo.This preserves all the commit history and branches that you had in your local repo.If you have collaborators on the repo, then I think in many cases all your collaborators have to do is change the remote URL of their local repo as well, and optionally push any commits they have that the server doesn't have.This solution worked for me when I ran into this same problem. I had one collaborator. After I pushed my local repo to the new remote repo, he simply changed his local repo to point to the remote repo URL and everything worked fine.If you don't care about keeping your historical commits, just run rm -r .gitThen answer yes to anything asking about deleting write-protected files.Problem solved in under a minute.Because I have to reboot my VM regularly, so somehow this problem happens to me very often. After few times of it, I realized I cannot repeat the process described by @Nathan-Vanhoudnos every time this happens, though it always works. Then I figured out the following faster solution.Step 1Move your entire repo to another folder.mv current_repo temp_repoStep 2Clone the repo from origin again.git clone source_to_current_repo.gitStep 3Remove Everything under the new repo except the .git folder.Step 4Move Everything from the temp_repo to the new repo except the .git folder.Step 5Remove the temp_repo, and we are done.After few times, I'm sure you can do this procedures very quickly."
"There's a couple of ways to fix this but I've found git stash works good for me. It temporary puts your local changes into another place. Then you can pull, to grab the latest changes. And then you can get your local changes back.Just like this:$ git pull......file your_file.rb not up to date, cannot merge.$ git stash$ git pull$ git stash popThis sort of problem is frequently caused by trying to pull from a repository that has two filenames that differ only in case. If you are on FAT, NTFS in case-insensitive mode (essentially, any time it's being used under Windows), or HFS+ in case-insensitive mode, and have two files ""foobar"" and ""FOOBAR"", then Git will see two distinct files, but the filesystem will only see one, which will cause all kinds of problems. Git will checkout, say, ""FOOBAR"", and then checkout ""foobar"", which the filesystem sees as simply replacing the contents of ""FOOBAR"" but leaving it in place. Now to Git, it appears that ""FOOBAR"" has been replaced with the contents of ""foobar"", and ""foobar"" is gone.There are two different manifestations of this basic problem. One is when your repository actually contains two files that differ only on case. In this case, you need to work on a case-sensitive file system, or you will need to edit the repository to ensure that no collisions of this sort occur; a case-insensitive file system simply cannot store the contents of this repository.A different case that you can workaround is when a rename happens that changes the case of the file. Say, for example, that the Git repository contains a rename from ""EXAMPLE"" to ""example"". Before Git checks out the new version, it will try and check to make sure it's not overwriting some existing file that you have on your disk. Since it thinks that ""example"" is a new filename, it will ask the filesystem if it exists, and the filesystem will see ""EXAMPLE"" and say yes, so Git will refuse to check out the new version since it thinks it will be overwriting untracked files. In this case, if you have no local changes that you care about, a simple git reset --hard <revision-to-checkout> will generally be sufficient to get you past the problem and to the new revision. Just try and remember not to rename files to other names that differ only in case if you're on a case-insensitive file system, as it will cause problems like this.Generally speaking, this means you have changes in your local files that haven't been committed to your local repository.  You can also see this stackoverflow question for a bit more detail.It might a problem also with file permissions. Git is versioning them too, unless config says otherwise. Just adding this answer for people who has almost but not the like problem.Worth a try:Could you set, just for this update, set the config parameter core.trustctime to false?core.trustctimeIf false, the ctime differences between the index and the working copy are ignored; useful when the inode change time is regularly modified by something outside Git (file system crawlers and some backup systems)."
"GitHub isn't able to authenticate you.  So, either you aren't setup with an SSH key, because you haven't set one up on your machine, or your key isn't associated with your GitHub account.You can also use the HTTPS URL instead of the SSH/git URL to avoid having to deal with SSH keys.  This is GitHub's recommended method.Further, GitHub has a help page specifically for that error message, and explains in more detail everything you could check.You need to generate an SSH key (if you don't have one) and associate the public key with your Github account.  See Github's own documentation.This happened to me. For some reason my origin got messed up without my realizing it: Check if your settings are still correct git remote -vthe url needs to be something like ssh://git@github.com/YourDirectory/YourProject.git; if you don't see git@github.com, usegit remote set-url origin git://github.com/YourDirectory/YourProject.gitto set it right. Or you could use the github app to check and set the Primary Remote Repository url in the settings panel of your particular repository.Did you create a config file in your ~/.ssh directory?  It should have contents like these:Host github.com  IdentityFile ~/.ssh/github_rsaAssuming that you created an ssh key named github_rsaand uploaded it to GitHub...First, we need to check for existing ssh keys on your computer. Open up Terminal and run:cd ~/.sshls# Lists the files in your .ssh directoryAnd finally depending on what you see (in my case was): github_rsa  github_rsa.pub known_hostsJust try setting up your RSA and hopefully that will solve your ""git push origin"" issues$ ssh-keygen -lf ~/.ssh/github_rsa.pubMake sure ssh-add -l shows a fingerprint of an SSH key that's present in the list of SSH keys in your Github account.If the output is empty, but you know you have a private SSH key that works with your github account, run ssh-add on this key (found in ~/.ssh. It's named id_rsa by default, so you'll likely run ssh-add id_rsa).Else, follow these instructions to generate an SSH key pair .If you are using the GitHub for Mac UI, check preferences to make sure you're logged in.I know this problem. After add ssh key, add you ssh key to ssh agent too (from oficial docs https://help.github.com/articles/generating-ssh-keys/)ssh-agent -sssh-add ~/.ssh/id_rsaAfter it, all work fine, git can view proper key, before coudn't.you can use Https url to logini guess you are trying to login with ssh url when you say git push if it as asking only password consider you are connecting through ssh.better you use http url.I was using github earlier for one of my php project. While using github, I was using ssh instead of https. I had my machine set up like that and every time I used to commit and push the code, it would ask me my rsa key password.After some days, I stopped working on the php project and forgot my rsa password. Recently, I started working on a java project and moved to bitbucket. Since, I had forgotten the password and there is no way to recover it I guess, I decided to use the https(recommended) protocol for the new project and got the same error asked in the question.How I solved it?Ran this command to tell my git to use https instead of ssh:git config --global url.""https://"".insteadOf git://Remove any remote if any git remote rm originRedo everything from git init to git push and it works!PS: I also un-installed ssh from my machine during the debug process thinking that, removing it will fix the problem. Yes I know!! :)In case you are not accessing your own repository, or cloning inside a cloned repository (using some ""git submodule... "" commands):In the home directory of your repository:$ ls -a1. Open "".gitmodules"", and you will find something like this:[submodule ""XXX""]    path = XXX    url = git@github.com:YYY/XXX.gitChange the last line to be the HTTPS of the repository you need to pull:[submodule ""XXX""]    path = XXX    https://github.com/YYY/XXX.gitSave "".gitmodules"", and run the command for submodules, and "".git"" will be updated.2. Open "".git"", go to ""config"" file, and you will find something like this:[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true    precomposeunicode = true[remote ""origin""]    url = https://github.com/YYY/XXX.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch ""master""]    remote = origin    merge = refs/heads/master[submodule ""XXX""]    url = git@github.com:YYY/XXX.gitChange the last line to be the HTTPS of the repository you need to pull:    url = https://github.com/YYY/XXX.gitSo, in this case, the main problem is simply with the url. HTTPS of any repository can be found now on top of the repository page."
"If you are running git under a file system that is not case sensitive (Windows or OS X) this will occur if there are two branches with the same name but different capitalisation, e.g. user_model_changes and User_model_changes as both of the remote branches will match the same tracking ref.Delete the wrong remote branch (you shouldn't have branches that differ only by case) and then git remote prune origin and everything should workPermanent Fixgit update-ref -d resolved my instance of this error, e.g.git update-ref -d refs/remotes/origin/userNote that this doesn't impact remote.In my case, a subsequent git fetch fetched that branch again, and following git fetches/pulls no longer gave the error ""remote ref is at but expected"".If that doesn't work, a temporary fix:Note also that if you don't care about the branch in question (e.g. you just want to update master, not origin/user), a git pull workaround is to fetch then just merge the particular branch you care about, e.g.git fetch # may give an error for a particular branch, but other branches will still be successfully fetchedgit merge origin/master"
"I ran into the same issue and ran:  git prunegit gc  which mentioned:error: bad ref for refs/remotes/origin/ticketNameSo i removed the reference and that fixed the issue:  rm .git/refs/remotes/origin/ticketNameI think the repo got corrupted by either EGit or SourceTree (which I use in parallel) and has nothing to do with actually hash collisions. I solved it, as suggested by comments, by cloning the remote as a new repo, and copying my changes over."
"SummaryBy default, git pull creates merge commits which add noise and complexity to the code history.  In addition, pull makes it easy to not think about how your changes might be affected by incoming changes.The git pull command is safe so long as it only performs fast-forward merges.  If git pull is configured to only do fast-forward merges and a fast-forward merge isn't possible, then Git will exit with an error.  This will give you an opportunity to study the incoming commits, think about how they might affect your local commits, and decide the best course of action (merge, rebase, reset, etc.).With Git 2.0 and newer, you can run:git config --global pull.ff onlyto alter the default behavior to only fast-forward.  With Git versions between 1.6.6 and 1.9.x you'll have to get into the habit of typing:git pull --ff-onlyHowever, with all versions of Git, I recommend configuring a git up alias like this:git config --global alias.up '!git remote update -p; git merge --ff-only @{u}'and using git up instead of git pull.  I prefer this alias over git pull --ff-only because:it works with all (non-ancient) versions of Git,it fetches all upstream branches (not just the branch you're currently working on), andit cleans out old origin/* branches that no longer exist upstream.Problems with git pullgit pull isn't bad if it is used properly.  Several recent changes to Git have made it easier to use git pull properly, but unfortunately the default behavior of a plain git pull has several problems:it introduces unnecessary nonlinearities in the historyit makes it easy to accidentally reintroduce commits that were intentionally rebased out upstreamit modifies your working directory in unpredictable wayspausing what you are doing to review someone else's work is annoying with git pullit makes it hard to correctly rebase onto the remote branchit doesn't clean up branches that were deleted in the remote repoThese problems are described in greater detail below.Nonlinear HistoryBy default, the git pull command is equivalent to running git fetch followed by git merge @{u}. If there are unpushed commits in the local repository, the merge part of git pull creates a merge commit.There is nothing inherently bad about merge commits, but they can be dangerous and should be treated with respect:Merge commits are inherently difficult to examine.  To understand what a merge is doing, you have to understand the differences to all parents.  A conventional diff doesn't convey this multi-dimensional information well.  In contrast, a series of normal commits is easy to review.Merge conflict resolution is tricky, and mistakes often go undetected for a long time because merge commits are difficult to review.Merges can quietly supersede the effects of regular commits.  The code is no longer the sum of incremental commits, leading to misunderstandings about what actually changed.Merge commits may disrupt some continuous integration schemes (e.g., auto-build only the first-parent path under the assumed convention that second parents point to incomplete works in progress).Of course there is a time and a place for merges, but understanding when merges should and should not be used can improve the usefulness of your repository.Note that the purpose of Git is to make it easy to share and consume the evolution of a codebase, not to precisely record history exactly as it unfolded.  (If you disagree, consider the rebase command and why it was created.)  The merge commits created by git pull do not convey useful semantics to others‰ÛÓthey just say that someone else happened to push to the repository before you were done with your changes.  Why have those merge commits if they aren't meaningful to others and could be dangerous?It is possible to configure git pull to rebase instead of merge, but this also has problems (discussed later).  Instead, git pull should be configured to only do fast-forward merges.Reintroduction of Rebased-out CommitsSuppose someone rebases a branch and force pushes it.  This generally shouldn't happen, but it's sometimes necessary (e.g., to remove a 50GiB log file that was accidentally comitted and pushed).  The merge done by git pull will merge the new version of the upstream branch into the old version that still exists in your local repository.  If you push the result, pitch forks and torches will start coming your way.Some may argue that the real problem is force updates.  Yes, it's generally advisable to avoid force pushes whenever possible, but they are sometimes unavoidable.  Developers must be prepared to deal with force updates, because they will happen sometimes.  This means not blindly merging in the old commits via an ordinary git pull.Surprise Working Directory ModificationsThere's no way to predict what the working directory or index will look like until git pull is done.  There might be merge conflicts that you have to resolve before you can do anything else, it might introduce a 50GiB log file in your working directory because someone accidentally pushed it, it might rename a directory you are working in, etc.git remote update -p (or git fetch --all -p) allows you to look at other people's commits before you decide to merge or rebase, allowing you to form a plan before taking action.Difficulty Reviewing Other People's CommitsSuppose you are in the middle of making some changes and someone else wants you to review some commits they just pushed.  git pull's merge (or rebase) operation modifies the working directory and index, which means your working directory and index must be clean.You could use git stash and then git pull, but what do you do when you're done reviewing?  To get back to where you were you have to undo the merge created by git pull and apply the stash.git remote update -p (or git fetch --all -p) doesn't modify the working directory or index, so it's safe to run at any time‰ÛÓeven if you have staged and/or unstaged changes.  You can pause what you're doing and review someone else's commit without worrying about stashing or finishing up the commit you're working on. git pull doesn't give you that flexibility.Rebasing onto a Remote BranchA common Git usage pattern is to do a git pull to bring in the latest changes followed by a git rebase @{u} to eliminate the merge commit that git pull introduced.  It's common enough that Git has some configuration options to reduce these two steps to a single step by telling git pull to perform a rebase instead of a merge (see the branch.<branch>.rebase, branch.autosetuprebase, and pull.rebase options).Unfortunately, if you have an unpushed merge commit that you want to preserve (e.g., a commit merging a pushed feature branch into master), neither a rebase-pull (git pull with branch.<branch>.rebase set to true) nor a merge-pull (the default git pull behavior) followed by a rebase will work.  This is because git rebase eliminates merges (it linearizes the DAG) without the --preserve-merges option.  The rebase-pull operation can't be configured to preserve merges, and a merge-pull followed by a git rebase -p @{u} won't eliminate the merge caused by the merge-pull.  Update:  Git v1.8.5 added git pull --rebase=preserve and git config pull.rebase preserve.  These cause git pull to do git rebase --preserve-merges after fetching the upstream commits.  (Thanks to funkaster for the heads-up!)Cleaning Up Deleted Branchesgit pull doesn't prune remote tracking branches corresponding to branches that were deleted from the remote repository.  For example, if someone deletes branch foo from the remote repo, you'll still see origin/foo.This leads to users accidentally resurrecting killed branches because they think they're still active.A Better Alternative:  Use git up instead of git pullInstead of git pull, I recommend creating and using the following git up alias:git config --global alias.up '!git remote update -p; git merge --ff-only @{u}'This alias downloads all of the latest commits from all upstream branches (pruning the dead branches) and tries to fast-forward the local branch to the latest commit on the upstream branch.  If successful, then there were no local commits, so there was no risk of merge conflict.  The fast-forward will fail if there are local (unpushed) commits, giving you an opportunity to review the upstream commits before taking action.This still modifies your working directory in unpredictable ways, but only if you don't have any local changes.  Unlike git pull, git up will never drop you to a prompt expecting you to fix a merge conflict.Another Option: git pull --ff-only --all -pThe following is an alternative to the above git up alias:git config --global alias.up 'pull --ff-only --all -p'This version of git up has the same behavior as the previous git up alias, except:the error message is a bit more cryptic if your local branch isn't configured with an upstream branchit relies on an undocumented feature (the -p argument, which is passed to fetch) that may change in future versions of GitIf you are running Git 2.0 or newerWith Git 2.0 and newer you can configure git pull to only do fast-forward merges by default:git config --global pull.ff onlyThis causes git pull to act like git pull --ff-only, but it still doesn't fetch all upstream commits or clean out old origin/* branches so I still prefer git up.My answer, pulled from the discussion that arose on HackerNews:I feel tempted to just answer the question using the Betteridge Law of Headlines: Why is git pull considered harmful? It isn't.Nonlinearities aren't intrinsically bad. If they represent the actual history they are ok.Accidental reintroduction of commits rebased upstream is the result of wrongly rewriting history upstream. You can't rewrite history when history is replicated along several repos.Modifying the working directory is an expected result; of debatable usefulness, namely in the face of the behaviour of hg/monotone/darcs/other_dvcs_predating_git, but again not intrinsically bad.Pausing to review others' work is needed for a merge, and is again an expected behaviour on git pull. If you do not want to merge, you should use git fetch. Again, this is an idiosyncrasy of git in comparison with previous popular dvcs, but it is expected behaviour and not intrinsically bad. Making it hard to rebase against a remote branch is good. Don't rewrite history unless you absolutely need to. I can't for the life of me understand this pursuit of a (fake) linear historyNot cleaning up branches is good. Each repo knows what it wants to hold. Git has no notion of master-slave relationships.It's not considered harmful if you are using Git correctly.  I see how it affects you negatively given your use case, but you can avoid problems simply by not modifying shared history.The accepted answer claimsThe rebase-pull operation can't be configured to preserve mergesbut as of Git 1.8.5, which postdates that answer, you can dogit pull --rebase=preserveorgit config --global pull.rebase preserveorgit config branch.<name>.rebase preserveThe docs sayWhen preserve, also pass --preserve-merges along to 'git rebase' so that locally committed merge commits will not be flattened by running 'git pull'.This previous discussion has more detailed information and diagrams: git pull --rebase --preserve-merges. It also explains why git pull --rebase=preserve is not the same as git pull --rebase --preserve-merges, which doesn't do the right thing.This other previous discussion explains what the preserve-merges variant of rebase actually does, and how it is a lot more complex than a regular rebase: What exactly does git's ""rebase --preserve-merges"" do (and why?)"
"I had this problem, and I solved it by removing the file .git/ORIG_HEAD then doing the pull again.   The .git/ORIG_HEAD file was 0 bytes instead of the git reference it was supposed to contain, so I just got rid of it.Check the git remote prune origin mentioned in addition of the git gc --prune=now in ""git pull fails ‰ÛÏunalble to resolve reference‰Ûù ‰ÛÏunable to update local ref‰Ûù"".If you have a .git/rebase-merge, consider removing it (as in ""git rebase and deleted rebasing branches causing ‰ÛÏInteractive rebase already started‰Ûù error message"")Check also the content of .git/HEAD, as in this issue.If this is a repo corruption of some kind (see ""Git corrupt master branch""), try first to clone your repo again, and re-apply your current modifications on top of that repo (through git format-patch if you need to)This answer doesn't solve the OP's problem, but solves a similar one.I had a similar problem (I got error: cannot lock ref ... is at ... but expected ...), but it was because there were two branches in the repo with the same name, but with different case. Maybe this answer could help people that get here, I wasn't able to find an answer elsewhere.I deleted one of the branches, and then deleted its corresponding reference from: .git/ref/.../branch_name, then git pulled. This happens due to me working on a case-insensitive file system, while the two branches were pushed on a case-sensitive file system.For example, the two branches are BRANCH1 and branch1, and they are both under origin remote. First, delete one of the branches, for example BRANCH1. Then remove its ref:rm .git/refs/remotes/origin/BRANCH1Then git pull, and it should be fine."
"The answer was simple but not obvious:Instead of:git clone https://github.com/org/project.gitdo:git clone https://username@github.com/org/project.gitor (insecure)git clone https://username:password@github.com/org/project.git(Note that in the later case, your password will may be visible by other users on your machine by running ps u -u $you and will appear cleartext in your shell's history by default)All 3 ways work on my Mac, but only the last 2 worked on the remote Linux box. (Thinking back on this, it's probably because I had a global git username set up on my Mac, whereas on the remote box I did not? That might have been the case, but the lack of prompt for a username tripped me up... ) Haven't seen this documented anywhere, so here it is.You can manual disable ssl verfiy, and try again. :)git config --global http.sslverify falseMake sure you have git 1.7.10 or later, it now prompts for user/password correctly. (You can download the latest version here)As JERC said, make sure you have an updated version of git. If you are only using the default settings, when you try to install git you will get version 1.7.1. Other than manually downloading and installing the latest version of get, you can also accomplish this by adding a new repository to yum.From tecadmin.net:Download and install the rpmforge repository:# use this for 64-bitrpm -i 'http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm'# use this for 32-bitrpm -i 'http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.i686.rpm'# then run this in either caserpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txtThen you need to enable the rpmforge-extras. Edit /etc/yum.repos.d/rpmforge.repo and change enabled = 0 to enabled = 1 under [rpmforge-extras]. The file looks like this:### Name: RPMforge RPM Repository for RHEL 6 - dag### URL: http://rpmforge.net/[rpmforge]name = RHEL $releasever - RPMforge.net - dagbaseurl = http://apt.sw.be/redhat/el6/en/$basearch/rpmforgemirrorlist = http://mirrorlist.repoforge.org/el6/mirrors-rpmforge#mirrorlist = file:///etc/yum.repos.d/mirrors-rpmforgeenabled = 1protect = 0gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmforge-daggpgcheck = 1[rpmforge-extras]name = RHEL $releasever - RPMforge.net - extrasbaseurl = http://apt.sw.be/redhat/el6/en/$basearch/extrasmirrorlist = http://mirrorlist.repoforge.org/el6/mirrors-rpmforge-extras#mirrorlist = file:///etc/yum.repos.d/mirrors-rpmforge-extrasenabled = 0 ####### CHANGE THIS LINE TO ""enabled = 1"" #############protect = 0gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmforge-daggpgcheck = 1[rpmforge-testing]name = RHEL $releasever - RPMforge.net - testingbaseurl = http://apt.sw.be/redhat/el6/en/$basearch/testingmirrorlist = http://mirrorlist.repoforge.org/el6/mirrors-rpmforge-testing#mirrorlist = file:///etc/yum.repos.d/mirrors-rpmforge-testingenabled = 0protect = 0gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmforge-daggpgcheck = 1Once you've done this, then you can update git withyum update gitI'm not sure why, but they then suggest disabling rpmforge-extras (change back to enabled = 0) and then running yum clean all.Most likely you'll need to use sudo for these commands.This is the dumbest answer to this question, but check the status of GitHub. This one got me :)I was able to get a git 1.7.1  to work after quite some time.First, I had to do disable SSL just so I could pull:git config --global http.sslverify falseThen I could clonegit clone https://github.com/USERNAME/PROJECTNAME.gitThen after adding and committing i was UNABLE to push back.So i didgit remote -vorigin  https://github.com/USERNAME/PROJECTNAME.git (fetch)origin  https://github.com/USERNAME/PROJECTNAME.git (push)to see the pull and push adresses:These must be modified with USERNAME@git remote set-url origin https://USERNAME@github.com/USERNAME/PROJECTNAME.gitIt will still prompt you for a password, which you could add with USERNAME:PASSWORD@github.....But dont do that, as you save your password in cleartext for easy theft. I had to do this combination since I could not get SSH to work due to firewall limitations.I had to specify user name to work on 1.7.1 git version:git remote set-url origin https://username@github.com/org/project.git"
"Cygwin uses persistent shared memory sections, which can on occasion become corrupted. The symptom of this is that some Cygwin programs begin to fail, but other applications are unaffected. Since these shared memory sections are persistent, often a system reboot is needed to clear them out before the problem can be resolved.I had the same problem. I found solution here http://jakob.engbloms.se/archives/1403 c:\msysgit\bin>rebase.exe -b 0x50000000 msys-1.0.dllFor me solution was slightly different. It wasC:\Program Files (x86)\Git\bin>rebase.exe -b 0x50000000 msys-1.0.dllBefore you rebase dlls, you should make sure it is not in use: tasklist /m msys-1.0.dllIf the rebase command fails with something like: ReBaseImage (msys-1.0.dll) failed with last error = 6You will need to perform the following steps in order:Copy the dll to another directoryRebase the copy using the commands aboveReplace the original dll with the copy.If any issue run the commands as Administratortl;dr: Restart the computer or install Git for Windows 2.Technical details      0 [main] us 0 init_cheap: VirtualAlloc pointer is null, Win32 error 487AllocationBase 0x0, BaseAddress 0x68570000, RegionSize 0x2A0000, State 0x10000PortableGit\bin\bash.exe: *** Couldn't reserve space for cygwin's heap, Win32 error 0This symptom by itself has nothing to do with image bases of executables, corrupted Cygwin's shared memory sections, conflicting versions of DLLs etc.It's Cygwin code failing to allocate a ~5 MB large chunk of memory for its heap at this fixed address 0x68570000, while only a hole ~2.5 MB large was apparently available there. The relevant code can be seen in msysgit source.Why is that part of address space not free?There can be many reasons. In my case it was some other modules loaded at a conflicting address:The last address would be around 0x68570000 + 5 MB = 0x68C50000, but there are these WOW64-related DLLs loaded from 0x68810000 upwards, which block the allocation.Whenever there is some shared DLL, Windows in general tries to load it at the same virtual address in all processes to save some relocation processing. It's just a matter of bad luck that these system components got somehow loaded at a conflicting address this time.Why is there Cygwin in your Git?Because Git is a rich suite consisting of some low level commands and a lot of helpful utilities, and mostly developed on Unix-like systems. In order to be able to build it and run it without massive rewriting, it need at least a partial Unix-like environment.To accomplish that, people have invented MinGW and MSYS - a minimal set of build tools to develop programs on Windows in an Unix-like fashion. MSYS also contains a shared library, this msys-1.0.dll, which helps with some of the compatibility issues between the two platforms during runtime. And many parts of that have been taken from Cygwin, because someone already had to solve the same problems there.So it's not Cygwin, it's MinGW's runtime DLL what's behaving weird here.In Cygwin, this code has actually changed a lot since what's in MSYS 1.0 - the last commit message for that file says ""Import Cygwin 1.3.4"", which is from 2001!Both current Cygwin and the new version of MSYS - MSYS2 - already have different logic in place, which is hopefully more robust. It's only old versions of Git for Windows which have been still built using the old broken MSYS system.Clean solutions:Simply restarting the computer to clean the address space (loading these modules at a different random address) is a safe and clean bet.Install Git for Windows 2 - it is built with the new, properly maintained MSYS2 and also has many new features, plenty of bug fixes and so on. There is also a 64-bit version available which would lower the chance of address space clashes considerably even if this problem was not fixed.Hacky solutions:Changing PATH can sometimes work because there might be different versions of msys-1.0.dll in different versions of Git or other MSYS-based applications, which perhaps use different address, different size of this heap etc.Rebasing msys-1.0.dll might be a waste of time, because 1) being a DLL, it already has relocation information and 2) ""in any version of Windows OS there is no guarantee that a (...) DLL will always load at same address space"" anyway (source). The only way this can help is if the msys-1.0.dll itself loads at the conflicting address it's then trying to use.Considering the findings above, I originally binary patched the msys-1.0.dll binary to use a different value for _cygheap_start and that resolved the problem immediately.I have seen the same error message after upgrading to git1.8.5.2:Simply make a search for all msys-1.0.dll on your C:\ drive, and make the one used by Git comes first.For instance, in my case I simply changed the order of:C:\prgs\Gow\Gow-0.7.0\bin\msys-1.0.dllC:\prgs\git\PortableGit-1.8.5.2-preview20131230\bin\msys-1.0.dllBy making the Git path C:\prgs\git\PortableGit-1.8.5.2-preview20131230\bin\ come first in my %PATH%, the error message disappeared.No need to reboot or to even change the DOS session.Once the %PATH% is updated in that DOS session, the git commands just work.Note that carmbrester and Sixto Saez both report below (in the comments) having to reboot in order to fix the issue.Note: First, also removing any msys-1.0.dll, like one in %LOCALAPPDATA%Very simple verison of the rebase solution: Go to the folder where git is installed, such as: C:\Program Files (x86)\Git\binBy holding shift and right clicking in the folder, you should be able to open a command prompt from there, Then run: rebase.exe -b 0x50000000 msys-1.0.dllThis fixed it for me when the restart approach didn't work.Hope it helps.If a reboot does not correct the problem (as suggested by Greg Hegwill's answer) then check your PATH for conflicting installation(s) of the msys-1.0.dll (and possibly other related DLLs).In my particular situation MinGW's installation of msys has a copy of that DLL in its bin directory (<MinGW_Install_Path>\msys\1.0\bin), and it was listed in the PATH. Git's cmd directory was listed in the PATH, but its bin was not. (Git's version of msys-1.0.dll is in the bin directory. Apparently the default installation of MSys-Git does not add its bin to the PATH.)A temporary fix was to add Git's bin directory to the PATH so that it appears before MinGW's paths. (A more permanent fix will likely involve sorting out the path conflicts between MinGW's msys and Git's and/or removing the duplicate msys installations.)I ran into this today. Led by Greg Hewgill's answer, I looked at running processes on my system to see if anything was ""stuck"" or if other users were logged into the machine doing anything with git. I then launched cygwin (installed separately) on this particular machine. It launched ok. I closed it and then tried the Git Extensions again (I was trying a pull operation) and it worked. Not sure if the launching of cygwin cleared something that was shared but this is the first time I ran into this error and this seemed to fix it for me.I had the same problem, after some Windows 8.0 crash and update, on msys git 1.9. I didn't find any msys/git in my path, so I just added it in windows local-user envinroment settings. It worked without restarting. Basically, similiar to RobertB, but I didn't have any git/msys in my path.Btw:I tried using rebase -b blablabla msys.dll, but had error ""ReBaseImage (msys-1.0.dll) failed with last error = 6""if you need this quickly and don't have time debugging, I noticed ""Git Bash.vbs"" in Git directory successfuly starts bash shell.This error happens very rarely on my Windows machine.  I ended up rebooting the machine, and the error went away."
"With this kind of error, I usually start by raising the postBuffer size:git config --global http.postBuffer 524288000# some comments below report having to double the value:git config --global http.postBuffer 1048576000From the git config man page:http.postBufferMaximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system.  For requests larger than this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a massive pack file locally. Default is 1 MiB, which is sufficient for most requests.Even for clone, that can have an effect, and in this instance, the OP Joe reports:[clone] works fine nowNote: if something went wrong on the server side, and if the server uses Git 2.5+ (Q2 2015), the error message might be more explicit.See ""Git cloning: remote end hung up unexpectedly, tried changing postBuffer but still failing"".Kulai (in the comments) points out to this Atlassian  Troubleshooting Git page, which adds:Error code 56 indicates a curl receive error of CURLE_RECV_ERROR which means there was some issue that prevented the data from being received during the clone process.  Typically this is caused by a network setting, firewall, VPN client, or anti-virus that is terminating the connection before all data has been transferred.It also mentions the following environment variable, order to help with the debugging process.# Linuxexport GIT_TRACE_PACKET=1export GIT_TRACE=1export GIT_CURL_VERBOSE=1#Windowsset GIT_TRACE_PACKET=1set GIT_TRACE=1set GIT_CURL_VERBOSE=1The http.postBuffer trick did not work for me. However:For others experiencing this problem, it may be an issue with GnuTLS. If you set Verbose mode, you may see the underlying error look something along the lines of the code below.Unfortunately, my only solution so far is to use SSH. I've seen a solution posted elsewhere to compile Git with OpenSSL instead of GnuTLS. There is an active bug report for the issue here.GIT_CURL_VERBOSE=1 git clone https://github.com/django/django.gitCloning into 'django'...* Couldn't find host github.com in the .netrc file; using defaults* About to connect() to github.com port 443 (#0)*   Trying 192.30.252.131... * Connected to github.com (192.30.252.131) port 443 (#0)* found 153 certificates in /etc/ssl/certs/ca-certificates.crt*    server certificate verification OK*    common name: github.com (matched)*    server certificate expiration date OK*    server certificate activation date OK*    certificate public key: RSA*    certificate version: #3*    subject: *    start date: Mon, 10 Jun 2013 00:00:00 GMT*    expire date: Wed, 02 Sep 2015 12:00:00 GMT*    issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance EV CA-1*    compression: NULL*    cipher: ARCFOUR-128*    MAC: SHA1> GET /django/django.git/info/refs?service=git-upload-pack HTTP/1.1User-Agent: git/1.8.4Host: github.comAccept: */*Accept-Encoding: gzipPragma: no-cache< HTTP/1.1 200 OK< Server: GitHub.com< Date: Thu, 10 Oct 2013 03:28:14 GMT< Content-Type: application/x-git-upload-pack-advertisement< Transfer-Encoding: chunked< Expires: Fri, 01 Jan 1980 00:00:00 GMT< Pragma: no-cache< Cache-Control: no-cache, max-age=0, must-revalidate< Vary: Accept-Encoding< * Connection #0 to host github.com left intact* Couldn't find host github.com in the .netrc file; using defaults* About to connect() to github.com port 443 (#0)*   Trying 192.30.252.131... * connected* found 153 certificates in /etc/ssl/certs/ca-certificates.crt* SSL re-using session ID*    server certificate verification OK*    common name: github.com (matched)*    server certificate expiration date OK*    server certificate activation date OK*    certificate public key: RSA*    certificate version: #3*    subject: *    start date: Mon, 10 Jun 2013 00:00:00 GMT*    expire date: Wed, 02 Sep 2015 12:00:00 GMT*    issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance EV CA-1*    compression: NULL*    cipher: ARCFOUR-128*    MAC: SHA1> POST /django/django.git/git-upload-pack HTTP/1.1User-Agent: git/1.8.4Host: github.comAccept-Encoding: gzipContent-Type: application/x-git-upload-pack-requestAccept: application/x-git-upload-pack-resultContent-Encoding: gzipContent-Length: 2299* upload completely sent off: 2299out of 2299 bytes< HTTP/1.1 200 OK< Server: GitHub.com< Date: Thu, 10 Oct 2013 03:28:15 GMT< Content-Type: application/x-git-upload-pack-result< Transfer-Encoding: chunked< Expires: Fri, 01 Jan 1980 00:00:00 GMT< Pragma: no-cache< Cache-Control: no-cache, max-age=0, must-revalidate< Vary: Accept-Encoding< remote: Counting objects: 232015, done.remote: Compressing objects: 100% (65437/65437), done.* GnuTLS recv error (-9): A TLS packet with unexpected length was received.* Closing connection #0error: RPC failed; result=56, HTTP code = 200fatal: The remote end hung up unexpectedlyfatal: early EOFfatal: index-pack failedObs.: Changing http.postBuffer might also require to set up the Nginx configuration file for gitlab to accept larger body sizes for the client, by tuning the value of client_max_body_size.However, there is a workaround if you have access to the Gitlab machine or to a machine in its network, and that is by making use of git bundle.go to your git repository on the source machinerun git bundle create my-repo.bundle --alltransfer (eg., with rsync) the my-repo.bundle file to the destination machineon the destination machine, run git clone my-repo.bundlegit remote set-url origin ""path/to/your/repo.git""git push All the best!None of the above worked for me, but here's what did: http://stackoverflow.com/a/22317479The complete error message I'd been receiving was:fatal: The remote end hung up unexpectedlyfatal: early EOFfatal: index-pack failedI got solution after using below cmd:git repack -a -f -d --window=250 --depth=250"
"I had exactly the same problem, and in our case it turned out the problem also had to do with SSH keys - namely, with access rights to the certain GH repo.Local key was mine and worked fine, while server key were created by some other guy, and when his access to repo was revoked, we couldn't pull the code anymore - and github gives ""Repo not found"" rather than ""You don't have the rights to access this repo"".Github had some issues with SSH keys earlier this month, maybe you need to confirm yours? They should be listed under: https://github.com/settings/ssh"
"I just got the same problem and just figured out what's cause.Github seems only supports ssh way to read&write the repo, although https way also displayed 'Read&Write'.So you need to change your repo config on your PC to ssh way:edit .git/config file under your repo directoryfind url=entry under section [remote ""origin""]change it from url=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git to    url=ssh://git@github.com/derekerdmann/lunch_call.git. that is, change all the texts before @ symbol to ssh://gitSave config file and quit. now you could use git push origin master to sync your repo on GitHubTo definitely be able to login using https protocol, you should first set your authentication credential to the git Remote URI:git remote set-url origin https://yourusername@github.com/user/repo.gitThen you'll be asked for a password when trying to git push.In fact, this is on the http authentication format. You could set a password too:https://youruser:password@github.com/user/repo.gitYou should be aware that if you do this, your github password will be stored in plaintext in your .git directory, which is obviously undesirable.One small addition to Sean's answer.Instead of editing .git/config file manually, you can use git remote set-url command.In your case it should be:git remote set-url origin ssh://git@github.com/derekerdmann/lunch_call.gitI find it easier and cleaner, than messing around with dot-files.help.github.com: Changing a remote's URLThe other answers that suggest switching to SSH sort of miss the point. HTTPS is supported, but you must log in with you GITHUB password, not your SSH passphrase (which was what was giving me the same exact error). I was having the same problem, but making sure to use my actual GitHub password at the terminal password prompt fixed the solution with no alteration to the config, or resorting to SSH.The reason it is important to note this, is many public institutions (such as my school) will block SSH, but allow HTTPS (which is the only reason I started cloning over HTTPS in the first place).Hope that helps anyone else having the same issue...Edit .git/config file under your repo directoryFind url= entry under section [remote ""origin""]Change it from url=https://github.com/rootux/ms-Dropdown.git to https://USERNAME@github.com/rootux/ms-Dropdown.gitwhere USERNAME is your github user nameI think @deepwaters got the answer correct for older versions. The HTTPS URL needs to have the username. I had git 1.7.0.4 and git push origin master wouldn't even ask for a password till I added it.Upgrade your git. GitHub has answered this question at https://help.github.com/articles/error-the-requested-url-returned-error-403.Figured it out. I cloned over HTTPS. Setting up my public SSH keys, cloning over SSH, and pushing over SSH fixed it.Same error and resolution on Mac OS X.Everything was working fine till I created a new account on GitHub and tried to push$ git push -u origin masterAnd got the error:remote: Permission to NEWUSER/NEWREPO.git denied to OLDUSER. fatal: unable to access ‰Û÷https://github.com/NEWUSER/NEWREPO.git/': The requested URL returned error: 403It should have fixed by setting the user.name either for global or current repo$ git config ‰ÛÒ-global user.name NEWUSER$ git config user.name NEWUSERBut it didn‰Ûªt. I got it fixed by deleting the OLDUSER associated with GitHub from Keychain Access app under Passwords section. Then the push command went successful.$ git push -u origin masterreferenceJust add you username into url like this :https://islam9@github.com/islam9/bootstrap-rtlplease check:http://islamkhalil.wordpress.com/2012/12/06/github-error-pushing-to-git-returning-error-code-403-fatal/A 403 code is ""Forbidden"".  The server saw your request and refused it.  Do you have permission to push to that repository?I actually had a very simple fix to this. All i did was edit the git config file differently after cloning the repository.  The remote origin url is what you need to edit in your default config file. It should look like seen below[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true[remote ""origin""]    fetch = +refs/heads/*:refs/remotes/origin/*    url = https://*username*@github.com/*username*/*repository*.git[branch ""master""]    remote = origin    merge = refs/heads/masterThis works for me -:git remote set-url origin https://username@github.com/user/repo.gitHope it helpsFor anyone curious, my mac machine vs lucid vm ran git 1.7.6 vs 1.7.0.4, and the exact same repo was pushable from my mac (newer git) but not the VMSame curl version. Perhaps some older git versions don't support https pushes?change it fromurl=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git tourl=ssh://git@github.com/derekerdmann/lunch_call.gitIt works! Do not forget the ""git"" before the ""@"".I figured out my own variation of this problem.The issue was not changing the protocol from https to ssl, but instead,setting the Github global username and email! (I was trying to push to a private repository.git config --global user.email ""your_github_email_@email.com""git config --global user.name ""Your full name""I had this problem right now, and it turned out that my server /etc/resolver.conf file had a bad ip address.  Might help others.It could be an accounting issue. The Github account of the upstream (private) repo owner may not be financial. I've seen this where the client's credit card expired.After changing https to http within gitbox app, it worked for me.Sometimes there is nothing wrong with settings, and there are some problems on github servers.https://status.github.com - current status of github :)Github has page dedicated to troubleshooting this error:https://help.github.com/articles/https-cloning-errorsIn my case it turned out that using a new version of git (1.8.5.2) solved this problem.100 % Tested and It Save Your  lot of Time that your Are Finding Solution on NetClick on Your Repository and The Write Hand Side Click On ""Setting "" 2.IN the Left Hand Side Option Panel Click on  ""Collaborators""Add And Person Name You Know In Git Hub  Then Click "" Add Collaborators""After this our ""Push to Git"" work Fine !!Edit .git/config file under your repo directoryFind url= entry under section [remote ""origin""]Change it from url=https://github.com/rootux/ms-Dropdown.git to https://USERNAME@github.com/rootux/ms-Dropdown.gitwhere USERNAME is your github user name=> This solution worked for me."
"The complaint is actually that the remote didn't reply with a proper git response - ie, there's a problem on the server running .  (The first four bytes should be the line length - instead, they were the characters Unab...  probably an error message of some kind.)What happens when you run ssh <host> git-receive-pack <path-to-git-repository>?  You should see the error message that your git client is barfing on.Maybe you have a statement in the server's .bashrc that produces output. I, for example had this:[[ -s ""$HOME/.rvm/scripts/rvm"" ]] && source ""$HOME/.rvm/scripts/rvm""rvm use ruby-1.9.3-p194@rails32In this case the output from the rvm use will be (wrongly) interpreted as coming from git. So replace it by:rvm use ruby-1.9.3-p194@rails32 > /dev/nullYou can redirect any output from .bashrc to stderr:# inside .bashrcecho 'some error/warning/remind message' 1>&2git will ignore this symbolsCheck your startup files on the account used to connect to the remote machine for ""echo"" statements. For the Bash shell these would be your .bashrc and .bash_profile etc. Edward Thomson is correct in his answer but a specific issue that I have experienced is when there is some boiler-plate printout upon login to a server via ssh. Git will get the first four bytes of that boiler-plate and raise this error. Now in this specific case I'm going to guess that ""Unab"" is actually the work ""Unable..."" which probably indicates that there is something else wrong on the Git host.I had a similar problem on Windows using Git Bash. I kept getting this error when trying to do a git clone. The repository was on a Linux box with GitLab installed.git clone git@servername:path/to/repofatal: protocol error: bad line length character: git@I made sure the ssh key was generated. The public key was added on GitLab. The ssh-agent was running and the generated key was added (github link).I ran out of options and then finally tried closing Git Bash and opening it again by right clicking 'Run as Administrator'. Worked after that.The error transformed in:fatal: protocol error: bad line length character: fataafter adding the location of git-upload-pack to the system path.The problem seem to be an apostrophe added around the repository name: Looking with a tool like Process Monitor (from sys internals), that were added by the git client. It seems to be a git specific windows problem.I tried the same command line in the prompt of the server: the full error was ""fatal: not a given repository (or any of the parent directories): .git""In conclusion, to me it seems like a software bug. Be advised that I am not a git expert, it is first time I use git, i come from subversion and perforce.I had the same problem as Christer Fernstrom. In my case it was a message I had put in my .bashrc that reminds me do do a backup when I haven't done one in a couple of days.i also encounter that error once in a while, but when it does, it means that my branch is not up-to-date so i have to do git pull origin <current_branch>FYI I got this same error message after I upgraded a CentOS6 container to CentOS7 -- some git operations started failing when building the container, e.g.# git remote show originfatal: protocol error: bad line length character: InvaRunning ssh gave me an error I could search on:# ssh git@bitbucket.orgInvalid clock_id for clock_gettime: 7That led me to https://github.com/wolfcw/libfaketime/issues/63 where I realized I had forgotten I had a LD_PRELOAD=/usr/local/lib/faketime/libfaketime.so.1 in a parent Dockerfile. Commenting that out fixed the error.After loading the SSH private key in Git Extensions, this issue gets resolved."
"All those files it lists are untracked in your local branch, so if you do the merge, any changes you have made to those files will be irretrievably lost.  Therefore, git doesn't let you do the merge.To fix it, either delete all those files from your working tree or add and commit them, depending on if you want to keep your local changes to them or not."
"As Julian said see https://confluence.atlassian.com/display/FISHKB/Git+indexing+fails+due+to+bad+pack+headerIt really can be a memory issue, and to make sure we don't lose the solution here it is:git config --global pack.windowMemory ""100m""git config --global pack.SizeLimit ""100m"" git config --global pack.threads ""1""It appears the answer is in the comments: git fsckAdding git config --global pack.window ""0"" worked for me...along with followinggit config --global pack.windowMemory ""100m""git config --global pack.packSizeLimit ""100m"" git config --global pack.threads ""1""Reason: Git clone compresses the data while cloning the repositoryIt compresses the data on the server memory before receiving the data/files.If the server has out of memory you will get the above error while packing the objectsYou can fix the issue by making git clone the repository without packing the objects on the server with the following.git config --global pack.window ""0""Just got this error, and spent half a day doing all the things described in the post : fsck, repack, gc, configuring memory options.Also followed this post : http://git.kernel.org/cgit/git/git.git/tree/Documentation/howto/recover-corrupted-blob-object.txt?id=HEAD But in the end, it was as simple as finding the damaged object(21f3981dd35fccd28febabd96f27241eea856c50 in this case) in the bare repository and replacing it with the non damaged version(which can be found in the .git folder of any of the local repositories which pulled/cloned from the bare repository.)"
"OK, I guess I should share.  I have the same problem, but I have a workaround.   The problem seems to be the length of the PATH.   If I do a git pull, I get the fork failure:$ git pull*emphasized text*      2 [main] git 7384 fork: child -1 - forked process 7420 died unexpectedly, retry 0, exit code -1073741515, errno 11error: cannot fork() for rev-list: Resource temporarily unavailableerror: Could not run 'git rev-list'remote: Counting objects: 728, done.remote: Compressing objects: 100% (456/456), done. 907550 [main] git 7384 fork: child -1 - forked process 7436 died unexpectedly, retry 0, exit code -1073741515, errno 11error: cannot fork() for index-pack: Resource temporarily unavailablefatal: fetch-pack: unable to fork off index-packHowever, if I set the PATH to something really small before running git, it works:$ PATH=/usr/bin git pullremote: Counting objects: 728, done.remote: Compressing objects: 100% (456/456), done.remote: Total 464 (delta 337), reused 9 (delta 6)Receiving objects: 100% (464/464), 153.36 KiB, done.Resolving deltas: 100% (337/337), completed with 107 local objects.From git://cmake.org/cmakeI would be interested if it works for any of you?This is addressed here: http://cygwin.wikia.com/wiki/RebaseallIn short, close all windows and run this:C:\cygwin\bin\dash.exe -c '/usr/bin/rebaseall -v'This fixes all related issues with forking.  I had issues with forking aspell from emacs as well as git.I also faced same problem and restart of the system resolved it."
"This can cause the remote repository to lose commits; use it with care.If you do not wish to merge the remote branch into your local branch (see differences with git diff), and want to do a force push, use the push command with -fgit push -f origin <branch>where origin is the name of your remote repo.Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. This can cause the remote repository to lose commits; use it with care.As the message tells you,Merge the remote changes (e.g. 'git pull')Use git pull to pull the latest changes from the remote repository to your local repository. In this case, pulling changes will require a merge because you have made changes to your local repository. I'll provide an example and a picture to explain. Let's assume your last pull from origin/branch was at Commit B. You have completed and committed some work (Commit C). At the same time, someone else has completed their work and pushed it to origin/branch (Commit D). There will need to be a merge between these two branches.local branch:                         --- Commit C                                     /                                   /                                  /origin/branch: Commit A ------ Commit B ---- Commit DBecause you are the one that wants to push, Git forces you to perform the merge. To do so, you must first pull the changes from origin/branch.local branch:                         --- Commit C -- Commit E                                    /               /                                              /               /                                               /               /               origin/branch: Commit A ------ Commit B ---- Commit D After completing the merge, you will now be allowed to fast-forward origin/branch to Commit E by pushing your changes.         Git requires that you handle merges yourself, because a merge may lead to conflicts.Have you updated your code before pushing?Use git pull origin master before you push anything.I assume that you are using origin as a name for your remote.You need to pull before push, to make your local repository up-to-date before you push something (just in case someone else has already updated code on github.com). This helps in resolving conflicts locally.This normally happens when you git commit and try to git push changes before git pulling on that branch x.The normal flow would be as below, STEP 1: git stash your local changes on that branch.STEP 2: git pull origin branch_name -v to pull and merge to locally commited changes on that branch, give the merge some message, and fix conflicts if any.STEP 3: git stash pop the stashed changes.STEP 4: git push origin branch_name -v the merged changes.Replace branch_name with master (for master branch).Some of you may be getting this error because Git doesn't know which branch you're trying to push.If your error message also includeserror: failed to push some refs to 'git@github.com:jkubicek/my_proj.git'hint: Updates were rejected because a pushed branch tip is behind its remotehint: counterpart. If you did not intend to push that branch, you may want tohint: specify branches to push or set the 'push.default' configurationhint: variable to 'current' or 'upstream' to push only the current branch.then you may want to follow the handy tips from Jim Kubicek, Configure Git to Only Push Current Branch, to set the default branch to current.git config --global push.default currentSometimes we forgot the pulling and did lots of works in the local environment.If someone want to push without pull,git push --forceis working. This is not recommended when working with other people, but when your work is a simple thing or a personal toy project, it will be a quick solution.I mentioned this in my tutorial, How To Use GitHub: A tutorial for beginners.When you create a new repository on GitHub, GitHub may ask you to create a readme file. If you create a readme file directly on GitHub, then you will need to first make a ‰Û÷pull‰Ûª request before the ‰Û÷push‰Ûª request will be successful.These commands will ‰Û÷pull‰Ûª the remote repository, merge it with your current files, and then ‰Û÷push‰Ûª all the files back to GitHub:git pull https://github.com/thomas07vt/MyFirstRepo.git mastergit push https://github.com/thomas07vt/MyFirstRepo.git masterI was getting a similar error while pushing the latest changes to a bare Git repository which I use for gitweb. In my case I didn't make any changes in the bare repository, so I simply deleted my bare repository and cloned again:git clone --bare <source repo path> <target bare repo path>Just had the same issue but in my case I had typed the wrong branch on the remote.  So, it seems that is another source of this issue... double check you're pushing to the correct branch.I experienced the very same problem and it turned out I was on a different (local) branch than I thought I was AND the correct local branch was behind in commits from remote.My solution: checkout the correct branch, cherry-pick the commit from the other local branch, git pull and git pushIs your branch name the same as the remote branch name?If no, you should checkout a new branch with the same name as the remote branch and try push it again.Assume the remote branch you want to push is [testing] and your local branch is named as [test].If you`re not in test branch, first switch to it.git checkout testThen open a new branch and name it testing.git checkout -b testingNow, it`s time to push it:git push [remote repo] testingIn my case, I had ""mybranch"" checked out, and had done git pull, so I couldn't figure out why the push wasn't working. Eventually, I realized that I was pushing the wrong branch. I was typing git push origin master instead of git push origin mybranch.So if you've already done git pull and still getting this message, make sure you're pushing the correct branch.Another solution is to advance the head of the remote by making another commit if you can. After you pull this advanced head into the local subtree then you will be able to push from it again."
"I had the same error, with a somewhat simar setup (sharing a central bare repo over a windows network amongst several computers). For some reason, on one of the computers that had cloned the central repo nothing was working all of a sudden. Pulling and fetching resulted in the error you described.The strange thing was that on another computer on the network, cloning the central repo worked fine.So the problem was only occurring on a specific computer used by one specific developer on the network. It turned out to be corrupted Windows sharing permissions. What fixed it was removing the affected user's access permissions for the central repo folder, applying the change, and then re-adding in the permissions back.I solved by myself looking through the web to fix the remote repository:http://rewoo.wordpress.com/2012/02/14/recover-a-corrupt-git-bare-repository/This fixed my problem, I run only the git fsck --full and the git gc --prune=todayNow cloning and pulling works again.Thanks anyway"
"I have tried for several times after I set git buffer, as I mentioned in the question, it seems work now.So if you met this error, run this command:git config --global http.postBuffer 2Mand then try again for some times.Reference:git push error: RPC failed; result=56, HTTP code = 0"
"This info is working on theChaw but can be applied to all other git repositories which support SSH pubkey authentications. (See gitolite, gitlab or github for example.)First start by setting up your own public/private key pair set. This  can use either DSA or RSA, so basically any key you setup will work.  On most systems you can use ssh-keygen.First you'll want to cd into your .ssh directory. Open up the terminal and run:    cd ~/.ssh && ssh-keygenNext you need to copy this to your clipboard.    On OS X run: cat id_rsa.pub | pbcopy On Linux run: cat id_rsa.pub | xclipOn Windows (via Cygwin/Git Bash) run: cat id_rsa.pub | clipAdd your key to your account via the website.Finally setup your .gitconfig.    git config --global user.name ""bob""git config --global user.email bob@...  (don't forget to restart your command line to make sure the config is reloaded)Thats it you should be good to clone and checkout.Further information can be found on https://help.github.com/articles/generating-ssh-keys (thanks to @Lee Whitney)More extensive troubleshooting and even  automated fixing can be done with: ssh -vT git@github.comSource: http://help.github.com/ssh-issues/This error can happen when you are accessing the SSH URL (Read/Write) instead of Git Read-Only URL but you have no write access to that repo.Sometimes you just want to clone your own repo, e.g. deploy to a server. In this case you actually only need READ-ONLY access. But since that's your own repo, GitHub may display SSH URL if that's your preference. In this situation, if your remote host's public key is not in your GitHub SSH Keys, your access will be denied, which is expected to happen.An equivalent case is when you try cloning someone else's repo to which you have no write access with SSH URL.In a word, if your intent is to clone-only a repo, use HTTPS URL (https://github.com/{user_name}/{project_name}.git) instead of SSH URL (git@github.com:{user_name}/{project_name}.git), which avoids (unnecessary) public key validation.Update: GitHub is displaying HTTPS as the default protocol now and this move can probably reduce possible misuse of SSH URLs.Note that (at least for some projects) you must have a github account with an ssh key.Look at the keys listed in your authentication agent (ssh-add -l)  (if you don't see any, add one of your existing keys with ssh-add /path/to/your/key (eg: *ssh-add ~/.ssh/id_rsa*))  (if you don't have any keys, first create one. See: http://rcsg-gsir.imsb-dsgi.nrc-cnrc.gc.ca/documents/internet/node31.html or just google ssh-keygen)To verify that you have a key associated with your github account:Go to: https://github.com/settings/sshYou should see at least one key with a hash key matching one of the hashes you saw when you typed ssh-add -l just a minute ago.If you don't, add one, then try again.I had a slight different situation, I was logged on to a remote server and was using git on the server, when I ran any git command I got the same message   Permission denied (publickey).   fatal: The remote end hung up unexpectedlyThe way I fixed it was by changing the file /etc/ssh_config on my Mac. fromForwardAgent no to ForwardAgent yesThe basic GIT instructions did not make a reference to the SSH key stuff. Following some of the links above, I found a git help page that explains, step-by-step, exactly how to do this for various operating systems (the link will detect your OS and redirect, accordingly):http://help.github.com/set-up-git-redirect/It walks through everything needed for GITHub and also gives detailed explanations such as ""why add a passphrase when creating an RSA key."" I figured I'd post it, in case it helps someone else...The github help link helped me sort out this problem. Looks like the ssh key was not added to the ssh-agent. This is what i ended up doing. Ensure ssh-agent is enabled:Command 1:Start the ssh-agent in the backgroundeval ""$(ssh-agent -s)""Command 2:Add your SSH key to the ssh-agent:ssh-add ~/.ssh/id_rsaOn Windows, make sure all your apps agree on HOME.  Msys will surprisingly NOT do it for you. I had to set an environment variable because ssh and git couldn't seem to agree on where my .ssh directory was.Are you in a corporate environment?  Is it possible that your system variables have recently changed?  Per this SO answer, ssh keys live at %HOMEDRIVE%%HOMEPATH%\.ssh\id_rsa.pub.  So if %HOMEDRIVE% recently changed, git doesn't know where to look for your key, and thus all of the authentication stuff.  Try running ssh -vT git@github.com.  Take note of where the identity file is located.  For me, that was pointing not to my normal \Users\MyLogin but rather to a network drive, because of a change to environment variables pushed at the network level.The solution?  Since my new %HOMEDRIVE% has the same permissions as my local files, I just moved my .ssh folder there, and called it a day.In addition to Rufinus' reply, the shortcut to copy your ssh key to the clipboard in Windows is:type id_rsa.pub | clipRefs:Print to standard outputCopy command line output to clipboardI have just experienced this issue while setting my current project, and none of the above solution works. so i tried looking what's really happening on the debug list using the command ssh -vT git@github.com. I notice that my private key filename is not on the list. so renaming the private key filename to 'id_rsa' do the job. hope this could help."
"I am not sure how this error's generated. Yet I resolved it by executing the following command at the client who cause the error.git revert HEADafterward a fresh commit where pushed to the remote repository by the same client.Cheers!"
"For anyone else having the same problem. This is what I did according to this article at http://www.cyberciti.biz/tips/understanding-linux-unix-umask-value-usage.htmlOnce I did this, the permission issue is sorted and I don't get the 500 errors anymore.Procedure To Setup Default umaskYou can setup umask in /etc/bashrc or /etc/profile file for all users. By default most Linux distro set it to 0022 (022) or 0002 (002). Open /etc/profile or ~/.bashrc file, enter:# vi /etc/profileOR$ vi ~/.bashrcAppend/modify following line to setup a new umask:umask 022Save and close the file. Changes will take effect after next login. All UNIX users can override the system umask defaults in their /etc/profile file, ~/.profile (Korn / Bourne shell) ~/.cshrc file (C shells), ~/.bash_profile (Bash shell) or ~/.login file (defines the user's environment at login)."
"Well I did following stepsGoogle the errorGot to SO Links(here, here) which suggested the same thing, that I have to update the Git Config for proxy setting Damn, can not see proxy information from control panel. IT guys must have hidden it. I can not even change the setting to not to use proxy.Found this wonderful tutorial of finding which proxy your are connected toUpdated the http.proxy key in git config by following commandgit config --global http.proxy  http[s]://userName:password@proxyaddress:portError - could not resolve proxy some@proxyaddress:port. It turned out my password had @ symbol in it. Encode @ in your password to %40 because git splits the proxy setting by @git config --global http.proxy  http[s]://userName:password(encoded)@proxyaddress:portBaam ! It worked !Note - I just wanted to answer this question for souls like me, who would come looking for answer on SO :DIf your country block github, e.g. China mainland,then you can build a proxy, e.g. use goagent & gae,then set proxy address for git, e.g.git config --global http.proxy 127.0.0.1:8087UpdateRecently, a project called xx-net base on goagent become popular, it's more easier to use & more powerful.If your git was already set to something and you only copied that folder to some other location, simply run:git config --global http.proxy """"And git will set itself straight, after what, you can pull again :)Mine was fixed by just using this command :-      >git config --global http.proxy XXX.XXX.XXX.XXX:ZZwhere XXX.XXX.XXX.XXX is the proxy server address   and ZZ is the port number of the proxy server.There was no need to specify any username or password in my case.I got so:git config --global http.proxy http://{domain}\\\{username}:{password}@{proxy ip}:{proxy port}git config --global http.sslverify falseMy problem was solved using this commandgit config --global http.proxy http://login:password@proxyServer:proxyPortWas getting the same error in SourceTree,go to Tools>Options>Network and check Add proxy server configuration to Git/Mercurial if you had already set the proxy settingsOn Windows 7 setting the proxy to global config will resolve this issuegit config --global http.proxy http://user:password@proxy_addr:portbut the problem here is your password will not be encrypted.. Hopefully that should not be much problem as most of time you will be sole owner of your PC.I got an error when I used <git config --global http.proxy http://user:password@proxy_addr:port>The error is that the config file cannot be identified as there is no such file. I changed the command to <git config --system http.proxy http://user:password@proxy_addr:port>I am running git on the Windows 7 command prompt.The above command references the config file in GIT_HOME/etc/gitconfig.The --global option does not.ipconfig /renew - solved this issue for me."
"You can enable trace logging to get more information about what Git is doing. Following is an example:GIT_TRACE=$HOME/trace.log git co masterYou must use absolute paths if you want to send output to a file. Otherwise, use true or 1 to send output to standard error; e.g. GIT_TRACE=1.I think that you should start from the HTTP error: HTTP 407 error explained.And from that you can arrive at the answer: proxy error issue. Hope that helps.This error may occur if proxy credentials are given, but invalid. In my case, it was an old password.I copied the http proxy section of my .gitconfig to https:[http]        proxy = http://user:pass@ip_or_host:port[https]        proxy = http://user:pass@ip_or_host:portI put an incorrect password in the http proxy just to check, and it was ignored, so it's the https section that was missing for me.Strangely, on another day that didn't work.  I don't know if I'm going crazy or if there's another step I forgot.  In today's case, this method of setting the proxy worked (with a cleared .gitconfig) from the command line:HTTPS_PROXY=""http://user:pass@ip_or_host:port/"" git clone --progress -v ""https://github.com/repo"" local_folderNotes:If you're on a domain you might need to use the syntax DOMAIN\user.This didn't work for TortoiseGit, but worked in gitbash on Windows."
"rm .DS_Storegit add -Agit commit -m ""Added .gitignore file""You'll also want to expressly add .DS_Store to your .gitignore so that when .DS_Storeis inevitably created in the future, it won't get in the way of your commits.You probably don't care about .DS_Store.So, try to move it to .DS_Store.bak and pull again"
"I had the same issue and I solved it by replacing the prefix of the url from https to gitGitHub seems to be using SHA256 as a hashing algorithm for SSL, and that was not added to OpenSSL until version 0.9.8o.I suspect (since you seem to be running 0.9.8e in Python which is pretty old) that your git is linked to/using a version of OpenSSL which is just plain too old."
"One approach is to commit that file first then pull.git add filenamegit commit //enter your commit message and save git pull Another approach is stash your changes then pull. Then apply stash.git stashgit pullgit stash apply stash@{0}Do git commit and then git pull. It fetch your friend changes at first and then merge your changes, nothing will be lost.Conflicts between your changes will be represented such way:Here are lines that are either unchanged from the commonancestor, or cleanly resolved because only one side changed.<<<<<<< yours:sample.txtConflict resolution is hard;let's go shopping.=======Git makes conflict resolution easy.>>>>>>> theirs:sample.txtAnd here is another line that is cleanly resolved or unmodified.Or you could use some interactive merge tool."
"Most probably, your URL is not valid. If it is a http/https URL, you can quickly check, by hammering the URL into a browser. If that does not display anything at all, you know that the URL is invalid.I assume you are speaking of a remote repository. The URLs should look somewhat like these:https://github.com/user/repo2.git if you're using HTTPSgit@github.com:user/repo2.git if you're using SSHAs mentioned by others the error may occur if the url is wrong.However, the error may also occur if the repo is a private repo and you do not have access or wrong credentials.Instead ofgit clone https://github.com/NAME/repo.git trygit clone https://username:password@github.com/NAME/repo.gitOn github you can have the main repository and subfolders. Make sure that the URL that you are using is that of the main repository and not that of a folder. The former will succeed and the latter will produce the repository not found error. If you have a doubt you are in a subfolder, navigate up the repository chain till you find a page which actually specified the https URL and use that."
"Before pull-ing you need to stash your uncommitted changes first. Visual Studio does not support full range of Git functionality yet, including git stash, so you have to do it through command line or use something like Source Tree in addition to Visual Studio for such occasion. Run git status -u to see uncommitted changes and git stash to temporarily hide them before pulling/syncing. Once in a while Visual Studio will cache the status results and will get out of sync with reality, in this case kill Studio, delete .git\ms-persist.xml file and restart."
"If you are sure of what you're doing you can force the push to heroku:git push --force heroku masterThat means you have code in your repository newer than the code in your local repository.You have to merge your changes locally :git pull heroku masterthen you push :git push heroku masterEDIT (following your edit) :try git fetch origingit pull --rebasepush again"
"do i need to configure proxy settings? because my office has got proxy servers. Yes, you can do so by setting HTTP_PROXY, and HTTPS_PROXY environment variables.See ""Syncing with github"":set HTTPS_PROXY=http://<login_internet>:<password_internet>@aproxy:aportset HTTP_PROXY=http://<login_internet>:<password_internet>@aproxy:aportset NO_PROXY=localhost,my.companyNote the NO_PROXY, to allow to access internal site to your companyYou also can register that in your git config:git config --global http.proxy http://<login_internet>:<password_internet>@aproxy:aportI got a similar error, and it's caused by incorrect proxy setting. This command saved me:git config --global --unset http.proxyhttps version:git config --global --unset https.proxyanother possibility, I ran into this problem myself. But it was after I had installed a VPN (which was unrelated and running)turning off the VPN, fixed the issue.for the record, I was running ""Viscosity"" VPN on my MacBookPro192.30.252.128 is the current IP of github.com which can be set in your local DNS (/etc/hosts in Linux and C:\Windows\System32\drivers\etc\hosts)In my case, on a Windows box, my TCP/IP stack seems to have needed to be reset.  Resetting the TCP/IP stack of the client PC caused git to start behaving properly again.  Run this command in Administrator mode at a command prompt and retry the git command:netsh int ip resetManually disabling and re-enabling the network adapter via the Control Panel produces a similar result.I suspect DNS resolution problems inside the TCP stack on my Windows box.Spent a couple hours trying to fix this. Re-connecting my wifi did the trick.All,I want to let you all know that I was having this same issue. I solve it by resetting my remote URL git remote set-url origin https://new.url.here I found how to do this from this answer but I had to change hit to https: How to change a remote repository URI using Git?I had this very similar error as following.C:\wamp\www\myrepository [master]> git pushfatal: unable to access 'https://github.com/myaccount/myrepository.git/': Couldn't resolve host 'github.com'Actually, the prompt message has told us where's wrong.https://github.com/myaccount/myrepository.git/When I check my github, I found my github repository's HTTPS url ishttps://github.com/myaccount/myrepository.gitI don't know how this happened. The wrong url has been set up by installed Git Shell automatically.Once I remove the '/' at the end, I can push successfully."
"It's not the commits you've made that touch the file, but the commits that you're pulling. Inspect the remote branch you're tracking to see what's happened. For example, git log master..origin/master will show all the commits that have happened on origin/master since you last pulled. According to your output above, there are 26 of these. Using the --name-status option will show which commit added the file.You will need to rename the offending file, do the pull, and then move it back (overwriting the copy from the repo). git diff filename will then tell you how your copy differs from the one that someone else has committed to master. You can then commit the differences, or throw them away with git checkout filename.You will need to use git pull --rebase to rebase your recent commits on top of the ones in origin. Once git status says master is ahead rather than diverged from origin/master, you can push."
"Don't forget to fetch the origin!!!$ cd /usr/local$ git fetch origin$ git reset --hard origin/masterExplanation, for those interested:What happens is that you are trying to update brew, but brew itself is either not up to date (likely), there is a permissions change via some OS update (also likely), or brew is slightly corrupt (unlikely).  Since brew itself is a git repo, you have to update or reset brew to the master branch version.   brew [by default] is located in the /usr/local folder, so you  Go to that folder [first command] which also should update permissions (if not see below)Fetch the origin [second command] which means to update your LOCAL version of the remote branch of brew  Hard reset [3rd command] based on the REMOTE master branch (which also uses your current permissions).You can also chown the first command if you are in a non sudo or admin profile$ sudo chown -R whoami /usr/local$ cd /usr/local$ git reset --hard origin/master To understand git reset, take a look at this article.I had a similar issue a couple weeks ago trying to update an old homebrew install. Doing this:git reset --hard origin/masterin /usr/local fixed it for me.It seems like other folks have had this issue too.  Have you looked over any of the proposed workarounds here?I'm adding my personal experience, since it seems a little safer than what proposed in 2012:Run brew doctor. If you get the following warning:Warning: The /usr/local directory is not writable.run:sudo chown -R `whoami` /usr/localto fix the permissions problems (as suggested also by Chris Frisina). Eventually run brew doctor again to ensure yourself that the warning is gone.Now, you should have aWarning: You have uncommitted modifications to Homebrewthat may bey solved bycd /usr/local/Library && git stash && git clean -d -fas suggested by Dr.Brew itself. The command stashes the uncommitted modifications so you could go back and recover them if needed. It seemed safer than git reset --hard origin/master to me.If you wish, check the official troubleshooting guide if the steps suggested here and by other SO users does not solve your problem."
"This happened to me on my Vagrant VirtualBox VM running Ubuntu 12.04. The vagrant instance had been up for several days. I restarted the VM (vagrant reload), ssh'd back in, and it worked.What's the cause? Not sure. Someone else can speculate. However, I always like to reboot three times just to be sure ;)I've faced the same error when I changed the network that my laptop was connected. Editing /etc/resolv.conf properly solved the problem:nameserver 8.8.8.8Making resolv.conf blank and reboot might solve it too.On debian 2.6.32-5-amd64 + VirtualBox 4.2.12.git config --global --unset http.proxy git config --global --unset https.proxyworks for meOne solution, if this is a repository under you control, would be to use an SSH key for your repository access instead of HTTP. Update your remote accordingly by dropping the origin remote with: git remote rm origingit remote add origin <ssh_path_from_github>You can find the ssh path in github here:Make sure to preface it with ssh:// when you re-add the remote. If this doesn't work then we'll look at the http proxy settings, but based on your faux github link, I'm hoping it's a repository under your control.I gave the follwoing command to restart my network services. This would work for sure:service network restartI have experienced the same error when wanted to push code on github. The problem was that I had messed up some environment variables on my Ubuntu machine. This happened because I wanted to use a manual proxy on google chrome.If you are using linux use the following command to see if http_proxy and https_proxy are set to some ip address.env | grep http_proxyThen use the following commands to unset the value of these two variables.unset http_proxyunset https_proxyTry to use git again. If it does not work then do a reboot. It worked for me."
"I have finally discovered a solution to the problem. As it was described here, I ran the following command in the terminal:  unset SSH_ASKPASSand then running git push origin master works the way it should. You can also add the line to your .bashrc file.I recently dealt with this behavior on a RedHat 5 machine where our Git version was 1.7.4.1.I didn't have a high degree of confidence that unset SSH_ASKPASS wouldn't have unintended consequences, so I wanted to see if there was another solution.I couldn't tell for certain, but it seems that a patch for this problem was in the works around the same time that our version of Git had been published.  So, it seemed to me that it was reasonable to hope that a more recent version would correct the behavior.And indeed it did. Upgrading to the 1.8 branch of Git resolved the problem.  The error message is still displayed for some odd reason, but you are correctly prompted for your password and allowed to continue."
"Sublime Text needs to be launched with the subl line instead of sublime, and will need to be in your PATH.You can check if it's present by running the commands which subl (to show you the path of the file on the computer) or subl -n (to launch a new window in Sublime Text).To fix your git editor you can run git config --global core.editor ""subl""Source: https://www.sublimetext.com/docs/3/osx_command_line.htmlProbably Git is configured to use sublime as editor and it is not able to find it.If you really want to use Sublime as editor check if it is really installed and it is in your  PATH.Alternatively, you can change the editor git uses with this command (replace vim with your preferred editor: emacs, nano, etc):git config --global core.editor ""vim""Edit: Also the correct command to launch Sublime Text in terminal is subl (thanks  QuantumPhi)"
"After the chat, the right way to configure the link with github is:cd c:\Users\ramas\dmsproject\dmsgit remote set-url origin git@github.com:vamsiannem/dms.gitThen a git push can work."
"The lines beginning with remote are output from git running on the remote system.  The error:fatal: unable to create thread: Resource temporarily unavailable... strongly suggests that you've run out of memory on the server, which can happen if you have either:A repository with lots of large files, which can cause re-packing to take a lot of memory.Limited virtual memory - either in general, or just for that account due to the ulimit settingA suggestion here is to limit the amount of memory that packing may take by logging into the remote system (as the user that git runs as) and doing:git config --global pack.windowMemory ""100m""git config --global pack.packSizeLimit ""100m""git config --global pack.threads ""1"""
"I've only ever seen this error on Windows and what it seems to mean is that something blocked git from modifying a file at the moment when it tried to a apply a patch.Windows tends to give processes exclusive access to files when it shouldn't really be necessary, in the past virus checkers have been one source of suspicion but I've never proved this conclusively.Probably the easiest thing to do is to abort and try again, hoping that it doesn't happen the next time.git rebase --abortYou can attempt to use git apply and knowledge of what commit git was actually trying to do before doing a git rebase --continue but in all honesty I wouldn't recommend this. Most of the times I've seen this tried there's been a better than evens chance that something gets accidentally missed or messed up.Try closing any programs that have the folder open, such as editors, explorer windows, command prompts, and FTP programs. This always fixes the issue for me on Windows.Just close VISUAL STUDIO. It might workWhen I see this on my machine, it's worse than just a ""some process has the file open"".  The actual ownership of the file gets jacked up to the point where I (running as administrator) can only access it after rebooting.Nearest I can tell, IIS is part of the problem.  If I switch between two major branches that require a lot of files to modify, git will delete a file or directory (usually DLLs) while IIS is trying to do something or another with it.  At this point, the IIS process automatically overwrites the file on disk with a version that's locked and appears to be owned by nobody.Stopping IIS at this point doesn't do it.  Best I've found out to do is to reboot, and remember to stop IIS before changing across major branches in the future.I know that doesn't really answer the question, but might be helpful to others.On Windows, it can be a TortoiseGIT process that blocks those files. Open task manager and end process TGitCache.exe.This can also happen when you're using SublimeText and the popup window asking you to buy the program is not closed.I had a similar problem. But it was very simple to resolve. On a Windows machine, my file explorer had a folder open that existed in one branch but not in the other I checked out. Closing the File explorer resolved the problem.If the IDE you use(in case you use one) might have been getting in the way as well. That's what happened to me when using QtCreator.My encounter with this problem was caused by my editor, Intellij.  As part of its internal version controls, it had gone through and locked all hidden git files.  (For various reasons, I was not using the git plugin that comes with Intellij...)  So I opened a normal dos window as Administrator, changed to the directory, and executedattrib -R /SThat removed the lock on the files and everything worked after that and I could sync my changes using the GitHub windows client.I agree with the above ""Close Visual Studio"" answers. However, an additional step I had to do even after I'd closed Visual Studio was to manually kill the ""devenv.exe"" Visual Studio process in Task Explorer.After I had done this I was able to again run in gitbash:git pulland the ""cannot stat filename"" error disappeared. It is perhaps due to a Visual Studio extension keeping the process open for longer even after closing."
"Solution for failed with error: RPC failed; result=18, HTTP code = 200First Solution:Try running the command below in the remote repository if error is fatal: index-pack failedgit repack -a -f -d --window=250 --depth=250Second Solution:Also try the below ones from the remote repository location if the above one didn't work:git gc --aggressivegit repack -a -f -d --window=250 --depth=250Third Solution:Try reducing the postBuffer size in the remote repository config.Follow the steps belowGo to remote git repository directoryRun the following command to reduce the size of postBuffergit config http.postBuffer 24288000"
"cd $(brew --prefix)git reset --hard HEADbrew updateYou need to do the following:cd $(brew --prefix)rm Library/Formula/argp-standalone.rbrm Library/Formula/cocot.rbAnd then do thegit fetch origingit reset --hard origin/masterbrew updateBasically, to explain a bit more:cd $(brew --prefix)tells cd to change the directory to whatever brew --prefix will output. If you try executing brew --prefix command you should see something in lines of:brew --prefix/usr/localSo the command would be in this case an equivalent of cd /usr/local.Newer brew versions have formulae under its installation prefix and Library/Formula/, so that's where you need to look for those outdated/changed files.Note, that if you changed those formulae yourself for a particular reason (like pinning a version) this action will revert them back to default ones and may produce unwanted effects.@TedPennings noted in comments that this worked for him, but his sequence was:chown everything to my_username:admin, ie, sudo chown -R ted:admin $(brew --prefix)run the two git commands above,git fetch origin and git reset --hard origin/masterThis is caused by an old bug in the update code that has long since been fixed. However, the nature of the bug requires that you do the following:    cd $(brew --repository)git reset --hard FETCH_HEADIf brew doctor still complains about uncommitted modifications, also run this command:cd $(brew --repository)    git clean -fd$ cd $(brew --prefix)$ git clean -fd$ git reset --hard$ sudo chown -R `whoami` `brew --prefix`$ brew updateNote: steps 2&3 worked for me since I did step 5 before 4 before I got the error. The brew update before changing the owner of the folder caused the whole problem.I had a similar issue where my brew package library got downloaded as a root user and then I was not able to run brew update as git would complain about not able to merge the file.Solution was to do :-sudo chown -R <user> /usr/local/LibraryResetting the brew repository should be the most efficient way if you don't mind to discard potential modifications on formulas you might have been applied:$ cd `brew --prefix`$ git fetch origin$ git reset --hard origin/master$ brew cleanup --force$ brew updateI was able to fix this on my machine by adding admin group write (and setgid bit) permission at these paths:sudo chmod -R g+ws /usr/local /Library/Caches/HomebrewThe s sets the group id on execution so that the write permissions aren't lost the next time a different admin user updates or upgrades Homebrew.This answer is somewhat incomplete because when I try to do brew cleanup --force there is a permissions issue when Homebrew tries to remove content in /usr/local/Cellar/. (Unfortunately I'm not able to investigate this further at the moment.)Another option is to just use git stash.The brew update command performs a git pull, so if there are any changed files (or even file attributes, which happened to me when I changed permissions in the directory recursively) you have to somehow fix the conflicts. Using git stash is one way; it takes any changes and puts them aside so you effectively revert to the last updated repo version. The Homebrew 'location' is by default /usr/local and it installs as a git repository. You can look for a .git folder to see for yourself. I'm writing a homebrew uninstall script to be posted on my GitHub profile soon with more info."
"On a ""broken link"" message, you could follow the GitFaq recommendations:back up all your state so that anything you do is re-doable if you corrupt things more!explode any corrupt pack-files  See ""man git-unpack-objects"", and in particular the ""-r"" flag.  Also, please realize that it only unpacks objects that aren't already available, so you need to move the pack-file away from its normal location first (otherwise git-unpack-objects will find all objects that are in the pack-file in the pack-file itself, and not unpack anything at all) replace any broken and/or missing objects  This is the challenging part.  Sometimes (hopefully often!) you can find the missing objects in other copies of the repositories.  At other times, you may need to try to find the data some other way (for example, maybe your checked-out copy contains the file content that when hashed will be the missing object?). make sure everything is happy with ""git fsck --full""repack everything to get back to an efficient state againNotes: missing objects can also be related to alternate (when you share objects between repositories) with git alternates (even though that can be risky).The JGit/Egit eclipse plugin is also known to have a few issues.(Update February 2012: those plugins have come a long way and are now quite stable)I had a similar issue just now. The corruption arose when my laptop did a hard power-off during a git pull. I have a remote backup repository. First I had several object files in .git/objects/??/* that were zero size. After a cp -a backup of the repository, I did this:remove the zero length objectsclone the remote repository into a ../fresh/ repositoryin the broken repository, I did cat ../fresh/.git/objects/pack/pack-*.pack | git unpack-objectsThis filled up the missing objects in the object database. The repository seems to be back up now.I had the same problem. After a lot of hair-pulling, I discovered that it was cause by changed permission to the repository's git files. I have solved it as follows:$ cd .git$ chmod 755 *Done!If you don't have uncommited changes the easiest solution is to delete the local branch:git branch -D [branch name]and then checkout again the remote branch:git checkout -b [branch name] origin/[branch name]I got a similar error in my Homebrew install‰Ûªs Git repository. Rather than restoring all the missing objects one by one, I found it easier to simply delete the .git directory and create it again by re-cloning from Homebrew‰Ûªs public repository. These were my steps:Check what information you have in your Git repository that you won‰Ûªt get by just re-cloning. For me, it was private branches, stashes, and remotes.Convert stashes into real commits by creating a new branch, applying the stash, and committing with something like ‰ÛÏ[WIP]‰Ûù in the name to show that it‰Ûªs a stash.Save branches that are not on the public remote by pushing them to a remote of your own. This could be fork of the repository on GitHub, or just a new Git repository in a different location on your machine.If you have more than one remote, save the output of git remote -v, which contains the names and URLs of your remotes, so you can manually add them back later.Delete your repoistory‰Ûªs .git directory (or rename it to .git-broken and delete it later). On the command-line, this is rm -rf .git.Re-clone the remote directory with git clone https://github.com/Homebrew/homebrew.git or whatever URI.This will have created a new sub-folder homebrew named after the repository. You want just the .git directory from that; your local files are already okay. So mv homebrew/.git .git, and then delete the homebrew folder.Your Git repository should have no errors, since you recreated it from scratch. Now just restore any information you saved in the first step.If you had additional remotes, add them again with git remote add <name> <url>.If you backed up any branches (or stashes converted to branches) to a remote repository, pull them from that repository to your local repository.If you want, you can convert the stash-branches back to stashes by rolling the ‰ÛÏ[WIP]‰Ûù commit with git reset HEAD^ and saving the working directory to a stash again with git stash save <custom-message>.If you run git fsck, you should see no errors:$ git fsckChecking object directories: 100% (256/256), done.Checking objects: 100% (197135/197135), done.Checking connectivity: 197162, done.$And git stash list, git branch, and git remote -v should show the same output as before."
"I spend on it lots hours when i call php script to init and commit git.And i Found the work flow should Be:1.git init2.git config user.name ""someone""3.git config user.email ""someone@someplace.com""4.git add *5.git commit -m ""some init msg""If you swap [23] and 1, the config will not work at all.Wish this will do some help.Instead of doing a git pull, you can do:git fetchgit reset --hard origin/masterNeither of those require you to configure your git user name / email.This will destroy any uncommitted local changes / commits, and will leave your HEAD pointing to a commit (not a branch). But neither of those should be a problem for an app server since you shouldn't be making local changes or committing to that repository.If you are using sourcetree: Repository -> Repository Settings --> Advanced --> uncheck ""Use global user settings"" boxworked great for me.Update your bootstrap process to create a ${HOME}/.gitconfig with the proper contents, or to copy an existing one from somewhere."
"To throw away all your changes and go back to the latest commit, usegit reset --hard HEADA fast-forward is a kind of merge where there's no actual merging to do, you just have to hop along the commits. In this case, git isn't actually telling you what to do, but it's letting you know that you really ought to pull (because it would be trivial).The git checkout -- file operation operates strictly on the working directory, or the filesystem state of your repository (note that there is a space between the -- and the file argument, to distinguish the command from checking out a branch or tag named file).If anything has been git add-ed to the repository, in git terminology it is a part of the index, and a checkout won't fix that, you need to use the git reset command, which updates the state of the index.As a shortcut for doing both of the above, git reset --hard will reset the index and flush out the changes in the working directory (so that your working directory and index are in identical states (the state given by an option argument; without any argument the default is HEAD). Usual caveats apply with regards to making sure you don't nuke things you want saved if they haven't been committed, but from the sounds of it this is what you want.As for the fast-forward merge, git pull should take care of that automatically, but since in git terms a pull involves both fetching the changes from upstream and merging your local branches with the new upstream, the merge part of this will fail if you have a dirty working tree, so the above commands will need to be done (or other permutations of committing/stashing operations) before the merge can proceed. Git is in general very careful to keep you from losing work unless you specifically tell it not to care.As a recommendation, if you want to track upstream, do so in your master branch and make any additional changes (even if you're just playing around) in a topic branch, where you can feel free to commit away and not worry about being able to absorb changes back from upstream.UPDATE: If reset/checkout are not actually resetting your working directory, check the core.autocrlf property on your directory: git config --get core.autocrlfIf you are using a repository that makes the rounds between Windows/UNIX/whatever filesystems with different line-ending conventions, and attempts to prevent the madness that lies therein by reading files from the filesystem with a CRLF as if they had LF terminators, and then reversing that conversion when writing to the filesystem, the idea being that you can work on files normally without introducing a ton of whitespace changes into your diffs, but it often causes more issues than necessary. Try a git diff --ignore-all-space and, if it shows nothing, that's your issue, and you can try to update the config file to turn that off, and repeat."
"This is just a hunch, but was your remote a bare repo or a working directory? If it was a working directory rather than a bare repo, the file.php file on the remote had uncommitted changes. Your git push command was trying to advance the HEAD at the remote which was causing conflicts due to the uncommitted changes.This is why you usually git pull to update a working directory, and use git push on bare repos. FYI, to setup a bare repo for use as something similar to a central CVS/SVN/etc repo, do the following on the remote:$ mkdir my-git-repo$ cd my-git-repo$ git init --bareThen in your local repo:$ cd my-git-repo.git$ git remote add origin user@host:/path/to/my-git-repo/$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master$ git push origin masterNow you have a bare repo to push/pull into/from that contains your master branch. You can repeat the last three local steps with any additional local branches you want to put on the remote. Cloning is the same as before and you don't need to use git config as remotes are set automatically and remote merging refs are set when you use tracking branches. Hope that helps.Try doing a git checkout file.php then git push again.Update:git pull tells the branch is up-to-date?git status doesn't show any unmerged file?git commit works?If you answered yes to all above, and your git push keeps failing even after a clean copy of the remote repository (read git clone), it's very likely the remote repository has an index problem.I would cut and paste my file.php locally out of the working folder. To your desktop lets say.Then do a pull, then git should fetch the lastest file.php from the server. Then just paste in your copy of file.php and overwrite the pulled one or open up both versions and just paste in your changes.I hope that does the trick.Try to do a git status and check if you've got any non commited changes to 'file.php'. You need to commit all the changes on the same files, or git could change your non-commited file.Try to make another commit after the pull, and then try to pull again, review any possible merge and push the data.If you want just to overwrite your local copy, checkout the file file.php  (git checkout HEAD^ file.php to checked version previous to last one) to a previous version, and then pull from the repository."
"All that means is db.sqlite3 has been modified on your production server. Because of this, git isn't sure whether it is ok to overwrite it with your new code (because that file is present in your repo). Really, you should just add that file to your .gitignore, but you can get around it with (on your production server) running:git stash# do your pullgit stash popBasically, stash ""saves"" modified files that haven't been committed and allows you to later restore it by popping it off again, after the merge has overwritten it. https://git-scm.com/book/en/v1/Git-Tools-Stashing"
"For me the problem was the execution of clone via sudo.If you clone to a directory where you have user permission ( /home/user/git) it will work fine.(Explanation: Running a command a superuser will not work with the same public key as running a command as user. Therefore github refused the connection.) This solutionr requires a SSH key already to be set up: https://help.github.com/articles/generating-ssh-keysI had to add my public key to github. https://help.github.com/articles/generating-ssh-keysYes, It's a public key Problem.I'm a windows user,and the page below help me resolve this problem.http://help.github.com/win-set-up-git/more precisely this link should be helpful https://help.github.com/articles/error-permission-denied-publickeyType the following command using your username and repository name:git clone https://github.com/{user name}/{repo name}in Ubuntu this works perfectly.I got a solution after a long time in tutorials.I followed the github tutorial on this link -> https://help.github.com/articles/error-permission-denied-publickey and I was able to connect in every step.But when I was trying to git push -u origin master I got this error:Permission denied (publickey). fatal: Could not read from remote  repository.Please make sure you have the correct access rightsThats how I`ve fixed it!!Go to the project directory using the Terminal and check it out$git remote -vYou will get something like this:origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (fetch)origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (push)If you are using anything different then git@github.com, open the config file on git directory by typing the command:vi .git/configAnd configure the line[remote ""origin""]url = ssh://git@github.com/yourGithubUserName/yourRepo.gitfetch = +refs/heads/*:refs/remotes/origin/In my case, I had to setup the public key for another user, as I already had one for my main user. once I switched users and performed the commands in the link above I was able to perform the setup for my test server without a problem.after you created the RSA key pair, you must to add it to SSH using:ssh-add ~/.ssh/id_rsaor wherever you created your rsa key pair.I had this problem, but none of the solutions above worked. I could clone and fetch but couldn't push. Eventually, I figured out the problem was in the url in my .git/config, it should be:git@github.com:<username>/<project>(not ssh://github.com/<username>/<project>.git or https://github.com/<username>/<project>.git).A good one if you have installed git on your computer:http://help.github.com/mac-set-up-git/Given that none of the answers here worked for me, I finally tracked down my issue connecting to Bitbucket (or Github, doesn't matter in this case) with ssh -vT git@bitbucket.org.In my case, the failure was due to using a DSA key instead of RSA, and apparently my SSH client no longer allows that.debug1: Skipping ssh-dss key /c/Users/USER/.ssh/id_dsa for not in PubkeyAcceptedKeyTypesThe solution was to add this to .ssh/config:Host *    PubkeyAcceptedKeyTypes +ssh-dssThis elegantly appends the ssh-dss key type to all existing accepted public key types and after this was done, git can now ssh into Bitbucket no problem.I faced a similar issue when running SSH or Git Clone in Windows. Following findings helps to solve my problem:When you run ‰ÛÏrhc setup‰Ûù or other ssh methods to generate ssh key, it will create the private key file id_rsa in .ssh folder in your home folder, default is C:\User\UserIDGit for windows has its own .ssh folder in its installation directory. When you run git/ssh, it will look for private key file id_rsa in this folderSolved the problem by copying id_rsa from the home folder .ssh folder to the .ssh folder in the git installation directoryAlso, I think there  a way to ‰ÛÏtell‰Ûù git to use the default .ssh folder in home folder but still need to figure out how."
"The msysgit FAQ on Git cannot create a filedirectory with a long path seems not up to date, as it still links to old msysgit ticket #110. However, according to later ticket #122 the problem has been fixed in msysgit 1.9, thus:Update to msysgit 1.9 (or later)Launch Git BashGot to your Git repository which 'suffers' of long paths issueEnable long paths support with git config core.longpaths trueSo far, it's worked for me very well.Be aware of important notice in comment on the ticket #122don't come back here and complain that it breaks Windows Explorer,  cmd.exe, bash or whatever tools you're using.As someone that has ran into this problem constantly with java repositories on Windows, the best solution is to install Cygwin (https://www.cygwin.com/) and use its git installation under all > devel > git.  The reason this is the best solution I have come across is since Cygwin manages the long path names so other provided commands benefit. Ex: find, cp and rm.  Trust me, the real problem begins when you have to delete path names that are too long in Windows.Or you can edit directly your git config file:edit file : YourRepoFolder -> .git -> config[core]    repositoryformatversion = 0    filemode = false    ...    longpaths = true        <-- (add this line under core section)Try to keep your files closer to the file system root. More details : for technical reasons, Git for Windows cannot create files or directories when the absolute path is longer than 260 characters."
"It's probably because your SSH key has been compromised. Make a new one and add it to your GitHub account.for me I simply had to add configure my git username and email with the following commands:git config --global user.email ""you@example.com""git config --global user.name ""Your Name""git-bash reports fatal: Unable to create '/.git/index.lock': File exists. Deleting index.lock makes the error go away.If you're running windows 7: I was trying to decide the best way to do this securely, but the lazy way is right-click the parent folder -> click the ""properties"" button -> click the ""security"" tab -> click the ""edit"" button - > click the group that starts with ""Users"" - > click the checkbox that says ""full control"" -> click all the OK's to close the dialogs. I realize this might circumvent windows ""security"" features, but it gets the job done.In my case a folder in my directory named as the git-repository on the server caused the failure.on win7 64:git-gui gives a good answer: a previous git has crashed and left a lock file. Manually remove.In my case, this was in .git/ref/heads/branchname.lock.delete, and error 128 goes away. It surprises that tortoisegit doesn't give such an easy explanation.In my case, it was because of the proxy. A proxy was needed in the corporate network and TortoiseGit / Git does not seems to automatically get information from Windows internet settings. Setting up the proxy address solved the issue.For me, I tried to check out a SVN-project with TortoiseGit. It worked fine if I used TortoiseSVN though. (May seem obvious, but newcomers may stumble on this one)I was having this same issue and I resolved it in the following way...I have the NVIDIA ""Tegra Android Development Pack"" installed and it seems to also have a version of mysysgit.exe with it. TortoiseGit automatically found that installation location (instead of the standard git installation) and auto-populated it in the settings menu.To correct this, go to: ""Settings -> General"" and there is a field for the path to mysysgit.exe. Make sure this is pointing to the correct installation.Deleting index.lock worked for meAn quick solution would be to create a new local directory for example c:\git_2014, In this directory rightklick and choose Git Clone"
"I had the same issue because I forgot to remove my proxy configuration on Git.git config --global http.proxyIf it returns something you have to unset the value with the following command :git config --global --unset http.proxyThere is a lot of way to set a proxy for git and maybe this is not the good one. You can also check your environment variable.echo $http_proxy After that, it should worksWhy are you using https?For private repo on GitHub, you would use (as shown here):git clone https://username@github.com/username/project.gitBut for a public repo, a simple:git clone http://github.com/username/project.gitshould be enough."
"For what it's worth, when I had this problem‰ÛÓbut when committing‰ÛÓI tried git-repack and git-gc, but neither worked.  I got a permission denied error, which led me to chown the entire repo recursively to the user I expected it to be, and I could then commit/push/pull with no problem.It is mentioned in ""Re: Bug?  git svn fetch: ""unable to create temporary sha1 filename /home/andres/git/public/crystal.g"":After repacking the repository the problem is gone. Really rather strange.Did you try a repack ?git-repack is used to combine all objects that do not currently reside in a ""pack"", into a pack. It can also be used to re-organize existing packs into a single, more efficient pack.  A pack is a collection of objects, individually compressed, with delta compression applied, stored in a single file, with an associated index file.  Packs are used to reduce the load on mirror systems, backup engines, disk storage, etc.And did you try to upgrade to the latest version of Git ?You have different commands to run in order to ""clean"" your repository, from the safest to the more aggressive ones:$ git-prune$ git-gc --aggressive$ git-repack$ git-repack -a$ git-prune-packedAs mentioned in ""Git Garbage collection doesn't seem to fully work"", a git gc --aggressive is neither sufficient or even enough on its own.The most effective combination would be adding git repack, but also git prune:git gcgit repack -Ad      # kills in-pack garbagegit prune           # kills loose garbageWe had the same problem where user 1 had previously committed, whereupon the objects/ed directory was created and owned by user 1. Because user 1's default permissions did not allow writing by user 2, user 2 could not commit.git creates these directories as hash buckets of some kind on demand, so it is quite possible for them to be owned by several different people with different permissions according to their umask.We solved it by first chgrping all the directories to be owned by the same group, then chmodding them all with g+w so they were group writeable, and finally setting everyone's umask correctly so that all newly created buckets will also be group writeable.This is because we are using ssh:// URLs to check out from git - I assume if we were using the git network protocol it would not happen because the git daemon would have consistent file ownership.I've seen this error when multiple users commit to the same repository, resulting in group-write permission problems as a consequence of ssh and umaskYou can make new files retain the g+w mode by setting sharedrepository=true in the [core] section of config:cd /my/shared/repo.gitgit repo-config core.sharedRepository true# (might also need to ""chmod -R g+wX ."" for each # user that owns files in .git/objects)EDIT:This method is only applies to already existing repos. You can done right once on creation of the repository: git --bare init --shared.In my case, I had this issue when trying to push.dieter@dieter-dellD620-arch sugarcrmclient [master] git push originCounting objects: 16, done.Delta compression using up to 2 threads.Compressing objects: 100% (10/10), done.Writing objects: 100% (12/12), 3.91 KiB, done.Total 12 (delta 1), reused 11 (delta 1)error: unable to create temporary sha1 filename ./objects/7a: File existsfatal: failed to write objecterror: unpack failed: unpacker exited with error codeTo gitosis@tiktak.kangaroot.net:sugarcrmclient.git ! [remote rejected] master -> master (n/a (unpacker error)) ! [remote rejected] web -> web (n/a (unpacker error))error: failed to push some refs to 'gitosis@tiktak.kangaroot.net:sugarcrmclient.git'it was not a permission problem.  git gc, git gc --agrressive, git repack or git prune locally did not help.  Note how the error says ""unpacker error"", I think that's key, because it implies it's at the other side.  So I went to the (bare) repository and did a git gc there.  Then I could push fine.I encountered this problem when using git pushThen I run git gc, it works.From git-gc(1) Manual Page:git-gc - Cleanup unnecessary files and optimize the local repositoryI'm having this problem and feel like i've tried all of the things above.  I'd seen this before and it was due to permissions between different users pushing to the repo, but in this instance everyone pushes under the same user, and just for good measure i've (on the repo) chowned everything to the right user and group and chmodded u+w and g+w for good measure.  I'm still getting error: unable to create temporary sha1 filename ./objects/9a.I've just done a bit more investigation and there does seem to be something going on with permissions: before the push, on the repo (which is a bare repo hosted on a server), all files in objects have permissions of -rw-rw-r-- set, which is what you'd expect.  They are all owned by the same user and group.  After the failed push, i can grep for files with the permissions set to -r--r--r--, ie not writable by anyone, and display their locations with the bash command find . -perm 444 | xargs ls -l.  Doing that gives me the following:-r--r--r-- 1 ourusername ourgroupname    730 Nov  4 15:02 ./objects/46/346f550340bc0d3fec24ea42b25999161f8c7a-r--r--r-- 1 ourusername ourgroupname    177 Nov  4 15:02 ./objects/4c/664ebbfad568de6101a52c01f5117654945d6d-r--r--r-- 1 ourusername ourgroupname    730 Nov  4 14:36 ./objects/9e/3f572366da9fb319331dfd924ae35cf9fd00ae-r--r--r-- 1 ourusername ourgroupname    175 Nov  4 14:36 ./objects/aa/f42d7ed706f1d2e4a0aa1c5eb184e17e917204These are all recently changed files (at time of posting it's Nov 4, 15:08).  So, it looks like git is updating/replacing the files (giving them a new timestamp), changing the permissions in the process, then complaining about the permissions.  I'm totally stumped as to what's going on here :(Personally, I got this problem when I did a git push origin master.The solution for me was:On my server, I login with root in the directory that contains my repository and do recursively:chown -hR MyGitUser MyRepoand all works fineI have only one git user and others connect with ssh by publishing their public key.If you configure several git users you have to do the same for each user.If anyone else gets this error, I've come across it when working across the windows-linux divide. Seems that if newline formats get converted to windows, you can still commit in some circumstances, but git then converts to linux format.So if new lines were the only change, then we now had two identical commits in a row. Since commit hashes are generated from commit file data, and each had the same data, they ended up with the same hash. At least in my case, that's what the ""File exists"" indicates. Git got all confused.I fixed it by doing git reset --hard locally and on the central repo.My issue was a permission problemI went up directory then cp -R repo repo_copythen everything worked again.then I went to delete repo and permission denied, checked perms and sure enough perms had been changed that the user I was running as didn't have write access...Tried some of the solutions but eventually realized that the disk of our git server had no free space left."
"Your local master branch is not set up to track remote master branch.You could do git pull origin master to tell git the explicit branch you want to pull or you add this to your .git/config:[branch ""master""]  remote = origin  merge = refs/heads/masterWhen you push to master for the first time, add the -u switch (git push -u origin master). This will set everything up automatically.As it turns out, @MichaÅâ Szajbe's answer IS the solution to the problem.  The eclipse keys in question are built from the egit ""working directory"". Should you encounter this problem, then find the .git directory in that working directory and edit the .git/config file with a text editor, adding the section Michal describes.  This is in my experience a fairly standard operation these days for cases when you first git init and push to an uninitialized remote, that creates the master branch.  I haven't found a way in that case not to do the manual editing in order to git pull, even with command line git.  After the edit is saved, right click on the git repo in your egit ""Git Repositories"" perspective, and choose properties, you will now see this section of keys has been created (or more likely just read from the config file) and a remote master to local master git pull will operate as expected going forward.It's possible that you could enter these keys and values yourself, but copying and pasting what Michal shows is certainly a lot faster and probably safer.  I didn't actually try adding the keys manually through the property editor nor am I likely to, as I know this method works, and makes sense since egit is simply calling through to the local git repo.I am also supporting some people in my office who are using Flex and the Flexbuilder editor which is built on top of eclipse and egit.  These instructions are equally relevant to them.To fix this problem in Eclipse, open the Windows menu and select Show View / Other / Git Repositories.From the Git Repositories tab:expand your local repositoryright click on Remoteclick on Create Remote...Remote name = originnext to IRI press the Change buttonCTRL+SPACE on URIselect the remote locationpress Finishpress Save and PushAgain, from the Git Repositories tab:right click on originselect Configure Fetch...on Ref mapping press the Edit (Advanced)...press Add All Branches Specselect the Force Update checkbox press FinishAgain, from the Git Repositories tab:right click on your local repositoryselect Propertiespress New Entry...enter the following two keys:(1)Key = branch.master.remoteValue = origin(2)Key = branch.master.mergeValue = refs/heads/masterThis worked for me:Right-click my checked-out local branch that can't pull (mine's called ""development"")Select ""Configure Branch...""For ""Upstream Branch:"", I selected ""refs/heads/development""For ""Remote:"" I selected ""origin""Left ""Rebase"" uncheckedHit OKNow my config pref window looks like the one in gview's answer.I also had problems to configure it. It is working now so I'm going to share my configuration file. I think it will help:[core]    repositoryformatversion = 0    filemode = false    logallrefupdates = true    [branch ""master""]         remote = origin         merge = refs/heads/master     [remote ""origin""]         url = https://github.com/chelder86/ArcadeTongame.git        fetch = +refs/heads/*:refs/remotes/origin/*Note: https://github.com/chelder86/ArcadeTongame.git should be replaced with your own HTTPS clone URL.Same problem.  Here's how I solved it within eclipse/egit:Originally I cloned a remote repo to my office computer (my own repo, but on a remote server).  Then I created a new branch of repo project locally (""testing""), and pushed it to remote repository.  Cloned remote repo to my laptop, switched to ""testing"" branch, worked on it, etc., pushed, then came back to office.  When I tried to pull ""testing"" changes from server, got msg ""local branch not configured for pull"".  Problem is that on desktop, ""testing"" is local only, does not have remote URL info, so cannot pull changes.I solved this within eclipse (egit) by:deleting local branchpull branch from remote repo as newbranch.Steps were:Go to Git Repository Exploring perspectiverename local branch ""zzz""  (paranoid, don't like deleting until sure I've got it right!)rt-click ""Branches"", ""Switch to"", ""New Branch""pull down ""Source ref"" list, select ""testing"" branch (pull strategy ""merge"", ""Checkout new branch"" checked)click ""finish""Switch to usual perspective, make sure my files are presentswitch back to Git Repository Exploring and delete branch ""zzz""  Note:  am running Eclipse Indigo .  Steps may be different on other releases.I just got the same issue but accepted answer did not work for me. Here's what I did (although I can't confirm if accepted answer had an impact as the updated config remains) : Expand your git repository tree from 'Git Repositories' view.Right click on 'Remotes' and select 'Create Remote'Select radio button 'Configure fetch' -> 'Ok'Select 'Change' opposite 'URI' text boxEnter your git repository details and click 'Finish'Select 'Save'You should now be able to pull from the remote repository.Note - when I tried 'Dry-Run' which I think is just a connection test it failed but the pull still worked.About gview's solution: then find the .git directory in that working directory and edit the .git/config file with a text editorYou don't need to find it yourself or open it with a text editor.Window -> Show view -> Other -> GIT -> Git RepositoriesExpand the repo folder you created.It will contain a folder called ""Working Directory"" expand it.There will be a folder inside the ""Working Directory"" folder called "".git"" expand it.Inside "".git"" there will be ""config"", right click ""config"" -> open in editor.The config file will open right in Eclipse where you can edit it. I added the following and now I can pull without errors:[branch ""master""]remote = originmerge = refs/heads/masterWhat I found that worked using eclispe (this is certainly not the right way to go about this but it works): push to remote repository, delete local workspace and repository, import from git using the import dialogue. The import wizard takes care of setting everything up for future pulls.Try windows->Show View->Navigator.In the Navigator windows, find bin folder in your projectThen commit bin folder to github and hope it work well.Try pull or fetch it after all task above.The current branch is not configured for pull.No value for key branch.master.merge found in configurationAn alternative for PULL (avoiding above error) is:FETCH to update your remote branch on your machineMERGE of your local branch with your remote branch  (Team -> Merge... -> Remote Tracking -> origin/branch)git repository view -> + branches -> local -> select the local branch you want to assign to the remote one -> right click -> select the remote (probably origin) and the upstream branchThe simplest solution I've found while using the Eclipse Git plugin is as follows:Right click the project and select Team > Push BranchMake sure the box next to ""Configure upstream for push and pull"" ischeckedClick next and complete the push.After this completes, the branch will now be correctly configured for pull as well."
"This happened to me and git reset --hard HEAD from the accepted answer didn't help. However, running spring stop did the trick. I suspect spring is rewriting the file whenever it is modified to ensure that it is in sync with the code running via spring.After doing the following, I was able to pull and check out branches again.git checkout Gemfile.lockgit reset --hard HEADI'm not sure why and how this solution works. Explanations are welcome.The reason git was detecting Gemfile.lock as modified in my case, was that the bottom of the file had BUNDLED WITH 1.10.3. After updating bundler gem update bundler, regenerating and committing Gemfile.lock, it stopped appearing in git as modified.git version 2.2.1, Mac OSX version 10.10.4, iTerm2 Build 2.9.20150624-nightly (w/shell integration)"
"Deleting a file is changing it.  You want those two files to be ""unchanged"".  If you want to keep any changes you've done (including deletion), you should either stash or commit.  Stashing would require unstashing (git stash pop or git stash apply), while committing will probably result in a conflict which you must resolve.  If you just want to revert any changes (throw them away, not interested in keeping them), you can git checkout -- buf.cpp buf.h to restore them, then try the pull."
"I solved this problem following this step-by-step instructions:Step 1: Check for SSH keys$ cd ~/.ssh# Checks to see if there is a directory named "".ssh"" in your user directory# If it says ""No such file or directory"" skip to step 3. Otherwise continue to step 2.Step 2: Backup and remove existing SSH keys$ ls# Lists all the subdirectories in the current directory# config  id_rsa  id_rsa.pub  known_hosts$ mkdir key_backup# Makes a subdirectory called ""key_backup"" in the current directory$ cp id_rsa* key_backup# Copies the id_rsa keypair into key_backup$ rm id_rsa*# Deletes the id_rsa keypairStep 3: Generate a new SSH key$ ssh-keygen -t rsa -C ""your_email@youremail.com""# Creates a new ssh key using the provided email# Generating public/private rsa key pair.# Enter file in which to save the key (/home/you/.ssh/id_rsa):    # Enter passphrase (empty for no passphrase): [Type a passphrase]# Enter same passphrase again: [Type passphrase again]    # Your identification has been saved in /home/you/.ssh/id_rsa.# Your public key has been saved in /home/you/.ssh/id_rsa.pub.# The key fingerprint is:# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.comStep 4: Add your SSH key to GitHub$ sudo apt-get install xclip# Downloads and installs xclip$ xclip -sel clip < ~/.ssh/id_rsa.pub# Copies the contents of the id_rsa.pub file to your clipboardThen, go to hithub, and do:Go to your Account SettingsClick ""SSH Keys"" in the left sidebarClick ""Add SSH key""Paste your key into the ""Key"" fieldClick ""Add key""Confirm the action by entering your GitHub passwordStep 5: Test everything out$ ssh -T git@github.com# Attempts to ssh to githubIf ok, you'll seeHi username! You've successfully authenticated, but GitHub does not# provide shell access.Otherwise (it happened with me), you will seeAgent admitted failure to sign using the key.# debug1: No more authentication methods to try.# Permission denied (publickey).To solve this$ ssh-add# Enter passphrase for /home/you/.ssh/id_rsa: [tippy tap]# Identity added: /home/you/.ssh/id_rsa (/home/you/.ssh/id_rsa)For original infohttps://help.github.com/articles/generating-ssh-keyshttps://help.github.com/articles/error-agent-admitted-failure-to-signYou have to export your key on the server with the commandssh-copy-id user@hostand ssh-agent should run before your ssh-add.You can put this line in /etc/rc.local if you are under Linux :eval $(ssh-agent)Edit: now I know you use windows, so see this thread : getting ssh-agent to work with git run from windows command shellIf you already have a public key in ~/.ssh (and have already added that key to your github account), you might only have to load your key into the SSH agent again. To test if the SSH agent has the key, type ssh-add -lIf the result is:The agent has no identities.Then simply load your key into the SSH agent like this:ssh-add ~/.ssh/github_rsa(github_rsa is the name on my machine for the stored SSH key. This file can, among others, also be named: id_rsa)After that you have to enter your passphrase for the key (this is likely your password to log into github). If you get a message like this:Identity added: /Users/name/.ssh/github_rsa (/Users/cpotzinger/.ssh/github_rsa)Doing an $ ssh-add This worked for me to resolve the following as well for gitlabjovimac-2:work joviano$ git clone git@git.xyz.com:bjetfweb.gitCloning into 'bjetfweb'...Access denied.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists."
"If anyone else has this problem, the solution is to change the login shell of the user 'git' (or whatever your user is called) to /bin/bash. This can be done via the command : usermod -s /bin/bash git (Link). The reason for changing the login shell is because the default shell for the git user is /sbin/nologin (or similar, depending on environment), which prevents the git application from logging in as the git user on the git server.Just for other users reference:fatal: protocol error: bad line length character: no scan be a truncated answer for ""No such project"".As in my case, this kind of error can be fixed by adding user (even yourself) to the project in gitlab:https://gitlab.com/username/your_project/project_membersalso, ensure your public key is set in your user Profile settings > SSH Key or in Project > Settings > Deploy Keyshttps://gitlab.com/profile/keysAnother thing to check is that your .bashrc does not print extra stuff.For example 'echo ""hello""' in .bashrc creates the error:kruus@borg:~/malt$ ssh snake01Last login: Tue Oct 21 10:44:31 2014 from 138.15.166.103hello...kruus@snake01:/net/snake01/usr/hydra/kruus/malt$ git pullfatal: protocol error: bad line length character: hellNote how saying hello caused one hell of a problem.Removing the 'echo ""hello""' from my .bashrc allows git to work as expected again. You may need to "">& /dev/null"" to remove output if your .bashrc does more complicated things.Another possibility is that you misspelled the repository name.I've done it twice in the last two days.  I added a remote and misspelled it and I misspelled the name when creating the project on GitLab.In both cases when I tried to push to remote I gotfatal: protocol error: bad line length character: No sSo check that spelling!Also, if you create the project under a different name (like a group) make sure that's the remote you add.The solution to my issue with this was that I'd forgotten to add in a deploy key for the project (for the user I was trying to deploy as).Adding a deploy key in https://gitlab/group/project/deploy_keys sorted me out.You can get the actual error message by doing:ssh git@yourgitlabserver.com ""git-upload-pack yournamespace/yourreponame.git""According to this git documentation git protocol expects at the beginning of each line its size and then the content. Looks like GitLab doesn't do that and sends the error message directly.I experienced this error message today (""No s""), and it actually had to do with me having no rights to push to the targeted repository. Even though the error message is very weird, this might help people continue to work.We use Gitlab.sudo gitlab-ctl reconfigureand thensudo gitlab-ctl restartshould do the trickIn my case, my username was changed and this repository's git config was not updated to match the new name.Check your git remotes to make sure they are pointing to correct place:git remote -vUpdate the config by editing the config manually:vim .git/configor through commandsgit remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git"
"Assuming @ChrisHayes is right about an accidental sudo, this should fix it. From inside your repository:sudo chown -R $USER:$USER ""$(git rev-parse --show-toplevel)/.git""I am using Ubuntu and faced the same problem. To solve it, I simply switched user to root and I see no further error.$supasswordThen,$git pull origin master"
"Found what is was problem: I just forgot to add deploy key to repo =/ After that issue was solved.Just for other users reference:fatal: protocol error: bad line length character: no scan be a truncated answer for ""No such project"".As in my case, this kind of error can be fixed by adding user (even yourself) to the project in gitlab:https://gitlab.com/username/your_project/project_membersalso, ensure your public key is set in your user ""Profile settings"" > SSH Key or in Project > Settings > Deploy Keysfatal: protocol error: bad line length character: Thishas been discussed here before. It's a common error.I believe one of the main reasons of this happening is because  of problems with the Shell access (is the access allowed?) on the server..I would suggest to look at Git push results in fatal: protocol error: bad line length character: This, it can give you an idea on how to tackle the problem.To verify that your remote URL is correct use following command:git remote -v Make sure your ""origin"" remote URL is correct, because if git is unable to connect to remote then you would see these errors. Fix the remote using following command: git remote set-url <your-remote-name> <your-remote-url> That should fix this issue."
"Git has a limit of 4096 characters for a filename, except on windows when git is compiled with msys. It uses an older version of the windows api and there's a limit of 260 characters for a filename.So as far as I understand this, it's a limitation of msys and not of git. You can read the details here:https://github.com/msysgit/git/pull/110You can circumvent this but using an other git-client on windows.You should be able to run the commandgit config --system core.longpaths trueor add it to one of your git config files manually to turn this functionality on, once your are on a supported version of git. It looks like maybe 1.9.0 and after.This might help :git config core.longpaths true"
"Looks like you have a corrupt tree object. You will need to get that object from someone else. Hopefully they will have an uncorrupted version.You could actually reconstruct it if you can't find a valid version from someone else by guessing at what files should be there. You may want to see if the dates & times of the objects match up to it. Those could be the related blobs. You could infer the structure of the tree object from those objects.Take a look at Scott Chacon's Git Screencasts regarding git internals. This will show you how git works under the hood and how to go about doing this detective work if you are really stuck and can't get that object from someone else.I had the same problem (don't know why).This fix requires access to an uncorrupted remote copy of the repository, and will keep your locally working copy intact, but you will lose the record of any commits that were not pushed, and will have to recommit them.  You will also lose any stashes.Execute these commands from the parent directory above your repo (replace 'foo' with the name of your project folder):Create a backup of the corrupt directory:cp -R foo foo-backupMake a new clone of the remote repository to a new directory:git clone git@www.mydomain.de:foo foo-newcloneDelete the corrupt .git subdirectory:rm -rf foo/.gitMove the newly cloned .git subdirectory into foo:mv foo-newclone/.git fooDelete the rest of the temporary new clone:rm -rf foo-newcloneOn Windows you will need to use:copy instead of cp -R rmdir /S instead of rm -rfmove instead of mvNow foo has its original .git subdirectory back, but all the local changes are still there. git status, commit, pull, push, etc. work again as they should.Your best bet is probably to simply re-clone from the remote repo (ie. Github or other).  Unfortunately you will lose any unpushed commits and stashed changes, however your working copy should remain intact.First make a backup copy of your local files.  Then do this from the root of your working tree:rm -fr .gitgit initgit remote add origin [your-git-remote-url]git fetchgit reset --mixed origin/mastergit branch --set-upstream-to=origin/master master  Then commit any changed files as necessary.Trygit stashThis worked for me.  It stashes anything you haven't committed and that got around the problem.I ran into this problem after my computer crashed while I was writing a commit message. After rebooting, the working tree was as I had left it and I was able to successfully commit my changes.However, when I tried to run git status I got thiserror: object file .git/objects/xx/12345 is emptyfatal: loose object xx12345 (stored in .git/objects/xx/12345 is corruptIn my case, unlike most of the other answers, I wasn't trying to recover any data. I just needed Git to stop complaining about the empty object file.tl;drThe ""object file"" is git's hashed representation of a real file that you care about. Git thinks it should have a hashed version of some/file.whatever stored in .git/object/xx/12345, and fixing the error turned out to be mostly a matter of figuring out which file the ""loose object"" was supposed to represent.DetailsPossible options seemed to beDelete the empty fileGet the file into a state acceptable to GitRestore the entire computer from a backup and redo the work. This would have taken about 90 minutes. In the end, I spent over 2 hours trying out solutions 1 and 2, so maybe that's what I should have done.Approach 1: Remove the object fileThe first thing I tried was just moving the object filemv .git/objects/xx/12345 ..That didn't work - git began complaining about a broken link. On to Approach 2Approach 2: Fix the fileLinus Torvalds has a great writeup of how to recover an object file that solved the problem for me. Key steps are summarized here.$> # Find out which file the blob object refers to$> git fsckbroken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8           to    blob xx12345missing blob xx12345$> git ls-tree 2d926...10064 blob xx12345  your_file.whateverThis tells you what file the empty object is supposed to be a hash of. Now you can repair it.$> git hash-object -w path/to/your_file.whateverAfter doing this I checked .git/objects/xx/12345, it was no longer empty, and git stopped complaining.I got this error after my (windows) machine decided to reboot itself.Thankfully my remote repo was up to date so I just did a fresh git-clone..In answer of @user1055643 missing the last step:$ rm -fr .git$ git init$ git remote add origin your-git-remote-url$ git fetch$ git reset --hard origin/master$ git branch --set-upstream-to=origin/master masterI just experienced this - my machine crashed whilst writing to the Git repo, and it became corrupted. I fixed it as follows.I started with looking at how many commits I had not pushed to the remote repo, thus:gitk &If you don't use this tool it is very handy - available on all operating systems as far as I know. This indicated that my remote was missing two commits. I therefore clicked on the label indicating the latest remote commit (usually this will be /remotes/origin/master) to get the hash (the hash is 40 chars long, but for brevity I am using 10 here - this usually works anyway).Here it is:14c0fcc9b3I then click on the following commit (i.e. the first one that the remote does not have) and get the hash there:04d44c3298I then use both of these to make a patch for this commit:git diff 14c0fcc9b3 04d44c3298 > 1.patchI then did likewise with the other missing commit, i.e. I used the hash of the commit before and the hash of the commit itself:git diff 04d44c3298 fc1d4b0df7 > 2.patchI then moved to a new directory, cloned the repo from the remote:git clone git@github.com:username/repo.gitI then moved the patch files into the new folder, and applied them and committed them with their exact commit messages (these can be pasted from git log or the gitk window):patch -p1 < 1.patchgit commitpatch -p1 < 2.patchgit commitThis restored things for me (and note there's probably a faster way to do it for a large number of commits). However I was keen to see if the tree in the corrupted repo can be repaired, and the answer is it can. With a repaired repo available as above, run this command in the broken folder:git fsck You will get something like this:error: object file .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390d is emptyerror: unable to find ca539ed815fefdbbbfae6e8d0c0b3dbbe093390derror: sha1 mismatch ca539ed815fefdbbbfae6e8d0c0b3dbbe093390dTo do the repair, I would do this in the broken folder:rm .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390dcp ../good-repo/.git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390d .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390di.e. remove the corrupted file and replace it with a good one. You may have to do this several times. Finally there will be a point where you can run fsck without errors. You will probably have ""dangling commit"" and ""dangling blob"" lines in the report, these are a consequence of your rebases and amends in this folder, and are OK. The garbage collector will remove them in due course.Thus (at least in my case) a corrupted tree does not mean unpushed commits are lost.I had this same problem in my bare remote git repo. After much troubleshooting, I figured out one of my coworkers had made a commit in which some files in .git/objects had permissions of 440 (r--r-----) instead of 444 (r--r--r--). After asking the coworker to change the permissions with ""chmod 444 -R objects"" inside the bare git repo, the problem was fixed.Runnning git stash; git stash pop fixed my problemI followed many of the other steps here; Linus' description of how to look at the git tree/objects and find what's missing was especially helpful. git-git recover corrupted blobBut in the end, for me, I had loose/corrupt tree objects caused by a partial disk failure, and tree objects are not so easily recovered/not covered by that doc.In the end, I moved the conflicting objects/<ha>/<hash> out of the way, and used git unpack-objects with a pack file from a reasonably up to date clone. It was able to restore the missing tree objects.Still left me with a lot of dangling blobs, which can be a side effect of unpacking previously archived stuff, and addressed in other questions hereI was getting a corrupt loose object error as well../objects/x/xI successfully fixed it by going into the directory of the corrupt object. I saw that the users assigned to that object was not my git user's. I don't know how it happened, but I ran a chown git:git on that file and then it worked again.This may be a potential fix for some peoples' issues but not necessary all of them."
"Your solution has got you a working copy locally and remotely, but will cause problems again when the remote repository decides to repack itself again.  Fortunately, you can set config options that will reduce the amount of memory needed for repacking in both repositories -- these essentially make the command line parameters that you added into the default options when repacking.  So, you should log in to the remote, change into the repository and do:git config pack.windowMemory 10mgit config pack.packSizeLimit 20mYou may want to do the same on your local repository.  (Incidentally I guess that either your repository is very large or these are machines with little memory - these values seem very low to me.)For what it's worth, when getting malloc failures on repacking very large repositories in the past, I've also changed the values of core.packedgitwindowsize, core.packedgitlimit, core.deltacachesize, pack.deltacachesize, pack.window and pack.threads but it sounds as if you don't need any further options :)I solved the problem using the following steps.Got repository checked out from the server to my local machine (using a raw copy over ssh)Repacked the local repositorygit repack -a -d --window-memory 10m --max-pack-size 20mCreated an empty repository on the servergit init --barePushed the local repository to the serverChecked that it is possible to clone the server repositoryWith no direct access to repository and hence being unable to perform a repack, performing a shallow clone and then gradually fetching while increasing depth helped for me. git clone YOUR_REPO --depth=1git fetch --depth=10...git fetch --depth=100git fetch --unshallow    //Downloads all history allowing to push from repoHope it can still help someone.This does not answer the question, but somebody might run into it: repacking might also fail on the server when pack-objects is terminated by some kind of memory killer (such as the one used on Dreamhost):$ git clone project-url project-folderCloning into project-folder...remote: Counting objects: 6606, done.remote: Compressing objects: 100% (2903/2903), done.error: pack-objects died of signal 9284.51 MiB | 2.15 MiB/s   error: git upload-pack: git-pack-objects died with error.fatal: git upload-pack: aborting due to possible repository corruption on the remote side.remote: aborting due to possible repository corruption on the remote side.fatal: early EOFfatal: index-pack failedOn Dreamhost this appears to be caused by mmap. The repack code uses mmap to map some files‰Ûª contents into memory, and as the memory killer is not smart enough, it counts the mmapped files as used memory, killing the Git process when it tries to mmap a large file.The solution is to compile a custom Git binary with mmap support turned off (configure NO_MMAP=1).I am using git version 1.7.0.4 and it accepts this command. It is possible that git version 1.6 doesn't accept this command.Try creating a new repository with some random commits. Then repack it with this command."
"Your local changes will need to be stashed away while you perform the merge. To do that, git provides git stash to save your uncommitted changes to a temporary location, and git stash pop to apply them back to your local code.This should work:git stashgit pull origin mastergit stash popHere's a good website to learn more about git: http://gitready.com/beginner/2009/03/13/smartly-save-stashes.htmlBut after looking at your screenshot, a merge doesn't seem like the best option for you. Instead a rebase would make more sense.git stashgit pull --rebase origin mastergit stash popHere are some resources to understand the difference between a merge and a rebase:http://gitready.com/intermediate/2009/01/31/intro-to-rebase.htmlhttp://stackoverflow.com/a/3357174/2651774"
"As commented, try first an https url: ssh username@host.com cd public_html/github git remote set-url origin https://github.com/username/reponame git pullThis is far easier than tinkering with ssh keys, especially when they are passphrase protected.If you must use ssh keys, then you must know the default location of the key is:~/.ssh/id_rsa(.pub)If the user executing the script is 'mysite', then it will look for ~mysite/.ssh/id_rsa.And you need to make sure the ssh-agent is running as mysite user. Which is why it is easier at first to try it with a private key not passphrase-protected.If your ssh key were to be somewhere else, then you would need a:~mysite/.ssh/configIn that config file, as illustrated here, you can specify the location and name of the key you want to use.You should first try to debug using the actual 'mysite' account.sudo -u mysitecd ~/public_html/githubgit pullFrom the error log, it seems to be a remote problem, not local. Meaning SSH can actually access your private key.I suspect github is receiving your own personal private key (via ssh-agent) and not 'mysite' public key. You can validate this by running ssh-add -l within your php code, or with sudo -u mysite; ssh-add -l and comparing with what's registered in github interface.Github has covered this problem extensively: https://help.github.com/articles/error-permission-denied-publickeyAdd the following to your .ssh/configHost github_server  HostName github.com  User git  IdentityFile /path/to/your/private_keyEdit your .git/config and update the remote repo URL fromurl = git@github.com:git_repo_name.gittourl = git@github_server:git_repo_name.gitThat should help you login to the server using the given key. Replace the path to the key in the above to the full actual path on your machine. Replace the repo name with the actual repo name. Do note that the user 'mysite' has access to the key file. You can test that using fopen from PHP and confirm."
"Check the solution herehttps://github.com/Homebrew/homebrew/issues/21002in Short cd /usr/localgit statusgit reset --hard origin/mastergit clean -dfType brew doctor and do what it tells you."
"It appears that git created files in .git/objects for the new commit, but didn't successfully write to them. I solved it by deleting them one at a time and re-running git fsck --full to find the next one. I started with the one originally reported by git fsck:% rm -f .git/objects/43/46883490a0990e68db0187241abc1642765a73% git fsck --fullChecking object directories: 100% (256/256), done.error: inflate: data stream error (incorrect header check)error: unable to unpack 86e7247af5865e857a3b61eed99986e2d9538df1 headererror: inflate: data stream error (incorrect header check)fatal: loose object 86e7247af5865e857a3b61eed99986e2d9538df1 (stored in .git/objects/86/e7247af5865e857a3b61eed99986e2d9538df1) is corrupt% rm -f .git/objects/86/e7247af5865e857a3b61eed99986e2d9538df1% git fsck --fullChecking object directories: 100% (256/256), done.error: inflate: data stream error (incorrect header check)error: unable to unpack a94406345ac44982b00cf57b4b9660a35436637f headererror: inflate: data stream error (incorrect header check)fatal: loose object a94406345ac44982b00cf57b4b9660a35436637f (stored in .git/objects/a9/4406345ac44982b00cf57b4b9660a35436637f) is corruptAnd so on. I deleted five objects before git fsck came up clean, corresponding (as I suppose) to the five files in the commit I was trying to make. I guess that the file history was not corrupted at all.Incidentally, I thought of another method that seems to work as well. git clone copies the bad objects, but git push does not. After backing up, I created a new empty repository (--bare, because otherwise you can't push to master), then unstaged my changes and pushed both branches into the new repository. Then it was just a matter of checking it out again and restoring the latest changes from my backups.Still interested if anyone cares to shed light on the failure mechanism here. Thanks jkyako for the help.Simple answer to this question for anyone facing this problem: the git clone command is the fix, if have a remote repo then clone it to the local folder (after deleting the corrupted local repo), in case you dont have remote repo then try to push the corrupt repo to github and then clone it from there, I think that corrupted objects wont be pushed and it will fix the problem"
"$HOME/.gitconfig is your global config for git.There are three levels of config files. cat $(git rev-parse --show-toplevel)/.git/config(mentioned by bereal) is your local config, local to the repo you have cloned.you can also type from within your repo:git remote -vAnd see if there is any remote named 'origin' listed in it.If not, if that remote (which is created by default when cloning a repo) is missing, you can add it again:git remote add origin url/to/your/forkThe OP mentions:Doing git remote -v gives: upstream git://git.moodle.org/moodle.git (fetch) upstream git://git.moodle.org/moodle.git (push)So 'origin' is missing: the reference to your fork.See ""What is the difference between origin and upstream in github""I faced the same problem when I renamed by repository on GitHub. I tried to push at which point I got the errorfatal: 'origin' does not appear to be a git repositoryfatal: The remote end hung up unexpectedlyI had to change the URL usinggit remote set-url origin ssh://git@github.com/username/newRepoName.gitAfter this all commands started working fine. You can check the change by using git remote -vIn my case after successfull change it showed correct renamed repo in URL[aniket@alok Android]$ git remote -vorigin  ssh://git@github.com/aniket91/TicTacToe.git (fetch)origin  ssh://git@github.com/aniket91/TicTacToe.git (push)This does not answer your question, but I faced a similar error message but due to a different reason. Allow me to make my post for the sake of information collection.I have a git repo on a network drive. Let's call this network drive RAID. I cloned this repo on my local machine (LOCAL) and on my number crunching cluster (CRUNCHER).For convenience I mounted the user directory of my account on CRUNCHER on my local machine. So, I can manipulate files on CRUNCHER without the need to do the work in an SSH terminal.Today, I was modifying files in the repo on CRUNCHER via my local machine. At some point I decided to commit the files, so a did a commit. Adding the modified files and doing the commit worked as I expected, but when I called git push I got an error message similar to the one posted in the question.The reason was, that I called push from within the repo on CRUNCHER on LOCAL. So, all paths in the config file were plain wrong.When I realized my fault, I logged onto CRUNCHER via Terminal and was able to push the commit.Feel free to comment if my explanation can't be understood, or you find my post superfluous."
"I had this problem too.. The output surprised me:error: RPC failed; result=18, HTTP code = 200fatal: The remote end hung up unexpectedlyIt seems to happen because of problems with  libcurl, which is the underlying library used in http communications in git.I've read that one of the solutions is to try to increase the http.postBuffer with a command like:git config --global http.postBuffer 524288000Perhaps take a look at the question: (GitHub Clone Error: Cannot clone with EOF error) of zdesam, it seems very related.I hope it's useful, I suggest you checking it out ;)Joey"
"I know this may be general but I decided I wanted to get this answered, so here is what I did and it is now working correctly:Uninstalled ALL git clients through windows (I had a couple initially for testing)Installed the basic git bash from gitTurned off smart screen and ensured firewall and defender were off (they were)Tried it again and it now works. My best guess is there was a mis-configuration somewhere - probably a wrong key (not sure how that happened since I updated it). At any rate it is working. It's probably the nuclear option but I hope this helps someone else that runs into this.I could resolve the 443 error by issuing this command :git config --global http.proxy <proxyname:port>"
"You shouldn't store .pyc files in Git. On your workstation, dofind . -name *.pyc -exec git rm {} \;Then add a line *.pyc to .gitignore, commit all the changes and push.On the other end (EC2), dogit checkout classes/ec2/ec2Auto.pyc classes/redis_ha.pyc \             classes/rtbUtilities.pyc rtb_redis_connections/redis_connections.pycthen pull."
"Now it is working! I didn't even change a thing. This kind of an error ' result=52 ' is an error with github itself. Github.com was going down and when I tried uploading I got the error. Now the site is back up and I can commit like normal.This same error also happens if your HTTP post buffer is too small for the changes you want to push.In this case, the solution is to increase it, for example usinggit config http.postBuffer 524288000Bitbucket has the same error message. Often it is related to degraded server performance. Before you start doing anything else, check:http://status.bitbucket.org/https://status.github.com/messagesThis could happen if you have a faulty internet connection too, Yeah I am experiencing one at this time.. :).I ran into this problem when trying to clone/fetch from a Bitbucket repository over http. It turns out the repository is too big (+1gb) and Bitbucket replies with this error:error: RPC failed; result=52, HTTP code = 0fatal: The remote end hung up unexpectedlyI switched to the SSH protocol and now it works fine. Afterwards, you can set the remote back to the http version if you need to, and it will keep working."
The problem was a malformed URL: it should be https://username@stash.company.com/scm/~username/project.git instead of stash@stash.
"Although I re-cloned the repository so I could continue working, I did keep the old corrupted one around, in case I happened to find a way to fix it. Unfortunately, I found no such fix.If you run into this problem, your best bet is just to git clone the repository again. Hopefully you've already pushed your latest changes to a remote before the repo got corrupted."
"When you add a pattern to your .gitignore this just tells git to ignore new files that match the pattern, however any files that git is already tracking will not be affected. You can tell git to stop tracking a file using this command:git rm --cached <file>This will remove it from the index as of the next commit.The problem is when you have already added that file you have to remove that file first. Otherwise that file will be marked as modified. For that you can use:git rm --cached file [file ...]With that you can remove that file from your repository.Try removing the file first form the repo. To remove the file from the repo and not delete it from the local file system use:git rm --cached user.v12.suo"
"On Windows, I can clone the repo without issue:C:\Documents and Settings\VonC\prog\git>git clone https://github.com/rails/railsCloning into 'rails'...remote: Counting objects: 381705, done.remote: Compressing objects: 100% (96211/96211), done.remote: Total 381705 (delta 293367), reused 368694 (delta 282130)Receiving objects: 100% (381705/381705), 57.17 MiB | 587.00 KiB/s, done.Resolving deltas: 100% (293367/293367), done.Checking out files: 100% (2715/2715), done.On linux, it seems to work too, except for the very end:[ VonC,vonc@laposte.net for github.com ]Cloning into 'rails'...remote: Counting objects: 381705, done.remote: Compressing objects: 100% (96211/96211), done.remote: Total 381705 (delta 293367), reused 368694 (delta 282130)Receiving objects: 100% (381705/381705), 57.17 MiB | 655.00 KiB/s, done.Resolving deltas: 100% (293367/293367), done.Checking connectivity... doneerror: git-remote-https died of signal 13So try to:clone it in a new folder to check if that works bettermake sure to use the latest git version possible"
"I asked in the discussion:does ssh -T git@github.com ouput the same username (in Hi [My Username]!) as in the one used for the ssh url of your repo (git@github.com:username/repo.git)?Sorry It not showing same nameThat means somehow the credentials have changed.One solution would be to at least copy %HOME%\.ssh\id_rsa.pub in the SSH keys section of the right GitHub accountThe OP adds:I am working on private repo. So In git@github.com:username/repo.git, I replied:If you were able to clone/push to that repo whose username is not your own GitHub account, that must be because you had your previous public ssh key added as a contributor to that repo by the repo's owner.What next is to ask that same repo owner to add your current public ssh key %HOME%\.ssh\id_rsa.pub to the repo contributor list.  So check with the owner that you (meaning your public ssh key) are declared as a contributor.I got the very same errors too. In My case upgrading from Windows 7 to 8 messed up my settings. What helped was to regenerate the private and public SSH keys using PuTTYGen, and change the SSH tool in tortoisegit from SSH to Plink.I have shared the step by step steps also at http://techblog.saurabhkumar.com/2015/09/using-tortoisegit-on-windows-with.html"
"The errors are saying that your repo has changes that you don't have yet, because you added the README to the remote one when you set it up. If you've already got local changes or a local repo, you need to initialise an empty repository on Github, and then you can push. You'll have to add the remote though, something like git remote add https://github.com/username/repo.git.Downloading the README manually and adding and committing will probably produce a different commit ID, and put it at a different point in the commit history, which is why it's not detected as the same one.1) Why does it not work to initialize a remote repository on github with a README, and then try to connect the github repo with a previously existing existing local repo?When Github adds the README it commits it, and then this is the first commit. If you have a local repo, the first commit locally will be different, so they won't match up.2) Why could I not pull when I tried to fix this error? Probably because of the above, or the remote reference didn't add in properly, depending on how you added it.Generally, if you're creating locally first, you would go:# Set up the Git repo locally, with no commits in it.git init   # Add a new file.git add file1# Commit the change.git commit# Tell Git where your remote is.git remote add origin https://github.com/user/repo.git # Push the default 'master' branch to the above remote called 'origin'.git push origin master Or if it already exists on Github or a different remote server: # Download the existing repo, with all of the history.git clone https://bitbucket.org/user/repo.git# Add a new file or modified file.git add file1# Commit the change.git commit# Push to the remote that you downloaded from with clone on branch master.git push origin master3) Why could I still not push and initialize the connection to my github remote after I added the README from github to my local repository manually?That's not how the changes work with Git; they're a big list of sequential commits in a chain. Each commit has one or two parent commits, and the commit IDs aren't sequential either.See the Git website for some diagrams on the branching and commits here: http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is4) How do I create a github repo with an initialized README and connect it to a local repo WITHOUT causing the errors below?If you have an existing local repo you shouldn't create one with the initialised README. If it's blank on Github when you create it, you can push up your existing repository with no errors. If it has the README, you have to git clone the Github repo, and then add your changes to that folder, commit the changes, and then push. Adding the README is for when you have a new project and you're creating the Github repo first, and then you clone the project and start working in that location. If you have an existing repository locally don't use that option.Let's say you have a local repository:$ git log --oneline8e7e8d4 hello.txtThe local repository has a single file:$ lshello.txtNow you create a new repository via the GitHub web interface and initialize it with a README file.  At this point, your two repositories have divergent histories.  You can add the remote repository to your local repository:$ git remote add origin git@github.com:larsks/samplerepo.gitBut attempting to pull from this repository will yield an error:$ git pullwarning: no common commitsremote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From github.com:larsks/samplerepo * [new branch]      master     -> origin/masterThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for detailsThe important part of this error message is:There is no tracking information for the current branch.Please specify which branch you want to merge with.This is git telling you that while your current branch in your local repository is not associated with any branch in the remote repository, so it doesn't know what to do.  You can provide it with a remote branch name explicitly:$ git pull origin masterThis will create a merge commit (and will probably prompt you for a commit message).  Once the commit is complete, you can see that the local history now contains both our local commit as well as the commits from the GitHub repository:$ git log --oneline7f1231a Merge branch 'master' of github.com:larsks/samplerepo5f0d62e Initial commit8e7e8d4 hello.txtAnd our working directory now has a merged set of files:$ lshello.txt  README.mdAnd we can push this to our remote repository.  Just typing git push will result in an error similar to what we saw earlier:$ git pushfatal: The current branch master has no upstream branch.To push the current branch and set the remote as upstream, use    git push --set-upstream origin masterSo:$ git push --set-upstream origin masterCounting objects: 6, done.Delta compression using up to 8 threads.Compressing objects: 100% (3/3), done.Writing objects: 100% (5/5), 543 bytes | 0 bytes/s, done.Total 5 (delta 0), reused 0 (delta 0)To git@github.com:larsks/samplerepo.git   5f0d62e..7f1231a  master -> masterBranch master set up to track remote branch master from origin.And now we're all in sync.Update: Regarding your questions about --set-upstream:When you checkout a local branch that matches the name of a remote branch, git will set up the upstream association for you automatically.  For example, if the remote repository in this example also had a branch ""development"", and I did this after adding the remote:$ git checkout developmentI would see:Branch development set up to track remote branch development from origin.Switched to a new branch 'development'On the other hand, if you already have a branch checked out when you add the remote, as in the first part of this example, you need to use --set-upstream to tell git that you want your local branch to track the remote branch.As an aside, note that there's no requirement that your local branch match the name of a remote branch.  You are free to do something like:git checkout mastergit push --set-upstream origin patchesSo that from this point on, git push on your master branch will push to the remote patches branch."
"When you have to unlink file, you have to have permission 'w' for directory, in which file is, not for the file...FWIW - I had a similar problem and I'm not sure if this alleviated it (beyond the permission mod):  Closing Eclipse that was using the branch with this problem.If you are using any IDE most likely the problem is that file was used by some process. Like your tomcat might be using the file. Try to identify that particular process and close it. That should solve your problem."
"It seems like the first one isn't working because your user doesn't have the permissions for changing that directory, and the second because your root user doesn't have the right SSH keys for accessing that git repository.Depending on what you're trying to do, it might be better to clone the repository to a different directory, or maybe chown the current directory to have full access for your userCheck if you have enough permissions on the .git/ directory. You should have write permissions. You can set them with the following command.Go to your project folder:chown -R youruser:yourgroup .git/This is a UNIX permission problem. Do not use sudo for cloning the repository. You don't have the same ssh keys as root and you shouldn't work as root anyway. Try ls -la to find the permissions on the files and use chmod (or sudo chown) to fix them. Hope that helps.In my case, I only had read access to the .git/FETCH_HEAD file.  I had to do ""sudo chmod g+w .git/FETCH_HEAD"" in order to be able to do a pull request.I was having the first issue (FETCH_HEAD permission denied) on Windows.I fixed it by running Git Bash as an administrator (right click, run as administrator).The answer to this issue make sure .git/FETCH_HEAD has write privileges and you will be all set.I had this issue on Windows and it was resolved by giving write permissions.In unix one can run chmod a+rw .git/FETCH_HEAD from the project repository after which it should work.If you want to give the permission to the group,sudo chmod g+w .git -Rworked best for me.In my case work fine after it:rm -f .git/FETCH_HEADRunning Windows 7, when I had this issue it was because I had hidden the .git folder. The permissions were fine, it was just hidden. Showing the folder resolved it.Look at the owner and group of .git directory with (first go to parent directory of .git) ll .git , look at the group and owner of the directory,add your user to group of of the owner with sudo usermod -a -G yourusername  groupsofonwner, then logout => login and everything getting work.So in summeriesgo to parent directory of git       $cd your pathfind group owner of the .git direcotry$ll .git     add your user to that group $usermod -a -G yourusername ownergroupofgitLogout and login to system to this change take effect.Enjoy it ;)"
"The answer was easy:sudo git pullEdit:I had probably wrong permissions (better said, owner) in the .git directory.It's better to change the owner of this directory and files instead:sudo chown -R yourGitUser ./.gitSeems like a permission problem. Try applying 0775 rights to the .git folder, not only .gitignore."
"The easiest thing to do is to commit them with the proper permissions in the first place.  Git should detect you changing the mode from non-executable to executable.  If you're on an OS that lacks an execute bit - say, Windows - you can tell git to add the execute bit manually:git update-index --chmod=+x filename"
"The problem is that su starts its own shell; the second command isn't executed in that shell, but in the original one. You can demonstrate this by running the following script:#!/bin/bashsuwhoamiUnless you're already root when you run it, it won't output root.The solution is to use su's -c switch:sudo /bin/su -c ""cd /some/directory/for/git && git pull"" - gitrepouser"
"Are you the owner of all the files? Try chown -R you:you .gitThen chmod them to ""normal""chmod -R u=rwX,g=rwX,o="
"The syntax of 'git push' supports both an explicit and a shorthand version.The explicit version git push github master works for you. The shorthand version git push does not.If you use the shorthand version you do not tell git what remote to use and what local branch shall be pushed to what remote branch. Hence git has to guess what you mean.You can configure this with the setup of your remote and the push.default config:   push.default       Defines the action git push should take if no refspec is given on       the command line, no refspec is configured in the remote, and no       refspec is implied by any of the options given on the command line.       Possible values are:       åá    nothing - do not push anything.       åá    matching - push all matching branches. All branches having the           same name in both ends are considered to be matching. This is           the default.       åá    upstream - push the current branch to its upstream branch.       åá    tracking - deprecated synonym for upstream.       åá    current - push the current branch to a branch of the same           name.Have a look at git branch -vv to check what branch is tracked by your current branch. Then check git config --get push.default to verify it is doing what you expect.The explanation could be related to the default refspec used for remote ""github"":+refs/heads/*:refs/remotes/github/*A simple git push would push:to the remote associated to master (here ""github""), because master is the current branch (according to the git status)all the other branches (master and add_command branches)add_command is the one which is not in sync with github remote.git checkout add_command git pull githubThen a git push would work."
"The error is that somebody else has pushed in the master branch and you would overwrite their change if git allowed you to push (this is what non-fast forward error means). So you need to merge your local master branch with the remote master branch.This can happen if you did the git pull while the local branch was not the master branch. If you only want to push the branch you are working on and not the master branch, you need to tell it to git using the complete form of git-push:$ git push remote local-branch:remote-branchThe best possible answer is on Git help hereDealing with non-fast-forward errorsFrom time to time, you may encounter this error while pushing commits (git push origin master) to GitHub:To https://github.com/user/repo.git   ! [rejected]        master -> master (non-fast-forward)  error: failed to push some refs to 'https://github.com/user/repo.git'  To prevent you from losing history, non-fast-forward updates were rejected  Merge the remote changes (e.g. 'git pull') before pushing again.  See the  'Note about fast-forwards' section of 'git push --help' for details.This error can be a bit overwhelming at first; do not fear!Simply put, Git can't make the change on the remote without losing commits, so it refuses the push. Usually, this is caused by another user pushing to the same branch.You can remedy this by fetching and merging the remote branch:git fetch origingit merge origin masterOr, you can simply use git pull to perform both commands at once:git pull origin masterIn some cases, this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase. While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do. Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don't force-push.Be sure to verify that the pull actually worked.  It is possible the merge (which is part of a pull) failed.When I had this error message I failed to notice the pull failed.  The pull failed due to some uncommitted file changes (unrelated to the files I was trying to push) which caused the merge to fail. I reverted those file changes (because they were not important) and then did a pull again.  After the successful pull, the push worked."
"Another approach, if you don't have any work in progress, is to try and reset --hard your HEAD.With EGit: Resetting your current HEAD:Select Team -> Reset... on a project. This opens a dialog where you can select a branch or a tag.Reset HEAD on your current branch, in order to reset index and working tree to the last commit of said branch.Then try your pull.I was able to fix a similar issue by using the git command line client. While eclipse (egit) was only saying DIRTY_WORKTREE, in the command line I saw multiple conflicting files. Using git merge master from the command line, I could easily resolve the conflicts then in eclipse.So for me this seems to be an egit issue."
"If you truly want to discard the commits you've made locally, i.e. never have them in the history again, you're not asking how to pull - pull means merge, and you don't need to merge. All you need do is this:# fetch from the default remote, origingit fetch# reset your current branch (master) to origin's mastergit reset --hard origin/masterI'd personally recommend creating a backup branch at your current HEAD first, so that if you realize this was a bad idea, you haven't lost track of it.If on the other hand, you want to keep those commits and make it look as though you merged with origin, and cause the merge to keep the versions from origin only, you can use the ours merge strategy:# fetch from the default remote, origingit fetch# create a branch at your current mastergit branch old-master# reset to origin's mastergit reset --hard origin/master# merge your old master, keeping ""our"" (origin/master's) contentgit merge -s ours old-masterYou can either use the answer from the duplicate link pointed by nvm.Or you can resolve conflicts by using their changes (but some of your changes might be kept if they doesn't conflict with remote version):git pull -s recursive -X theirs"
"You can use git checkout <file> to check out the committed version of the file (thus discarding your changes), or git reset --hard HEAD to throw away any uncommitted changes for all files.git fetch origingit reset --hard origin/mastergit pullExplanation:Fetch will download everything from another repository, in this case, the one marked as ""origin"". Reset will discard changes and revert to the mentioned branch, ""master"" in repository ""origin"". Pull will just get everything from a remote repository and integrate. See documentation at http://git-scm.com/docs.I've tried both these and still get failure due to conflicts. At the end of my patience, I cloned master in another location, copied everything into the other branch and committed it. which let me continue.The ""-X theirs"" option should have done this for me, but it did not.git merge -s recursive -X theirs mastererror: 'merge' is not possible  because you have unmerged files. hint: Fix them up in the work tree,  hint: and then use 'git add/rm ' as hint: appropriate to mark  resolution and make a commit,  hint: or use 'git commit -a'. fatal:  Exiting because of an unresolved conflict."
"After having this problem myself i found a working solution for me.Error message:     ssh -v git@github.com    OpenSSH_5.8p1, OpenSSL 1.0.0d 8 Feb 2011    debug1: Connecting to github.com [207.97.227.239] port 22.    debug1: connect to address 207.97.227.239 port 22: Connection timed out    ssh: connect to host github.com port 22: Connection timed out    ssh: connect to host github.com port 22: Bad file numberYou will only see the bad file number message when on windows using the MINGGW shell. Linux users will just get Timed out.Problem:SSH is probably blocked on port 22. You can see this by typing    $nmap -sS github.com -p 22    Starting Nmap 5.35DC1 ( http://nmap.org ) at 2011-11-05 10:53 CET    Nmap scan report for github.com (207.97.227.239)    Host is up (0.10s latency).    PORT   STATE    SERVICE    22/tcp ***filtered*** ssh    Nmap done: 1 IP address (1 host up) scanned in 2.63 secondsAs you can see the state is Filtered, which means something is blocking it.You can solve this by performing an SSH to port 443 (your firewall / isp wont block this).Whats also important that you need to ssh to ""ssh.github.com"" instead of github.com.Else you will report to the webserver instead of ssh server.Below all the steps needed to solve this problem.Solution:(First of all make sure you generated your keys like explained on http://help.github.com/win-set-up-git/)create file ~/.ssh/config (ssh config file located in your user directory. On windows probably C:\Users\USERNAME\.ssh\configPaste the following code in it:    Host github.com    User git    Hostname ssh.github.com    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa    Port 443Save the file.Perform ssh like usual:$ssh -T github.com     $Enter passphrase for key '.......... (you can smile now :))Note that i dont have to supply the username nor port number.The key information is written in @Sam's answer but not really salient, so let's make it clear. ""Bad file number"" is not informative, it's only a sign of running git's ssh on Windows.The line which appears even without -v switch:ssh: connect to host (some host or IP address) port 22: Bad file numberis actually irrelevant.If you focus on it you'll waste your time as it is not a hint about what the actual problem is, just an effect of running git's ssh on Windows.  It's not even a sign that the git or ssh install or configuration is wrong.  Really, ignore it.The very same command on Linux produced instead this message for me, which gave an actual hint about the problem:ssh: connect to host (some host or IP address) port 22: Connection timed outActual solution: ignore ""bad file number"" and get more informationFocus on lines being added with -v on command line. In my case it was:debug1: connect to address (some host or IP address) port 22: Attempt to connect timed out without establishing a connectionMy problem was a typo in the IP address, but yours may be different.Is this question about ""bad file number"", or about the many reasons why a connection could time out ?If someone can prove that ""bad file number"" only appears when the actual reason is ""connection time out"" then it makes some sense to address why connection could time out.Until that, ""bad file number"" is only a generic error message and this question is fully answered by saying ""ignore it and look for other error messages"".  EDIT: Qwertie mentioned that the error message is indeed generic, as it can happen on ""Connection refused"" also. This confirms the analysis.Please don't clutter this question with general hints and answer, they have nothing to do with the actual topic (and title) of this question which is ""Git SSH error: ‰ÛÏConnect to host: Bad file number‰Ûù"". If using -v you have more informative message that deserve their own question, then open another question, then you can make a link to it.This worked for me:ssh -v git@github.com -p 443What I found is that, this happens when your connection is poor.I had it a few minutes ago when pushing to my repo, it kept failing and a while after that, the connection went down.After it came back up, the push immediately went through.I believe it can be caused by either a drop in connection from either your side or theirs.You can also try to:telnet example.com 22to see if you have connectivity to the server. I saw this message and it ended up being the VPN I was on was blocking access. Disconnected from the VPN and I was good to go.Try to quit the git bash instance through which you made the setup and try reopening. It eventually worked for me.Maybe your firewall or a blocker application (PeerBlock etc.) is blocking your portI just had the same problem and tried every solution that I could find, but none worked. Eventually, I tried quitting Git Bash and re-opening it, and everything worked perfectly.So, try quitting Git Bash and re-opening it.If SSH is blocked over 22just update your origin to https git remote set-url origin https://github.com/ACCOUNT_NAME/REPO_NAME.gitverify that changes were madegit remote -vOn windows I tried to do quit git bash and re-run but didn't work, finally me(frustated) did a restart and it worked the next time :)Double check that you have published your public keys through your GitHub Administration interface.Then make sure port 22 isn't somehow blocked (as illustrated in this question)"
"You can also set the HTTP proxy that Git uses in global configuration property http.proxy:For Windows, the command is:C:\> set HTTP_PROXY=http://proxy.mycompany:80C:\> git config --global http.proxy %HTTP_PROXY%On a Unix/Linux system, use$ HTTP_PROXY=http://proxy.mycompany:80$ git config --global http.proxy $HTTP_PROXYThere's some great answers on this already. However, I thought I would chip in as some proxy servers require you to authenticate with a user Id and password. Sometimes this can be on a domain.So, for example if your proxy server configuration is as follows:Server: myproxyserverPort: 8080Username: mydomain\myusernamePassword: mypasswordThen, add to your .gitconfig file using the following command:git config --global http.proxy http://mydomain\\myusername:mypassword@myproxyserver:8080Don't worry about https. As long as the specified proxy server supports http, and https, then one entry in the config file will suffice.You can then verify that the command added the entry to your .gitconfig file successfully by doing cat .gitconfig:At the end of the file you will see an entry as follows:[http]    proxy = http://mydomain\\myusername:mypassword@myproxyserver:8080That's it!What finally worked was setting the http_proxy environment variable.  I had set HTTP_PROXY correctly, but git apparently likes the lower-case version better.It looks like you're using a mingw compile of Git on windows (or possibly another one I haven't heard about).  There are ways to debug this: I believe all of the http proxy work for git is done by curl. Set this environment variable before running git:GIT_CURL_VERBOSE=1This should at least give you an idea of what is going on behind the scenes.When your network team does ssl-inspection by rewriting certificates, then using a http url instead of a https one, combined with setting this var worked for me.git config --global http.proxy http://proxy:8081You could too edit .gitconfig file located in %userprofile% directory on Windows system (notepad %userprofile%.gitconfig) or in ~ directory on Linux system (vi ~/.gitconfig) and add a http section as below.Content of .gitconfig file :[http]        proxy = http://proxy.mycompany:80This is an old question but if you are on Windows, consider setting HTTPS_PROXY as well if you are retrieving via an https URL.  Worked for me!On Windows, if you don't want to put your password in .gitconfig in the plain text, you can useCntml (http://cntlm.sourceforge.net/)It authenticates you against normal or even Windows NTLM proxy and starts localhost-proxy without authentication.In order to get it run:Install CntmlConfigure Cntml according to documentation to pass your proxy authenticationPoint git to your new localhost proxy:[http]    proxy = http://localhost:3128       # change port as necessaryJust to post this as it is the first result on Google, this blog post I found solves the problem for me by updated the curl certificates.http://www.simplicidade.org/notes/archives/2011/06/github_ssl_ca_errors.htmlIf you just want to use proxy on a specified repository, don't need on other repositories. The preferable way is the -c, --config <key=value> option when you git clone a repository. e.g.$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git --config ""http.proxy=proxyHost:proxyPort""I find neither http.proxy nor GIT_PROXY_COMMAND work for my authenticated http proxy. The proxy is not triggered in either way. But I find a way to work around this. Install corkscrew, or other alternatives you want.Create a authfile. The format for authfile is: user_name:password, and user_name, password is your username and password to access your proxy.   To create such a file, simply run command like this: echo ""username:password"" > ~/.ssh/authfile. Edit ~/.ssh/config, and make sure its permission is 644: chmod 644 ~/.ssh/configTake github.com as an example, add the following lines to ~/.ssh/config:Host    github.com        HostName        github.com        ProxyCommand    /usr/local/bin/corkscrew <your.proxy> <proxy port> %h %p <path/to/authfile>        User            gitNow whenever you do anything with git@github.com, it will use the proxy automatically. You can easily do the same thing to Bitbucket as well. This is not so elegant as other approaches, but it works like a charm.For me what it worked was:sudo apt-get install socatCreate a file inside your $BIN_PATH/gitproxy with:#!/bin/sh _proxy=192.168.192.1 _proxyport=3128 exec socat STDIO PROXY:$_proxy:$1:$2,proxyport=$_proxyportDont forget to give it execution permissionschmod a+x gitproxyRun following commands to setup environment:export PATH=$BIN_PATH:$PATHgit config --global core.gitproxy gitproxyI had the same problem, with a slightly different fix: REBUILDING GIT WITH HTTP SUPPORTThe git: protocol did not work through my corporate firewall.For example, this timed out:git clone git://github.com/miksago/node-websocket-server.gitcurl github.com works just fine, though, so I know my http_proxy environment variable is correct. I tried using http, like below, but got an immediate error.git clone http://github.com/miksago/node-websocket-server.git->>>  fatal: Unable to find remote helper for 'http' <<<-I tried recompiling git like so: ./configure  --with-curl --with-expatbut still got the fatal error.Finally, after several frustrating hours, I read the configure file, and saw this: # Define CURLDIR=/foo/bar if your curl header and library files are in# /foo/bar/include and /foo/bar/lib directories.I remembered then, that I had not complied curl from source, and so wentlooking for the header files.  Sure enough, they were not installed.   That was the problem.  Make did not complain about the missing header files.  So I did not realize that the --with-curl option did nothing (it is, in fact the default in my version of git).   I did the following to fix it:Added the headers needed for make:yum install curl-devel(expat-devel-1.95.8-8.3.el5_5.3.i386  was already installed).Removed git from /usr/local (as I want the new install to live there).I simply removed git* from /usr/local/share and /usr/local/libexec Searched for the include dirs containing the curl and expat header files, and then (because I had read through configure) added these to the environment like so:export CURLDIR=/usr/include export EXPATDIR=/usr/includeRan configure with the following options, which, again, were described in the configure file itself, and were also the defaults but what the heck:./configure  --with-curl --with-expatAnd now http works with git through my corporate firewall:git clone http://github.com/miksago/node-websocket-server.gitCloning into 'node-websocket-server'...* Couldn't find host github.com in the .netrc file, using defaults* About to connect() to proxy proxy.entp.attws.com port 8080*   Trying 135.214.40.30... * connected...This isn't a problem with your proxy.  It's a problem with github (or git).  It fails for me on git-1.6.0.1 on linux as well.  Bug is already reported (by you no less).Make sure to delete your pasties, they're already on google.   Edit: Must've been dreaming, i guess you can't delete them.  Use Gist instead?$http_proxy is for http://github.com.... $https_proxy is for https://github.com...For me the git://  just doesn't work through the proxy although the https:// does.   This caused some bit of headache because I was running scripts that all used git:// so I couldn't just easily change them all.   However I found this GEMgit config --global url.""https://github.com/"".insteadOf git://github.com/"
"You're out of drive space. Delete some unused files from anywhere on your machine. After you've done some housecleaning, you may think about running git gc to have git garbage collect your repository; if you've made lots of changes to git's objects recently - like can happen with a rebase - you can reclaim significant data from git itself. After giving git some breathing room (as gc will need a little wiggle room to copy data to new files as it works), git gc will compact your git repository as much as is possible without losing your repository's history."
"Your error appears when you have modified file, and branch that you switching to have changes for this file too (from latest merge point).Your options, as I see it, are - commit, and then amend this commit with extra changes (you can modify commits in git, as long as they're not pushed); or - use stash:git stash save your-file-namegit checkout master# do whatever you had to do with mastergit checkout staginggit stash popgit stash save will create stash that contains your changes, but it isn't associated with any commit or even branch. git stash pop will apply latest stash entry to your current branch, restoring saved changes and removing it from stash.I encountered the same problem and solved it bygit checkout -f branchand its specification is rather clear-f, --forceWhen switching branches, proceed even if the index or the working             tree differs from HEAD. This is used to throw away local changes.When checking out paths from the index, do not fail upon unmerged             entries; instead, unmerged entries are ignored."
"In general, fixing corrupt objects can be pretty difficult. However, in this case, we're confident that the problem is an aborted transfer, meaning that the object is in a remote repository, so we should be able to safely remove our copy and let git get it from the remote, correctly this time.The temporary object file, with zero size, can obviously just be removed. It's not going to do us any good. The corrupt object which refers to it, d4a0e75..., is our real problem. It can be found in .git/objects/d4/a0e75.... As I said above, it's going to be safe to remove, but just in case, back it up first.At this point, a fresh git pull should succeed....assuming it was going to succeed in the first place. In this case, it appears that some local modifications prevented the attempted merge, so a stash, pull, stash pop was in order. This could happen with any merge, though, and didn't have anything to do with the corrupted object. (Unless there was some index cleanup necessary, and the stash did that in the process... but I don't believe so.)Recovering from Repository Corruption is the official answer.the really short answer is: find uncorrupted objects and copy them.you can use ""find"" to remove all files in /objects folder with 0 size with command find .git/objects/ -size 0 -delete. Backup is recommended."
"Cloning/pulling from ssh://myserver:12345/myproject works well.But pulling from the url recorded in the .gitmodules file of that repo, for the submodule ""src/jgit/main"" doesn't.Check said url, and see if another protocol (https instead of ssh for instance) might work (again, for the url of the submodule, as specified in the .gitmodules file of the repo you just pulled).I found the reason: the submodule src/jgit/main had two externals. origin pointed to the official jgit repository and another to our clone of the jgit repository. After removing origin and renaming the other to origin, it works. Looks like I had problems pulling from the official jgit repository."
"For some reason, that object is corrupt in your origin remote.You need another clone of this repository where you can rungit cat-file -t 2a0836034919f0cfe0f8f1ab98037884dd1c93dewith no error, and you want to inject a good version of that object into origin‰Ûªs object database.Describing the fix can be a tricky because we are talking about multiple clones that may reside on different hosts and possibly owned by different users. The steps below assume that you have shell access to the host of your origin as the user that owns your origin repository. The prompt origin$ below indicates commands to be run on the machine that hosts your origin.The bad object on origin is in loose format, so the final step of the restore is a simple copy.Assuming the object in the good clone is also loose, then runorigin$ cp /path/to/good-repo/.git/objects/\2a/0836034919f0cfe0f8f1ab98037884dd1c93de \/path/to/origin/objects/2aif your origin is a bare repository ororigin$ cp /path/to/good-repo/.git/objects/\2a/0836034919f0cfe0f8f1ab98037884dd1c93de \/path/to/origin/.git/objects/2aotherwise.If in the good clone this object is stored in a pack, then you have to get it out. I recommend doing this in a scratch throw-away clone.origin$ git clone file:///path/to/good-repo /tmp/restore-repoIf good-repo is on another machine, the clone URL will be different.origin$ git clone user@other-machine:src/foo/.git /tmp/restore-repoChange to the directory that holds your temporary repository.origin$ cd /tmp/restore-repoMove the pack files out of the object database because git won‰Ûªt unpack the objects if it thinks it already has them.origin$ mkdir /tmp/restore-packsorigin$ mv .git/objects/pack/* /tmp/restore-packsNow you‰Ûªre ready to unpack.origin$ for pack in /tmp/restore-packs/*.pack; do  git unpack-objects -r < $packdoneThe -r option tells git-unpack-objects to continue unpacking even if it encounters a bad object.At this point, /tmp/restore-repo should now contain 2a08360‰Û_ as a loose object, so runorigin$ cp /tmp/restore-repo/.git/objects\2a/0836034919f0cfe0f8f1ab98037884dd1c93de \/path/to/origin/objects/2aororigin$ cp /tmp/restore-repo/.git/objects\2a/0836034919f0cfe0f8f1ab98037884dd1c93de \/path/to/origin/.git/objects/2adepending on whether origin is a bare repository."
"You have untracked files in the way of the pull.  You can't remove them with git rm --cached because they are untracked.  They don't appear in the index.  You need to remove them with plain old rmThis is an opportunity for the 'git clean' command. If you don't care about the untracked files ... git clean -n to see what will be removed, and git clean -f to go ahead and rm untracked files. Add -d to the commands to also operate on directories:  git clean -dn  git clean -dfI agree with other posters, the issue is that the file isn't being tracked by git.  the command git rm works on files being tracked.  rm will remove the file from your machine.  Alternatively you could add the file to your list of ignored files, or file types if that is convenient.  You could also use one of the GUI tools like tortoise git to quickly delete all untracked files.That file isn't in the current branch yet, so you can't remove it with git rm --cache. Just use rm.As it says in the original error message, that file is untracked.  That means git doesn't know anything about it.  Just remove it from the filesystem using rm.  If you care about the contents, just move it somewhere else."
"You cannot provide options in the GIT_SSH environment variable; from the git man page:   GIT_SSH       If this environment variable is set then git fetch and git push will use this command instead of ssh when they need to connect       to a remote system. The $GIT_SSH command will be given exactly two arguments: the username@host (or just host) from the URL       and the shell command to execute on that remote system.       To pass options to the program that you want to list in GIT_SSH you will need to wrap the program and options into a shell       script, then set GIT_SSH to refer to the shell script.One option is to add a stanza to your .ssh/config file with the appropriate configuration:Host bitbucket.org  StrictHostKeyChecking no  IdentityFile /home/me/my_private_keyAnother option is to point GIT_SSH to a shell script that does what you want.  E.g., in /home/me/bin/bitbucket_ssh, put:#!/bin/shexec /usr/bin/ssh -o StrictHostKeyChecking=no -i /home/me/my_private_key ""$@""And then point GIT_SSH at /home/me/bin/bitbucket_ssh.I prefer using .ssh/config when possible, because this avoids the need to create a per-destination script for each remote.Note that starting with git 2.3+ (Q1 2015), what you initially tried would work, with the new environment variable GIT_SSH_COMMAND.See commit 3994276 from Thomas Quinot (quinot):git_connect: set ssh shell command in GIT_SSH_COMMANDIt may be impractical to install a wrapper script for GIT_SSH when additional parameters need to be passed.  Provide an alternative way of specifying a shell command to be run, including command line arguments, by means of the GIT_SSH_COMMAND environment variable, which behaves like GIT_SSH but is passed to the shell.The special circuitry to modify parameters in the case of using PuTTY's plink/tortoiseplink is activated only when using GIT_SSH; in the case of using GIT_SSH_COMMAND, it is deliberately left up to the user to make any required parameters adaptation before calling the underlying ssh implementation.GIT_SSH_COMMAND:If either of these environment variables is set then 'git fetch' and 'git push' will use the specified command instead of 'ssh' when they need to connect to a remote system.  The command will be given exactly two or four arguments: the 'username@host' (or just 'host') from the URL and the shell command to execute on that remote system, optionally preceded by '-p' (literally) and the 'port' from the URL when it specifies something other than the default SSH port.$GIT_SSH_COMMAND takes precedence over $GIT_SSH, and is interpreted by the shell, which allows additional arguments to be included.$GIT_SSH on the other hand must be just the path to a program (which can be a wrapper shell script, if additional arguments are needed).You can supply any keyfile you wish to use with the Git command like this:$ PKEY=~/.ssh/keyfile.pem git clone git@github.com:me/repo.gitor this:$ git.sh -i ~/.ssh/keyfile.pem clone git@github.com:me/repo.gitI answered the same question here:http://stackoverflow.com/a/15596980See link for details.Use ssh-agentssh-agent bash -c 'ssh-add /home/me/my_private_key; git clone git@bitbucket.org:uname/test-git-repo.git'"
"You can either commit your changes before you do the merge, or you stash them:git stashgit merge origin/mastergit stash popIf you want to keep your changes, you can commit your changes to your local repository first and then merge the remote repository."
"Here are some common forms. Which is the best to choose depends on what you do. You can use any subset or combination of them in a single script without it being bad style.if ! failingcommandthen    echo >&2 message    exit 1fifailingcommandret=$?if ! test ""$ret"" -eq 0then    echo >&2 ""command failed with exit status $ret""    exit 1fifailingcommand || exit ""$?""failingcommand || { echo >&2 ""failed with $?""; exit 1; }You could do something like:git clone git@github.com:my-username/my-repo.git || exit 1Or exec it:exec git clone git@github.com:my-username/my-repo.gitThe latter will allow the shell process to be taken over by the clone operation, and if it fails, return an error.  You can find out more about exec here."
"You've got the syntax for the scp-style way of specifying a repository slightly wrong - it has to be:[user@]host.xz:path/to/repo.git/... as you can see in the git clone documentation.  You should use instead the URL:git@skarp.beanstalkapp.com:/gittest.giti.e. in the URL you're using, you missed out the : (colon)To update the URL for origin you could do:git remote set-url origin git@skarp.beanstalkapp.com:/gittest.gitThis is typically because you have not set the origin alias on your Git repository.Trygit remote add origin URL_TO_YOUR_REPOThis will add an alias in your .git/config file for the remote clone/push/pull site URL. This URL can be found on your repository Overview page.I met a similar problem when I tried to store my existing repo in my Ubunt One account, I fixed it by the following steps:Step-1: create remote repo$ cd ~/Ubuntu\ One/$ mkdir <project-name>$ cd <project-name>$ mkdir .git$ cd .git$ git --bare initStep-2: add the remote $ git remote add origin /home/<linux-user-name>/Ubuntu\ One/<project-name>/.gitStep-3: push the exising git reop to the remote$ git push -u origin --all"
"It looks like a permissions issue - not a Windows 7 issue. Your ssh key is not authorised - Permission denied (publickey). You need to create a public ssh key and ask the administrator of the Git repository to add the ssh public keyInformation on how to do this: Saving ssh key failsFor people that come here that are just trying to get the repository but don't care about the protocol (ssh / https), you might just want to use https instead of ssh (if it's supported).So for example you use git clone https://github.com/%REPOSITORYFOLDER%/%REPOSITORYNAME%.gitinstead ofgit clone git@github.com:%REPOSITORYFOLDER%/%REPOSITORYNAME%.gitI also faced the same issue. I did the following and it worked for me:Generate Keys from the GIT GUI client on Windows. Copy this key to the clipboard.Open up your account on bitBucket/ git website, and add this key to your profile. This way, the server knows that you are a legitimate user accessing from a legitimate system. That's it. All push commands worked for me henceforth.You need to create a new ssh key by running ssh-keygen -t rsa.Github(or Bitbucket) can't find your ssh key in their server.Just add your key in your account setting.I faced the same problem with GitHub.  It's easy to solve.Generate a SSH key on your computer as described here : Generating SSH keys.Login your GitHub account: GitHub Login.In your account, add the newly generated SSH Key: My account SSH keys.Try again to git clone the project.If there is still issue around access after creating SSH and adding it in Bitbucket account or where ever, you need to do the below on GitBash, OSX or Linux$ ssh-add -lThen, if you don't see your key listed, add it by ssh-add ~/.ssh/identityThis worked for me"
"It could be related to this. I had the same problem as you do for a long time, this helped. I couldn't find any consensus on the reason for this, though (Here is some more discussions).It seems that something is changing file meta data, essentially resetting the ctime of your files, so that git will not recognize them as changed when relying on ctime information.Links to git documentation of trustctime: git-config, git-update-index"
"First, your biggest problem here is a shell thing, which has little to do with git pull itself.  Let's do something trivial:$ echo foo | read msg; echo $msg$ Why is $msg empty here?  The answer has to do with pipelines, parsing, and sub-shells.The basic syntax for shell commands is a series of ""pipelines"" separated by a series of semicolons and/or newlines.  That is, given:a | b; cthis parses much the same as:(a | b); cor exactly the same as:a | bcSpecifically, the b part is bound to the a part, and the c part comes later.  Of course, adding explicit parentheses results in the use of a sub-shell, so you might realize instinctively that if the b part is a read command, the c part won't have the variable available, as the setting affects only the sub-shell, not the outer shell.Alas, removing the parentheses does not help.  It's true that this runs the a part in the main shell‰ÛÓbut in order to read the output of the pipe, the b part is still run in a sub-shell.  (In fact, absent some tricky optimizations, when you use the parentheses, the b part is run in a sub-sub-shell: a sub-shell of the explicitly-invoked sub-shell.)This is why there is no way to access $msg after the piped-to part exits: the right hand side of any pipeline is always run in a sub-shell.All is not quite lost: consider:$ echo foo | { read msg; echo $msg; }foo$ The trick here is to run the entire sequence, using $msg, inside the sub-shell.  (Parentheses also work and the syntax is slightly less clumsy: echo foo | (read msg; echo $msg).)Let's go back to the original attempt, and see about patching that up, e.g.:git pull origin master | { read msg; echo ${msg}; }This will likely do the same thing:First, rewinding head to replay your work on top of it...error: git-pull died of signal 13although the exact behavior depends on a lot of stuff.  (In particular the ""rewinding"" message itself indicates that you have pull configured to run rebase, for instance.)The signal 13 part tells us that git-pull is receiving a SIGPIPE error: writing on a broken pipe.  What broken pipe could this be?  The answer should be obvious as there is a pipe staring us in the face with the command itself:git pull origin master | ...A pipe ""breaks"" when the reader‰ÛÓthe right hand side, read msg‰ÛÓexits before the writer (the LHS or git pull ...) is done, and the writer then writes something new.  So this indicates that git pull is writing more than one line of output, because the read command reads one line and then exits (or, in the modified pipeline, reads one line, writes it to stdout, and then exits).If you want to capture the output, you'll need to capture all of it:git pull origin master | while read msg; do ...; donefor instance.  (This no longer needs braces or parentheses as the while <list> do <list> done sequence parses as a single statement.)  Or:git pull origin master > /tmp/script.$$which will allow you to read the contents of the capture file /tmp/script.$$1 in the original shell process.The not currently on any branch status occurs because the rebase got interrupted in the middle (due to the broken-pipe error).  Rebase works by leaving the branch temporarily, accumulating new commits on a new, anonymous (unnamed ""not-on-a-branch"") branch, and then moving the original branch label so that the new-and-anonymous branch is now named, and the previously-named branch is abandoned.  Adding --quiet stops all the output, so that read msg waits for the entire git pull sequence to finish (after which the read fails because there is no output after all).1This really should use mktemp; the above is for illustration only.Note: one new feature from Git 2.2 (November 2014) might have an influence for this question, and avoid any signal 13 issue (maybe not exactly in your case, but more generally).See commit 7559a1b from Patrick Reynolds (piki):unblock and unignore SIGPIPEBlocked and ignored signals -- but not caught signals -- are inherited across exec.  Some callers with sloppy signal-handling behavior can call git with SIGPIPE blocked or ignored, even non-deterministically.  When SIGPIPE is blocked or ignored, several git commands can run indefinitely, ignoring EPIPE returns from write() calls, even when the process that called them has gone away.  Our specific case involved a pipe of git diff-tree output to a script that reads a limited amount of diff data.In an ideal world, git would never be called with SIGPIPE blocked or ignored.  But in the real world, several real potential callers, including Perl, Apache, and Unicorn, sometimes spawn subprocesses with SIGPIPE ignored.  It is easier and more productive to harden git against this mistake than to clean it up in every potential parent process.Restore the way SIGPIPE is handled to default, which is what we expect."
"You have to tell git which branch you want to pull from the ""origin"" remote repos.I guess you want the default branch (master) so git pull origin master should fix your problem.See git help branch, git help pull and git help fetch  for more informations.To fix it, assuming you are on the master branch and want to pull the master branch from the origin remote, in new enough Git versions (1.8 or newer):git branch -u origin/master master(Analogously for other branches and/or remotes.)If you can combine this with a push, it‰Ûªs even shorter:git push -u origin masterThereafter, a plain git pull/git push will do what you expect.During the Git 1.7 series, git branch didn‰Ûªt have the -u switch (only git push did), and instead you had to use the much longer --set-upstream:git branch --set-upstream master origin/masterNote the reversal of arguments compared to -u. I fumbled this order more than once.All of these, by the way, are shorthands for doing the following, which you can still do explicitly:git config branch.master.remote origingit config branch.master.merge refs/heads/masterBefore 1.7, you had to do it this way.Message says exactly what it is about. Your current branch is not associated with (is not tracking) any branch in origin. So git doesn't know what to pull.What to do? That depends...In most usual situation you are working off some local branch xyz which branched from master which is cloned from origin's master. The usual way to resolve it is to switch to master and pull to synchronize it with origin and then come back to xyz and rebase master.But in your situation you might want to do something else. We can't know it without knowing details of your branches and remotes and how you intent to use them."
"Based on git ls-remote output (was in comment, now gone - it doesn't fit very well in comments) it looks like the remote used to have a branch named test_http_1024, but no longer does.In other words, whoever controls the remote did a git branch -d (or something equivalent) to delete their branch test_http_1024.  This means that when you ask git pull for the contents of that branch, all it can tell you is: ""eh? what? what branch?"" :-)When you look at your own set of remote branches, you can see that they used to have a branch test_http_1024 (which your git copied to remotes/m109bosh/test_http_1204, back when it existed).  But they can add or delete branches whenever they want.If you run git fetch -p m109bosh or git remote update --prune m109bosh, your own git will delete its (old, stale) copy of their test_http_1024 branch.  (You might not want to do this if you're still using it for something.)A perhaps more important issue is that in:[remote ""m109bosh""]    url = https://github.com/m1093782566/bosh-cloudstack-cpi.git    fetch = +refs/heads/*:refs/remotes/m109bosh/*    url = https://github.com/m1093782566/bosh.gitthere are two different url = lines.  Presumably one of them is out of date.  (git fetch uses the first one, so perhaps the second is the one you want.)"
"The error: RPC failed; result=18, HTTP code = 200 is a libcurl error.From http://curl.haxx.se/libcurl/c/libcurl-errors.html we can see this is:CURLE_PARTIAL_FILE (18)A file transfer was shorter or larger than expected. This happens when  the server first reports an expected transfer size, and then delivers  data that doesn't match the previously given size.You can set GIT_CURL_VERBOSE=1 before running a command like clone to understand how libcurl is failing.  This might be done in bash with:GIT_CURL_VERBOSE=1 git clone   --progress -v  ...However given the error above you should try adjusting http.postBuffer. Try:git config --global http.postBuffer 524288000From here https://www.kernel.org/pub/software/scm/git/docs/git-config.htmlI had same problem on Windows machines (cant pull or clone remote repo) while working with git remote server over http (not https) - solution I found to this problem:On desktop machine (where error occurred) reason for this was an antivirus software (Kaspersky Internet Security 2013 in my case) so I put into exceptions the following git components:Exception Rules:C:\Program Files (x86)\Git\bin\git.exe   | allC:\Program Files (x86)\Git\bin\curl.exe  |allC:\Program Files (x86)\Git*  |allC:\Program Files (x86)\Git\git-cheetah*  |allTrusted software:C:\Program Files (x86)\Git\bin\git.exeC:\Program Files (x86)\Git\bin\curl.exeC:\Program Files (x86)\Git\bin\sh.exec:\program files (x86)\git\libexec\git-core\git-remote-http.exec:\program files (x86)\git\libexec\git-core\git-upload-pack.exeand tick all options to not interrupt them at all (no tracing of workflow and network activity) - after that the problem was gone away"
"In my case, the git repository was duplicated somehow in the config file:cat .git/configgave me:[remote ""origin""]    url = git@bitbucket.org:myUserName/myRepositoryName.git/myRepositoryName.git    fetch = +refs/heads/*:refs/remotes/origin/*As you can see, myRepositoryName is duplicated, so I removed that, and now the config file looks like this:[remote ""origin""]    url = git@bitbucket.org:myUserName/myRepositoryName.git    fetch = +refs/heads/*:refs/remotes/origin/*Doing this, my problem is solved. Now the push is correctly done. Hope this help someone.This error also occur when you rename your repo:Edit .git/config and change from:git remote add origin git@bitbucket.org:myname/myproject.gitto:git remote add origin git@bitbucket.org:myname/my_new_project_name.gitI managed to do this in the end by removing the origin and re-adding it.  Everything seemed ok after I did this.git remote rm origingit remote add origin git@github_or_bitbucket_or_whatever_linkYou get this error if the remote repository hasn't been created. Bitbucket is running a service called conq that handles pushes and you see the error message from it. Simply create a new (empty) repository and the push should succeed.Here I'm pushing to a non-existing repository:$ git push git@bitbucket.org:mg/testt.git masterconq: repository does not exist.fatal: The remote end hung up unexpectedlyand here I push to the correct path:$ git push git@bitbucket.org:mg/test.git masterCounting objects: 3, done.Writing objects: 100% (3/3), 203 bytes, done.Total 3 (delta 0), reused 0 (delta 0)remote: bb/acl: mg is allowed. accepted payload.To git@bitbucket.org:mg/gtest.git * [new branch]      master -> masterThe test repository was newly created on Bitbucket. If the problem persists, then I suggest deleting the empty repo from Bitbucket and re-creating it.I had a similar problem, and this thread helped me solve the issue, but my solution is slightly different:I was on a remote server, so first I had to change into the public_html (www) directory, then initialize the repo. (note you have to first add your .ssh key in bitbucket)$ git initwhich initialized an empty Git repositorythen add the remote$ git remote add origin git@bitbucket.org:myname/myproject.gitthen I was able to pull and checkout my branch$ git pull$ git checkout <branch-name>in my case, i mixed up usernames:in my scenario there are 2 accounts: i need to connect using my-account to the repository's owner-account:owner-acc   - created, maintaining the accountmy-acc           - me, a participantthe syntax in this case should beurl = git@bitbucket.org:owner-acc/repo-name.gitand NOT my username, nor my account-name.I assume bitbucket's instructions I followed previously took care of identifying me somehow (it's probably relating my-account with the public key i uploaded earlier).I had this error when trying to deploy with Capistrano. I was missing the deploy key for that Bitbucket repo. Here's how to solve the issue:Generate an SSH Key on your server: https://confluence.atlassian.com/display/STASH/Creating+SSH+keysFollow these instructions to get ssh-agent running, and load in the identity you just created: https://confluence.atlassian.com/display/BITBUCKET/Troubleshoot+SSH+IssuesOnce that's finished just go to the Bitbucket repo > Settings > Deploy Keys and copy and paste your newly created key.Did you encounter this error doing the Rails Tutorial?I did. And I'm very new to this so I was only doing was the tutorial explicitly told me to do. That got me into trouble because in chapter 3 it says it‰Ûªs a good idea to create a new repository at Bitbucket and push it up but it doesn't hold your hand through the process like it does in Chapter 2.Don't forget to create the new repository at BitBucket before pushing to that repository. From Chapter 2: You should also create a new repository by clicking on the ‰ÛÏCreate‰Ûù button at Bitbucket.I did that and it fixed the problem."
"There are two types of repositories: bare and non-bareBare repositories do not have a working copy and you can push to them. Those are the types of repositories you get in Github! If you want to create a bare repository, you can usegit init --bareSo, in short, you can't push to a non-bare repository (Edit: Well, you can't push to the currently checked out branch of a repository. With a bare repository, you can push to any branch since none are checked out. Although possible, pushing to non-bare repositories is not common). What you can do, is to fetch and merge from the other repository. This is how the pull request that you can see in Github works. You ask them to pull from you, and you don't force-push into them.Update: Thanks to VonC for pointing this out, in the latest git versions (currently 2.3.0), pushing to the checked out branch of a non-bare repositories is possible. Nevertheless, you still cannot push to a dirty working tree, which is not a safe operation anyway.I solved this problem by first verifying the that remote did not have anything checked out (it really was not supposed to), and then made it bare with:$ git config --bool core.bare trueAfter that git push worked fine.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.Autopsy of the problemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.As there's already an existing repository, runninggit config --bool core.bare trueon the remote repository should sufficeFrom the core.bare documentationIf true (bare = true), the repository is assumed to be bare with no working directory associated. If this is the case a number of commands that require a working directory will be disabled, such as git-add or git-merge (but you will be able to push to it).This setting is automatically guessed by git-clone or git-init when the repository is created. By default a repository that ends in ""/.git"" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).TLDRPull & push again: git pull &&& git push.Still a problem? Push into different branch: git push origin master:foo and merge it on remote repo.Alternatively force the push by adding -f (denyCurrentBranch needs to be ignored).Basically the error means that your repository is not up-to-date with the remote code (its index and work tree is inconsistent with what you pushed).Normally you should pull first to get the recent changes and push it again.If won't help, try pushing into different branch, e.g.:git push origin master:foothen merge this branch on the remote repository back with master.If you changed some past commits intentionally via git rebase and you want to override repo with your changes, you probably want to force the push by adding -f/--force parameter (not recommended if you didn't do rebase). If still won't work, you need to set receive.denyCurrentBranch to ignore on remote as suggested by a git message via:git config receive.denyCurrentBranch ignorecd into the repo/directory that you're pushing into on the remote machine and enter$ git config core.bare trueMaybe your remote repo is in the branch which you want to push. You can try to checkout another branch in your remote machine. I did this, than these error disappeared, and I pushed success to my remote repo. Notice that I use ssh to connect my own server instead of github.com."
"I recently (Jul 2014) had a similar issue and found on OS X (10.9.4) that there was a ""DigiCert High Assurance EV Root CA"" certificate had expired (although I had another unexpired one as well).Open Keychain Accesssearch Certificates for ""DigiCert""View menu > Show Expired CertificatesI found two certificates named ""DigiCert High Assurance EV Root CA"", one expiring Nov 2031 and the expired one at July 2014 (a few of days previously). Deleting the expired certificate resolved the issue for me. Hope this helps.if you use self generated ssl key, you can try this.git config --global http.sslVerify falseReferhttps://confluence.atlassian.com/display/FISHKB/Unable+to+clone+Git+repository+due+to+self+signed+certificate"
"As it turned out, Visual Studio had a lock on some of Git's files. Closing Visual Studio resolved the issue.FTR, I'm using the Git source control provider (in the last usable version 0.6.4) in VS2010. Maybe this is part of the cause.I got the same issue using eclipse . The was accessing git repository through Eclipse as well as git bash.Solved by running the gc after closing eclipseEnvironmentWindows 7Git 1.8.4.mysysgit.0Eclipse Kepler SR2Hope this helps others.In my case I found that Tortoise Git process was the culprit for locking files.Terminating the process allowed me to git gcThis happened to me even AFTER I closed my solution in Visual Studio, but was resolved when I finally closed VS. I was NOT using the git source control extension.In my case a running IISExpress instance was to blame.If you were doing some other operation with git, or some git-related operation in a GUI, cancel the operation or close the error, and manually run a git gc, then try your operation again.  Basically, on windows, this message is an indication of contention between the git command line client and some other program.In my case, the repack had been triggered automatically as part of a git pull. When I got the error, after a quick sanity check that none of the things that would be launching git processes would be running elevated (IDE, git bash, git GUI), so it would not likely be a permission issue, I went to Process Explorer to find out what process had the file open (Find -> File Handle or DLL), and it found a git.exe that was a parent of the other git.exe process.  I'm guessing that there are some locking assumptions in the automatic repack code that aren't appropriate in a Windows port.That was with$ git --versiongit version 1.9.2.msysgit.0"
"The issue is that git can't find the public key needed to download the repo from your server, the solution is to use the public url.In the file .gitmodule you will find the following entry:[submodule ""example""]    path = example    url = git@github.com:webhat/example.gitThe URL need to be changed to the public URL for the module:[submodule ""example""]    path = example    url = https://github.com/webhat/example.gitAs you can see the prefix git@ has been changed to https:// and the infix : becomes /EDIT:In your own repository you might need to use git:// rather than https://The previous answer was unclear to me, so I added this.EDIT 2:If you find you need to run git submodule sync or need to edit .git/config to get this to work, you have likely set up remotes for the submodules.If it can help some people:I update my .gitmodules[submodule ""example""]  path = example  url = https://github.com/webhat/example.gitThen I update my .git/config too[submodule ""example""]  url = https://github.com/webhat/example.gitLike some of you said it before (and I thank you).Then I update my .git/modules/example/config[remote ""origin""]  fetch = [...]  url = https://github.com/webhat/example.gitAnd to finish I dogit submodule syncgit submodule initgit submodule update"
"Got the same error fatal: index file open failed: Permission denied by run git status, and I checked .git/index by$ ls -al .git/indexto my surprise, it's----------  1 Kjuly  staff  768248 Sep  2 11:07 .git/indexI've no idea why & how it changed. Anyway, after I changed it's permission back to 644 by$ chmod 644 .git/indexgit status works.Make sure the .git directory and its files/subdirectories are owned and writable by your user. This sounds like the repository was either cloned under a different user account or as root user (e.g. through sudo).It does not matter where the remote of the repository is hosted, git status only accesses the local repository."
"To permanently accept a specific certificate, try http.sslCAPath or http.sslCAInfo. Adam Spiers's answer gives some great examples. This is the most secure solution to the question.To disable TLS/SSL verification for a single git command, try passing -c to git with the proper config variable, or use Flow's answer:git -c http.sslVerify=false clone https://domain.com/path/to/gitTo disable SSL verification for that singular repository, assuming it's completely under your control, you can try:git config http.sslVerify falseDisabling TLS(/SSL) certificate verification globally is a terribly insecure practice. Don't do it. Do not issue the above command with a --global modifier.There are quite a few  SSL configuration options in git. From the man page of git config:http.sslVerify    Whether to verify the SSL certificate when fetching or pushing over HTTPS.    Can be overridden by the GIT_SSL_NO_VERIFY environment variable.http.sslCAInfo    File containing the certificates to verify the peer with when fetching or pushing    over HTTPS. Can be overridden by the GIT_SSL_CAINFO environment variable.http.sslCAPath    Path containing files with the CA certificates to verify the peer with when    fetching or pushing over HTTPS.    Can be overridden by the GIT_SSL_CAPATH environment variable.A few other useful SSL configuration options:http.sslCert    File containing the SSL certificate when fetching or pushing over HTTPS.    Can be overridden by the GIT_SSL_CERT environment variable.http.sslKey    File containing the SSL private key when fetching or pushing over HTTPS.    Can be overridden by the GIT_SSL_KEY environment variable.http.sslCertPasswordProtected    Enable git's password prompt for the SSL certificate. Otherwise OpenSSL will    prompt the user, possibly many times, if the certificate or private key is encrypted.    Can be overridden by the GIT_SSL_CERT_PASSWORD_PROTECTED environment variable.You can set GIT_SSL_NO_VERIFY to true:GIT_SSL_NO_VERIFY=true git clone https://domain.com/path/to/gitNote that if you don't verify SSL/TLS certificates, then you are susceptible to MitM attacks.I'm not a huge fan of the existing answers, because disabling security checks should be a last resort, not the first solution offered.  Even though you cannot trust self-signed certificates on first receipt without some additional method of verification, using the certificate for subsequent git operations at least makes life a lot harder for attacks which only occur after you have downloaded the certificate.  In other words, if the certificate you downloaded is genuine, then you're good from that point onwards.  In contrast, if you simply disable verification then you are wide open to any kind of man-in-the-middle attack at any point.To give a specific example: the famous repo.or.cz repository provides a self-signed certificate.  I can download that file, place it somewhere like /etc/ssl/certs, and then do:# Initial cloneGIT_SSL_CAINFO=/etc/ssl/certs/rorcz_root_cert.pem \    git clone https://repo.or.cz/org-mode.git# Ensure all future interactions with origin remote also workcd org-modegit config http.sslCAInfo /etc/ssl/certs/rorcz_root_cert.pemNote that using local git config here (i.e. without --global) means that this self-signed certificate is only trusted for this particular repository, which is nice.  It's also nicer than using GIT_SSL_CAPATH since it eliminates the risk of git doing the verification via a different Certificate Authority which could potentially be compromised.I keep coming across this problem, so have written a script to download the self signed certificate from the server and install it to ~/.gitcerts, then update git-config to point to these certificates.  It is stored in global config, so you only need to run it once per remote.https://github.com/iwonbigbro/tools/blob/master/bin/git-remote-install-cert.sh"
"The error message says it allERROR: Repository not found.Is there a git repository where you're looking?You need to create the repository on github first. It can't find the repository because it doesn't exist yet!Eric has already given the best answer for this question in the case that the repo does not exist, but I want to point out that the response pair of ""Repository not found. / remote end hung up unexpectedly"" is also given by GitHub when the repository does exist but the user does not have permission to push to it. If you're absolutely certain that the repository already exists on GitHub, make sure the account you're using has permission to push to that repository.Did you perhaps rename your repository? If you renamed your repository in github, you need to update the origin accordingly. This has happened to me once, where I renamed my repository and forgot to update the origin settings in my laptop.Either the repo doesn't exist or you don't have the right permission.More info here:https://help.github.com/articles/error-repository-not-foundAlso if you have multiple github accounts (which is actually disallowed), you need multiple ssh keys to be stored with github.More info here:http://net.tutsplus.com/tutorials/tools-and-tips/how-to-work-with-github-and-multiple-accounts/"
"That means the the existing README.md on your disk is open in a program, so git can't delete it."
"The other case where I have seen that error message in non-git upload-pack context (as opposed to my previous answer) is in this thread:GitHub has a bug where, if someone submits a pull request to a project, and then that entry is deleted (I don't know if it's that they just delete a pull request, or they delete their fork/account, but something), then you get these stale references.  Somewhere on GitHub, there's a support thread for this.If that upstream repo you are cloning isn't a Github repo, and if you have access to said upstream repo, then a git fsck or git fsck --lost-found could help.Since it is a GitHub repo, the OP rderoldan1 took the right action and wrote to GitHub support, and reports in the comments:they respond me:  ""We've found the cause of the problem, and are just working to resolve it.It appears that the Git repository on the file server has been corrupted and requires a bit of manual wire uncrossing. Rest assured, our systems team is looking into it, and hope to have an update for you soon."" rderoldan1 reports the result from GitHub:Today 9 oct, Jeff King send me and email, and now mi git is working :D, here is his message, thanks to @VonC and GitHub staffThe problem with your repository is fixed.  One of the objects from a pull-request's test-merge was missing on our end, causing git to complain. This is due to a bug on our end that we're still tracking down.  In the meantime, I've restored the missing object, and the repository should be in good shape now."
"If the problem is with the index as the staging area for commits (i.e. .git/index), you can simply remove the index (make a backup copy if you want), and then restore index to version in the last commit:On OSX/Linux:rm -f .git/indexgit resetOn Windows:del .git\indexgit reset(The reset command above is the same as  git reset --mixed HEAD)You can alternatively use lower level plumbing git read-tree instead of git reset.If the problem is with index for packfile, you can recover it using git index-pack.You may have accidentally corrupted the .git/index file with a sed on your project root (refactoring perhaps?) with something like:sed -ri -e ""s/$SEACHPATTERN/$REPLACEMENTTEXT/g"" $(grep -Elr ""$SEARCHPATERN"" ""$PROJECTROOT"")to avoid this in the future, just ignore binary files with your grep/sed:sed -ri -e ""s/$SEACHPATTERN/$REPLACEMENTTEXT/g"" $(grep -Elr --binary-files=without-match ""$SEARCHPATERN"" ""$PROJECTROOT"")This sounds like a bad clone. You could try the following to get (possibly?) more information:git fsck --fullIn my case it was nested .git folder in web/ckeditor/kcfindergit status  error: bad index file sha1 signature  fatal: index file corrupt  fatal: 'git status --porcelain' failed in submodule web/ckeditor/kcfinder"
"As it has already been mentioned in che's answer about adding the remote part, which I believe you are still missing.Regarding your edit for adding remote on your local USB drive. First of all you must have a 'bare repository' if you want your repository to be a shared repository i.e. to be able to push/pull/fetch/merge etc..To create a bare/shared repository, go to your desired location. In your case:$ cd /Volumes/500gb/   $ git init --bare myproject.gitSee here for more info on creating bare repositoryOnce you have a bare repository set up in your desired location you can now add it to your working copy as a remote.$ git remote add origin /Volumes/500gb/myproject.gitAnd now you can push your changes to your repository$ git push origin masterYour config file does not include any references to ""origin"" remote. That section looks like this:[remote ""origin""]    url = git@foo.com:repository.git    fetch = +refs/heads/*:refs/remotes/origin/*You need to add the remote using git remote add before you can use it.Here are the instructions from github:touch README.mdgit initgit add README.mdgit commit -m ""first commit""git remote add origin https://github.com/tqisjim/google-oauth.gitgit push -u origin masterHere's what actually worked:touch README.mdgit initgit add README.mdgit commit -m ""first commit""git remote add origin https://github.com/tqisjim/google-oauth.gitgit clone origin masterAfter cloning, then the push command succeeds by prompting for a username and passwordMay be you forgot to run ""git --bare init"" on the remote?That was my problemWhen you create a repository in bitbucket.org, it gives you instructions on how to set up your local directory.  Chances are, you just forgot to run the code:  git remote add origin https://username@bitbucket.org/username/reponame.gitmy case was a little different - unintentionally I have changed owner of git repository (project.git directory in my case), changing owner back to the git user helped"
"This is taken from hereTo clone an empty repo at path,Keep at ~/git/onefile a non-bare git repo containing one innocuousfile such as .gitignore. (Alternatively, create such a repodynamically.) (cd ~/git/onefile; git push path master)git clone -o name pathIn other words, don't attempt to clone the empty repo, but rather after creating it, push to it a simple repo containing one innocuous file. Then it is no longer empty and can be cloned."
"Did you init a local Git repository, into which this remote is supposed to be added?Does your local directory have a .git folder?Try git init.You'll get this error if you try to use a Git command when your current working directory is not within a Git repository. That is because, by default, Git will look for a .git repository directory (inside of the project root?), as pointed out by my answer to ""Git won't show log unless I am in the project directory"":According to the official Linux Kernel Git documentation,  GIT_DIR is [an environment variable] set to look for a .git directory (in the current  working directory?) by default:If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the base of the    repository.You'll either need to cd into the repository/working copy, or you didn't initialize or clone a repository in the first place, in which case you need to initialize a repo in the directory where you want to place the repo:git initor clone a repositorygit clone <remote-url>cd <repository>In command line/CLI, you will get this error if your current directory is NOT the repository. So, you have to first CD into the repo.NOTE: this does not answer to the common problem, which was OP‰Ûªs problem, but to different problem where this error message may come up. I didn‰Ûªt feel like doing new question just to write this answer down, tell me if I should do that instead :PI got to situation, most likely due to some corruption of certain crash I had, that I got this error even when .git did exist.smar@aaeru ~/P/Nominatim> git statusfatal: Not a git repository (or any of the parent directories): .gitsmar@aaeru ~/P/Nominatim [128]> ls .gitCOMMIT_EDITMSG  config*  FETCH_HEAD  HEAD  index  logs/  modules/  objects/  ORIG_HEAD packed-refsSince I didn‰Ûªt have anything that really needed preserving, I just went with dummy way, and did...smar@aaeru ~/P/Nominatim [128]> git initReinitialized existing Git repository in /home/smar/Projektit/Nominatim/.git/Still not working though, as for example git log returns fatal: bad default revision 'HEAD'. Remotes were there though, so I did git fetch --all and then just git reset --hard origin/master to get myself to the state the repo was previously.Note that if there is some uncommitted changes, you can see them with git status, git diff and so on. Then just git diff yourfile > patch before running the reset.At least for me reflog (git reflog) disappeared completely. Hence, if you do the reset, and there was some changes you wanted to prevent, I‰Ûªm not sure you can get them back after reset anymore. So, make sure that you have all changes you can‰Ûªt lose backed up, ultimately by just copying the clone before trying this.This issue occurred to me after I moved the location of a git project on the filesystem. When I ran some git commands the error occurred, e.g.:$ git statusfatal: Not a git repository: /home/rospasta/path_old/gitprojecta/.git/modules/.travisI found in /home/rospasta/path_old/gitprojecta/.travis/.git the absolute path of the old location of the project was written. Manually updating this path of the new location resolved the problem for me.So my issue may or may not be a git problem, but HTH."
"Do this:$ mv db/development.sqlite3 db/development.sqlite3_bak$ mv log/development.log log/development.log_bak$ git pull$ rm db/development.sqlite3 log/development.log$ mv db/development.sqlite3_bak db/development.sqlite3$ mv log/development.log_bak log/development.logThere are 2 ""solutions"" here.You can either copy the files somewhere else, do a pull, remove them completely, push and then copy back the other files.Or you could dogit stashgit pullgit stash popThis will cause the files to be removed on the server but they will be kept locally. Afterwards you won't need to do this again because of your .gitignore. That file will only be applied to files that weren't already tracked."
"There are several ways to go about debugging the problem.  Since it's claiming the pack header is wrong, it seems like it's probably a server-side issue.  Assuming you're running under a unix-style operating system, you can try running:GIT_TRACE=2 git fetchTo see some more information about what is happening under the hood.  It may give a better indication where things are failing.  However, to see actual data transfers, you should try:GIT_TRACE=2 GIT_TRACE_PACKET=2 git fetchThat will dump what's being transmitted on the wire.  This would be the place to identify anything strange being passed between the client and the server.All of that said, there was a bug fixed where git prune (which is executed automatically when repacking) would accidentally print to stdout and break the pack protocol.  This was fixed in git 1.7.12.1, so the answer may be to simply upgrade Git.If you're running Ubuntu on the server, you can add the git-core PPA and get the latest stable version from there.  Directions on how to do that are on the website.Note: in addition of GIT_TRACE=2 GIT_TRACE_PACKET=2 , git fetch itself will be a bit more verbose in git 2.8 (March 2016)See commit f3ee9ca (28 Jan 2016) by Eric Wong (ele828).(Merged by Junio C Hamano -- gitster -- in commit fbf4bdf, 10 Feb 2016) pass transport verbosity down to git_connectThere were a few ""now I am doing this thing"" progress messages in the TCP connection code that can be triggered by setting a verbose option internally in the code, but ""git fetch -v"" and friends never passed the verbose option down to that codepath.So you can add git fetch -v to the list of debugging option."
"I've stated this in the comments to another answer, but it's really the answer (and I've edited the appropriate section of the comments into the question where it belongs).The URL for the remote was not configured correctly, for whatever reason. It's set to ""git@github.com:"", which is clearly missing the path, producing precisely the error you see. You need to reconfigure it correctly. You could simply edit .git/config, changing the appropriate line to contain the path. Or you could do this:git remote rm origingit remote add origin 'git@github.com:rosdabos55/sample_app.git'You almost certainly made some small typo or careless mistake when you added the remote the first time - perhaps you hit enter in the middle of it, perhaps you typed a space after the colon. (For some reason, git does not appear to throw an error when you provide an extra argument after remote add <name> <url> - it just ignores it.) The upshot is that you didn't actually run that command, and you added a remote with an incomplete URL.You may need to git pull origin before you git push origin master."
"git clone fails with ‰ÛÏindex-pack‰Ûù failed? will list the most common causes for this error.But note the current Cygwin version (if that is what you are using) has an issue with git when cloning over ssh.Depending on the server executing the git clone request, you also have issue when cloning over ssh via git protocol."
"I have seen this on Windows, with msysgit 1.7.2.3. You have to fix the path to bin/curl-ca-bundle.crt. I had to specify the absolute path, using back-slashes:git config --system http.sslcainfo ""C:\Program Files (x86)\git\bin\curl-ca-bundle.crt""or ‰ÛÓ not really recommended ‰ÛÓ you may choose to switch off SSL checks completely by executing:git config --system http.sslverify falseFor both cases, this will result in changes to [git-install-dir]/etc/gitconfig file, which may be edited directly, too.(Original solutions found at http://github.com/blog/642-smart-http-support)If you use MSYS2...Just install the certificate packages with the following commands:32 bitspacman -S mingw-w64-i686-ca-certificates ca-certificates64 bitspacman -S mingw-w64-x86_64-ca-certificates ca-certificatesI solved the problem installing the Git from: https://git-for-windows.github.io/Locate the cert file path:D:\Program Files\Git\mingw64\ssl\certs\ca-bundle.crtConfigure the Git path:git config --system http.sslcainfo ""D:\Program  Files\Git\mingw64\ssl\certs\ca-bundle.crt""Try againIf you were using Cygwin, you might install the ca-certificates package withapt-cyg:wget rawgit.com/transcode-open/apt-cyg/master/apt-cyginstall apt-cyg /usr/local/binapt-cyg install ca-certificatesHow do I install a cygwin package from the command line?git config --system http.sslcainfo /bin/curl-ca-bundle.crt  This works. You don't have to give full path.SOLVED:I got this error when I installed an update to the Git windows installer. What happened is that I did not install it with administrator rights, so Git was installed in ""C:\Users\my_name\AppData\Local\Programs"" instead of ""C:\program Files"". re-installing Git as administrator allowed to put it in C:\program Files and everything went fine again !This worked for me (I'm using Manjaro linux).  I run the cmd to view ca-certificates:$ curl-config --ca**/etc/ssl/certs/ca-certificates.crt**But actually i found the certificates at the path:**/etc/ca-certificates/extracted/ca-bundle.trust.crt**Then add the config into ~/.gitconfig (if not existing, create it):**vim ~/.gitconfig**[http]    sslVerify = true    sslCAinfo = /etc/ca-certificates/extracted/ca-bundle.trust.crt[user]    email = <email of github account>    name = <username of github account>It works!.rbenv]$ git pullremote: Counting objects: 70, done.remote: Compressing objects: 100% (47/47), done.remote: Total 70 (delta 39), reused 12 (delta 12), pack-reused 6Unpacking objects: 100% (70/70), done.From https://github.com/sstephenson/rbenv   c43928a..efb187f  master     -> origin/master + 37ec781...7e57b52 user-gems  -> origin/user-gems  (forced update)Updating c43928a..efb187fFast-forward libexec/rbenv-init         |  4 ++-- libexec/rbenv-version-file |  1 + test/init.bats             |  2 +- test/test_helper.bash      | 25 +++++++++++++++---------- 4 files changed, 19 insertions(+), 13 deletions(-)"
"OK. The problem is your previous pull failed to merge automatically and went to conflict state. And the conflict wasn't resolved properly before the next pull. 1) Undo the merge and pull again.To undo a merge:git merge --abort  [Since git version 1.7.4] git reset --merge  [prior git versions]2) Resolve the conflict.3) Don't forget to add and commit the merge.4) git pull now should work fine.If you are sure that you already resolved all merge conflicts:rm -rf .git/MERGE*And error will disappear.I think it's worth mentioning that there are numerous scenarios in which the message You have not concluded your merge (MERGE_HEAD exists) could occur, because many people have probably arrived at this page after searching for said message. The resolution will depend on how you got there.git status is always a useful starting point.If you've already merged the contents to your satisfaction and are still getting this message, it could be as simple as doinggit add filegit commitBut again, it really depends on the situation. It's a good idea to understand the basics before attempting anything (same link Terence posted):Git - Basic Merge ConflictsBest approach is to undo the merge and perform the merge again. Often you get the order of things messed up. Try and fix the conflicts and get yourself into a mess.So undo do it and merge again.Make sure that you have the appropriate diff tools setup for your environment. I am on a mac and use DIFFMERGE. I think DIFFMERGE is available for all environments. Instructions are here: Install DIFF Merge on a MACI have this helpful resolving my conflicts: Git Basic-Merge-Conflicts"
"First, BitBucket had (see its status):a brief issue with one of our SSH servers.But I see also that error message when the proxy at work hasn't properly authenticate me:  I open a browser, access http://www.bitbucket.org/ in the browsergo back to my shell and retry the git pull.Then, it works.since I don't have a proxy at home, I never see that issue there."
"The pull seems to be successfull. Check withgit statusIf this is the case git checkout -- .gitignore should bring the file back (the version from remote repository"
"Make sure that:you are using the latest version of EGit (2.3+)you have stashed/commit everything before pulling (as in this thread)you are not in a detached head mode (as in ""can't push upstream using EGit"")The OP Krige adds:in the end I noticed a class file was mentioned in the DIRTY_WORKTREE error message.  I deleted that file from the file system, did a pull, resolved the conflicts and pushed.  Everything seems to work fine now.If you have the DIRTY_WORKTREE issue and you are not able to delete the file (for whatever reasons), you should do a pull, or replace with HEAD and then add to Index. This will resolve the conflicts (assuming use of the merge tool) and you should then be able to commit/push your changes, or else pull again."
"Check .git/refs/remotes/origin. They are there and the upstream no longer has them. To clean out the remotes that no longer exist rungit remote prune originYou could also see what it would to by adding --dry-run before actually doing it.Hope this helps.Your local clone is probably fine, the problem is that the t_1140 branch objects are missing from your GitHub repository.I had this problem too and GitHub support fixed it, I think by deleting refs/heads/t_1140 on their end.Update: I got the error again with another branch and I was able to fix it by running this command:git push origin :refs/heads/t_ispn982_masterYou should get a warning message like this:remote: warning: Allowing deletion of corrupt ref.but the corrupted branch will be deletedI run into this error on a regular basis. git remote prune origin does not work for me.[ Update. AFAIU, I'm running into this problem because of using git alternate. Say I've got repo A, registered as alternate for repo B. When I create a new branch br in repo A, and fetch repo A as remote in repo B, git will create a remote ref .git/refs/remotes/A/br for the new branch. When I delete the branch in repo A, and after the corresponding object is garbage-collected, I get the 'error: refs/remotes/A/br does not point to a valid object!' ]I've written this script (updated to deal with packed refs) to remove the dangling refs (using the info in Validate if commit exists).#!/bin/shset -eif [ $# -eq 0 ]; then    dir="".""else    dir=""$1""fiif [ ! -d ""$dir"" ]; then    echo ""not a dir: $dir""    exit 1fiif [ ! -d ""$dir/.git"" ]; then    echo ""not a git repo: $dir""    exit 1ficd ""$dir""files=$(find .git/refs -type f)for f in $files; do    id=$(cat ""$f"")    if ! git rev-parse --quiet ""$id"" \    >/dev/null 2>&1; then    continue    fi    if ! git rev-parse --quiet --verify ""$id^{commit}"" \    >/dev/null 2>&1; then    echo ""Removing ref $f with missing commit $id""    rm ""$f""    fidoneif [ ! -f .git/packed-refs ]; then    exit 0fipackfiles=$(cat .git/packed-refs \    | grep -v '#' \    | awk '{print $2}')for f in $packfiles; do    if ! git rev-parse --quiet --verify ""$f"" \    >/dev/null 2>&1; then    continue    fi    id=$(git rev-parse ""$f"")    if ! git rev-parse --quiet --verify ""$id"" \    >/dev/null 2>&1; then    continue    fi    if ! git rev-parse --quiet --verify ""$id^{commit}"" \    >/dev/null 2>&1; then    echo ""Removing packed ref $f with missing commit $id""    git update-ref -d $f    fidoneYou say that you have:also checked .git/refs/heads and there's no reference to t_1140... which is very surprising.  I can only see how this error would occur if the file .git/refs/heads/t_1140 exists.  Is it possible you were mistaken about this?Correction: Charles Bailey points out below that the refs might be packed, in which case there is no corresponding file in .git/refs/headsI had this issue when attempting to clone some github repositories, the system I was on was running an older version of git v1.7.4, a quick update fixed it up.remote: Counting objects: 533, done.remote: Compressing objects: 100% (248/248), done.remote: Total 533 (delta 232), reused 529 (delta 230)Receiving objects: 100% (533/533), 121.36 KiB, done.Resolving deltas: 100% (232/232), done.error: refs/remotes/origin/master does not point to a valid object!verror: Trying to write ref refs/heads/master with nonexistant object 0457f3e2e9432e07a1005f0f4161dc4b8215f128fatal: Cannot update the ref 'HEAD'."
"A coworker just hit this errror while attempting to pull to his local windows machine, and it turned out not to be a network issue at all.  git reset --hard fixed the issue."
"I'm not sure if I really understand what you want, so I will name some possible situations and resolutions.If you want know files your local branch different from remote counterpart:git diff --name-status master origin/masterIf you plan to pull, but want to know what will be modified:git pull --no-commitgit will leave a merged working tree to you and you can check modified files by command like git status.If you want to make a clean history, I recommend (maybe not you planned to)git pull --rebaseit will fetch the latest code from remote and apply your local changes on it."
"You have to actually cd into the directory first:$ git clone git://cfdem.git.sourceforge.net/gitroot/cfdem/liggghtsCloning into 'liggghts'...remote: Counting objects: 3005, done.remote: Compressing objects: 100% (2141/2141), done.remote: Total 3005 (delta 1052), reused 2714 (delta 827)Receiving objects: 100% (3005/3005), 23.80 MiB | 2.22 MiB/s, done.Resolving deltas: 100% (1052/1052), done.$ git statusfatal: Not a git repository (or any of the parent directories): .git$ cd liggghts/$ git status# On branch masternothing to commit (working directory clean)in my case, i had the same problem while i try any git -- commands (eg git status) using windows  cmd. so what i do is after installing  git for window https://windows.github.com/in the environmental variables, add the class path of the git on the ""PATH"" varaiable. usually the git will installed on C:/user/""username""/appdata/local/git/bin add this on the PATH in the environmental variableand one more thing on the cmd go to your git repository or cd to where your clone are on your window usually they  will be stored on the documents under github cd Document/Github/yourprojectafter that you can have any git commands"
"The answer you mention suggests to change the url from an https one to an ssh one.  That would only work if you have a ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub, with the latter (public key) published in your GitHub ssh keys.Check your Egit ssh configuration.For step by step procedure as of how to generate SSH key and set it in your GitHub setting here is the link."
"That usually means a process is still using that specific file (still has an handle on it)(on Windows, ProcessExplorer is good at tracking that kind of process)Try closing your other programs, and try again your git pull.Note that you have an alternative with the GIT_ASK_YESNO variable.Update January 2016That should be fixed in Git 2.8 (March 2016)See commit d562102, commit dcacb1b, commit df617b5, commit 0898c96 (13 Jan 2016) by Johannes Schindelin (dscho).(Merged by Junio C Hamano -- gitster -- in commit 3c80940, 26 Jan 2016) fetch: release pack files before garbage-collectingBefore auto-gc'ing, we need to make sure that the pack files are released in case they need to be repacked and garbage-collected.  Many codepaths that run ""gc --auto"" before exiting kept packfiles mapped and left the file descriptors to them open, which was not friendly to systems that cannot remove files that are open.  They now close the packs before doing so.That fixes git-for-widows issue 500.Looking at the test used to validate that new approach, a possible workaround (since Git 2.8 is not yet out) would be to raise artificially gc.autoPackLimit.git config gc.autoPackLimit 10000git fetchgit config gc.autoPackLimit 50 # default valueThis is a Windows specific answer, so I'm aware that it's not relevant to you... I'm just including it for the benefit of future searchers. In my case, it was because I was running Git from a non-elevated command line. ""Run as Administrator"" fixed it for me.For me, it was because Visual Studio was trying to reload all of the changed files from the pull. Have visual studio refresh, then run git gc.On Windows using GitHub for Windows, I got a similar error in the shell when running git gc:Unlink of file '.git/objects/pack/pack-0b40ae7eae9b83edac62e19c07ff7b4c175244f6.idx' failed. Should I try again? (y/n)I solved it by closing the GitHub GUI.This was caused in my case by SimpLESS, the LESS compiler. You have to close it in the systray.Closed Visual Studio and Rubymine and didn't get the error again. One of them was the culprit."
"When you pulled the branch, did you use the ""--track"" option (in order to keep you local branch tracking the remote branch). If you did not, it can explain that the ""merge"" command that does not work.You can do the merge manually:git fetchgit merge origin/groupsTo compare local and remote repos, I suggest you this command (add it in an alias, it is usefull):git log --graph --oneline --all --decorateIt will print the project history tree, showing the branch labels. So you will see where your branch and the origin branch diverge.Note: if you want to preserve a linear history, instead of a ""merge"", you can do a ""rebase"" of your local branch on the remote before pushing:git rebase origin/groupsgit push origin groupsI came here with a different problem.My git was set up to push all branches.  I was on a branch FOO, but it was also trying to push master, which was not up to date.  The trick was noticing it was trying to push master:To git@git.machine:repo ! [rejected]        master -> master (non-fast-forward)I added the following to my .gitconfig to only push the current branch by default:[push]    default = current"
"I am using Mac OS X 10.7.5.  I recently downloaded git 1.8.1.2 for Mac.  Having it installed, I bumped into the same signal 11 error message when running:$git credential-osxkeychainwhich in turn runs:/usr/local/git/bin/git-credential-osxkeychainSignal 11 is SEGFAULT which might indicate a bug (e.g. dereferencing a null pointer) with the git-credential-osxkeychain program.I followed instructions on caching your github password and grabbed a new copy of git-credential-osxkeychain from S3. That resolved the problem. The new copy is of different size which makes me guess the bug has been patched.In the meantime, I believe using a URL like git@github.com:yang3wei/octopress-3-in-one in the config should also work around the problem as it bypasses HTTPS and uses SSH instead where the key chain helper is not invoked any more.The error message is being thrown by a git credential helper. It is supposed to be a way for git to avoid  asking for your username and password on every push (see here).I don't know why it is dying but, if you want to stop using it (and avoid seeing the error message), delete your system gitconfig file.On my system (OSX 10.6.8) I did it with: sudo rm /usr/local/git/etc/gitconfig because the only setting in the file was for the credential helper. Check yours first!Since you are getting two death messages, you may also have the setting in your own ~/.gitconfig file or even your project's. Edit those and remove the credential helper block.As you noted, the problem with the credential helper doesn't stop git from working. The next step is to find out why the helper fails!I got it!Try to modify the contents of .git/config file in your project's root directory.[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true[remote ""origin""]    url = https://github.com/yang3wei/octopress-3-in-one.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch ""master""]    remote = origin    merge = refs/heads/masterTo:[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true[remote ""origin""]    url = git@github.com:yang3wei/octopress-3-in-one    fetch = +refs/heads/*:refs/remotes/origin/*[branch ""master""]    remote = origin    merge = refs/heads/masterI had the same error every time I did a git pull. I realized that I did not have the git-credential binary which I got from(under Where's the Mac version?):https://github.com/blog/1104-credential-caching-for-wrist-friendly-git-usage and followed the steps mentioned there. It started working the way I expected to.Hope this helps!"
"Do you have big files in your repository (like log files for example) ?Apparently, your repository is too big to be retrieved on your hard drive.There are two things you can do :Check for big files and remove them if they're not useful (not only by committing. But also by modifying your history. If you still have your big files in our repository, it won't be smaller.Do a ""git gc"". It'll automatically cleanup unused files and compress the repository.If git on the remote machine fails due to memory constraints you might also try rsync or scp to copy the repository to your local machine and continue with cloning from there."
"This could mean that another program is using the file, which is preventing git from ""moving"" the file into or out of the working directory when you are attempting to change branches. I have had this happen on Windows Vista where eclipse is the program ""using"" the file. The file may not be actually open in eclipse but may have been opened by a process run by eclipse. In this event, try closing the file in any applications that might have used it. If that doesn't work, completely exit any applications which may have opened the file.I had this issue and solved it by the command : git gcThe above command remove temp and unnecessary files. (Garbage collector.)this solution from here worked for me:This is a Windows specific answer, so I'm aware that it's not relevant to you... I'm just including it for the benefit of future searchers.In my case, it was because I was running Git from a non-elevated command line. ""Run as Administrator"" fixed it for me.I encountered this issue while doing a git pull.I tried git gc and it resolved my problem.In my case there are no processes touching the file or directory. Maybe it happens if the path is very long, because an operating system restriction (windows). Try enabling the longpath support flag in the global git configuration as indicated below:git config --global core.longpaths trueor try to setting the yes/no answer flag if it is not conflictive for youset GIT_ASK_YESNO=falseIf the path is too long, I've not found a successful solution.I ran into this issue running git Bash and Eclipse EGit at the same time.Solution: close Eclipse. Also wouldn't hurt to run git gc as @khilo mentioned.I had this kind of issue on Windows 7 and it turned out to be due to some orphaned git.exe process.To solve it, open Task Manager and kill all git.exe processes.Since git commands are short-lived, you should normally never see any git.exe in Task Manager. When they are there, it usually means something is wrong, and you should kill those processes.In my case (Win8.1, TortoiseGit running), it was the process called ""TortoiseSVN status cache"" that was locking the file.Killing it allowed me to run ""git gc"" without any more problems.The above process is fired up by TortoiseGit, so there is no need to manually restart it.I had this issue with .tmp files in /.git/objects/pack folder. I think something had failed during a push or pull, so I removed these temporary files and reset the HEAD to my last commit. Not sure if this is advised but it worked for me. Also git count-objects -v gave me a list of the .tmp files that didn't belong in the pack folder.Or to suppress the y/n messages in windows git open cmd.exe and run:SETX GIT_ASK_YESNO falseseen here: https://twitter.com/petercamfield/status/494805475733807104This may be a separate gitk window running to see some git history.Just close that window to fix that problem.On Windows 8:I ran git gc and it said git gc was already running, I ran git gc --force and the garbage collector ran.I could then switch branches and merge without any issues, try git gc --force.Perhaps the gc process didn't stop gracefully for one reason or another."
"If you mean you want the pull to overwrite local changes, doing the merge as if the working tree were clean, well, clean the working tree:git reset --hardgit pullIf there are untracked local files you could use git clean to remove them. Use git clean -f to remove untracked files, -df to remove untracked files and directories, and -xdf to remove untracked or ignored files or directories.If on the other hand you want to keep the local modifications somehow, you'd use stash to hide them away before pulling, then reapply them afterwards:git stashgit pullgit stash popI don't think it makes any sense to literally ignore the changes, though - half of pull is merge, and it needs to merge the committed versions of content with the versions it fetched.For me the following worked:(1) First fetch all changes:$ git fetch --all(2) Then reset the master:$ git reset --hard origin/master(3) Pull/update:$ git pullLook at git stash to put all of your local changes into a ""stash file"" and revert to the last commit. At that point, you can apply your stashed changes, or discard them.If you are on Linux:git fetchfor file in `git diff origin/master..HEAD --name-only`; do rm -f ""$file""; donegit pullThe for loop will delete all tracked files which are changed in the local repo, so git pull will work without any problems.The nicest thing about this is that only the tracked files will be overwritten by the files in the repo, all other files will be left untouched.The command bellow wont work always. If you do just:$ git checkout thebranchAlready on 'thebranch'Your branch and 'origin/thebranch' have diverged,and have 23 and 7 different commits each, respectively.$ git reset --hardHEAD is now at b05f611 Here the commit message bla, bla$ git pullAuto-merging thefile1.cCONFLICT (content): Merge conflict in thefile1.cAuto-merging README.mdCONFLICT (content): Merge conflict in README.mdAutomatic merge failed; fix conflicts and then commit the result.and so on...To really start over, downloading thebranch and overwriting all your local changes, just do:$ git checkout thebranch$ git reset --hard origin/thebranchThis will work just fine.$ git checkout thebranchAlready on 'thebranch'Your branch and 'origin/thebranch' have diverged,and have 23 and 7 different commits each, respectively.$ git reset --hard origin/thebranchHEAD is now at 7639058 Here commit message again...$ git status# On branch thebranchnothing to commit (working directory clean)$ git checkout thebranchAlready on 'thebranch'"
"Short version: the branch named pr/34 on the remote, becomes your origin/pr/34.  But the ref named refs/pull/34/head on the remote, also becomes your origin/pr/34.  But they can't both become that, so git complains and quits.  Whatever is setting up the branch mapping is not playing well with whatever is setting up the pull-request branches on github (but I don't know anything about those two pieces of software).It may (I don't know) be reasonable to delete the +refs/pull/*/head:refs/remotes/origin/pr/* fetch configuration line.  Alternatively, you could map these to some other local ref-name-space, such as refs/pullreqs/origin/* (but such a reference name is somewhat inconvenient to type in).  If every pull request is going to create both refs/heads/pr/number and refs/pull/number/head on github, I'd go ahead and remove the one configuration line.Longer explanation of source of problem follows.  Given this:+refs/pull/*/head:refs/remotes/origin/pr/*+refs/heads/*:refs/remotes/origin/*+refs/heads/*:refs/remotes/origin/*as output from git config --get-all remote.origin.fetch, I can explain what's going wrong.  ""How to fix it"" depends on the results you want.Each output line here is a ""refspec"", which consists of three parts: the +, a name on the left of the :, and a name on the right of the :.  One * is allowed in both names, and it works sort of (but not exactly) like * matching in file-names, e.g., *.c, *.py, etc., with the second * then using whatever the first * matched.  It should be obvious below, anyway.(The last line is redundant and thus harmless, it just makes the match happen twice.)So, let's see what the above means for the ref-names refs/pull/34/head and refs/heads/pr/34, both of which are present in the remote named origin (on github).For refs/pull/34/head: this matches just the first refspec.  The * part matches the 34.  The right-hand-side of that refspec says to rewrite this to read refs/remotes/origin/pr/*, so the result is:refs/remotes/origin/pr/34Now let's tackle refs/heads/pr/34.  This does not match the first refspec, but it does match the second.  The * part matches pr/34.  The right-hand-side of that refspec says to rewrite it as refs/remotes/origin/*, so the result is:refs/remotes/origin/pr/34Note how two different names on origin have mapped to the same final name in your local repository.  Git does not know whether to set your local refs/remotes/origin/pr/34 equal to the first one, or the second one, as seen on origin.To make the error go away, you must either discard the unwanted ""extra"" match entirely, or change the rewriting rules so that the two different remote refs/whatevers become two different local refs/remotes/origin/whatevers.  That means you need to change the fetch = lines in your git config file.I don't know what result you want, so I can't say how to rewrite them.  (And, I don't know what created these in the first place‰ÛÓa normal git clone creates just one +refs/heads/*:refs/remotes/origin/* entry.  Something else added the redundant entry, and the one for refs/pull/*/head.  It's that something-else that broke things.  Well, that, plus the fact that something created refs/heads/pr/34 on github.)"
"If you are the only one using this repo, you can follow the git filter-branch option described in ""How to purge a huge file from commits history in Git?""The simpler option is cloning the repo to an old commit, and force push it, as described in ""git-filter-branch to delete large file"".Either one would force any collaborator to reset his/her own local repo to the new state you are publishing. Again, if you are the only collaborator, it isn't an issue.Even if the big image files have been deleted after having being pushed, they do stay in the git history.I would suggest to forcibly remove them from the git history (I think that is possible, but it involves a delicate procedure that I don't know).Alternatively, pull the repository before the mistakenly added files, patch the repository to make the relevant small patches, clone that, and use that (perhaps with a dump/restore) as your master git.I don't know well the details, but I did read it could be possible"
"The problem is that you are not tracking the files locally but identical files are tracked remotely so in order to ""pull"" your system would be forced to overwrite the local files which are not version controlled. Try runninggit add * git stashgit pullThis will track all files, remove all of your local changes to those files, and then get the files from the server.If this is a one-time operation, you could just remove all untracked files from the working directory before doing the pull. Read How do I remove local (untracked) files from my current Git branch? for information on how to remove all untracked files.Be sure to not accidentally remove untracked file that you still need ;)You can try command to clear the untracked files from the localgit clean  -d  -fx """"where -d can be replace with following:-x means ignored files are also removed as well as files unknown to git.-d means remove untracked directories in addition to untracked files.-f is required to force it to run.here is the link that can be helpful as well.You can try that command git clean -df"
"I just ran into the same problem - and checked the issues section in the repo - https://github.com/defunkt/hub/issues/317 - and found my answer :-)Apparently we're not the only ones, but upgrading to the latest version of hub fixes the issue :-)just run brew update && brew upgrade huband you'll be all set :-)"
"Well, I have heard several say that Heroku is not a reliable repository platform, so I am taking that to heart, and moved my repository on over to BitBucket.  That solved my problem.  From now on all other repositories I create will be hosted there, and still deployed on Heroku."
"10-1 the missing lines are not written to stdout but to stderr.In that case you can redirect the stderr to stdout with""command    2>&1""The 2>&1 redirects the error messages to the normal output file.By searching a bit, I might have found the answer to your problem.Try capturing stderr.Hope this helps and good luck!"
"This thread suggestsrun åÇ git repack -adf --window=memory åÈ on the repo where memory is escalated appropriately for your machine.That is pretty much the same solution than for the SO question ""Repack of Git repository fails"".git repack -a -d --window-memory 10m --max-pack-size 20mHowever, Mark Longair will warn you that:Your solution has got you a working copy locally and remotely, but will cause problems again when the remote repository decides to repack itself again.So configuring  pack.windowMemory and pack.packSizeLimit is a much safer solution, as well as checking the config of core.packedxxx and core.deltaxxx.For msysgit on Windows, this comment mentions: git config --global pack.windowMemory 256mworked for me  (had have memory alloc error on 64 bit windows (Git-1.7.6-preview20110708.exe)"
"You can create a file named "".profile"" in your home directory, for me that's C:\Users\[user]Inside that file, put the following line of code:GIT_SSH=""/usr/bin/ssh.exe""This will set the GIT_SSH environment variable to use the ssh client included with git.The .profile script gets executed when you start your Git Bash command line.Edit:This is my .profile. It will ask you for your password the first time you start the git command prompt, then will remember it from then on, until you reboot your computer. Very handy so you don't have to keep entering your password each time you want to do something.SSH_ENV=""$HOME/.ssh/environment""GIT_SSH=""/usr/bin/ssh.exe""function start_agent {echo ""Initializing new SSH agent...""/usr/bin/ssh-agent | sed 's/^echo/#echo/' > ""${SSH_ENV}""echo succeededchmod 600 ""${SSH_ENV}"". ""${SSH_ENV}"" > /dev/null/usr/bin/ssh-add;}# Source SSH settings, if applicableif [ -f ""${SSH_ENV}"" ]; then. ""${SSH_ENV}"" > /dev/null#ps ${SSH_AGENT_PID} doesn't work under cygwinps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {start_agent;}elsestart_agent;fiI experienced this problem because my GIT_SSH was pointing to the TortoiseSVN version of Plink.exe. I changed it to point to the TortoiseGit version, restarted cmd and it worked.I can't remember exactly, but the TortoiseSVN version might have been 32-bit version, and the TortoiseGit version was 64-bit (located in Program Files, not Program Files (x86)).Double-check your GIT_SSH env var.I prefer to use git with normal cmd.exe (in Console2 of course)My issue was that I was attempting to use my github username.  Apparently when using Github (or is it a Git thing?), if you use key-based authentication, you need to set your username to git.I'm not sure why you even need a username at all - perhaps someone more knowledgeable can explain that?""... not sure what plink.exe or peagant.exe is ...""Since you ask: plink & pageant are part of the PuTTY suite, which is an implementation of SSH that supports Linux & Windows and is completely dominant on Windows.SSH Secure Shell (SSH) is a cryptographic network protocol for securing  data communication. It establishes a secure channel over an insecure  network in a client-server architecture, connecting an SSH client  application with an SSH server. Common applications include remote  command-line login, remote command execution, but any network service  can be secured with SSH.if you ever used Telnet, it's like that (but more secure): it allows you to remotely access the bash shell (command line) of a Linux host.PuTTYPuTTY is a free and open-source terminal emulator, serial console and  network file transfer application. It supports several network  protocols, including SCP, SSH, Telnet, rlogin ...On Windows it's the dominant software for remotely accessing a Linux host's command line under the SSH protocol (above).  In Windows, .exe extensions are for executables.  So those notes about plink.exe & pageant.exe probably don't apply if you're in Linux.  PuTTY includes Plink: a command-line interface to the PuTTY back endsPageant: an SSH authentication agent for PuTTY, PSCP and PlinkFrom (http://en.wikipedia.org/wiki/Secure_Shell#Key_management)When the public key is present on the remote end and the matching  private key is present on the local end, typing in the password is no  longer required ... for additional security the private key itself can  be locked with a passphrase.So github is hosted on a Linux machine and uses SSH to secure the connection.  SSH either authenticates with passwords or keys, many hosts (github?) only authenticate with keys.  You setup is apparently trying to authenticate with a key.  Keys and hosts are not one-for-one: you can have two keys for the same host and/or two hosts for the same key, so they need to be managed.  If you are in Windows, then your SSH session is probably accessed through plink and your keys are probably managed by Pageant.Import the key you need each time you load Pageant.  If you followed guides that said ""import your key"", and saw that it worked, but it doesn't work now, see Chapter 9: Using Pageant for authentication.One last tip if you are on Windows: you may have multiple instances of the PuTTY suite installed by various tools.  TortoiseGit, for example, installs its own.Using TortoiseGitSet TortoiseGit > Settings > Network > SSH Client to C:\Program Files (x86)\Git\bin\ssh.exeSame error, different solution noted here - Problem connecting to GitHub on Windows, even via PuTTYOn my Windows 7 machine running Github for Windows using git version 1.8.3.msysgit.0. I found that updating my system environment variable GIT_SSH to C:\Program Files (x86)\Git\bin\ssh.exe seemed to do the trick. This also fixed my issue with contacting OpenShift's git repo.I encountered this same problem, however the GIT_SSH solution appeared to work once for me. After a computer restart I realized it was something else, as I was able to clone my private repositories with no problem using Git Bash or Command Prompt, but not in Sublime Text 3 with the SublimeGit plugin. My solution was simple and is actually what @BlueRaja - Danny Pflughoeft mentioned but I thought it could use some direction ;)Basically you just need to edit ~/.ssh/config and ensure the username is git. You can also tell it to use a specific SSH key for Github -- My ~/.ssh/config file looks like the following:Host gh    Hostname github.com    User git    IdentityFile ~/.ssh/github_rsa.pubI have a specific key for Github due to the number of other things I do throughout my day, but if you've only got one then it usually will be ~/.ssh/id_rsa.pub like Github explains here.I know everyone has a different solution, but I'll leave this here for anyone who may encounter this article without a fix. Good luck!"
"Does ""git gc"" complain?I have the same problem as you; the error message when I clone i:Cloning into test...remote: Counting objects: 6503, done.remote: Compressing objects: 100% (4519/4519), done.Connection to git.myhost.im closed by remote host.| 350 KiB/sfatal: The remote end hung up unexpectedlyfatal: early EOFfatal: index-pack failedIn my case, the reason is that my repository size (200M) is larger than my git server's memory (128M). When I clone from the git server, I use command top on my server, which shows that memory usage is soon over 128M.When I use another server that has 4G memory, the git clone is all okay. You could also try adding more swap space to your sever.The way I solved this problem is this: My git daemon is running on windows, and clients are on other computers.I found a workaround (but it will only work on windows).Start git daemon with verbose from cmd.exe:""C:\Program Files\Git\bin\sh.exe"" --login -i -c 'git.exe daemon --verbose  'Not tested, if it works directly in git bash. Maybe it will.Then (before starting any clone, pull, fetch,...) select some text in the window (note: ""Quick Edit Mode"" must be enabled (can be found in: cmd.exe --> Properties (click the top left corner of your cmd window) --> Edit Options)) in which git daemon runs. That will prevent it from printing any further messages in that window.When the output thread of git daemon is blocked that way, then the error does not happenUse GIT_TRACE environment variable to get debug output. Set it to ""1"" to trace to stderr or an absolute path to trace to file.I had the same problem.My guess also was that this has to do with the fact that I use text/CRLF mode for created files.And indeed, after switching CygWin to UNIX/binary newline mode, everything works fine.See:http://cygwin.com/cygwin-ug-net/using-textbinary.html http://www.sourceware.org/cygwin/cygwin-ug-net/using-utils.html#mountBTW, the easiest way for me to switch the file mode was to edit /etc/fstabto switch fromnone /cygdrive cygdrive text,posix=0,user 0 0tonone /cygdrive cygdrive binary,posix=0,user 0 0I also had problems with cygwin git, the error: fatal: index-pack failed,I was able to solve it by creating a mount for my projects and setting it to binary mode.  since my /c is set to text mode.Add cygwin's to /etc/fstab:c:/work/Projects /projects some_fs binary 0 0run mount -a to mount all drives.You need to be in /projects to work with cygwin git, /c/work/Projects will fail.Not sure if this will work for you."
"He probably put the commit somewhere in the existing commit tree, rather than on top of it.Try this:git fetch origingit rebase origin/masterAnd if that doesn't work, just create a local branch of origin, cherry-pick your local commits onto it, reset master before whatever commit he merged, and then merge your local branch onto master.My guess is that his push involved a --force at some point to avoid a not a fast-forward commit message. You don't want to do that, in the future.The root of the problem was that my colleague removed some entries from the .gitignore file in his branch that allowed several new files to come into his checkin. Since my local .gitignore was still ignoring those files, it didn't think I had local working files to add to the index. I ended up deleting all the files and then the pull worked and brought them all in."
"Follow the steps to setup SSH keys here: https://help.github.com/articles/generating-ssh-keysORgit remote add origin https://{username}:{password}@github.com/{username}/project.gitI faced the exact same problem. This problem occurred when I cloned using HTTPS URL and then tried to push the changes using Git Bash on Windows using:git clone https://github.com/{username}/{repo}.gitHowever, when I used SSH URL to clone, this problem didn't occur:git clone git@github.com:{username}/{repo}.gitShort Answer:git initgit add README.mdgit commit -m ""first commit""git remote add origin https://github.com/{USER_NAME}/{REPOSITORY_NAME}.gitgit push --set-upstream origin masterIgnore first three lines if it's not a new repository.Longer description:Just had the same problem, as non of the above answers helped me, I have decided to post this solution that worked for me.Few Notes:The SSH key was generatedSSH key was added to github, still had this error.I've made a new repository on GitHub for this project and followed the steps describedAs the command line tool I used GitShell (for Windows, I use Terminal.app on Mac).GitShell is official GitHub tool, can be downloaded from https://windows.github.com/Hope this helps to anyone who has the same problem."
"Right now you are trying to essentially do a git merge with uncommited changes in your branch (pull is just fetch + merge).  Git is rightfully complaining that such an operation would overwrite the uncommited changes in the branch.  To proceed with the pull operation you need to remove this uncommited changes from the working directory.  There are a couple of ways to do this commit them to your local repository stash them, run the pull operation, and then unstash them on top of the pull commit, fetch, rebase and then merge If you are new to git I would probably start with option #1.When using the Visual Studio Git Provider (VS 2013, VS2015), this situation can also arise in scenarios where a local Commit has been performed, but, when attempting to Pull from the server and merge, the error message:""uncommitted changes would be overwritten by merge""is still displayed, and the Pull action is cancelled.This can occur because locally, there are Untracked Files that were not part of the local Commit, but are part of the remote Pull; the merge resolution cannot deal with this scenario. Typically this occurs when some files such as T4 template outputs are included in a Commit on one workstation, but not on others. Additionally, this can occur in Visual Studio 2015, when working with MVC6 projects (at time of writing), when files in the wwwroot folder have been included in a Commit on one workstation, but not on another (one possible cause of this is that the .gitignore files are different on the workstations attempting to work with the same server repository). To resolve:a) View the Team Explorer > Changes dialogue.b) Verify that any Untracked Files that actually reside in the server branch are to be included in your Commits; to do this, right-click and select Add. Alternatively, if you intend them to be overwritten, you can select Delete. Please observe caution.c) Perform a Commit, and then a Pull, and perform any merge conflict resolution that is required.Visual Studio 2013 seems to be lacking maturity as a GIT UI.  I ran across similar issue even after having committed all my changes locally.  For errors arising from Push & Pull in Visual Studio 2013, I would recommend using Git Bash to do a git pull command.  The command-line pull command is much more powerful than VS UI and will overcome some issues.In response to Walter Schultz, you are getting the error because you seem to be trying to keep binary & assembly files (dll and exe's) in version control.  Binary files are not editable & not mergeable, thus they should not be included in version control.  In order to exclude these files from the GIT repository, you can create a .gitignore file and include following items:--- begin .gitignore file ----------------## Ignore Visual Studio temporary files, build results, and## files generated by popular Visual Studio add-ons.# User-specific files*.suo*.user*.sln.docstates*.cache# Build results[Dd]ebug/[Dd]ebugPublic/[Rr]elease/x64/build/bld/[Bb]in/[Oo]bj/Dev/bin/--- end gitignore file ----------------Once you create the .gitignore file, go into your local repository and delete all files in your /Bin/ folder and other files that you do not wish to keep track of.Then push to local & sync your code to server repository.Hope this helps.Same thing was happening to me, I committed all my changes and get the same error when I try to switch branches. I realized there was one file I chose to ""ignore"" which I left under the ""Excluded Changes"".  Apparently, VS2013 is not properly handling this exclusions well.  So after many tries I came up with a simple solution:I moved the file to ignore from ""Excluded Changes"" to the""Included Changes""; I made a local commit; Switched branch without problem;"
"You might have changed your repository nameIn your local repository edit the file:.git/configThen check:[remote ""origin""]   url = that the URL matches your remote repositoryDid you create a new repository on the http://github.com with the same name? If not, do it! And make sure each letter is correct and case sensitive.In my case my github account did not have permissions to the repo. Added the github account as a collaborator for the repo and that fixed it.This error mostly caused by WRONG URL, please check:http or httpsURL Nameusername@git_urlwrong git nameIt looks like that's a private (or deleted) repository; if you visit the repository page while logged it'll give you the real URL, which'll probably be https://TeaCodie@github.com/TeaCodie/TeaCodie-Website.git , i.e. with a username specified?Also make sure the repo you've entered is cased correctly (it's case sensitive).I got the same problem while using a github repository, and connecting to it via https, while using the OS X Keychain Credential helper.My problem was that I had the wrong credentials stored in OS X's Keychain (I was using the email address that I used to sign up for github.com rather than the [username]@github.com address it provides you). I deleted the old account in the keychain and only left the @github.com one and it fixed the problem.Not sure if it is related, but when I checked the user.email local config:git config -lit showed the incorrect email address as well, so I updated the local git user.email to use the correct account too:git config user.email <username>@github.comMake sure that your user account is added to the repository as a collaborator.Setting --> CollaboratorsMy issue was that I used the clone https url widget provided by github. That URL doesn't work for private repositories as you need to add a username to the front of it.  Example: a private repo owned by john and named widget with collaborator sam the correct url would be: https://sam@github.com/john/widget.gitThe github provided url: https://github.com/john/widget.gitThe error message leaves much to be desired.This happened to me and at first it was not apparent what had gone wrong. The previous day I had renamed my repo on github.com only changing the first character of the repo name from a lowercase letter to uppercase. I was not aware that the repo name in the origin URL was case-sensitive unit I received the error which contained the text, ""did you run git update-server-info on the server."" Once I edited the .git/config file to correct the case of the same letter in the origin URL, the problem was solved, the error no longer occurred and I was once again able to push my changes up to the repo on github.com. Another bit of advice: if you make changes to your repo on github, make sure to test sync'ing your local repo right away. In my case, I did not and it was the next day when I had tried to sync and couldn't because of the error and I forgot that I had renamed the repo, so I was scratching my head for a bit. Had I tested sync'ing right away, I would have caught this problem right away.I met up with the same problem.How I solved this problem is:I use git bash to create a new repo, when I typed ""git push origin master""It reported ""fatal: https://github.com/TeaCodie/TeaCodie-Website.git/info/refs not found: did you run git update-server-info on the server?""Finally, I found there was not a repo on the github at all.You'd better create a new repo first on github. Maybe this experience can help somebody.I received this same error when I attempted to git clone something from Kiln what was actually a Mercurial repository."
"Find the diff with git fetch && git log Li..origin/Li. I would guess you've rebased or otherwise recut Li since last time you pushed, but that command should tell you exactly what's in the remote that isn't in the local. You can find what's in either (but not both) with the triple-dot syntax: git log Li...origin/Li.If the diff is expected, then just merge with git merge origin/Li and then git push. If the change is unwanted, overwrite the remote with git push -f origin Li. Only do this if you want to abandon the remote's changes.Updates were rejected because a pushed branch tip is behind its remote.git config --global push.default currentTry the command above to set the current branch as default and git push"
"assuming that you have write access to your personal git server, what you are doing is pushing changes to a non-bare repository, and to a branch that are currently checked out as working directory.The current common good practices is always push to a bare repository. To create it, you could do something like this:git init --bare SomeRepo.gitif you insist on pushing to a non-bare repository, which is not recommended, make sure that the branch that you are going to push to is not the current checked out branch or the current working directory. just open a command line tools, such as terminal in Linux or git bash in windows, move to your repository directory (the one that has a folder .git in it), execute this command:git branch -vit will show all the available branches of that repository, and the branch that currently checked out is marked with '*', for example:* master        b0bb0b1 some commit message  development   babbab2 some other commit message  experimental  bebbeb3 some commit message in experimentthe example above shows that master is the currently checked out branch, thus you couldn't push to it. But you could push to other branches, such as development or experimental. If you must push to master, you could do it by changing the current directory to other branches, using this command:git checkout the_branch_nameafter this, the currently checked out is the branch that specified in above command, pushing to master is now possible."
"I experienced similar problems when checking out a project into a Windows directory that had a 67- (Windows) or 76- (cygwin) character base path - when added to the path-length of the checked out files, it exceeded Windows' path-length limit:git checkout -f HEADerror: unable to create file <194-character filepath> (No such file or directory)fatal: cannot create directory at '<187-character directory path>': No such fileor directoryI solved the problem by checking out to c:\git, which, at 6 or 15 characters in length, kept the maximum path-length under the Windows limit.Many Windows APIs are limited to 260 symbols for file path name. So git can't create files with names longer than 260 symbols. NTFS file system actually supports longer names (32k) but there is no easy way to allow long names for programs.Workaround 1: move your project to a new location, closer to disk root.Advantage:Everything should work fine (assuming there no files with path longer 260)Disadvantage:You have to change project locationWorkaround 2: create a Junction to your project folder from a folder that is closer to disk root and do git clone from the junction folder. You can do this with mklink command or Link Shell Extension.Advantage:You can have long file names (greater than 260)You can preserver project locationYou may safely delete junction after initial cloning (if you don't need to work with files that violate 260 symbol limit at original location)Disadvantage:Full file name at junction still have to be less 260 symbols. Otherwise this solution will not help.If you want to modify the files with long"
"I got it to work using this format:https://username:password@codaset.com/username/project_name.git destination_folderHowever according to these 2 posts, using that method could be a security problem:Can a username and password be sent safely over HTTPS via URL parameters?Username and password in https urlTo avoid having to enter a password at all (on Windows or Unix), you can:check that HOME is defined (on Windows, it isn't by default)setup a _netrc file with the following content:    machine codaset.com    login your_codaset_login    password your_codaset_passwordNote: %HOME%\_netrc on Windows, $HOME/.netrc on UnixThat way, when you are cloning your repo, instead of typing: git clone https://username@codaset.com/username/project_name.git destination_folder_name.git, you can remove the initial username:git clone https://codaset.com/username/project_name.git destination_folder_name.gitand you won't have to enter a password.If you don't want to put your credentials (in particular your password) in plain text in an .netrc file, you can encrypt that netrc file with gpg: see ""Is there a way to skip password typing when using https:// github""You can do:git clone https://username@codaset.com/username/project_name.git destination_folder_name.gitto make it prompt for password."
"If you enabled two-factor authentication in your Github account you  won't be able to push via HTTPS using your accounts password. Instead  you need to generate a personal access token. This can be done in the  application settings of your Github account. Using this token as your  password should allow you to push to your remote repository via HTTPS.  Use your username as usual.https://help.github.com/articles/https-cloning-errors#provide-access-token-if-2fa-enabledYou may also need to update the origin for your repository if set to https: git remote -v git remote remove origin git remote add origin git@github.com:user/repo.gitFirst, you can make sure to use the proper url:git remote set-url origin https://github.com/zkirkland/Random-Python-Tests.gitThen, if it was working before, and if it wasn't asking for you username, it must be because you had stored your credentials (login/password) in a $HOME/.netrc file, as explained here. You can double-check those settings, and make sure that your proxy, if you have one, hasn't changed.If that still doesn't work, you can switch to an ssh url:git remote set-url origin git@github.com:zkirkland/Random-Python-Tests.gitBut that means you have published your ssh public key in your Account settings.I know this is an old question, but I was having the same annoying issue, and maybe this pinpoints the problem and will help other people. I think that for some reason GitHub is expecting the URL to NOT have subdomain www. When I use (for example)git remote set-url origin https://www.github.com/name/repo.gitit gives the following messages:remote: Anonymous access to name/repo.git deniedfatal: Authentication failed for https://www.github.com/name/repo.gitHowever, if I usegit remote set-url origin https://github.com/name/repo.gitit works perfectly fine. Doesn't make too much sense to me... but I guess remember not to put www in the remote URL for GitHub repositories.Also notice the clone URLs provided on the GitHub repository webpage doesn't include the www.I had the same problem. I set url in that way:git remote set-url origin https://github.com/zkirkland/Random-Python-Tests.gitI also removed from config file this entry: askpass = /bin/echo.Then ""git push"" asked me for username and password and this time it worked.This worked for me, and it also remembers my credentials:Run gitbashPoint to the repo directoryRun git config --global credential.helper wincredI'm not really sure what I did to get this error, but doing:git remote set-url origin https://...didn't work for me. However:git remote set-url origin git@bitbucket.org:user/reposomehow worked."
"Those settings allow git to know what to push to or what to pull from:push the current branch to update a branch with the same name on the receiving end. Works in both central and non-central workflows.It should only be:git config --global push.default current(I am not aware of that setting for pull)I would recommend:using the remote name instead of its url: originusing a push with makes a tracking connection between your local and upstream branch:So:git push -u origin mastergit pull originAfter that, a simple git push will be enough: see ""Why do I need to explicitly push a new branch?"" for more.I tried this after push.git config --global pull.default currentgit config --global push.default currentI tried this command after i made pull..Then when i pushed it it works..Still i need to know the scene behind this ?Really this is alone reason or ?If someone figure it please give a reply.."
"This looks similar to How do I get github to default to ssh and not https for new repositories.Probably it's worth trying to switch from http protocol to ssh:$ git remote add origin git@github.com:username/project.gitThe problem is due to git/https buffer settings.In order to solve it (taken from Git fails when pushing commit to github)git config http.postBuffer 524288000And run the command againCause : The default file post size for Git has been exceeded.Solution : Navigate to repo.Run the following command to increase the buffer to 500MB after navigating to the repository:git config http.postBuffer 524288000You might get an error like this error: could not lock config file .git/config: No such file or  directorythat is because you dont have a local .git/config file You can get it working by this commandgit config --global http.postBuffer 524288000Just to add this (because this was the first entry when I googled):This error can also be thrown by missing writing access for the repository.In my case I created the repo with the root account of my server and actually forgot about that later so the git user couldn't write the pushes into the directory.In our case, the problem was a clone that wrote a .git/config file which contained a url entry that was a read only access method.  Changing the url from the :// method to the @ method fixed the problem. Running git remote -v illuminated the issue some.Another addition, since I encountered this error a different way and Google took me here.My problem was a mismatch of case; one camelCase and one not. Apparently, GIT stops you doing this without telling you why. So if your branches are different from the remote only in the capitalization, try changing them to be identical.See:Git: 'Master cannot be resolved to branch' after merge"
"This is reported in issue 3079: https cloning requires a large amount of resources (CPU, but mainly memory) on the GitLab server, and currently (GitLab 5.x) large repos.Even GitLab 6.0 comes with commits like 7ecebdd, mentioning timeouts when cloning large repo.I haven't tested with GitLab 6, though (which should release tomorrow).Consider implementing a chunking plugin for nginx, such as HttpChunkinModule.I personally haven't deployed the above but have a client with similar issues.In their case, the problem is on the client side, where we need to instruct devs to use the following tweak to their local git config:git config http.postBuffer 524288000 #Set to 500MBThe above will simply allow larger git-related http requests on the client side (we've got plenty of memory on the server side)."
"Your remote address is, compared to what github tells you: git@github.com:seterr/messages.git    <== your remote git@github.com:septerr/messages.git   <== GitHub actual repo addressYou forgot the 'p' in septerr.As mentioned in ""GitHub pushing/pulling error"", GitHub repo addresses are sensitive to typo or case.Nick mentions in the comments:I ran into an issue where I needed to change my repo address due to a change in GitHub username.  Here's the code for it: git remote set-url origin git@github.com:username/reponame.git This will set the remote name to origin with the GitHub username of username.If you are receiving this error and a typo is not the cause, as was my scenario, try opening .git/config and deleting the section:[remote ""origin""]   url = git@github.com:yourgitusername/my_project.git  fetch = +refs/heads/*:refs/remotes/origin/*Then rerun the following (replace 'yourgitusername'):git remote add origin git@github.com:yourgitusername/my_project.git   git push -u origin masterThis resolved the problem for me.Credit to this answer on a similar question: Git Push ERROR: Repository not foundI had the same problem. My issue was misunderstanding that I had to first create the empty repo on github before pushing to it. Doh! Including this here for anyone else who doesn't realize.If you're using OS-X on a Mac and have a HTTPS URL for your remote WITHOUT credentials then the KeyChain may be used for the credentials.  Is it possible that the credentials in your KeyChain are incorrect?  Perhaps you have changed your password or you have two github accounts but the wrong one is being used?If in doubt open the KeyChain app and remove the ""github.com"" entries then when you next perform a fetch/pull/push etc you will be re-prompted for your github username and password.All the above assumes that you had previously enabled 'Password/Keychain Caching' as per the guide at https://help.github.com/articles/set-up-git#platform-mac"
"As the error message says: git pull before you try to git push. Apparently your local branch is out of sync with your tracking branch.Depending on project rules and your workflow you might also want to use git pull --rebase.Try this: git push -f origin masterI've just received this error.I created a github repository after creating my local git repository so I needed to accept the changes into local before pushing to github. In this case the only change was the readme file created as optional step when creating github repository.git pull https://github.com/*username*/*repository*.git masterrepository URL is got from here on project github page : I then re-initialised (this may not be needed)git initgit add .git commit -m ""update""Then push : git pushIf git pull does not help, then probably you have pushed your changes (A) and after that had used git commit --amend to add some more changes (B). Therefore, git thinks that you can lose the history - it interprets B as a different commit despite it contains all changes from A.             B            /        ---X---AIf nobody changes the repo after A, then you can do git push --force.However, if there are changes after A from other person:             B            /        ---X---A---Cthen you must rebase that persons changes from A to B (C->D).             B---D            /        ---X---A---Cor fix the problem manually. I didn't think how to do that yet.Try this command: ""git pull origin master""It worked for me.Check this link: https://help.github.com/articles/dealing-with-non-fast-forward-errorsi had created new repo in github and i had the same problem, but it also had problem while pulling,  so this worked for me.but this is not advised in repos that already have many codes as this  could mess up everythinggit push origin master --force! [rejected]        master -> master (non-fast-forward)Don‰Ûªt panic, this is extremely easy to fix. All you have to do is issue a pull and your branch will be fast-forward:$ git pull myrepo masterThen retry your push and everything should be fine:$ git push github masterThe only i was able to resolve this issue was to delete the local and git repo and create the same again at both ends. Works fine for now.You need to do git branchif the output is something like:* (no branch)masterthen dogit checkout masterMake sure you do not have any pending commits as checking out will lose all non-committed changes.I had this problem on a development machine. The dev branch was pushing fine but thethe master branch gave me (while git pushing when being on the dev branch):! [rejected]        master -> master (non-fast-forward)So I tried:git checkout mastergit pullWhich gave me:You asked me to pull without telling me which branch youwant to merge with, and 'branch.master.merge' inyour configuration file does not tell me, either.I found out the master branch was missing from .git/config and added:[branch ""master""]    remote = origin    merge = refs/heads/masterAfterwards git push also worked fine on the dev branch."
"git stash is perfectly legitimate, though as Greg said, for some reason fixing the conflicts can get strange. But they are still fixable, you won't actually fubar anything. The command as I know to re-apply the stash is git stash apply, though pop may be an alternative that I'm not aware of (or it could do something different, I don't know, so you probably want to use apply.) Is there a reason you don't want to commit those changes before merging? Generally that's the right thing to do. Another option is:git stashgit checkout -b newworkgit stash applygit commit ...This creates a new branch, which will allow you to get your master up to date without conflicts, (checkout master again, then pull or fetch + merge).  Then you can merge your branch back with (while still on master)  git merge newwork. You can resolve the conflicts on master, while still retaining the work on newwork without any conflicts.  This is a bit safer if you are worried about conflicts really screwing things up, but generally, conflicts are just part of the process, so don't worry too much about them.It's good practice to always commit any local changes before pulling (merging) new code. If you don't commit, then Git doesn't know how you want to manage your local changes. Merge only with a clean working tree.There may be conflicts in the merge, due to the same files being changed locally and by somebody else. In my experience, resolving conflicts from an actual merge operation is slightly simpler than resolving the same conflict from a stash pop operation.First you should: git checkout -- public_html/sites/filegit checkout -- public_html/sites/file1.txtgit checkout -- public_html/sites/file2.txtNext step: git pull origin masterI have another solution:git reset --hard FETCH_HEADIt works in almost cases."
"I had this problem as well. I solved it by changing the ownership of the directories to the user I was trying to git pull with:sudo chown -R anthony:anthony *I ran that at the root of my git tracked directory to make sure all the files were owned by the correct user.In my case it was having sublime text open with the git controlled directory added as a folder in the sublime project. After closing sublime I was able to switch branches without a problem."
"git push feature/prizeFulfilment: feature/PrizefulfilmentThat is similar to this answer:For the record, I believe the root cause of this problem was the difference in capitalisation between the local and remote branch names, and the case-insensitive nature of the Windows share that hosted the remote repository.We just encountered this exact same error and were able to resolve the problem simply by renaming the local branch to match the capitalisation of the existing remote branch.Try and make sure to use the same capitalization between local and remote branches.You second command make the link between the prizeFulfilment and remote Prizefulfilment explicit, which is why it worked. But it isn't a good solution to keep a local branch with that kind of difference.Another possible reason of problems present also on case sensitive systems is conflicting breaches names.If remote repository contains branch a/b and you are trying push branch a/b/c same error will be reported by git (definitely this error description should be improved).https://coderwall.com/p/qkofma/a-caution-about-git-branch-names-with-shttps://ocroquette.wordpress.com/2011/07/10/git-failed-to-lock/What happened to me was that git was changing the capitalization of my local branch. I had an old branch named Feature/blahBlah and a new branch named feature/fooBar. The latter was renamed automatically to Feature/fooBar since git stores branches as folders and I couldn't have the same folder name with different capitalization. To fix it, I had to go into .git/refs/heads and rename 'Feature' to 'feature'` so all branches would be consistent."
"Seems the problem is reported in the mailing list.Does this help?git config --global --unset http.proxyJust delete the [http]     proxy =worked for meI just got the same issue, when pushing behind a firewall.The problem wasn't an empty http_proxy var (git var -l didn't show any proxy variable), and my OS environment variables included:http_proxy=username:passowrd@proxy.company:porthttps_proxy=username:passowrd@proxy.company:portno_proxy=.companyThis setting would always trigger a:error: Couldn't resolve proxy '(null)' while accessing https://...However, as soon I changed the proxy variables, adding an 'http://' in front of the proxy addresses, the error message stopped:http_proxy=http://username:passowrd@proxy.company:porthttps_proxy=http://username:passowrd@proxy.company:portno_proxy=.company(note the 'http://' even for the https proxy address)"
"The basic reason is that your computer doesn't trust the certificate authority that signed the certificate used on the Gitlab server. This doesn't mean the certificate is suspicious, but it could be self-signed or signed by an institution/company that isn't in the list of your OS's list of CAs. What you have to do to circumvent the problem on your computer is telling it to trust that certificate - if you don't have any reason to be suspicious about it.You need to check the web certificate used for your gitLab server, and add it to your </git_installation_folder>/bin/curl-ca-bundle.crt.To check if at least the clone works without checking said certificate, you can set:export GIT_SSL_NO_VERIFY=1#orgit config --global http.sslverify falseBut that would be for testing only, as illustrated in ""SSL works with browser, wget, and curl, but fails with git"", or in this blog post.Check your GitLab settings, a in issue 4272.To get that certificate (that you would need to add to your curl-ca-bundle.crt file), type a:echo -n | openssl s_client -showcerts -connect yourserver.com:YourHttpGilabPort 2>/dev/null  | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'(with 'yourserver.com' being your GitLab server name)To check the CA (Certificate Authority issuer), type a:echo -n | openssl s_client -showcerts -connect yourserver.com:YourHttpGilabPort 2>/dev/null  | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'| openssl x509 -noout -text | grep ""CA Issuers"" | head -1Findekano adds in the comments:to identify the location of curl-ca-bundle.crt, you could use the command curl-config --caOpen your terminal and run following command:export GIT_SSL_NO_VERIFY=1It works for me and I am using Linux system.Another cause of this problem might be that your clock might be off.  Certificates are time sensitive.Had same problem. Caused by self issued certificate authority.Solved it by adding .pem file to /usr/local/share/ca-certificates/and calling sudo update-ca-certificatesPS: pem file in folder ./share/ca-certificates MUST have extension .crtGIT_CURL_VERBOSE=1 git [clone|fetch]‰Û_should tell you where the problem is.  In my case it was due to cURL not supporting PEM certificates when built against NSS, due to that support not being mainline in NSS (#726116 #804215 #402712 and more).I messed up with my CA files while I setup up goagent proxy. Can't pull data from github, and get the same warning:server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: noneuse Vonc's method, get the certificate from github, and put it into /etc/ssl/certs/ca-certificates.crt, problem solved. echo -n | openssl s_client -showcerts -connect github.com:443 2>/dev/null  | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'there is no need to set git ssl verification to set to false. It is caused when the system does not have the all CA authority certificates. Mostly people who have genuine SSL certificate missing the intermediate certificate. Just adding the complete text of intermediate certificate (whole chain of missing CA and intermediate certificate)  to  sudo gedit /etc/ssl/certs/ca-certificates.crt works without running the update-ca-certificates.Same goes for manually generated certificates, just add the CA certificate text.At the end : Push successful: Everything is up-to-dateCheck your system clock$ dateIf it's not correct the certificate check will fail.To correct the system clock$ apt-get install ntpThe clock should synchronize itself.Finally enter the clone command again.I installed Xubuntu on a Raspberry pi 2, found the same issue with time, as NTP and Automatic Server sync was off (or not installed) . Get NTPsudo apt-get install ntpand change the ""Time and Date"" from ""Manual"" to ""Keep synchronized with Internet Servers"""
"Feel free to skip past this answer if you want to fix the certificates issue. This answer deals with tunneling ssh through the firewall which is IMHO a better solution to dealing with firewall/proxy thingies.There is a better way than using http access and that is to use the ssh service offered by github on port 443 of the ssh.github.com server.We use a tool called corkscrew. This is available for both CygWin (through setup from the cygwin homepage) and Linux using your favorite packaging tool. For MacOSX it is available from macports and brew at least.The commandline is as follows :$ corkscrew <proxyhost> <proxyport> <targethost> <targetport> <authfile>The proxyhost and proxyport are the coordinates of the https proxy. The targethost and targetport is the location of the host to tunnel to. The authfile is a textfile with 1 line containing your proxy server username/password separated by a colone.g:abc:very_secretInstallation for using ""normal"" ssh protocol for git communicationBy adding this to the ~/.ssh/config this trick can be used for normal ssh connections.Host github.com  HostName ssh.github.com  Port 443  User git  ProxyCommand corkscrew <proxyhost> <proxyport> %h %p ~/.ssh/proxy_authnow you can test it works by ssh-ing to gitproxypti@pti-laptop:~$ ssh github.comPTY allocation request failed on channel 0Hi ptillemans! You've successfully authenticated, but GitHub does not provide shell access.       Connection to github.com closed.pti@pti-laptop:~$(Note: if you never logged in to github before, ssh will be asking to add the server key to the known hosts file. If you are paranoid, it is recommended to verify the RSA fingerprint to the one shown on the github site where you uploaded your key).A slight variant on this method is the case when you need to access a repository with another key, e.g. to separate your private account from your professional account. # # account dedicated for the ACME private github account #Host acme.github.com  User git  HostName ssh.github.com  Port 443  ProxyCommand corkscrew <proxyhost> <3128> %h %p ~/.ssh/proxy_auth  IdentityFile ~/.ssh/id_dsa_acmeenjoy!We've been using this for years now on both Linux, Macs and Windows.If you want you can read more about it in this blog postThe problem is that you do not have any of Certification Authority certificates installed on your system. And these certs cannot be installed with cygwin's setup.exe.Update: Install Net/ca-certificates package in cygwin (thanks dirkjot) There are two solutions:Ignore SSL certificate verification.WARNING: Disabling SSL certificate verification has security implications. Without verification of the authenticity of SSL/HTTPS connections, a malicious attacker can impersonate a trusted endpoint (such as GitHub or some other remote Git host), and you'll be vulnerable to a Man-in-the-Middle Attack. Be sure you fully understand the security issues and your threat model before using this as a solution.$ env GIT_SSL_NO_VERIFY=true git clone https://github...Actually install root certificates. Curl guys extracted for you certificates from Mozilla. cacert.pem file is what you are looking for. This file contains > 250 CA certs (don't know how to trust this number of ppl). You need to download this file, split it to individual certificates put them to /usr/ssl/certs (your CApath) and index them. Here is how to do it. With cygwin setup.exe install curl and openssl packagesexecute:$ cd /usr/ssl/certs$ curl http://curl.haxx.se/ca/cacert.pem |  awk '{print > ""cert"" (1+n) "".pem""} /-----END CERTIFICATE-----/ {n++}'$ c_rehashThe easiest way is to disable the SSL CERT verification:git config --global http.sslVerify falseThis will prevent CURL to verity the HTTPS certification. For one repository only: git config http.sslVerify falseNote: disabling SSL verification has security implications. It allows Man in the Middle attacks when you use Git to transfer data over a network. Be sure you fully understand the security implications before using this as a solution.I wanted Git to use the updated certificate bundle without replacing the one my entire system uses.  Here's how to have Git use a specific file in my home directory:mkdir ~/certscurl http://curl.haxx.se/ca/cacert.pem -o ~/certs/cacert.pemNow update .gitconfig to use this for peer verification:[http]sslCAinfo = /home/radium/certs/cacert.pemNote I'm using an absolute path.  Git does no path expansion here, so you can't use ~ without an ugly kludge.  Alternatively, you can skip the config file and set the path via the environment variable GIT_SSL_CAINFO instead.To troubleshoot this, set GIT_CURL_VERBOSE=1.  The path of the CA file Git is using will be shown on lines starting with ""CAfile:"" in the output.Note that for me to get this working (RVM install on CentOS 5.6), I had to run the following:export GIT_SSL_NO_VERIFY=trueand after that, the standard install procedure for curling the RVM installer into bash worked a treat :)As the most popular answer (by Alexey Vishentsev) has it:The problem is that you do not have any of Certification Authority  certificates installed on your system. And these certs cannot be  installed with cygwin's setup.exe.However, that last assertion is false (now, or always has been, I don't know).  All you have to do is go to cygwin setup and include the package 'ca-certificates' (it is under Net).  This did the trick for me.A very simple solution: replace https:// with git://Use git://the.repository instead of https://the.repository and will work. I've had this problem on Windows with TortoiseGit and this solved it.I know the original question lists Cygwin, but here is the solution for CentOS: curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crtSource: http://eric.lubow.org/2011/security/fixing-centos-root-certificate-authority-issues/If all you want to do is just to use the Cygwin git client with github.com, there is a much simpler way without having to go through the hassle of downloading, extracting, converting, splitting cert files. Proceed as follows (I'm assuming Windows XP with Cygwin and Firefox)In Firefox, go to the github page (any)click on the github icon on the address bar to display the certificateClick through ""more information"" -> ""display certificate"" --> ""details"" and select each node in the hierarchy beginning with the uppermost one; for each of them click on ""Export"" and select the PEM format:GTECyberTrustGlobalRoot.pem DigiCertHighAssuranceEVRootCA.pemDigiCertHighAssuranceEVCA-1.pemgithub.com.pemSave the above files somewhere in your local drive, change the extension to .pem and move them to /usr/ssl/certs in your Cygwin installation (Windows: c:\cygwin\ssl\certs )(optional) Run c_reshash from the bash. That's it.Of course this only installs one cert hierarchy, the one you need for github. You can of course use this method with any other site without the need to install 200 certs of sites you don't (necessarily) trust.On CentOS 5.x, a simple yum update openssl updated the openssl package which updated the system ca-bundle.crt file and fixed the problem for me.The same may be true for other distributions.If you're on Mac OS X, you can install the ca-cert-bundle via homebrew:$ brew install curl-ca-bundle$ git config --system http.sslcainfo /usr/local/share/ca-bundle.crtThe formula installs the cert bundle to your share via:share.install 'ca-bundle.crt'The share method is just an alias to /usr/local/share, and the curl-ca-bundle is provided by Mozilla. It's what you see being referenced in a lot of issues. Hope this helps as it's not very straightforward about how to approach this on Mac OS X. brew install curl isn't going to get you much either as it's keg only and will not be linked (running which curl will always output /usr/bin/curl, which is the default that ships with your OS). This post may also be of some value.You'll of course need to disable SSL before you install homebrew since it's a git repo. Just do what curl says when it errors out during SSL verification and:$ echo insecure >> ~/.curlrcOnce you get homebrew installed along with the curl-ca-bundle, delete .curlrc and try cloning a repo out on github. Ensure that there are no errors and you'll be good to go.NOTE: If you do resort to .curlrc, please remove it from your system the moment you're done testing. This file can cause major issues, so use it for temporary purposes and with caution. brew doctor will complain in case you forget to purge it from your system).NOTE: If you update your version of git, you'll need to rerun this command since your system settings will be wiped out (they're stored relative to the git binary based on version).So after running:$ brew update$ brew upgradeIf you get a new version of git, then just rerun:$ git config --system http.sslcainfo /usr/local/share/ca-bundle.crtAnd you'll be all set.Lastly if you have a new version of git, running:$ git config -l --systemshould give you an error along the lines offatal: unable to read config file '/usr/local/Cellar/git/1.8.2.2/etc/gitconfig'that's your tip that you need to tell git where the Mozilla ca-bundle is.UPDATE:.curlrc may or may not be the remedy to your problem. In any case, just get the Mozilla ca-bundle installed on your machine whether you have to manually download it or not. That's what's important here. Once you get the ca-bundle, you're good to go. Just run the git config command and point git to the the ca-bundle.UPDATEI recently had to add:export CURL_CA_BUNDLE=/usr/local/share/ca-bundle.crt to my .zshenv dot file since I'm using zsh. the git config option worked for most cases, but when hitting github over SSL (rvm get stable for example), I still ran into certificate issues. @Maverick pointed this out in his comment, but just in case someone misses it or assumes they don't necessarily need to export this environment variable in addition to running the git config --system.... command. Thanks and hope this helps.UPDATEIt looks like the curl-ca-bundle was recently removed from homebrew. There is a recommendation here.You will want to drop some files into:$(brew --prefix)/etc/openssl/certsI fixed this problem using apt-cyg (a great installer similar to apt-get) toeasily download the ca-certificates (including Git and many more):apt-cyg install ca-certificatesNote: apt-cyg should be first installed. You can do this from Windowscommand line:cd c:\cygwinsetup.exe -q -P wget,tar,qawk,bzip2,subversion,vimClose Windows cmd, and open Cygwin Bash:wget rawgit.com/transcode-open/apt-cyg/master/apt-cyginstall apt-cyg /binTry using a .netrc file, it will authenticate over https. Create a file call .netrc in your home directory and put this in it:machine github.com login myusername password mypassSee this post for more info: https://plus.google.com/u/0/104462765626035447305/posts/WbwD4zcm2fjIf you used debian-based OS, you can simply runapt-get install ca-certificatesI've been having this same problem for Solaris Express 11.  It took me a while but I managed to find where the certificates needed to be placed.  According to /etc/openssl/openssl.cnf, the path for certificates is /etc/openssl/certs.  I placed the certificates generated using the above advice from Alexey.You can verify that things are working using openssl on the commandline:openssl s_client -connect github.com:443I encountered the same problem to configure Git on a collaborative development platform that I have to manage.To solve it :I've Updated the release of Curl installed on the server. Download the last version on the website Download page of curland follow the installation proceedings Installation proceedings of curlGet back the certificate of the authority which delivers the certificate for the server.Add this certificate to the CAcert file used by curl. On my server it is located in /etc/pki/tls/certs/ca-bundle.crt. Configure git to use this certificate file by editing the .gitconfig file and set the sslcainfo path. sslcainfo= /etc/pki/tls/certs/ca-bundle.crtOn the client machine you must get the certificate and configure the .gitconfig file too. I hope this will help some of you.Improve RouMao's solution by temporarily disabling GIT/curl ssl verification in Windows cmd:set GIT_SSL_NO_VERIFY=truegit config --global http.proxy http://<your-proxy>:443The good thing about this solution is that it only takes effect in the current cmd window.on a rasbery pi i had pi@raspbmc:~$ git clone http:   //github.com/andreafabrizi/Dropbox-Uploader  .gitCloning into 'Dropbox-Uploader'...error: Problem with the SSL CA cert (path? access rights?) while accessing http://  github.com/andreafabrizi/Dropbox-Uploader.git/info/refsfatal: HTTP request failedso id a sudo apt-get install ca-certificatesthengit clone http://github.com/andreafabrizi/Dropbox-Uploader.git  workedHave you checked your time?I absolutely refused to make my git operations insecure and after trying everything people mentioned here, it struck me that one possible cause why certificates fail to pass verification is that the dates are wrong (either the certificate expiry date, or the local clock).You can check this easily by typing date in a terminal. In my case (a new raspberry Pi), the local clock was set to 1970, so a simple ntpdate -u 0.ubuntu.pool.ntp.org fixed everything. For a rPi, I would also recommend that you put the following script in a daily cron job (say /etc/cron.daily/ntpdate):#!/bin/sh/usr/sbin/ntpdate -u 0.ubuntu.pool.ntp.org 1> /dev/null 2>&1"
"There was a bug in Homebrew that was fixed just a few days ago. To fix the bug you can run git reset --hard FETCH_HEAD inside your Homebrew installation. Since that won't fix files that are already seen as modified you can also run git checkout Library to replace your checkout with the latest files. (That wipes all edits so take appropriate measures with any you made.)The accepted answer is correct but incomplete. If you are getting the error of error: The following untracked working tree files would be overwritten by merge:Then go to your terminal and run these commandscd /usr/localThen git reset --hard FETCH_HEADThen git checkout LibraryThat should get everything in order. Then run brew updateLet me add: cd /usr/local/gitand then run git reset --hard FETCH_HEADgo to your terminal and run these commandscd /usr/localsudo git reset --hard FETCH_HEADsudo git checkout LibraryFor those of you using OS X El Capitan, your problem may be System Integrity Protection. The fix is documented here.If /usr/local exists already, run the following in Terminal:sudo chown -R $(whoami):admin /usr/localIf /usr/local does not exist:First, try to create /usr/local the normal way:sudo mkdir /usr/local && sudo chflags norestricted /usr/local && sudo chown -R $(whoami):admin /usr/localIf you see permission issues instead try:Reboot into Recovery mode (Hold Cmd+R on boot) & access the Terminal.In that terminal run: csrutil disableReboot back into OS XOpen your Terminal application and execute the line from just aboveReboot back into Recovery Mode & access the Terminal again.In that terminal execute: csrutil enableReboot back into OS X & you'll be able to write to /usr/local & install Homebrew.Out of no reason (or at least no one I'd understand) the repository in /usr/local (which is the brew install!) lost its remote repository. So, neither a git reset nor a git pull and for sure no brew update would work. How do you know that happened? Check /usr/local/.git/config whether there are some lines like the following:[remote ""origin""]url = http://github.com/mxcl/homebrew.gitfetch = +refs/heads/*:refs/remotes/origin/*If not do as follows:cd /usr/localgit remote add origin http://github.com/mxcl/homebrew.gitgit pull origin master"
"Have you tried installing ssh.exe to a path that does not contain spaces? And have you tested whether quoting backslashes works (\\)?You could also try GIT_TRACE=2 git clone <...>, it should show you the command and parameters git is trying to run for connecting.In my case setting GIT_SSH to: GIT_SSH=/c/Program\ Files\ (x86)/Git/bin/ssh.exeworked in git bash.This is really embarrassing but the real problem was with my firewall Comodo Firewall which somehow was blocking the ssh connection from being initialized by git. I can without any problems connect via ssh e.g. using command line or Putty but somehow Comodo was causing this weird issue.Thanks everyone for support!None of the answers so far worked for me.  What ended up fixing this issue for me was removing quotes from my GIT_SSH variable and doing NO ESCAPING AT ALL, no MSYS path style (eg. /c/path\ to\ putty/plink.exe).set GIT_SSH=C:\path to putty\plink.exeThat's it.  When using GIT_TRACE you can see that the variable gets quoted in the resulting command so:the added double quotes change the string passed to the command and the path is wrapped in single quotes so the spaces are ok.Hope that helps someone.Unless you have some obscure anti-virus interaction, the only other case (beside issue 313 you are referring to) where this error message is seen is:""error: cannot spawn git: No such file or directory""if you ever get this error ""error: cannot spawn git: No such file or directory"" its a really nasty issue.  It took me a day to track it down, but it boils down to if you have more then 500 tags in a repository it must blow up some internal command line limits.  TLDR: if you get this error, remove a bunch of your tags.i think a path (ex: C:\Program Files (x86)\Git) having blank space so it cannot recognise. to resolve itmake a simple link to shorten path mklink /d ""C:/Git"" ""C:\Program Files (x86)\Git""it works for me and also for Jenkins  (if you use it with Git plugin)set GIT_SSH=C:\GitFinally, set PATH to %GIT_SSH%\bin"
"If you're at work, it's likely an error with your proxy (i.e. you don't have it setup correctly).See:git SSH problem bad file numberandAnother SSH problem bad file number post"
"If it's only one single file and it's not packed yet, you should be able to find it in .git/objects/14/f87a739828e4d489b0310a51e057b30333926e in your local repository. You can copy this files to the corresponding directory in the repository on your server.If it is packed, you should be able to unpack it using git unpack-objects on one of the pack files in .git/objects/pack/. After that, copying to the server works as described above.Here is almost the same question with a very detailed solution: Github Repo Corruption - Sha1 CollisionSimple push will not fix this problem, because git sees it has the commit that refers to the corrupt file and will assume it has all the objects it needs.Do you have another repository with the project that does not report any problems with fsck (and has the file in question)? E.g. on your local machine? Than you should try:Put the corrupt repository aside.Clone the good repository in it's place.Push any branches the old repository had from other repositories or the old repository.Since this kind of error means the file on disk was corrupt, I suggest you do a thorough check of the filesystem, the disk and also memory (the data could get corrupted in memory when git was saving them).Note: While all disks have at least some checksums, most memory chips have none at all, so a memory fault is more likely to go undetected than a disk fault. memtest86+ is a good way to check memory."
"Okay, so I fixed it, but the method is absolute witchcraft.I tried to isolate the problem by purging GIT, deleting the config file, reinstalling GIT, then creating a local bare repository, then cloning it, then attempting to push from there.  Pretty much like this:sudo apt-get purge git-corerm -f ~/.gitconfigsudo apt-get install git-corecd /gitmkdir foocd foogit init --barecd /var/wwwgit clone /git/foocd footouch blah.txtgit add -Agit config --global user.name ""Name""git config --global user.email ""user@email.com""git commit -m ""Blah""git push...same exact error message, no change there.  (Still some serious witchcraft.)Then, I deleted one of my repositories that doesn't have a local origin (it connects to its origin via SSH) and cloned the repository anew after deleting it (with a fresh git clone ssh://... command).I got an error from the clone command:remote: Malformed value for push.default: simpleremote: Must be one of nothing, matching, tracking or current.Ah ha!  Now it says remote instead of error.  So the remote doesn't support this behavior.  (That doesn't explain why the error persists on local-only repositories with local origins, then, though.)So I then SSH'ed into the remote server and updated the git-core there to the latest version, re-attempted to clone the repository from my local machine, and it worked.Now, I can finally git push.  Insanely, this also fixed it so I can git push from the entirely local /var/www/foo to the also entirely local /git/foo (the local origin bare repository).  SSH'ing into this remote server and updating it somehow - WITCHCRAFT - fixed my local machine's error.Why on earth the entirely local repos care about an entirely different machine's GIT version is... beyond me.  How utterly, utterly insane.Since it seems other people are having this issue, and I found a solution HERE, I thought I'd post the solution that worked for me. IN SHORT:The solution I found was at this page. Evidently the best solution is to upgrade to a newer version of Git (if possible). That was not an option for me, however. From a local machine, I typed the following command: git config ‰ÛÒglobal push.default upstreamThis got rid of the Malformed value for push.default: simple error I had been getting. I'm not entirely sure what upstream does, however. MY CONTEXT (for comparison): I had an empty (bare) repository on a remote computer, and I had a few repositories on a couple ""local"" workstations. I pull from the remote repository, do some work, and then push my work to the remote repository. Pushing/pulling was accomplished via SSH. Most of the time, while working on a local machine, pushing/pulling would result in the error described above. In short, before the fix, I had the following ~/.gitconfig file on the remote machine:[user]        name = Foo Bar        email = FooBarPerson@email.com[diff]        external = /Users/foobar/bin/git-diff-cmd.sh[color]        diff = auto        status = auto        branch = auto[push]        default = simpleAfter entering in the above command, my ~/.gitconfig file on the remote machine changed to:[user]        name = Foo Bar        email = FooBarPerson@email.com[diff]        external = /Users/foobar/bin/git-diff-cmd.sh[color]        diff = auto        status = auto        branch = auto[push]        default = upstreamVersion information:Remote machine (repository location): 1.9.4My laptop: 1.8.5.2 (Apple Git-48)Other computer I work on: 1.7.7.4Here's another site that may be useful to some people: http://www.lorrin.org/blog/2011/10/03/argumentless-git-pull-and-git-push/comment-page-1/I had the same error message on git push.For me it turned out that the remote user's git was an older version (1.7.2.5),and I had recently updated the remote ~/.gitconfig to include:[push]  default = simpleThe solution was to remove this setting from the remote's configuration."
"I usually see that kind of error when there is a process not releasing the handle of those files.Make sure nothing is running, and then try your checkout again.Note: it can also be related with the way Git has been installed (on Windows, UAC can generate problem if msysgit is installed in C:\Program or C:\Program Files, see ""msysgit - sh.exe - fork: Permission denied - Vista 64 bit"" and comment 2 of issue 437)In my first encounter with this error my user had rights to ""write"" to the file but not the containing directory. Check the permissions of the directory containing the file.""Unlink"" essentially means ""delete file"" in this case. This error is not caused by git itself. You should have similar errors deleting those files manually, in a command line or file explorer.I was having the issue with a default-settings.php file in drupal 7. In this case I wasn't able to delete it or revert it just like @rtconner said. I didn't have an application or anything using this file, and it ended up being a permissions error.I added chmod 777 * to the folder and then I was able to revert it no problem.You don't have the access permission, maybe because you are not the owner.Fix by changing the owner to yourself:sudo chown -R your_login_name /path/to/folderTo those who are using Intellij, as @rtconner said this problem is not caused by git. Since your IDE is locked a file(s) git cannot un-link it. So, you need to close your IDE and then try to merge (or whatever you like) it via command line.In my case it was a "":"" character in a folder name prevenitng the git repo to checkout on windows.I ran into this problem whenever running ""git repack"" or ""git gc"" on my OS X machines, even when running git with admin privileges, and I finally solved it after coming across this page: http://hints.macworld.com/comment.php?mode=view&cid=1734The fix is to open a terminal, go to your git repo, cd into the .git folder, and then do:chflags -R nouchg *If that was the issue, then after that, your git commands will work as normal."
"It could be used to a GnuTLs or pycurl bugThe following is the new method for pycurl_7.19.0-4ubuntu3:sudo apt-get install build-essential fakeroot dpkg-devmkdir ~/python-pycurl-opensslcd ~/python-pycurl-opensslsudo apt-get source python-pycurlsudo apt-get build-dep python-pycurlsudo apt-get install libcurl4-openssl-devsudo dpkg-source -x pycurl_7.19.0-4ubuntu3.dsccd pycurl-7.19.0# remove the HAVE_CURL_GNUTLS=1 in the following filesudo vim debian/patches/10_setup.py.dpatch# remove the HAVE_CURL_GNUTLS=1 in the following filesudo vim setup.py# replace all gnutls into openssl in the following filesudo vim debian/controlsudo dpkg-buildpackage -rfakeroot -bsudo dpkg -i ../python-pycurl_7.19.0-4ubuntu3_amd64.debIn My case, It appears I was not using pycurl, so the above solution did not work for me.  What DID work was a rebuild of git-core modified to use openssl instead of gnutls.Instructions are here: http://askubuntu.com/questions/186847/error-gnutls-handshake-faliedI had substitute ""git-core"" for ""git"" in most places, the .dsc (package information file?) turned up as git-core_1.7.0.4-1ubuntu0.2.dsc, and the .deb package came out as git-core_1.7.0.4-1ubuntu0.2_i386.deb.I've had the same problem when tried sudo git fetch from a directory my own user didn't have enough rights to. I moved repository to /tmp and continued my work.Don't forget /tmp gets erased after reboot."
"This is vim, it's a common unix editorpress::wqthat's it. (w=write q=quit)When you see this, an editor already opened, because you see this ;) I guess it opens vi, or a derivate of this. Google for it to find out how to use it, but it seems you prefer to change the editor insteadgit config --global core.editor ""emacs""I prefer nano :)"
"While looking around i tried the following that seemed to fix my issue at the time.While on the branch i wrote.   git reset --hardHad you ever previously done git update-index --assume-unchanged <file>? That could be a potential reason for your situation.To fix, you do git update-index --no-assume-unchanged <file>. Then you should be able to stash your changes and continue with the merge."
"Try 'git remote show origin' to confirm the remote communication.Is the 'security' button checked at Google Project Hosting.  If so, maybe you are using the wrong password (Google Code password versus Google Account password).[edit]When you clone a Google project, you get a custom repository name.  For example, I cloned the 'playn' project and was given a project name of 'gozoner-playn-too' (based on the info that I provided).  When you make your local clone it needs to be of this repository.  In my case:git clone https://code.google.com/p/gozoner-playn-tooAnd the push then works:$ git push originCounting objects: 3, done.Delta compression using up to 2 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (2/2), 256 bytes, done....Note, if you've already checked out the wrong clone (like I suspect) you can change the url to the correct one with:git remote set-url origin https://code.google.com/p/gozoner-playn-tooAfter this the .git/config file has this:[remote ""origin""]  fetch = +refs/heads/*:refs/remotes/origin/*  url = https://code.google.com/p/gozoner-playn-tooYou did everything as the code.google.com says.But you also need to add the remote origin to git.It is like...git remote add origin https://code.google.com/p/your-project-namethen push the added code like...git push orgin --allFor start-up to code.google.com git use see the complete instruction here http://matrixsust.blogspot.com/2012/06/1.htmlHope it helps!"
"Try to do$ git pull --rebaseTo pull remote changes before yours, and then commit. And see if it works.If this does not work, try this instead:$ git stash$ git pull --rebase$ git stash popTo save your changes on the stash, apply remote commits inside your work-repository, and then apply your changes (saved into stash) inside your work-repository again.First, I think if you were to git add then git commit, your local repo would be clean enough to do a git pull.However, if there may be changes you don't want to commit until you see what happened on the upstream, you can use git stash. It will temporarily clean up your working directory and save your changes, so you can pull (I would recommend git pull --rebase to avoid merge points - but it is a personal taste issue). Once you have upstream changes pulled, you can get your local modifications back using git stash pop. After you clean up conflicts and get rid of unnecessary changes, you can add, commit, then finally push.You're getting yourself confused with the commands.git commit saves changes into git's databasegit pull brings remote commits into your repoYou're trying to pull with uncommitted changes, so git is asking you to commit those first (or git stash them away) so that it can merge your local changes with the remote ones."
"It sounds as if your dev branch was originally based on origin/master instead of origin/dev, or somehow dev has been changed to track origin/master anyway.  You can check this with:git config branch.dev.mergeIf that says refs/heads/master instead of refs/heads/dev you can change the upstream branch for your dev branch with:git checkout devgit branch --set-upstream dev origin/devThen, to fix your branch, I would:Make sure that you're on the dev branch with git checkout devMake sure that git status is cleanCreate a branch to save where you were (for safety): git branch dev-wrongly-rebasedUse git reflog to find the commit before you rebased onto origin/masterReset dev to that point git reset --hard COMMIT-BEFORE-BAD-REBASEFinally, do git rebase origin/devMy preference when rebasing is always to do it in two steps, e.g.:git fetch origingit rebase origin/dev... since I think that's less error-prone than git pull --rebase.  I hope that's of some use."
"The error from git pull is complaining that it can't find the branch that you've told it to merge from.  I suspect that this is because you have tagopts = --tags configured for origin, and with that option, git fetch doesn't fetch branch heads.  Try removing that line, and running git pull again.To explain the pull / fetch-and-merge difference: when you manually run git fetch, it doesn't get the --tags options, so it does fetch the branch heads.  So, after that point, origin/master exists and can be merged from.One other note might be worth adding: it's more normal to use git merge origin/<branch-name>, which is more explicit than git merge origin.  In that more unusual case, git is interpreting origin as the branch refs/remotes/origin/HEAD - i.e. the current branch (or commit) in the remote repository origin the last time you fetched from there.  It's probably better to stick with git merge origin/<branch-name> to avoid confusion."
"You can specify the username that SSH should send to the remote system as part of your remote's URL.  Put the username, followed by an @, before the remote hostname.git remote set-url website abc@***.com:path/to/repoMake sure you have correct url in .git/configurl = git@github.com:username/repo.gitIf it's your first push, you'll need to set up correct upstream$ git push -u origin masterYou can check which key is used by:$ ssh -vvv git@github.comThe reply should contain something like this:debug1: Next authentication method: publickeydebug1: Offering RSA public key: ~/.ssh/id_rsa...You've successfully authenticated, but GitHub does not provide shell access.Also it's possible to define rules for ssh in ~/.ssh/config, e.g. based on aliases:   Host github      HostName github.com       User git      IdentityFile ""~/.ssh/id_rsa""   Host git      HostName github.com       User git      IdentityFile ""~/.ssh/some_other_id""You can set connect to different ports, use different username etc. for each alias.Try removing the GIT_SSH environment variable with unset GIT_SSH.  This was the cause of my problem.After doing some research I've finally got solution for this, you have declared a environment variable to plink.exe path. So if you remove that path, reopen the git bash and try cloning through SSH it will work.Refer to this linkhttp://sourceforge.net/p/forge/site-support/2959/#204cI had the same error. The solution was following:I've corrected my url in .git/config.Just copied that from HTTPS clone URL. That would be something like that:url = https://github.com/*your*git*name*/*your*git*app*.gitIt worked.Make sure ssh-agent is running:eval ""$(ssh-agent -s)""https://help.github.com/articles/generating-ssh-keys/#step-3-add-your-key-to-the-ssh-agenti just wanted to share that i found a easy fix for that:Access denied.fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.just logout from gitlab and login again. The problems should then be fixed."
"The GitHub help page, ""Error: Repository not found"" summarizes the possible causes:permission (which is what Monika refers to in the comments with ""Cloned directly from repo‰Û_get error when pushing"")  You might need to fork the repo, and, on your local repo, do a:git remote rename origin upstreamgit remote add origin https://YourUsername@github.com/YourUsername/YourForkspelling: the name of the repo is case sensitivenon-existent repo"
"I found a solution Here that worked for me.In .git/config file (client and/or server) I added the following:[core]  packedGitLimit = 128m  packedGitWindowSize = 128m[pack]  deltaCacheSize = 128m  packSizeLimit = 128m  windowMemory = 128mFor reference (you might already seen it), the msysgit case dealing with that issue is the ticket 292.It suggests several workarounds:Disable delta compression globally. For this you have to set pack.window to 0. Of course this will make the repository much larger on disc.Disable delta compression for some files. Check the delta flag on the manpage to gitattributes.git config --global pack.threads 1git config --global pack.windowMemory 256m (you already tried that one, but also illustrated in ""Error when pulling warning: suboptimal pack - out of memory"")other settings are mentioned in ""git push fatal: unable to create thread: Resource temporarily unavailable"" and ""Git pull fails with bad pack header error"" in case this is pack-related.sm4 adds in the comments:To disable the delta compression for certain files, in .git/info/attributes, add:*.zip binary -deltaFrom Gitattributes man page:Delta compression will not be attempted for blobs for paths with the attribute delta set to false.Maybe a simpler workaround would be to somehow reset the history before that large file commit, and redo the other commits from there.EDIT: ‰ÛÄSince git-v2.5.0 (Aug/2015), git-for-windows (formerly MSysGit)‰ÛÄ ‰ÛÄ ‰ÛÄ provides 64-bits versions as noticed by Pan.student.‰ÛÄ ‰ÛÄ ‰ÛÄ In this answer I was advising to install Cygwin 64-bits (providing 64-bits Git version).I got a similar Out of memory, malloc failed issue using MSysGit when reaching the 4GB barrier:> git --versiongit version 1.8.3.msysgit.0> file path/Git/cmd/gitpath/Git/cmd/git: PE32 executable for MS Windows (console) Intel 80386 32-bit> time git clone --bare -v ssh://linuxhost/path/repo.gitCloning into bare repository 'repo.git'...remote: Counting objects: 1664490, done.remote: Compressing objects: 100% (384843/384843), done.remote: Total 1664490 (delta 1029586), reused 1664490 (delta 1029586)Receiving objects: 100% (1664490/1664490), 550.96 MiB | 1.55 MiB/s, done.Resolving deltas: 100% (1029586/1029586), done.fatal: Out of memory, malloc failed (tried to allocate 4691583 bytes)fatal: remote did not send all necessary objectsreal    13m8.901suser    0m0.000ssys     0m0.015sFinally git 64 bits from Cygwin fix it:> git --versiongit version 1.7.9> file /usr/bin/git/usr/bin/git: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows> time git clone --bare -v ssh://linuxhost/path/repo.gitCloning into bare repository 'repo.git'...remote: Counting objects: 1664490, done.remote: Compressing objects: 100% (384843/384843), done.remote: Total 1664490 (delta 1029586), reused 1664490 (delta 1029586)Receiving objects: 100% (1664490/1664490), 550.96 MiB | 9.19 MiB/s, done.Resolving deltas: 100% (1029586/1029586), done.real    13m9.451suser    3m2.488ssys     3m53.234sFYI on linuxhost 64 bits:repo.git> git config -luser.email=name@company.comcore.repositoryformatversion=0core.filemode=truecore.bare=truerepo.git> git --versiongit version 1.8.3.4repo.git> uname -aLinux linuxhost 2.6.32-279.19.1.el6.x86_64 #1 SMP Sat Nov 24 14:35:28 EST 2012 x86_64 x86_64 x86_64 GNU/LinuxIf my answer does not fix your issue, you may also check these pages:git clone out of memory even with 5.6GB RAM free and 50 GB hard diskGit clone fails with out of memory error - ‰ÛÏfatal: out of memory, malloc failed (tried to allocate 905574791 bytes) / fatal: index-pack failed‰Ûùgit-clone memory allocation errorMSysGit issues tracker"
"Run the Git Bash or the console you are running, with Run As Administrator"
"There are probably some commands to resolve it, but I would start by looking in your .git/config file for references to that branch, and removing them.You also have to delete the local branch:git branch -d 6796Another way is to prune all stale branches from your local repository. This will delete all local branches that already have been removed from the remote:git remote prune origin --dry-runI had a similar issue when I tried to get a pull with a single quote  '  in it's name.I had to escape the pull request name:git pull https://github.com/foo/bar namewithsingle""'""quoteI just ran into a similar issue when I tried to commit to a newly created repo with a ""."" in it's name.  I've seen several others have different issues with putting a ""."" in the repo name.I just re-created the repo and replaced ""."" with ""-""There may be other ways to resolve this, but this was a quick fix for me since it was a new repo.This error could be thrown in the following situation as well.You want to checkout branch called feature from remote repository but the error is thrown because you already have branch called feature/<feature_name> in your local repository.Simply checkout the feature branch under a different name:git checkout -b <new_branch_name> <remote>/feature"
"At last, I did able to solve it by changing the ownership of the directory(/home/ubuntu/public_html/testing) to the user who is commiting/running hook."
"I have also observed this problem on Cygwin 1.7.9 on WindowsåÊ7. Somehow .git/FETCH_HEAD becomes corrupt. This happens with remotes that fetch via SSH and also on the same host.For a workaround, consider an excerpt from the git pull documentation:In its default mode, git pull is shorthand for git fetch followed by git merge FETCH_HEAD.To avoid having to read FETCH_HEAD, name your branch explicitly. For example, assuming you‰Ûªre on master and tracking origin/master, execute the following sequence to get the same effect as git pull.$ git fetch$ git merge origin/masterI thought this problem was sporadic, but I‰Ûªm having trouble to get it to succeed at all lately.#! /usr/bin/env perluse strict;use warnings;sub usage {  <<EOUsage;Usage: $0 [how-many]  where how-many is a positive integer (default: 100)EOUsage}$0 =~ s!^.*/!!;my $howmany = @ARGV ? shift : 100;die usage if @ARGV || $howmany !~ /^ (?!0+$) \d+$/x;my $bad;for (1 .. $howmany) {  unlink "".git/FETCH_HEAD"";  my $output = `git fetch -v 2>&1`;  die ""$0: git fetch exited "", ($? >> 8), "":\n"", $output if $?;  ++$bad unless system(""git rev-parse -q --verify FETCH_HEAD"") == 0;}my $pct = sprintf ""%d%%"", ($bad/$howmany) * 100;print ""$0: fetches=$howmany, bad=$bad ($pct)\n"";"
"When you created your repository on GitHub, you created a README.md, which is a new commit.Your local repository doesn't know about this commit yet. Hence:Updates were rejected because the remote contains work that you do  not have locally.You may want to find to follow this advice:You may want to first merge the remote changes (e.g.,  'git pull') before pushing again.That is:git pull# Fix any merge conflicts, if you have a `README.md` locallygit push -u origin masterif is your first push... relax take it easy..just change the git push **-u** origin master  change de like this!git push -f origin masterDo a forced push with:git push -f origin master.All you need is a force push. Because you might have created Readme.md file on Githib and you haven't committed it yet.git push -f origin master.Assuming that you added the Readme.md file through the interface provided by github, the readme is not yet in your local folder.  Hence, when you try to push to the remote repo, you get an error, because your local repo is lacking the readme file - it's ""behind the times"", so to speak.  Hence, as is suggested in the error message, try ""git pull"" first.  This will pull the readme from the remote repository and merge it with your local directory.  After that, you should have no problem pushing to the remote repo  (the commands you posted look valid to me).if you use the git for mac in GUI you can chose Respository->Pull or the ""comm+shift+p"" to ""git pull"" first, then publish the source.Considering if you haven't committed your changes in a while, maybe doing this will work for you.git add filesgit commit -m ""Your Commit""git push -u origin masterThat worked for me, hopefully it does for you too."
"Looks like hudson git plugin remote windows slave clone post was right. When I go to Manage Hudson > Configure System, in Git > Git executable section, there is error There's no such executable git in PATH. (If takes a few seconds for Hudson to display the error after the page is displayed.) Adding C:\Program Files\Git\bin to path and restarting Hudson solved the problem.It's worth noting that if the cloning process itself has an issue you will also see this problem. I have had issues with one of my boxes failing 4 out of 5 times on the initial clone of a large repository, and hudson kept throwing this error. A good way to verify this is the problem, and it's not Hudson being unable to find the git executable, is to clone the repository into the Hudson workspace manually, and then run a Hudson build: if Hudson is configured properly the build will succeed and report that there are no changes."
"If you have already established remote-tracking branches (i.e. git clone does this automatically) and want to use git pull with the intention of grabbing and merging the latest commits for the current branch off the remote repository, I believe that executing the following will suffice:git pullTo achieve the same effect with the inclusion of a refspec (unnecessarily long-winded):// Pulls the remote 'master' branch down to the local 'master' branchgit pull origin master:refs/remotes/origin/masterYou are receiving that error because the provision of a URL is not how the refspec is formatted.For further details on how the refspec works and its syntax, consult this chapter from the wonderful Pro Git book. Hope that helps!Please explain what your git pull origin master 'https://github.com/username/reponame.github.io.git' call is supposed to do (in your own mind)?If you'd like to pull the branch ""master"" from a repo using its explicit URL, then the command to call would begit pull https://github.com/username/reponame.github.io.git masterbecause ""origin"" is just a name of a so-called ""named remote"" which is sort of a configured alias for a repository which allows you to not type that repo's URL each time you access it.The canonical call to git pull isgit pull [<repo> [<refspec> ...]]where parts in [...] are optional ‰ÛÓ see the manual page."
"But I get an error ""! [rejected]"" and something about ""non fast forward""That's because Git can't merge the changes from the branches into your current master. Let's say you've checked out branch master, and you want to merge in the remote branch other-branch. When you do this:$ git pull origin other-branchGit is basically doing this:$ git fetch origin other-branch && git merge other-branchThat is, a pull is just a fetch followed by a merge. However, when pull-ing, Git will only merge other-branch if it can perform a fast-forward merge. A fast-forward merge is a merge in which the head of the branch you are trying to merge into is a direct descendent of the head of the branch you want to merge. For example, if you have this history tree, then merging other-branch would result in a fast-forward merge:O-O-O-O-O-O^         ^master    other-branchHowever, this would not be a fast-forward merge:    v masterO-O-O\ \-O-O-O-O         ^ other-branchTo solve your problem, first fetch the remote branch:$ git fetch origin other-branchThen merge it into your current branch (I'll assume that's master), and fix any merge conflicts:$ git merge origin/other-branch# Fix merge conflicts, if they occur# Add merge conflict fixes$ git commit    # And commit the merge!Simply track your remote branches explicitly and a simple git pull will do just what you want:git branch -f remote_branch_name origin/remote_branch_namegit checkout remote_branch_nameOr even more fitting in with the GitHub documentation on forking:git branch -f new_local_branch_name upstream/remote_branch_nameYou could pull a branch to a branch with the following commands.git pull {repo} {remotebranchname}:{localbranchname}git pull origin xyz:xyzWhen you are on the master branch you also could first checkout a branch like:git checkout -b xyzThis creates a new branch, ""xyz"", from the master and directly checks it out.Then you do:git pull origin xyzThis pulls the new branch to your local xyz branch.The best way is:git checkout -b <new_branch> <remote repo name>/<new_branch>I am not sure I fully understand the problem, but pulling an existing branch is done like this (at least it works for me :)git pull origin BRANCHThis is assuming that your local branch is created off of the origin/BRANCH.git fetch will grab the latest list of branches.Now you can git checkout MyNewBranch Done :)For more info see docs: git fetch"
"Don't use merge tool, because it's confusing to you. Please take a backup your current code and revert your changes in current branch. Then checkout your master (dev), get latest then rewrite your changes, then push.First you need to type gitk --all  in your github for which branch will currently open by shown top sidethen you need to revert that or rebase your code with your server latest code:then check type the followings for push your branch to server master. git statusgit add .git statusgit commit -a -m ""Comments""git push origin yourbranchnameThat's all..."
"You want to create a .gitignore file, which will instruct Git to do exactly as you ask; ignore files with certain filename patterns. In your case, you'll want to make a .Gitignore file with a single line:.DS_Store This should be in the root of your Git repository.If you've already checked in a few .DS_Store files, you'll want to have Git stop tracking them. You can use git rm .DS_Store for that purpose.Create a file called .gitignore in the root of your project. Edit the file and add .DS_Store to that file. git add .gitignore and git commit that file. Then git rm all those .DS files. Push your changes.Git Synchronization:Pull changes git pullPush Changesgit pushAll you need to do is git pull on the remote machine. If there are any conflicts those seem like files you shouldn't be committing as they appear to be automatically generated by your build system. Once you remove any committed .DS_Store files and added it to the .gitignore you no longer have to worry about synchronizing that file as it will be ignore by git."
"It sounds like you have file in the git repo owned by root.  Since you're ssh'ing in as 'username' to do the push, the files must be writable by username.  The easiest thing is probably to create the repo as the user, and use the same user to do your pushes.  Another option is to create a group, make everything writable by the group, and make your user a member of that group.Ok, I figured it out. The issue was that I didn't have the correct permissions set for myrepo.git and the parent directory git. As root I logged into the server and used:$ chown username /home/username/gitThis then returns drwxrwxr-x 4 username root 4096 2012-10-30 15:51 /home/username/git with the following:$ ls -ld /home/username/gitI then make a new directory for myrepo.git inside git:$ mkdir myrepo.git$ ls -ld myrepo.git/drwxr-xr-x 2 root root 4096 2012-10-30 18:41 myrepo.git/but it has the user set to root, so I change it to username the same way as before.$ chown username myrepo.git/$ ls -ld myrepo.git/drwxr-xr-x 2 username root 4096 2012-10-30 18:41 myrepo.git/I then sign out of root and sign into server as username:Inside git directory:$ cd myrepo.git/$ git --bare initInitialized empty Git repository in /home/username/git/myrepo.git/On local machine:$ git remote add origin      ssh://username@server.com/home/username/git/myrepo.git$ git push origin masterSUCCESS!Hopefully this comes in handy for anyone else that runs into the same issue in the future!Resourceshttp://www.cyberciti.biz/tips/unix-or-linux-commands-for-changing-user-rights.htmlhttp://www.cyberciti.biz/faq/how-to-use-chmod-and-chown-command/It would seem like your user doesn't have permission to write to that directory on the server. Please make sure that the permissions are correct. The user will need write permissions on that directory."
"Right from my experience, I most often get this when I have locally changed files that will be over ridden by the pull, you need to stash or move the files before you can pull it.Right click -> TortoiseGit -> Settings -> NetworkSSH client was pointing to C:\Program Files\TortoiseGit\bin\TortoisePlink.exeChanged path to C:\Program Files (x86)\Git\bin\ssh.exeActually, this error message just says that there is some problem but no specifications of the problem. So, in my case, it was a pending pull request. I pulled the changes into my repo, and then pushed it again and it worked. Moreover, if there is an error on tortoisegit, I prefer to do the same on console. Console gives more detail error message"
"According to bitbucket knowledgebase it may also be caused by the owner of the repository being over the plan limit.If you look further down the page it seems to also be possible to trig this error by using a too old git version (1.7 is needed at the moment).You can get more information with # Windowsset GIT_CURL_VERBOSE=1set GIT_TRACE_PACKET=2# Unixexport GIT_CURL_VERBOSE=1export GIT_TRACE_PACKET=2And then try a git push.Double-check your proxy settings if you have one.Note: git 2.8 (March 2016) adds more information on an error 35:See commit 0054045 (14 Feb 2016) by Shawn Pearce (spearce).(Merged by Junio C Hamano -- gitster -- in commit 97c49af, 24 Feb 2016) remote-curl: include curl_errorstr on SSL setup failuresFor curl error 35 (CURLE_SSL_CONNECT_ERROR) users need the additional text stored in CURLOPT_ERRORBUFFER to debug why the connection did not start.  This is curl_errorstr inside of http.c, so include that in the message if it is non-empty.Also check out the common causes for that message:If it was working before, and not working today, it is possible the SSL private key has expired on the BitBucket side (see below, reason #3), but that doesn't seem to be the case here (the certificate is valid until 12/03/2014).The Destination Site Does Not Like the ProtocolFiring off a request like the following, results in the Unknown SSL Protocol error:curl --sslv2 https://techstacks-tools.appspot.com/Why? Well, in this case it is because the techstacks tools site does not support SSLv2, thus, generating the curl (35) error.The Destination Site Does Not Like the CipherYou could be trying to connect to the site using an ssl cipher that the site is configured to reject.  For example, anonymous ciphers are typically disabled on ssl-encrypted sites that are customer-facing. (Many of us set a blanket rejection policy on any SSL-encrypted web site‰ÛÓregardless of it's purpose.)  The following command string ""can"" also result in the curl (35) error:curl --ciphers ADH-RC4-MD5 https://some_web_site.some_domain.com/Unfortunately, the type of error response you can get from curl depends largely upon the ssl server. On some sites, you'll receive the Unknown SSL Protocol error but on my techstacks-tools site, I get:curl: (35) error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failureKudos to Google because this particular error is a bit more descriptive than the one my websites at work generate because this at least tells you that a ssl socket was started but because of handshake failures, the socket was never able to complete.Try connecting to the site with a cipher that the site supports. Not sure which cipher to use?   Well, let me introduce my cryptonark ssl cipher tester...The SSL Private Key Has ExpiredI came across this one earlier today working with an old WebSeAL site.  In IBM GSKit, you can specify how long the private key password is valid. After reaching a certain date, you will still be able to get webseal started and listening on port 443 (or whatever you set your https-port value to) but you will not be able to successfully negotiate an SSL session.  In today's case, the old WebSEAL instance was using long-expired kdb file with a long expired private key password. Once replaced with the correct, more-up-to-date version, everything worked again.Improper redirectionSome ISP's and DNS providers like to intercept your failed DNS queries in order to redirect you to a search engine results-style page offering you alternative URLs or ""Did you mean...?"" counter-query results.  If you see an error like this:  error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol, it could be due to you typing the hostname incorrectly or the hostname is not yet tabled in your DNS. You can verify that with a simple ""host"" or ""nslookup"".Note (August 2015): Git 2.6+ (Q3 2015) will allow to specify the SSL version explicitly:http: add support for specifying the SSL versionSee commit 01861cb (14 Aug 2015) by Elia Pinto (devzero2000).Helped-by: Eric Sunshine (sunshineco).(Merged by Junio C Hamano -- gitster -- in commit ed070a4, 26 Aug 2015) http.sslVersionThe SSL version to use when negotiating an SSL connection, if you want to force the default.  The available and default version depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the 'CURLOPT_SSL_VERSION' option; see the libcurl documentation for more details on the format of this option and for the ssl version supported.  Actually the possible values of this option are:sslv2sslv3tlsv1tlsv1.0tlsv1.1tlsv1.2Can be overridden by the 'GIT_SSL_VERSION' environment variable.  To force git to use libcurl's default ssl version and ignore any explicit http.sslversion option, set 'GIT_SSL_VERSION' to the empty string.In many cases it is linked to proxy problems.If so just config your git proxy    git config --global http.proxy HOST:PORTThis error also comes up with the Server is down. Email from tech support on the issue:""We experienced an outage where it affected traffic to the website, as  well as Mercurial and Git traffic over HTTPS. SSH was unaffected  though. Feel free to check this page for more info:http://status.bitbucket.org/""So try again later and it could work itself out. Did for meSetting the following git setting fixed this for me git config --global --add http.sslVersion tlsv1.0I'm guessing the corporate proxy server did not like the default encryption protocol."
"Your clone command looks wrong to me. You should add the name of your repo.git clone git://<ip_address>/reponameIf that doesn't work there are many alternatives ways of self hosting.I got the same error cloning : git clone git@domain.tld:user/repository.gitto solve it i just change protocol : git clone https://user@domaine.tld/user/repository.git check it out into your git server like github, bitbucket, etc to get the right URL, if you got the same error doing git pull that will work too."
"It seems the correct fix to this error is to add$ENV{GIT_EXEC_PATH} = ""/usr/libexec/git-core"";to your .gitolite.rc file.The OP skipper3k reports an issue with RUNTIME_PREFIX in Git, a bit similar to ""git pull broken"" question:I'm not sure whether RUNTIME_PREFIX is defined for you. But while nosing in the Makefile, I did notice that prefix defaults to $(HOME). I suspect that this may be the cause of your problems.The simple answer is to put this in ~/.bashrc:export GIT_EXEC_PATH=/opt/local/libexec/git-coreIf you want to find out more about what's going on, you'll probably have to recompile git using port -d upgrade -f git-core (or similar) and look closely at the build log to see where prefix is being set.  Incidentally, port cat git-core shows heavy usage of ${prefix}.Original answer:First, did you get the most up-to-date gitolite version?At https://github.com/sitaramc/gitolite/, you need to consider the 'pu' branch.The installation documentation is then this one.GitoliteV3 or 'g3' doc:""Installation"" consists of the following options:Keep the sources anywhere and use the full path to run the gitolite command.Keep the sources anywhere and symlink just the gitolite program to some directory on your $PATH.Copy the sources somewhere and use that path to run the gitolite command.You can run the 'install' command in 3 different ways:# option 1gitolite/install# option 2gitolite/install -ln# defaults to $HOME/bin, or use a specific directory:gitolite/install -ln /usr/local/bin# option 3gitolite/install -to /usr/local/gitolite/binOld answer for gitolite V2:Second, I prefer the ""from-client method"" method:The advantage of this method is that it forces you to solve the ssh pubkey problem before attempting to install.  It works best if you have dedicated userids, one on the server for installing gitolite, and one on the client for administering it.The disadvantage is that the admin user ends up with two keys one for shell access (that he started with) and one for gitolite access (which the script creates if needed).So I like to create a ~/.ssh/config file with the two different sets of parameters:host gitolite     user git     hostname server     identityfile ~/.ssh/githost gitadmin     user git     hostname server     identityfile ~/.ssh/id_rsa (myaccount public key)The gitolite-admin is only visible for the first public ssh key:C:\HOMEWARE\git>ssh gitolitehello git, the gitolite version here is v1.5.9-25-ga10287athe gitolite config gives you the following access:     R   W      gitolite-admin    @R_ @W_     testingConnection to server closed.With my account:C:\HOMEWARE\git>ssh gitadminhello myaccount, the gitolite version here is v1.5.9-25-ga10287athe gitolite config gives you the following access:    @R_ @W_     testingConnection to mccprdgit10 closed.So:C:\HOMEWARE\git>git clone gitolite:gitolite-adminCloning into gitolite-admin...remote: Counting objects: 16, done.remote: Compressing objects: 100% (13/13), done.remote: Total 16 (delta 2), reused 0 (delta 0)Receiving objects: 100% (16/16), done.Resolving deltas: 100% (2/2), done.The problem was with the way git was compiled on mac. I had to manually compile git without the RUNTIME_PREFIX set. Now it works.I pretty much tried anything I could think of and couldn't get it to work...until I noticed somewhere that GIT is very high on email addresses...so I regenerated my ssh keypair using the -C option:ssh-keygen -t rsa -C ""nospam@nowhere.org""Low and behold, all of a sudden I could clone gitolite-admin without any problem.Apparently the email in .gitconfig's user.email key MUST correspond to the email that was used to generate the SSH key. Honestly, if you only have 1 keypair in your .ssh folder, why on earth does it matter that the email corresponds? Imho, if you pass a key and the key is in the authorized_keys on the server, it should work regardless of the .gitconfig user.email property."
"I needed to install command line tools from Xcode. To do so-  Open Xcode and hit Cmd+, Click DownloadsInstall command line tools.  http://www.hongkiat.com/blog/mountain-lion-git-fix/Had the same problem. I have OS X 10.8, so XCode was not a solution for me.Turns out I had a Git version that's not compatible with my OS X versionThis info might help(found it googling :) ):If you are running:10.6 Snow Leopard: git-2.2.1-intel-universal-snow-leopard10.7 Lion: git-2.2.1-intel-universal-snow-leopard10.8 Mountain Lion: git-2.2.1-intel-universal-snow-leopard10.9 Mavericks: git-2.2.1-intel-universal-mavericks10.10 Yosemite: git-2.2.1-intel-universal-mavericksYou can download from here:http://sourceforge.net/projects/git-osx-installer/files/I was also having troubles with the same error.  I tried the PATH and .bash_profile tricks (didn't help).  I wasn't really interested in installing Xcode and then the 'Command Line Tools' as others had suggested.  But I did stumble upon half an answer.  First, I uninstalled my current version of Git (1.9.2).  I then found that it is possible to install the Command Line Tools by themselves, without installing Xcode:Xcode page:  https://developer.apple.com/xcode/Downloads near the topScroll down to 'Additional Tools'->'View Downloads'Command Line Tools (OS X Mountain Lion)With those installed, doing 'git --version' returned this:git version 1.8.5.2 (Apple Git-48)The file ""/usr/lib/libSystem.B.dylib"" was untouched during this process.  Or at least, the file size and date did not change.  Since that library didn't change, I would surmise that it isn't Xcode that is fixing things, but the version of Git that is installed.I thought about testing that theory and found the older source code for various versions of Git, but didn't have time to spend compiling/installing/testing each one to see if this theory is correct.  And I didn't see a simple method of uninstalling the 'command line tools'.  Maybe someone else is more intrepid.  :)--  JOne can also look at http://stackoverflow.com/a/19457333/894120 and just make a .bash_profile, that worked for me.The issue is that the git maintainers only support MaxOS10.9 (mavericks). If you have an earlier version, you can't use their distribution. Recommended by somebody else at work - use (home)brew. Basically with brew installed you can merely use:brew install gitand it will give you an up to date version. Subsequently to get a new version use:brew upgrade gitNow brew itself uses git, so it might be that this install is recursive - I had to install it recently for another purpose and it took me several hours - but once you have it there, things should be OK. All I can say is that when I installed brew originally, ""git"" still referred to the 1.8.x Apple version, and with this change I'm now getting git v2.1.0."
"Be careful - you have case mixing between local and remote branch!Suppose you are in local branch downloadmanager now (git checkout downloadmanager)You have next options:Specify remote branch in pull/push commands every time (case sensitive):git pull origin DownloadManageror git pull origin downloadmanager:DownloadManagerSpecify tracking branch on next push:git push -u origin DownloadManager(-u is a short form of --set-upstream)this will persist downloadmanager:DownloadManager link in config automatically (same result, as the next step).    Set in git config default remote tracking branch:git branch -u downloadmanager origin/DownloadManager(note, since git 1.8 for branch command -u is a short form of --set-upstream-to, which is a bit different from deprecated --set-upstream)or edit config manually (I prefer this way):git config --local -e -> This will open editor. Add block below (guess, after ""master"" block):[branch ""downloadmanager""]        remote = origin        merge = refs/heads/DownloadManagerand after any of those steps you can use easily:git pullIf you use TortoiseGit:RightClick on repo -> TortoiseGit -> Settings -> Git -> Edit local .git/configThis error happens because the local repository can't identify the remote branch at first time. So you need to do it first. It can be done using following commands:git remote add origin 'url_of_your_github_project'git push -u origin masterThis is because your remote branch name is ""DownloadManager‰ÛÏ, I guess when you checkout your branch, you give this branch a new name ""downloadmanager"".But this is just your local name, not remote ref name.Br,TimYou need to set your local branch to track the remote branch, which it won't do automatically if they have different capitalizations. Try:git branch --set-upstream downloadmanager origin/DownloadManagergit pullThe branch name in Git is case sensitive. To see the names of your branches that Git 'sees' (including the correct casing), use:git branch -vv... and now that you can see the correct branch name to use, do this:git pull origin BranchName where 'BranchName' is the name of your branch. Ensure that you match the case correctlySo in the OP's (Original Poster's) case, the command would be:git pull origin DownloadManager"
"There is no git buit-in way to do that. Git just prints errors to STDERR and doesn‰Ûªt care about the fatality of the error or anything. What you can do is color STDERR red. How to do this has been asked on on ServerFault: http://serverfault.com/questions/59262/bash-print-stderr-in-red-colorThere are three basic options:Run your command like this:*git-command* 2> >(while read line; do echo -e ""\e[01;31m$line\e[0m"" >&2; done)Use a wrapper script (See ServeFault for those), and run commands likemywrapper *git-command*Install stderred. This will allow you to make the effect permanent, without modifying your command line. Not sure whether this will work on windows, though.You can use the color config section of git.For more information and examples see http://git-scm.com/book/en/Customizing-Git-Git-Configuration#Colors-in-Git or the second part of http://blog.philippmetzler.com/?p=15example: (add to your .gitconfig)[color]     interactive = always[color ""interactive""]     error = red bold"
"You are connecting via the SSH protocol. Using SSH, every host has a key. Clients remember the host key associated with a particular address and refuse to connect if a host key appears to change. This prevents man in the middle attacks.The host key for domain.com has changed. If this does not seem fishy to you, you can remove the old key from your local cache using$ ssh-keygen -R domain.comI strongly encourage you to consider having users authenticate with keys as well. That way, ssh-agent can store key material for convenience (rather than everyone having to enter her password for each connection to the server), and passwords do not go over the network.As I answered previously in Cloning git repo causes error - Host key verification failed. fatal: The remote end hung up unexpectedly, add the GitHub to the list of authorized hosts:ssh-keyscan -t rsa github.com >> ~/.ssh/known_hostsI got the same problem on a newly installed system, but this was a udev problem. There was no /dev/tty node, so I had to do:mknod -m 666 /dev/tty c 5 0"
"The msysgit FAQ on Git cannot create a filedirectory with a long path seems not up to date, as it still links to old msysgit ticket #110. However, according to later ticket #122 the problem has been fixed in msysgit 1.9, thus:Update to msysgit 1.9 (or later)Launch Git BashGot to your Git repository which 'suffers' of long paths issueEnable long paths support with git config core.longpaths trueSo far, it's worked for me very well.Be aware of important notice in comment on the ticket #122don't come back here and complain that it breaks Windows Explorer,  cmd.exe, bash or whatever tools you're using.As someone that has ran into this problem constantly with java repositories on Windows, the best solution is to install Cygwin (https://www.cygwin.com/) and use its git installation under all > devel > git.  The reason this is the best solution I have come across is since Cygwin manages the long path names so other provided commands benefit. Ex: find, cp and rm.  Trust me, the real problem begins when you have to delete path names that are too long in Windows.Or you can edit directly your git config file:edit file : YourRepoFolder -> .git -> config[core]    repositoryformatversion = 0    filemode = false    ...    longpaths = true        <-- (add this line under core section)Try to keep your files closer to the file system root. More details : for technical reasons, Git for Windows cannot create files or directories when the absolute path is longer than 260 characters."
"Like Adam said, recover the object frmo another repository/clone.Don't forget to take into account packs. So, a more generalized procedure is this:On a 'complete' git database git cat-file -p a47058d09b4ca436d65609758a9dba52235a75bd > tempfileand on the receiving endgit hash-object -w tempfilecopy objects from your directory (.git/objects) and other people that work on a clone of this repo. One object got zapped so this should fix it.Here is more about moving objects around: http://www-cs-students.stanford.edu/~blynn/gitmagic/ch08.html#_the_object_database"
"Part 1: Getting your push done without worrying about master(Note: actually, it's already done.  See note towards the bottom of part 1.)You're running git push with no additional arguments.If you run git push with two more arguments, they specify exactly what to push where.  The git documents call these the <repository> and the <refspec>.In your case, the repository is always origin (which is the usual standard one git sets up when you clone something).  So the refspec is the more interesting part.Here's the long1 form:git push origin feature/mybranch:feature/mybranchThis limits git to only attempting to push your branch feature/mybranch, telling the remote, origin, that it should update the branch feature/mybranch on its side too.If you leave out the :<same-name> part, the default is to use the branch name on the left of the colon, so:git push origin feature/mybranchdoes exactly the same thing, with a bit less command-typing.Now, what happens when you leave out the <refspec>?  The answer is in the git push and git config documentation, although in my 1.8.4.3 text version it's really hard to read, and the on-line version I linked to above is, if anything, worse: :-)When the command line does not specify what to push with <refspec>...         arguments or --all, --mirror, --tags options, the command finds the         default  by consulting remote.*.push configuration, and if it         is not found, honors push.default configuration to decide what to push         (See gitlink:git-config[1] for the meaning of push.default).To simplify this a lot, I can tell2 that you have not set either remote.origin.push or push.default, so you're getting the ""default default"", which is called matching, which means your git push calls up origin on the metaphorical Internet-phone and saysHey, what branches do ya got?and it says:I have master and feature/mybranch.So your git then says:OK, well, here's what I think master should be, and here's what I think feature/mybranch should be.To which he says:Whoa there buddy, that would set master back a couple of revs!... and that's when you got the ! [rejected]        master -> master (non-fast-forward) thing.So, there's a couple of really simple solutions.Solution #0: do nothingIf you still have the original push output available, you should be able to see something like this:   a430f6d..676699a  feature/mybranch -> feature/mybranch ! [rejected]        master -> master (non-fast-forward)This means that even though the change for master -> master was rejected, the change for feature/mybranch -> feature/mybranch was accepted.  The branch you wanted to push, you did!  You just got this annoying error message to go with the success (and now you're wondering what to do with branch master).Solution #1: be explicit in the pushIf you run:git push origin feature/mybranchyour git and origin's git will have a shorter conversation.  Instead of your git asking him ""hey, whaddaya got there?"" and then trying to push all ""matching"" branches, yours will just say: ""I have some updates for feature/mybranch"".  The fact that you're behind on master will be irrelevant; neither you, nor your git, nor the remote git will look there.Solution #2: change your push.defaultThis only works if your git is new enough, although by now, most are:git config --global push.default simpleThe git folks are planning to change the ""default default"", because matching turns out to be more annoying than helpful, a lot of the time.  The new ""default default"" will be simple.  (For details on what this means, the git config documentation.)(Setting the --global version will change the default default for you, but not for other people.  If any repositories‰ÛÓyour own, or others‰ÛÓhave a local push.default setting, that will override your personal global setting, but for those that don't, your global setting is the one git will use.  You can choose instead to set the local setting in each repo, which will affect you and anyone else who uses your own repos, but then you need to remember to set it in all your repos.)1Actually this is only the semi-long form: you can add refs/heads/ in front of each branch name to make it even longer.  That's just for showing off though. :-)2I'm just guessing, really, but it's a pretty safe bet.  Someone who configures remote.origin.push and push.default probably already knows all of this stuff.Part 2: Why won't master update?I'm much less sure about this, but it looks as though someone had accidentally committed a bunch of (17) .java binaries into the master branch, probably from not having a correct .gitignore.At some point they noticed, oops, didn't want all these binaries!  So they updated .gitignore and committed that, but probably didn't actually git rm --cached all of them, so some are still being tracked.  If a file that is now listed as ignored was previously committed, git ""obeys the commit"" rather than the ignore directive, and you get a lot of this:# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   bin/b1Depending on how you git add and what's in the .gitignore it's possible to add the in-repository tracked files (that are overriding the ignore entry), and make them ""staged for commit"" and commit them.In any case, your master is two revs behind, and definitely has some binaries in it‰ÛÓand it's possible that your feature/mybranch branch has a ""bad"" .gitignore (some variation on it) that also does not ignore the ""right set"" of binaries.Git notices that 7 of your binaries (perhaps re-built with your feature branch features) don't match what's checked in on the master branch.  These would be ""unsafely"" clobbered (at least, as far as git can tell).  If/when you do git checkout -f master (or something equivalent), git clobbers them after all, but you are still left with ""untracked"" files, implying a bad .gitignore.Once you're quite certain that it's safe to clobber anything in your work-tree‰ÛÓthat you have all your work saved away‰ÛÓyou can do this to resync your master to origin/master:git checkout -f mastergit fetch   # resync with origin in case they've fixed more stuffgit reset --hard origin/masterAssuming you don't want binaries in the branches, check over the various .gitignore files and make sure they're correct‰ÛÓyou'll probably need to fix some.  Then, use git ls-files and/or git ls-tree to see what's in the index and repo (git ls-tree requires that you specify a particular tree object, e.g., git ls-files HEAD:bin to see what's in the bin tree, if it exists).To remove committed (even though ignored) files, e.g., to remove everything in bin:git rm --cached -r bin(the --cached says only remove things in the index), or you can allow git to remove the binaries.  Once you have the right stuff ""git rm""-ed and any updated .gitignore files added, git commit the changes:$ cat bin/.gitignore*!.gitignore$ git status# On branch master# Changes to be committed:#   (use ""git reset HEAD <file>..."" to unstage)##   new file:   bin/.gitignore#   deleted:    bin/b1#   deleted:    bin/b2#$ git commit -m 'remove binaries, ignore them in the future'[master ac60888] remove binaries, ignore them in the future 3 files changed, 1 insertion(+) create mode 100644 bin/.gitignore delete mode 100644 bin/b1 delete mode 100644 bin/b2(Finally, rebuild any removed binaries as needed, run tests, do a push if appropriate, etc.)(It's possible that you do want the .java binaries in the branches, or that you don't and yet no one has fixed up any .gitignore entries, etc.; so that's why I'm much less sure about this.)check your master git diffif there no changes, still you get a same problem check for un tracked files  add files and stash taht files after that pull your original master and try to push againYour first git push failed because your master is behind origin/master, so it cannot be pushed safely. The error message explained this.Then after git checkout master the git pull didn't work because you had pending changes that would conflict with the incoming changes from origin/master. You must have had these pending changes before you switched the branch with git checkout master. As the error message suggests, you should either commit these changes, or stash them. A third option is to discard them, which you did with git checkout -fSince you did git checkout -f, there should be no more pending changes and git pull would work, unless you have staged changes. If you have staged changes, and you're sure you don't need them, you should get rid of them too, with git reset or git reset --hard. But be careful, those changes will be completely lost."
"Pull is an operation that needs two arguments, the repository to pull from and the repository to merge the pulled changes to. The target repository is found from current directory or from special option. When you write:administrator@pramod-desktop:/$ git pull ../../remote_repository.git                              ^Current working directory appears to be /. That definitely isn't a git repository. The synopsis of git pull is:target-repository$ git pull name-of-source-repositoryoranywhere$ git --git-dir=target-repository pull name-of-source-repositoryThe target-repository must be a current working directory or must be given using the --git-dir option, but you are trying to pass it as argument.The name-of-source-repository can be either URL or name of remote configured in .git/config (in bare repository that's just config).If you want to check the file out on the server (indeed rather common operation), you should create another, non-bare clone. Than you need to call the git pull from that clone."
"chown [ -f ] [ -h ] [ -R ] Owner [ :Group ] { File ... | Directory ... }From the man pageThe chown command changes the owner of the file specified by the File  parameter to the user specified by the Owner parameter. The value  of the Owner parameter can be a user ID or a login name found in the  /etc/passwd file. Optionally, a group can also be specified. The value  of the Group parameter can be a group ID or a group name found in  the /etc/group file.About the -R option-R   Descends directories recursively, changing the ownership for each  file. When a symbolic link is encountered and the link points to a  directory, the ownership of that directory is changed but the directory  is not further transversed.Sochown -R user:christophe /myapp/app/views/reviews/update.js.erbWould change the owner of the update.js.erb file to the user user in the group christophe, which is probably not what you want.In your case changing the owner of the repo to yourself, i.e.sudo chown -R christophe /path/to/your/local/reposhould suffice.If you don't know your user name, you can find it out with the whoami command.1) Make sure you're inside the repository where you're getting the error.2) Get your username by typing `whoami`3) Enter this command sudo chown -R dwain .git/*"
"git clone will not look at your pack.packSizeLimit setting, it'll anyway transfer everything in a single pack - unless it changed since the last time I looked.Using SCP or Rsync might be a way to work around your issue indeed. Removing the ""useless"" large files, then repacking the repository you try to clone could also help.Giving more RAM to the VM might also help - I don't think you'll need a 64-bits address space to allocate 900MB... You could also give it enough SWAP space to handle the 900MB package instead of increasing the RAM."
"Even if it is about a different context (git+ssh), check the ACL associated with your repo.See for instance this blog post.As suggested in the SO question ""Git pull error: unable to create temporary sha1 filename"" (which has other interesting suggestions as well), try redoing your bare repo, this time with the config:git config core.sharedRepository true"
"Instead of cygwin, install virtualbox and ubuntu server. Once that's done, do a folder share between host and guest. Cygwin is not worth the pain it always and consistently delivers."
"Looks like you have an edited spec that's messing with the git repo. The easiest way to fix this would be to delete the local copy of the specs repo. From terminal:rm -rf ~/.cocoapods; pod setupEDIT:Today (1/30/14) there was an issue with the specs repo that may make you want to fix this. Read more about it on the CocoaPods Blog"
"Your push command is to remote heroku-production but your pull command is to origin. The non-fast-foward message means the history in your current repo differs from the Heroku remote; likely someone has pushed a branch with some merges or rebases. I implore you to not use Heroku as the authoritative git remote. Assuming you are not, you can force push over the Heroku master branch to resolve this. git push -f heroku-production master:master"
"To expand a bit on VonC's answer...First, it may help to note that signal 9 refers to SIGKILL and tends to occur because the remote in question is a Linux host and the process is being destroyed by the Linux ""OOM killer"" (although some non-Linux systems behave similarly).Next, let's talk about objects and pack-files.  A git ""object"" is one of the four types of items that are found in a git repository: a ""blob"" (a file); a ""tree"" (a list of blobs, their modes, and their names-as-stored-in-a-directory: i.e., what will become a directory or folder on when a commit is unpacked); a ""commit"" (which gives the commit author, message, and top level tree among other data); and a ""tag"" (an annotated tag).  Objects can be stored as ""loose objects"", with one object in a file all by itself; but these can take up a lot of disk space, so they can instead be ""packed"", many objects into one file with extra compression added.Making a pack out of a lot of loose objects, doing this compression, is (or at least can be) a cpu- and memory-intensive operation.  The amount of memory required depends on the number of objects and their underlying sizes: large files take more memory.  Many large files take a whole lot of memory.Next, as VonC noted, git clone skips the attempt to use ""thin"" packs (well, normally anyway).  This means the server just delivers the pack-files it already has.  This is a ""memory-cheap"" operation: the files already exist and the server need only deliver them.On the other hand, git fetch tries, if it can, to avoid sending a lot of data that the client already has.  Using a ""smart"" protocol, the client and server engage in a sort of conversation, which you can think of as going something like this:""I have object A, which needs B and C; do you have B and C?  I also have D, E, and F.""""I have B but I need C, and I have D and E; please send me A, C, and F.""Thus informed, the server extracts the ""interesting"" / ""wanted"" objects out of the original packs, and then attempts to compress them into a new (but ""thin"") pack.  This means the server will invoke git-pack-objects.If the server is low on memory (with ""low"" being relative to the amount that git-pack-objects is going to need), it's likely to invoke the ""OOM killer"".  Since git-pack-objects is memory-intensive, that process is a likely candidate for the ""OOM killer"" to kill.  You then see, on your client end, a message about git-pack-objects dying from signal 9 (SIGKILL).(Of course it's possible the server's OOM killer kills something else entirely, such as the bug database server. :-) )It can depends on the protocol, but Documentation/technical/pack-heuristics.txt points out a first difference between clone and fetch.In the other direction, fetch, git-fetch-pack and git-clone-pack invokes git-upload-pack on the other end (via ssh or by talking to the daemon).There are two cases: clone-pack and fetch-pack with -k will keep the downloaded packfile without expanded, so we do not use thin pack transfer.  Otherwise, the generated pack will have delta without base object in the same pack.But fetch-pack without -k will explode the received pack into individual objects, so we automatically ask upload-pack to give us a thin pack if upload-pack supports it.So in term of protocols, Documentation/technical/pack-protocol.txt illustrates that a fetch can return a lot more data than a git clone."
"Try:git clone username@host:/home/shared/g_quoll/repos/itko-ext"
"If you have fixed the conflicts you need to add the files to the stage with git add [filename], then commit as normal.You can use git stash to save the current repository before doing the commit you want to make (after merging the changes from the upstream repo with git stash pop). I had to do this yesterday when I had the same problem.You need to do two things.First add the changes withgit add .git stash  git checkout <some branch>It should solve your issue as it solved to me."
"I had the exact same error; but the ~/.gitconfig global config file was the key.If you have a proxy with authentication you need to put in it:git config --global http.proxy http://login:password@our-proxy-server:8088And it just works (with 'git clone http:')Example of a blog detailing the same setup: GIT clone over HTTP: who knew?If it still fails in 407, it could be related to a problem with git-fetch losing authentication tokens on the second HTTP GET. A more recent version of libcurl might be needed.Update January 2011: jbustamovej mentions in his answer (upvoted) his blog post ""GitHub Behind Corporate Proxy"", which adds this:It‰Ûªs important to note that if your login has a backslash, as in domain\login, you must escape the backslash, as in:git config --global http.proxy http://domain\\\login:password@our-proxy-server:8088Even after configuring the proxy, you might be unable to connect, since the proxy is disallowing git protocol traffic. In this case, you might want to try using ""http"" instead of ""git""H:>git clone  http://github.com/akitaonrails/vimfiles.gitAlso, if you are using an automated proxy config file (.pac), just open it in a text editor. It is quite a easy to following scripting language, with a bunch of conditions to re-direct to the most efficient proxy. Find the one that allows general purpose traffic (typically, the last configured proxy), and configure it as mentioned in the comment above.Do you have SOCKS proxy? If you have, you caould try FreeCap to socksify your git connection. I've been using git this way for a while.If not, still try FreeCap. IIRC it might be able to use http proxies, but I haven't tried that.EDIT:I usualy socksify cmd.exe using FreeCap, and from then on (almost) all cmdline programs that I start from that session are socksified too. That's why I recommended Free Cap, since SocksCap (another alternative) doesn't work that way.As for using http.proxy, it for some reason never worked for me with mingw version and my company http proxies.I've managed to get it working via a very convoluted route. Here's how:I have OpenSSH running on my home machine (a Vista box) running under CygwinI am using Bitvise Tunnelier's Dynamic tunneling via integrated SOCKS/HTTP CONNECT proxy.I then use Freecap (thanks Marko) to ""SOCKify"" GIT-GUI. Unfortunately, you have to setup each .exe individually and run them from within Freecap, so you can't univerally SOCKify all of the git command line tools. You can setup explicit command-line commands within Freecap, but you have to setup each individually, which kind of defeats the purpose. This is why I've just setup GIT-GUI in this crazy elaborate systemAmazingly, it seems to work, although I've not tested everything yet. It'll clone, certainly, which is a start.If anyone has a better solution, I'm all ears.Python 2.7 and ntlmaps worked for me after getting 407 errors and other junk from GitHub. .gitconfig :  [http]      proxy = http://127.0.0.1:5865"
"you have untracked files. Simplygit stash -uto stow them away in the stash and get a clean work tree (-u specifies that you want to stash modifications along with new files). After you pull, merge, rebase or whatever, you cangit stash popto get them back.If you just want to update your local to the origin's state, you could use described here solution:$ git fetch origin$ git reset --hard origin/masterYou need to delete the untracked files. If you want to delete all untracked files, use git clean -fd. Or if you don't want to delete them, use git stash -u to keep it in stash state. To recover from stash state, use git stash pop."
"Tryrm -f ./.git/index.lockIn your repository directory. The error message is rather explicit in what causes it.In windows:command prompt from repo directory:cd .gitdel index.lockTry quitting Xcode - since it's a git client, you have to quit Xcode to avoid problems with git on the command line.I was having the same problem. I triedrm -f ./.git/index.lock and the console gave me an error message. Then, I tried rm -Force ./.git/index.lockand that worked.Good Luck!It just happens that I created the git repository with the root user. I deleted the git repository and created it again without sudo and it works.If you are using one of #intelliJ IDEs and receiving this msg (i'm using #webtorm), please notice that this problem can occur because of hiding one of project folders (inside settings), and this can prevent GITfrom merging."
"make a backup of your repo if you aren't sure about this one, because these commands are irreversible. first, go to your repos directory.cd myrepothen recursively search for the conflicted files and delete themfind . -type f -name ""* conflicted copy*"" -exec rm -f {} \;lastly, remove any ""conflicted"" references from git's packed-refs fileawk '!/conflicted/' .git/packed-refs > temp && mv temp .git/packed-refsThe conflicted file could be in multiple places, I would look into:.git/logs/refs/remotes/origin/.git/logs/refs/heads/.git/refs/remotes/origin/.git/refs/heads/Or you might look everywhere in the .git subdirectory: find . -name '*conflicted*'Or, otherwise, list the active branches with git branch -a and delete (git branch -d) anything suspicious.This also happen to our team when my colleague push his changes and shutdown the PC before Dropbox get updated.I solved it so simply.Just deleted the conflicted copy. (XXXX's conflicted copy yyyy-mm-dd)And pull it normally.Note that my colleague had the changes before messed up. And he push his changes again. This time no shutdown. :)I was able to delete all the conflicted files from my .git folder, but I continued to get errors about files that no longer existed.The fix for me was opening up .git/refs/packed_refs and deleting lines that contained the text ""conflicted""."
"With the help of @EdwardThomson I discovered that Visual Studio Git tools is saving credentials to Credential Manager in Windows.The problem is that it doesn't save it in the Web Credentials category where I was looking for it, but in the Windows Credentials, down in the Generic Credentials group.  This causes problems if you are using multiple private repos with different credentials because you are not prompted again.  You can work around this, if you use the repo url like this: https://username:password@github.com/your_repo_name.This one worked for me if switching users/multiple repositories with different credentials.By default windows stores the passwords in passwords vault, by using credentials manager we can update the passwords of saved password of web and windows applications.Open Credentials Manager > Locate Github account either on windows account or web account and update password.By deleting github details by above steps Visual studio will prompt password when clone or push.Following link can help:an-error-was-raised-by-libgit2-category-net-error.htmlI add a similar problem and I just want to add some more information...atika answer is exact, you should use https://username:password@github.com/your_repository_name.If you need to change the url of the repository after you did some modification, then you can modify the file: ""yourProjectRoot/.git/config"" - propery: ""url"" directly. I closed my solution before I did that modification to my git config file.But I suggest to use userName:password to git url on your initial ""Clone"". It will then be set properly for any other actions.Also, I personally had another problem. I cloned from the master repository instead of my own fork of it. Then I was not able to ""push"" (always got error 403). After I forked from the master (Use fork from the github web interface) then everything was going smoothly (with my user:password into the repository url).I don't think it is necessary but I recommend to specify your details into ""Team Explorer"" view - ""Home"" - ""Settings"" - ""Git Setting"" before doing anything else.Hope it help.I was using embedded Git that come with Visual Studio 2013.I had the same problem. I had logged in with personal credentials, now I was trying on my office credentials.I fixed it by removing the credentials GitHub saves in your local machine.Here are the steps I took:Go to control panel  Top right : Search ""Credentials"" ==> select ""Credential Manager""   Under Generic credentials ==> You should see GitHub ==> click on arrowClick on ""Remove from vault""Try to commit and sync againInsufficient privileges on the git-project (i.e. only read) will also give you this error."
"The URL doesn't have to end with .git, this should work fine.git clone https://github.com/jfeinstein10/SlidingMenuThe real problem is your proxy settings:fatal : unable to access ""https://github.com/jfeinstein10/SlidingMenu' Could not resolve proxy : proxyaddressSince the value of your proxy server is apparently ""proxyaddress"", it looks like a copy & pasted git configuration where you forgot to replace ""proxyaddress"" with the correct address of your proxy server. Either fix that in your ~/.gitconfig or delete the proxy setting completely with:git config --global --unset http.proxy"
"simply put a dot next to itgit clone git@github.com:user/my-project.git .From git help clone:Cloning into an existing directory is only allowed if the directory is empty.So make sure the directory is empty (check with ls -a), otherwise the command will fail.The following is probably not fully equivalent to a clone in all cases but did the trick for me:git init .git remote add -t \* -f origin <repository-url>git checkout masterIn my case, this produces a .git/config file which is equivalent to the one I get when doing a clone.To be sure that you could clone the repo, go to any temporary directory and clone the project there:git clone ssh://user@host.com/home/user/private/repos/project_hub.gitThis will clone your stuff into a project_hub directory.Once the cloning has finished, you could move this directory wherever you want:mv project_hub /path/to/new/locationThis is safe and doesn't require any magical stuff around.git clone your-repo tmp && mv tmp/.git . && rm -rf tmp && git reset --hardSolution:On this case, the solution was using the dot,so: rm -rf .* && git clone ssh://user@host.com/home/user/private/repos/project_hub.git .rm -rf .* && may be omitted if we are absolutely sure that the directory is empty.Credits go to:@James McLaughlin on comments below.@Andrew has answered it clearly here. But as simple as this also works even if the directory is not empty:git init .git remote add origin <repository-url>git pull origin masterIn addition to @StephaneDelcroix's answer, before using:git clone git@github.com.user/my-project.git .make sure that your current dir is empty by usingls -aIf the current directory is empty, then this will work:git clone <repository> foo; mv foo/* foo/.git* .; rmdir fooImproving on @GoZoner's answer:git clone <repository> foo; shopt -s dotglob nullglob; mv foo/* .; rmdir fooThe shopt command is taken from this SO answer and changes the behavior of the 'mv' command on Bash to include dotfiles, which you'll need to include the .git directory and any other hidden files.Also note that this is only guaranteed to work as-is if the current directory (.) is empty, but it will work as long as none of the files in the cloned repo have the same name as files in the current directory. If you don't care what's in the current directory, you can add the -f (force) option to the 'mv' command.I have seen this question so many times - and I just want to point out that git pull from within your directory will do the trick. Unless I'm missing something here - that worked for me."
"This could be a side-effect of the recent incident seen in the BitBucket status history:22:52 UTC We're investigating an issue with the site affecting all users. We'll keep you posted as we know more.  23:23 UTC The problem appears to be a networking issue and we're working to resolve it as soon as possible.That, or your proxy has changed its policies, and now block bitbucket, but not github (but I doubt that.)This error message has been seen when no proxy is defined.If you have registered a public ssh key, you can try if the ssh url work better.ssh://git@bitbucket.org:username/repo.git"
Check if you have other version of mingw32.dll in your computer. You need the correct mingw32.dll on the PATH before other versions.
"The answer should be:we can't create a file named aux.c in windows!See http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx Do not use the following reserved device names for the name of a file:CON, PRN, AUX, NUL, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9. Also avoid these names followed immediately by an extension; for example, NUL.txt is not recommended. For more information, see Namespaces.Was your directory plus your filenames too long for Windows? I came across this problem once, and it was fixed when I tried cloning into a lower directory.A common problem is two files whose names differ only by case ‰ÛÓ git assumes a case sensitive system. If the repository contains both FOO and foo, then attempting to create one after the other will fail.Maybe related to http://stackoverflow.com/questions/1209902/git-checkout-and-reset-on-windows-occasionally-shows-random-files-have-changed"
"It seems like you want the files ignored but they have already been commited. .gitignore has no effect on files that are already in the repo so they need to be removed with git rm --cached. The --cached will prevent it from having any effect on your working copy and it will just mark as removed the next time you commit. After the files are removed from the repo then the .gitignore will prevent them from being added again.But you have another problem with your .gitignore, you are excessively using wildcards and its causing it to match less than you expect it to. Instead lets change the .gitignore and try this..bundle.DS_Storedb/*.sqlite3log/*.logtmp/public/system/images/public/system/avatars/WARNING: it will delete untracked files, so it's not a great answer to the question being posed. I hit this message as well. In my case, I didn't want to keep the files, so this worked for me:git clean  -d  -fx """"http://www.kernel.org/pub/software/scm/git/docs/git-clean.html-x means ignored files are also removed as well as files unknown to git.-d means remove untracked directories in addition to untracked files. -f is required to force it to run.Just force it : git checkout -f another-branchIf you're on OS X, it may be because a file's name has had certain characters change case. Try setting the following config option:git config core.ignorecase trueGit is telling you that it wants to create files (named public/system/images/9/... etc), but you already have existing files in that directory that aren't tracked by Git. Perhaps somebody else added those files to the Git repository, and this is the first time you have switched to that branch?There's probably a reason why those files in your develop branch but not in your current branch. You may have to ask your collaborators why that is.how do I get this working so I can switch branches without deleting those files?You can't do it without making the files disappear somehow. You could rename public to my_public or something for now.if I came back to this branch afterwards would everything be perfect as up to my latest commit?If you commit your changes, Git won't lose them. If you don't commit your changes, then Git will try really hard not to overwrite work that you have done. That's what Git is warning you about in the first instance here (when you tried to switch branches).Unfortunately neither git rm --cached or git clean  -d  -fx """" did it for me.My solution ended up being pushing my branch to remote, cloning a new repo, then doing my merge in the new repo. Other people accessing the repo had to do the same.Moral of the story: use a .gitignore file from inception.This happened to me on a Windows 8 system, using Git from the command prompt.  The rest of my team uses TFS, and I use Microsoft's git-tf to push/pull between TFS and my local Git repository.The problem arose due to some files that had been renamed only to change their case.  What appears to have happened was this:The files were checked in with mixed casing in their names.In a later commit, the file names were changed to all lower-case.git-tf initially got the files in mixed case.When the files were renamed to lower-case, git-tf didn't get the files because to Windows 8 those file names are equivalent.Since Git is case-sensitive, it complained that I had the mixed-case files that weren't in source control.  But using git status, I couldn't see any changes, since in the command prompt those file names are equivalent.The simplest solution for me was:git checkout a previous version of the project, well before those files were ever added.Then git checkout the latest version of the project, with the correct file casing.In my case git rm --cached didn't work.But i got it with a git rebaseI had the same problem when checking out to a branch based on an earlier commit. Git refused to checkout because of untracked files.I've found a solution and I hope it will help you too.Adding the affected directories to .gitignore and issuing $ git rm -r --cached on them is apparently not enough. Assume you want to make a branch based an earlier commit K to test some stuff and come back to the current version. I would do it in the following steps:Setup the untracked files: edit the .gitignore and apply $ git rm -r --cached on the files and directories you want the git to ignore. Add also the file .gitignore itself to .gitignoreand don't forget to issue $ git rm -r --cached .gitignore. This will ensure the the ignore behavior of git leaves the same in the earlier commits.Commit the changes you just made:$ git add -A$ git commitSave the current log, otherwise you may get problems coming back to the current version$ git log > ../git.logHard reset to the commit K $ git reset --hard version_kCreate a branch based on the commit K$ git branch commit_k_branchCheckout into that branch$ git checkout commit_k_branch Do your stuff and commit itCheckout back into master again$ git checkout masterReset to the current Version again$ git reset current_version or $ git reset ORIG_HEADNow you can reset hard to the HEADgit reset --hard HEADNOTE!Do not skip the next-to-last step (like e. g. $ git reset --hard ORIG_HEAD) otherwise the untracked files git complained above will get lost.I also made sure the files git complained about were not deleted. I copied them to a text-file and issued the command $ for i in $(cat ../test.txt); do ls -ahl $i; doneIf you checkout to the branch mentioned above again, do not forget to issue $ git status to ensure no unwanted changes appear.I was also facing a similar issue and i tried all the solutions posted above but it didn't workThe issue was caused when i renamed my onMusicUpdateListener.java to OnMusicUpdateListener.java in develop branch. Now master had onMusicUpdateListener.javaand develop had the same file as OnMusicUpdateListener.javaNow whenever i switched to master it gave me an errorThe following untracked working tree files would be overwritten by checkoutand then it aborted.In order to solve this, i forcefully checked out master branchand then renamed my onMusicUpdateListener.java to OnMusicUpdateListener.java, committed it and then merged it with develop branch.Then i updated my develop branch by merging it into master and now everything is back to normal and problem is solved.This could be a permission issue,change the ownership,sudo chown -v -R usr-name:group-name folder-name"
"Repair PermissionsAfter you have identified and fixed the underlying cause (see below), you'll want to repair the permissions:cd /path/to/repo.gitchgrp -R groupname .chmod -R g+rwX .find . -type d -exec chmod g+s '{}' +If you do not fix the underlying cause, the error will keep coming back and you'll have to keep re-running the above commands over and over again.Underlying CausesThe error could be caused by one of the following:The repository isn't configured to be a shared repository (see core.sharedRepository in git help config).  If the output of:git config core.sharedRepositoryis not group or true or 1 or some mask, try running:git config core.sharedRepository groupand then re-run the recursive chmod and chgrp (see ""Repair Permissions"" above).The operating system doesn't interpret a setgid bit on directories as ""all new files and subdirectories should inherit the group owner"".When core.sharedRepository is true or group, Git relies on a feature of GNU operating systems (e.g., every Linux distribution) to ensure that newly created subdirectories are owned by the correct group (the group that all of the repository's users are in).  This feature is documented in the GNU coreutils documentation:... [If] a directory's set-group-ID bit is set, newly created subfiles inherit the same group as the directory, and newly created subdirectories inherit the set-group-ID bit of the parent directory. ... [This mechanism lets] users share files more easily, by lessening the need to use chmod or chown to share new files.However, not all operating systems have this feature (NetBSD is one example).  For those operating systems, you should make sure that all of your Git users have the same default group.  Alternatively, you can make the repository world-writable by running git config core.sharedRepository world (but be careful‰ÛÓthis is less secure).The file system doesn't support the setgid bit (e.g., FAT).  ext2, ext3, ext4 all support the setgid bit.  As far as I know, the file systems that don't support the setgid bit also don't support the concept of group ownership so all files and directories will be owned by the same group anyway (which group is a mount option).  In this case, make sure all Git users are in the group that owns all the files in the file system.Not all of the Git users are in the same group that owns the repository directories.  Make sure the group owner on the directories is correct and that all users are in that group.For Ubuntu (or any Linux)From project root,cd .git/objectsls -alsudo chown -R yourname:yourgroup *You can tell what yourname and yourgroup should be by looking at the permissions on the majority of the output from that ls -al commandNote: remember the star at the end of the sudo lineA good way to debug this is the next time it happens, SSH into the remote repo, cd into the objects folder and do an ls -al.If you see 2-3 files with different user:group ownership than this is the problem.It's happened to me in the past with some legacy scripts access our git repo and usually means a different (unix) user pushed / modified files last and your user doesn't have permissions to overwrite those files. You should create a shared git group that all git-enabled users are in and then recursively chgrp the objects folder and it's contents so that it's group ownership is the shared git group. You should also add a sticky bit on the folder so that all the files created in the folder will always have the group of git.chmod g+s directory-nameUpdate: I didn't know about core.sharedRepository. Good to know, though it probably just does the above.I just wanted to add my solution. I had a repo on OS X that had ownership of root on some directories and Home (which is my user directory) on others which caused the same error listed above.The solution was simple thankfully. From terminal:sudo chown -R Home projectdirectoryThis can easily happen if you ran git init with a different user from the one you are planning to use when pushing changes.If you blindly follow the instructions on [1] this will happen as you probably created the git-user as root and then immediately moved on to git init without changing user in between.[1] http://git-scm.com/book/en/Git-on-the-Server-Setting-Up-the-ServerSolved for me...just this:sudo chmod 777 -R .git/objectssudo chmod -R ug+w .;This has fixed the issue for me. Basically .git/objects file does not had a write permission, the above line grants permission to all the files and folders in the directory.After you add some stuff... commit them and after all finished push it! BANG!! Start all problems... As you should notice there are some differences in the way both new and existent projects were defined. If some other person tries to add/commit/push same files, or content (git keep both as same objects), we will face the following error:$ git pushCounting objects: 31, done.Delta compression using up to 2 threads.Compressing objects: 100% (17/17), done.Writing objects: 100% (21/21), 2.07 KiB | 0 bytes/s, done.Total 21 (delta 12), reused 0 (delta 0)remote: error: insufficient permission for adding an object to repository database ./objects  remote: fatal: failed to write objectTo solve this problem you have to have something in mind operational system's permissions system as you are restricted by it in this case. Tu understand better the problem, go ahead and check your git object's folder (.git/objects). You will probably see something like that:<your user_name>@<the machine name> objects]$ ls -latotal 200drwxr-xr-x 25 <your user_name> <group_name> 2048 Feb 10 09:28 .drwxr-xr-x  3 <his user_name> <group_name> 1024 Feb  3 15:06 ..drwxr-xr-x  2 <his user_name> <group_name> 1024 Jan 31 13:39 02drwxr-xr-x  2 <his user_name> <group_name> 1024 Feb  3 13:24 08*Note that those file's permissions were granted only for your users, no one will never can changed it... *Level       u   g   oPermission rwx r-x ---Binary     111 101 000Octal       7   5   0SOLVING THE PROBLEMIf you have super user permission, you can go forward and change all permissions by yourself using the step two, in any-other case you will need to ask all users with objects created with their users, use the following command to know who they are:$ ls -la | awk '{print $3}' | sort -u <your user_name><his user_name>Now you and all file's owner users will have to change those files permission, doing:$ chmod -R 774 .After that you will need to add a new property that is equivalent to --shared=group done for the new repository, according to the documentation, this make the repository group-writable, do it executing:$ git config core.sharedRepository grouphttps://coderwall.com/p/8b3ksgFor my case none of the suggestions worked. I'm on Windows and this worked for me:Copy the remote repo into another folderShare the folder and give appropriate permissions.Make sure you can access the folder from your local machine. Add this repo as another remote repo in your local repo. (git remote add foo //SERVERNAME/path/to/copied/git)Push to foo. git push foo master. Did it worked? Great! Now delete not-working repo and rename this into whatever it was before. Make sure permissions and share property remains the same."
"You've lost your HEAD so you'll need to recreate it. The simplest thing to do is this.echo ref: refs/heads/master >.git/HEADNow you should be able to run other git commands and see where you're at.(Although, in theory, you could attempt to do git symbolic-ref HEAD refs/heads/master newer git versions don't recognize a .git as a git repository unless it already contains a HEAD so this won't work to create a new one.)HEAD is usually a reference to a particular branch; in your case, it seems the branch pointers have gone missing, so the HEAD reference cannot be resolved.You can use git fsck --lost-found to scan the object cache for unreachable objects; specifically, you are interested in commits, which can then be found below .git/lost-found/commit/; these are pointers to your branches, all you need to do then is find out which is which, and create new references using git branch.I think this answer maybe helpful for someone.I resolved this problem nearly.First what I did was, like Charles Bailey wrote, use echo ref: refs/heads/master >.git/HEADThen my branch changed to master. I commited changes and was able to switch to my main branch. The problem was that I wasn`t able to use any of my local branches. Especially I wanted to work on branch 812. So I found last commit to branch 812 (create message when commit is very helpful ;)) and switched to it. Next I created branch 812 based on the one I switched to. Unfortunately some files were missing. Luckily I had them on the broken repo which I copied before 'echo'For me the problem was that on Mac OS X either the 'uchg' or 'uappnd' flag was set, locking some git files regardless of the perms.  I reset the chflags like this and it solved it for me:sudo chflags -R 0000 ."
"Had identical issue with Msysgit v1.7.2.3, the latest version as at 29 Sep 10, and wanted to share my findings here (Google turns up several cases, but no solutions). Trying to do ""git svn rebase"" on a repo (that has this has worked on plenty of times in the past) consistently failed with a ""fatal: write error: Invalid argument"" after a certain number of commits. The sync would then revert to the beginning again.I believe this is a bug in Msysgit relating to large(ish) binaries and available memory (on a Win XP SP3 system with 4GB RAM and plenty free HD space). The remote system was the DotNetNuke SVN repo on CodePlex (https://dotnetnuke.svn.codeplex.com/svn).Initially it was choking on a 330KB ""CHM"" file (~212th commit, r52261). It consistently did so, even after disabling Avast AV, Google Desktop, etc and verifying that there were no other processes with locks on the repo folder. After a reboot (but opening Outlook, Dreamweaver, etc), it then was consistently and repeatedly failing on a ~15.3MB DLL (~416th commit, same revision).Finally, after another reboot, disabling Avast, Carbonite and Google Desktop and running no other programs, the sync worked first time. This seems to point firmly to my conclusion that it was an available memory issue, probably linked to the presence of a largish binary and large number of commits in the revision. Note that I also tried ""git fsck"", ""git svn reset xx"" and tweaking the ""packSizeLimit"" / ""usedeltabaseoffset"" config vars, without success.Chad - it could be that you had the same issue and it was the reboot that helped, rather than the upgrade.I had simmilar problem, when I tried to fetch big remote repo.I tried several times from start, and all time get that error in approximatly same revision ~400 (or maybe exactly same - I didn't pay much attention).Googling didn't give answer.Than I take my shaman drum, and tried to kill TSVNCache.exe and TGitCache.exe processes. After that, I didn't see that error message. I re-sumed fetching process several times due to internet interruption - all was ok (total revisions ~3000), look like problem is gone.My guess is that one of that processes lock some file, that used by git also.NOTE: if you kill that processes and than start Explorer, they will be launched again.The original version I was using when I ran into this error was:TortoiseGit-1.0.2.0-32bit.msiSince checking out the GIT source code and also msysGit Source code from their Git repository I could not find any location of this error message.I then updated to the following TortoiseGit version:TortoiseGit-1.2.1.0-32bit.msiThen I ran exactly the same git command on the remote repository and it worked. So linking back to previous experiences with GIT and windows I conclude the following procedures if anyone in future has problems.1) Check for updates, and update to the latest version before debugging2) Trying to debug in an older version is not going to help, the problem could of been fixed in an new version.Link to my previous experience on this matter:LinkKilling TGitCache worked for me. I hate to say TortoiseGit is really not where TortoiseSVN is... too bad.If you rule out the obvious cause (no disk space left!), it could be linked to a layout issue with the remote SVN repository (branches not in the branch sub-directory, tags not in tag, ...).See Using git-svn with non-standard repository layouts for an example of such a SVN repo.Other case asking for trouble: a SVN repo which has changed its layout since the last importAlso see mmap issues in Windows."
"try to do the following (starting from your local folder, considering it is a git repo and has commits in current HEAD):git remote add origin w:/gitCentralgit fetch origingit push origin mastercd C:/testDeploymentgit clone w:/gitCentral"
"Rungit remote -vand check whether your origin's URL has your co-worker's username hardcoded in there. If so, substitute it with your own:git remote set-url origin <url-with-your-username>I figured I should share my solution, since I wasn't able to find it anywhere, and only figured it out through trial and error.I indeed was able to transfer ownership of the repository to a team on BitBucket.Don't add the remote URL that BitBuckets suggests:git remote add origin https://username@bitbucket.org/teamName/repo.gitInstead, add the remote URL without your username:git remote add origin https://bitbucket.org/teamName/repo.gitThis way, when you go to pull from or push to a repo, it prompts you for your username, then for your password: everyone on the team has access to it under their own credentials.  This approach only works with teams on BitBucket, even though you can manage user permissions on single-owner repos.The prompt:Password for 'https://theirusername@bitbucket.org':suggests, that you are using https not ssh. SSH urls start with git@, for example:git@bitbucket.org:beginninggit/alias.gitEven if you work alone, with a single repo that you own, the operation:git pushwill cause:Password for 'https://theirusername@bitbucket.org':if the remote origin starts with https.Check your remote with:git remote -vThe remote depends on git clone. If you want to use ssh clone the repo using its ssh url, for example:git clone git@bitbucket.org:user/repo.gitI suggest you to start with git push and git pull for your private repo.If that works, you have two joices suggested by Lazy Badger:Pull requestsTeam workAre you sure you aren't pushing over SSH? Maybe check the email associated with your SSH key in bitbucket if you have one.Well, it's part of BitBucket philosophy and workflow:Repository may have only one user: ownerFor ordinary accounts (end-user's) collaboration expect ""fork-pull request"" workflowi.e you can't (in usual case) commit into foreign repo under own credentials.You have two possible solutions:""Classic"" BB-way: fork repo (get owned by you repository), make changes, send pull request to origin repoCreate ""Team"", add user-accounts as members of team, make Team owner of repository - it this case for this ""Shared central"" repository every team memeber can push under own credentials - inspect thg repository and TortoiseHg Team, owner of this repository, as samples"
"In some previous backups, your bad objects may have been packed in different files or may be loose objects yet. So your objects may be recovered.It seems there are a few bad objects in your database. So you could do it the manual way.Because of git hash-object, git mktree and git commit-tree do not write the objects because they are found in the pack, then start doing this:mv .git/objects/pack/* <somewhere>for i in <somewhere>/*.pack; do  git unpack-objects -r < $idonerm <somewhere>/*(Your packs are moved out from the repository, and unpacked again in it; only the good objects are now in the database)You can do:git cat-file -t 6c8cae4994b5ec7891ccb1527d30634997a978eeand check the type of the object.If the type is blob: retrieve the contents of the file from previous backups (with git show or git cat-file or git unpack-file; then you may git hash-object -w to rewrite the object in your current repository.If the type is tree: you could use git ls-tree to recover the tree from previous backups; then git mktree to write it again in your current repository.If the type is commit: the same with git show, git cat-file and git commit-tree.Of course, I would backup your original working copy before starting this process.Also, take a look at How to Recover Corrupted Blob Object.Banengusk was putting me on the right track. For further reference, I want to post the steps I took to fix my repository corruption. I was lucky enough to find all needed objects either in older packs or in repository backups.# Unpack last non-corrupted pack$ mv .git/objects/pack .git/objects/pack.old$ git unpack-objects -r < .git/objects/pack.old/pack-012066c998b2d171913aeb5bf0719fd4655fa7d0.pack$ git logfatal: bad object HEAD$ cat .git/HEAD ref: refs/heads/master$ ls .git/refs/heads/$ cat .git/packed-refs # pack-refs with: peeled aa268a069add6d71e162c4e2455c1b690079c8c1 refs/heads/master$ git fsck --full error: HEAD: invalid sha1 pointer aa268a069add6d71e162c4e2455c1b690079c8c1error: refs/heads/master does not point to a valid object!missing blob 75405ef0e6f66e48c1ff836786ff110efa33a919missing blob 27c4611ffbc3c32712a395910a96052a3de67c9bdangling tree 30473f109d87f4bcde612a2b9a204c3e322cb0dc# Copy HEAD object from backup of repository$ cp repobackup/.git/objects/aa/268a069add6d71e162c4e2455c1b690079c8c1 .git/objects/aa# Now copy all missing objects from backup of repository and run ""git fsck --full"" afterwards# Repeat until git fsck --full only reports dangling objects# Now garbage collect repo$ git gcwarning: reflog of 'HEAD' references pruned commitswarning: reflog of 'refs/heads/master' references pruned commitsCounting objects: 3992, done.Delta compression using 2 threads.fatal: object bf1c4953c0ea4a045bf0975a916b53d247e7ca94 inconsistent object length (6093 vs 415232)error: failed to run repack# Check reflogs...$ git reflog# ...then clean$ git reflog expire --expire=0 --all# Now garbage collect again$ git gc       Counting objects: 3992, done.Delta compression using 2 threads.Compressing objects: 100% (3970/3970), done.Writing objects: 100% (3992/3992), done.Total 3992 (delta 2060), reused 0 (delta 0)Removing duplicate objects: 100% (256/256), done.# Done!Try the following commands at first (re-run again if needed):$ git fsck --full$ git gc$ git gc --prune=today$ git fetch --all$ git pull --rebaseAnd then you you still have the problems, try can:remove all the corrupt objects, e.g.fatal: loose object 91c5...51e5 (stored in .git/objects/06/91c5...51e5) is corrupt$ rm -v .git/objects/06/91c5...51e5remove all the empty objects, e.g.error: object file .git/objects/06/91c5...51e5 is empty$ find .git/objects/ -size 0 -exec rm -vf ""{}"" \;check a ""broken link"" message by:git ls-tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8This will tells you what file the corrupt blob came from!to recover file, you might be really lucky, and it may be the version that you already have checked out in your working tree:git hash-object -w my-magic-fileagain, and if it outputs the missing SHA1 (4b945..) you're now all done!assuming that it was some older version that was broken, the easiest way to do it is to do:git log --raw --all --full-history -- subdirectory/my-magic-fileand that will show you the whole log for that file (please realize that the tree you had may not be the top-level tree, so you need to figure out which subdirectory it was in on your own), then you can now recreate the missing object with hash-object again.to get a list of all refs with missing commits, trees or blobs:$ git for-each-ref --format='%(refname)' | while read ref; do git rev-list --objects $ref >/dev/null || echo ""in $ref""; doneIt may not be possible to remove some of those refs using the regular branch -d or tag -d commands, since they will die if git notices the corruption. So use the plumbing command git update-ref -d $ref instead. Note that in case of local branches, this command may leave stale branch configuration behind in .git/config. It can be deleted manually (look for the [branch ""$ref""] section).After all refs are clean, there may still be broken commits in the reflog. You can clear all reflogs using git reflog expire --expire=now --all. If you do not want to lose all of your reflogs, you can search the individual refs for broken reflogs:$ (echo HEAD; git for-each-ref --format='%(refname)') | while read ref; do git rev-list -g --objects $ref >/dev/null || echo ""in $ref""; done(Note the added -g option to git rev-list.) Then, use git reflog expire --expire=now $ref on each of those.When all broken refs and reflogs are gone, run git fsck --full in order to check that the repository is clean. Dangling objects are Ok.Below you can find advanced usage of commands which potentially can cause lost of your data in your git repository if not used wisely, so make a backup before you accidentally do further damages to your git. Try on your own risk if you know what you're doing.To pull the current branch on top of the upstream branch after fetching:$ git pull --rebaseYou also may try to checkout new branch and delete the old one:$ git checkout -b new_master origin/masterTo find the corrupted object in git for removal, try the following command:while [ true ]; do f=`git fsck --full 2>&1|awk '{print $3}'|sed -r 's/(^..)(.*)/objects\/\1\/\2/'`; if [ ! -f ""$f"" ]; then break; fi; echo delete $f; rm -f ""$f""; doneFor OSX, use sed -E instead of sed -r.Other idea is to unpack all objects from pack files to regenerate all objects inside .git/objects, so try to run the following commands within your repository:$ cp -fr .git/objects/pack .git/objects/pack.bak$ for i in .git/objects/pack.bak/*.pack; do git unpack-objects -r < $i; done$ rm -frv .git/objects/pack.bakIf above doesn't help, you may try to rsync or copy the git objects from another repo, e.g.$ rsync -varu git_server:/path/to/git/.git local_git_repo/$ rsync -varu /local/path/to/other-working/git/.git local_git_repo/$ cp -frv ../other_repo/.git/objects .git/objectsTo fix the broken branch when trying to checkout as follows:$ git checkout -f masterfatal: unable to read tree 5ace24d474a9535ddd5e6a6c6a1ef480aecf2625Try to remove it and checkout from upstream again:$ git branch -D master$ git checkout -b master github/masterIn case if git get you into detached state, checkout the master and merge into it the detached branch.Another idea is to rebase the existing master recursively:$ git reset HEAD --hard$ git rebase -s recursive -X theirs origin/masterSee also:Some tricks to reconstruct blob objects in order to fix a corrupted repository.How to fix a broken repository?How to remove all broken refs from a repository?How to fix corrupted git repository? (seeques)How to fix corrupted git repository? (qnundrum)Error when using SourceTree with Git: 'Summary' failed with code 128: fatal: unable to read treeRecover A Corrupt Git Bare RepositoryRecovering a damaged git repositoryHow to fix git error: object is empy / corruptHow to diagnose and fix git fatal: unable to read treeHow to deal with this git errorHow to fix corrupted git repository?GIT: How to 'overwrite', rather than 'merge', a branch on another branchHow to replace master branch in git, entirely, from another branch?Git: ""Corrupt loose object""Git reset = fatal: unable to read treeGit checkout can actually pick out individual files from a revision. Just give it the commit hash and the file name. More detailed info here.I guess the easiest way to fix this safely is to revert to the newest uncommited backup and then selectively pick out uncorrupted files from newer commits. Good luck!Here are the steps I followed to recover from a corrupt blob object.1) Identify corrupt blobgit fsck --full  error: inflate: data stream error (incorrect data check)  error: sha1 mismatch 241091723c324aed77b2d35f97a05e856b319efd  error: 241091723c324aed77b2d35f97a05e856b319efd: object corrupt or missing  ...Corrupt blob is 241091723c324aed77b2d35f97a05e856b319efd2) Move corrupt blob to a safe place (just in case)mv .git/objects/24/1091723c324aed77b2d35f97a05e856b319efd ../24/3) Get parent of corrupt blobgit fsck --full  Checking object directories: 100% (256/256), done.  Checking objects: 100% (70321/70321), done.  broken link from    tree 0716831e1a6c8d3e6b2b541d21c4748cc0ce7180              to    blob 241091723c324aed77b2d35f97a05e856b319efdParent hash is 0716831e1a6c8d3e6b2b541d21c4748cc0ce7180.4) Get file name corresponding to corrupt blobgit ls-tree 0716831e1a6c8d3e6b2b541d21c4748cc0ce7180  ...  100644 blob 241091723c324aed77b2d35f97a05e856b319efd    dump.tar.gz  ...Find this particular file in a backup or in the upstream git repository (in my case it is dump.tar.gz). Then copy it somewhere inside your local repository. 5) Add previously corrupted file in the git object databasegit hash-object -w dump.tar.gz6) Celebrate!git gc  Counting objects: 75197, done.  Compressing objects: 100% (21805/21805), done.  Writing objects: 100% (75197/75197), done.  Total 75197 (delta 52999), reused 69857 (delta 49296)"
"The general idea behind ""Entry 'filename' not uptodate. Cannot merge."" is:You have changes to files in your working directory that will be overwritten, removed or otherwise lost if the checkout and change to the new branch were to proceed.It has been reported that this message could be ""spurious"" at time, (potentially because ""git pull"" did not refresh the index before trying to merge) but the fix was in Git1.6.1.However, it may still be in mSysGit 1.6.1, so do you see the same error with a more recent mSysGit version ? (like 1.6.3)"
"I think this is caused by an incorrect initialization. From the resource beneath, it seems the remote of your branch is not set (i.e. at the initialization, you did not call setRemote(your_remote) on your Repository/Git object).If this does not work, look for the targetted commit, maybe there is none (for instance if the repository is just created).You will find a more precise answer on this page:http://www.kernel.org/pub/software/scm/git/docs/v1.7.3/git-config.htmlSearch for branch.<name>.merge on this page.I hope it'll help youI had this error today, and it was caused by the fact that the first clone was done into a bare repository. if the clone was done into a repository that had already a commit, the .Pull worked fine (I'm using NGit)You just need to set the value for this configuration.StoredConfig config = git.getRepository().getConfig();config.setString(""remote"", ""origin"", ""fetch"", ""+refs/*:refs/*"");config.save();"
"Use git reflog to see what your HEAD pointed to before you screwed it up.You should see something like:48ab8d HEAD@{0}: pull: Fast-forwarda34bda HEAD@{5}: commit: my last commit messageNow, point your master branch back at the commit before the bad pull:git reset --hard a34bdaDone.  Like it never happened.I can't totally understand your history from your question, but in general, if you make two merges (a pull is a merge), it is completely straightforward to remove one of them.- o - o - o - A - M1 - M2 (master)                 /    /      - o - o - o    /   (origin/lounge)                    /             - o - o (origin/master)The most obvious way: git checkout master git reset --hard A git merge origin/masterThis uses your locally cached version of origin's master, if you want to merge whatever's out there now, use git pull origin master."
"I don't know why this happens with Homebrew when you don't do anything to mess with it, but here's how I fixed it:Change to your Homebrew cellar directory cd `brew --cellar`Reset git repository git reset --hard HEADUpgrade pianobar, at last! brew upgrade pianobarFYI, brew update will update Homebrew to the latest version, so you may want to do that before step 3.As @Felix said, use upgrade not update.If the problem comes from your dirty git tree and you just want to forget about your modifications, type git reset --hard HEAD before upgrading."
"Git is somewhat memory intensive for certain operations, trading memory usage to get improved disk or network performance. (See for example some discussion on this other SO question.)In this case, I think you and your colleagues are effectively doing a different cost trade-off: you are trading off using a professionally managed Git hosting service (such as GitHub or BitBucket) for either perceived financial savings or some other convenience (perhaps deployment?).My recommendation, if you are not comfortable following the kinds of recommendations on the wiki/blog-post that you've cited, is to move to GitHub or Bitbucket. (I think those posts offer technically accurate solutions, FWIW.)  Bitbucket offers free unlimited private repositories so there's no real cost reason to use Dreamhost for your Git hosting.If you need some sort of deployment solution to go along with the hosting, you can engineer something that takes pushes and automatically updates just the working directory to Dreamhost for hosting, without incurring the full cost of hosting a Git repository (and all of your history) on Dreamhost.If you're using the Dreamhost server to keep bare repositories you can add and commit locally and then rsync your .git directory up to DH.  After it finishes go into the server's [repository name].git/config and change core.bare from false to true. Not sure exactly what you'd do if you want work trees on the server, it hasn't come up for me."
"Assuming the submodule's repository does contain a commit you want to use (unlike the commit that is referenced from current state of the super-project), there are two ways to do it.The first requires you to already know the commit from the submodule that you want to use. It works from the ‰ÛÏinside, out‰Ûù by directly adjusting the submodule then updating the super-project. The second works from the ‰ÛÏoutside, in‰Ûù by finding the super-project's commit that modified the submodule and then reseting the super-project's index to refer to a different submodule commit.Inside, OutIf you already know which commit you want the submodule to use, cd to the submodule, check out the commit you want, then git add and git commit it back in the super-project.Example:$ git submodule updatefatal: reference is not a tree: e47c0a16d5909d8cb3db47c81896b8b885ae1556Unable to checkout 'e47c0a16d5909d8cb3db47c81896b8b885ae1556' in submodule path 'sub'Oops, someone made a super-project commit that refers to an unpublished commit in the submodule sub. Somehow, we already know that we want the submodule to be at commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6c. Go there and check it out directly.Checkout in the Submodule$ cd sub$ git checkout 5d5a3ee314476701a20f2c6ec4a53f88d651df6cNote: moving to '5d5a3ee314476701a20f2c6ec4a53f88d651df6c' which isn't a local branchIf you want to create a new branch from this checkout, you may do so(now or later) by using -b with the checkout command again. Example:  git checkout -b <new_branch_name>HEAD is now at 5d5a3ee... quux$ cd ..Since we are checking out a commit, this produces a detached HEAD in the submodule. If you want to make sure that the submodule is using a branch, then use git checkout -b newbranch <commit> to create and checkout a branch at the commit or checkout the branch that you want (e.g. one with the desired commit at the tip).Update the Super-projectA checkout in the submodule is reflected in the super-project as a change to the working tree. So we need to stage the change in the super-project's index and verify the results.$ git add subCheck the Results$ git submodule update$ git diff$ git diff --cacheddiff --git c/sub i/subindex e47c0a1..5d5a3ee 160000--- c/sub+++ i/sub@@ -1 +1 @@-Subproject commit e47c0a16d5909d8cb3db47c81896b8b885ae1556+Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6cThe submodule update was silent because the submodule is already at the specified commit. The first diff shows that the index and worktree are the same. The third diff shows that the only staged change is moving the sub submodule to a different commit.Commitgit commitThis commits the fixed-up submodule entry.Outside, InIf you are not sure which commit you should use from the submodule, you can look at the history in the superproject to guide you. You can also manage the reset directly from the super-project.$ git submodule updatefatal: reference is not a tree: e47c0a16d5909d8cb3db47c81896b8b885ae1556Unable to checkout 'e47c0a16d5909d8cb3db47c81896b8b885ae1556' in submodule path 'sub'This is the same situation as above. But this time we will focus on fixing it from the super-project instead of dipping into the submodule.Find the Super-project's Errant Commit$ git log --oneline -p -- subce5d37c local change in subdiff --git a/sub b/subindex 5d5a3ee..e47c0a1 160000--- a/sub+++ b/sub@@ -1 +1 @@-Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6c+Subproject commit e47c0a16d5909d8cb3db47c81896b8b885ae1556bca4663 added subdiff --git a/sub b/subnew file mode 160000index 0000000..5d5a3ee--- /dev/null+++ b/sub@@ -0,0 +1 @@+Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6cOK, it looks like it went bad in ce5d37c, so we will restore the submodule from its parent (ce5d37c~).Alternatively, you can take the submodule's commit from the patch text (5d5a3ee314476701a20f2c6ec4a53f88d651df6c) and use the above ‰ÛÏinside, out‰Ûù process instead.Checkout in the Super-project$ git checkout ce5d37c~ -- subThis reset the submodule entry for sub to what it was at commit ce5d37c~ in the super-project.Update the Submodule$ git submodule updateSubmodule path 'sub': checked out '5d5a3ee314476701a20f2c6ec4a53f88d651df6c'The submodule update went OK (it indicates a detached HEAD).Check the Results$ git diff ce5d37c~ -- sub$ git diff$ git diff --cacheddiff --git c/sub i/subindex e47c0a1..5d5a3ee 160000--- c/sub+++ i/sub@@ -1 +1 @@-Subproject commit e47c0a16d5909d8cb3db47c81896b8b885ae1556+Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6cThe first diff shows that sub is now the same in ce5d37c~. The second diff shows that the index and worktree are the same. The third diff shows the only staged change is moving the sub submodule to a different commit.Commitgit commitThis commits the fixed-up submodule entry.try this:git submodule syncgit submodule updateThis error can mean that a commit is missing in the submodule.  That is, the repository (A) has a submodule (B).  A wants to load B so that it is pointing to a certain commit (in B).  If that commit is somehow missing, you'll get that error.  Once possible cause: the reference to the commit was pushed in A, but the actual commit was not pushed from B.  So I'd start there.Less likely, there's a permissions problem, and the commit cannot be pulled (possible if you're using git+ssh).Make sure the submodule paths look ok in .git/config and .gitmodules.One last thing to try - inside the submodule directory: git reset HEAD --hardThis may also happen when you have a submodule pointing to a repository that was rebased and the given commit is ""gone"". While the commit may still be in the remote repository, it is not in a branch. If you can't create a new branch (e.g. not your repository), you're stuck with having to update the super project to point to a new commit. Alternatively you can push one of your copies of the submodules elsewhere and then update the super-project to point to that repository instead.I got this error when I did:$ git submodule update --init --depth 1but the commit in the parent project was pointing at an earlier commit.Deleting the submodule folder and running$ git submodule update --initdid NOT solve the problem. I deleted the repo and tried again without the depth flag and it worked.Possible causeThis can happens when: Submodule(s) have been edited in placeSubmodule(s) committed, which updating the hash of the submodule being pointed toSubmodule(s) not pushed.e.g. something like this happened:$ cd submodule$ emacs my_source_file  # edit some file(s)$ git commit -am ""Making some changes but will forget to push!""Should have submodule pushed at this point.$ cd .. # back to parent repository$ git commit -am ""updates to parent repository""$ git push origin masterAs a result, the missing commits could not possibly be found by the remote user because they are still on the local disk.SolutionInforma the person who modified the submodule to push, i.e.$ cd submodule$ git pushJust to be sure, try updating your git binaries.GitHub for Windows has the version git version 1.8.4.msysgit.0 which in my case was the problem. Updating solved it."
"On this GitHub support thread, this kind of error seems to be related to a repository corruption of some kind.The issue was fixed by resetting the head of the corrupt remote repo (with git remote set-head).In your hook, you never read from stdin. So probably the solution of this question works for you, too: Error in sideband demultiplexer with a git post-receive hookI get this error when git is prevented from MMAPing memory (due to a limit on the process).On 64-bit architecture, git will attempt to mmap 1G of memory, which is surprisingly large and may cause issues if you're using ulimit (or chpst / softlimit) to control processes.Removing the memory limit fixes things (for me).i had the same issue.and for me, it was because of my post-receive python script.if there is any error in my python script, then i get always the error message:fatal: The remote end hung up unexpectedly  error: error in sideband demultiplexer"
"When you see this error outside of github, here's a remedy.Got this from:http://mapopa.blogspot.com/2009/10/git-insufficient-permission-for-adding.htmlssh me@myservercd repository/.gitsudo chmod -R g+ws *sudo chgrp -R mygroup *git config core.sharedRepository trueAfter this the git daemon should use the group file permissions when writing to .git/objects.Usually this problem is caused by wrong user and group permissions on your Git servers file-system. The git repository has to be owned by the user and also his group.Example:If your user is called ""git"", his group ""gitgroup"", and the location of the Git repo is: git@mygitserverxyz.com:path/to/repo.gitthen do a: sudo chown -R git:gitgroup path/to/repo.git/This fixed the git insufficient permission error for me.sudo chmod 777 -R .git/objectsNothing of the above worked for me. A couple of hours later I found the reason for the problem:I used a repo url of the typessh://git@example.com/~git/repo.gitUnfortunately I stored a putty session with the name example.com which was configured to login as user myOtherUser. So, while I thought git connects to the host example.com with the User 'git', Git/TortoiseGit has connected to the putty session example.com which uses the User myOtherUser. This leads to the exact same ..insufficient permission.. error (cause both users are in different groups).Solution: Rename the putty session example.com to myOtherUse@example.comchmod should be chown, so the correct line is:sudo chown -R gituser.gituser objectsOddly enough, I had this issue on one clone of the repo I had, but not another I had.  Aside from re-cloning the repo (which a coworker did to successfully get around this issue), I managed to do a ""git reset"" to the commit I had before the failures started.  Then I re-committed the changes, and I was able to push successfully after that.  So despite all the indications there was a problem on the server, in this case it apparently was indicative of some oddity in the local repo.This works:sudo chmod -R gituser.gituser objectsIf you still get this error later after setting the permissions you may need to modify your creation mask. We found our new commits (folders under objects) were still being created with no group write permission, hence only the person who committed them could push into the repository.We fixed this by setting the umask of the SSH users to 002 with an appropriate group shared by all users.e.g. umask 002where the middle 0 is allowing group write by default.After you add some stuff... commit them and after all finished push it! BANG!! Start all problems... As you should notice there are some differences in the way both new and existent projects were defined. If some other person tries to add/commit/push same files, or content (git keep both as same objects), we will face the following error:$ git pushCounting objects: 31, done.Delta compression using up to 2 threads.Compressing objects: 100% (17/17), done.Writing objects: 100% (21/21), 2.07 KiB | 0 bytes/s, done.Total 21 (delta 12), reused 0 (delta 0)remote: error: insufficient permission for adding an object to repository database ./objects  remote: fatal: failed to write objectTo solve this problem you have to have something in mind operational system's permissions system as you are restricted by it in this case. Tu understand better the problem, go ahead and check your git object's folder (.git/objects). You will probably see something like that:<your user_name>@<the machine name> objects]$ ls -latotal 200drwxr-xr-x 25 <your user_name> <group_name> 2048 Feb 10 09:28 .drwxr-xr-x  3 <his user_name> <group_name> 1024 Feb  3 15:06 ..drwxr-xr-x  2 <his user_name> <group_name> 1024 Jan 31 13:39 02drwxr-xr-x  2 <his user_name> <group_name> 1024 Feb  3 13:24 08*Note that those file's permissions were granted only for your users, no one will never can changed it... *Level       u   g   oPermission rwx r-x ---Binary     111 101 000Octal       7   5   0SOLVING THE PROBLEMIf you have super user permission, you can go forward and change all permissions by yourself using the step two, in any-other case you will need to ask all users with objects created with their users, use the following command to know who they are:$ ls -la | awk '{print $3}' | sort -u <your user_name><his user_name>Now you and all file's owner users will have to change those files permission, doing:$ chmod -R 774 .After that you will need to add a new property that is equivalent to --shared=group done for the new repository, according to the documentation, this make the repository group-writable, do it executing:$ git config core.sharedRepository grouphttps://coderwall.com/p/8b3ksgsudo su rootchown -R user:group dirThe dir is your git repo.Then do:git pull origin masterYou'll see changes about commits by others."
"This is one of those areas where I think the git documentation is really terrible.  Everything points you to git pull but git pull is just a convenience method built on top of several underlying items, and it's the underlying items that are critical to understanding this.  Git lets the critical-understanding parts ""leak out"" while trying to pretend that they are irrelevant.That out of the way, here are the actual basic elements:When you are sharing stuff with someone, there are multiple independent repositories (repos) involved.  At a minimum there is ""yours"" and ""theirs"", and very often there is a third (e.g., on github) that you both use to accomplish the sharing.  In this case, the model is that this third party‰ÛÓgithub‰ÛÓhandles all the complicated authentication stuff (https, ssh, whatever), so that you don't have to.To obtain stuff from some other repo, you use git fetch.To deliver stuff to some other repo, you use git push.In other words, the opposite of push is not actually pull, but rather, is fetch.refspecsTo make these two operations (push and fetch) work, git uses what it calls ""refspecs"".  Remember that when pushing and fetching, there are two repositories involved.Refspecs usually just look like a single branch name.  However, the simplest ""real"" version of a refspec is actually two branch names separated by a colon:master:masterEditor:Editorauthor:authorThe left and right hand sides name the branch in the two repos.  For a push, the name on the left is the branch in your repo, and the name on the right is the branch in their repo.  For a fetch, the name on the left is the branch in their repo, and the name on the right is the branch in your repo.Here's where the model gets a bit strange again, and non-symmetric.  Git believes (as much as it can be said to believe anything) that when you fetch, you and they may both have been doing work; but when you push, only you should have been doing any work.  (There are good reasons for this, which I won't go into as this is already very long. :-) )To make this all function, fetch provides for branch renaming.  Instead of fetching ""their"" branches (master, author, etc) directly to ""your"" branches‰ÛÓthis would make it terribly difficult to access the work you did since the last fetch‰ÛÓyou fetch ""their"" stuff to what git calls a ""remote branch"".fetch and ""remote branches""A ""remote branch"" is in fact a local thing, despite the name ""remote branch"".  So is a ""remote"", for that matter.  A ""remote"" is a name, like origin or github, that you configure locally.  Associated with this ""remote"" is a URL, such as https://github.com/mathpunk/punk-mathematics-text.git.  There is also a fetch line.  Don't worry for now about the mechanics of the fetch line (once it's created it normally Just Works); just know that this is how git knows what ""remote branch name"" to use when fetching.You do have to worry, to some extent, about the actual name of the remote.  The usual default name is origin but you choose the name when you do a git remote add command.  The remote's name becomes part of the ""remote branch"" name.  Specifically, the remote name is prefixed in front of the branch name.Thus, assuming you will git fetch origin to bring stuff over from github, the ""remote branch names"" will be origin/master, origin/Editor, and origin/author.If you git fetch github to bring stuff over from github, the ""remote branch names"" will instead be github/master, github/Editor, and github/author.In all cases, you just name the remote, and fetch brings over all branches, but renames them.  By leaving out the refspec, you use the default one from the fetch line.If you add a branch name (git fetch origin author, for instance), git turns this into a ""real"" refspec by using that same fetch line to rename the incoming branch.  In effect, git fetch origin author turns into git fetch origin author:origin/author.  Their branch name, on the left, author turns into your ""remote branch name"", origin/author, on the right.(The idea here is that you can add multiple different remotes.  If you, your editor, and your publisher all want to share directly with each other, rather than with a third party like github, you could have two remotes, named editor and publisher for instance, and you would get ""remote branch names"" like editor/Editor for one remote, and publisher/Editor for another.  If you use a single sharing site like github, all of this is pointless complication, though.)OK, back to fetch and push.  When you git fetch origin, you use your remote origin name to bring over ""their"" branches but put them under your origin/* ""remote"" branches.  That keeps their work separate from your work.  (Of course at some point you need to combine these; we'll get to that in a moment.)When you push, though, ""push"" does not use the concept of a ""remote branch"".  You simply push directly to their branch.  So if you have some changes in your repo, in your branch author, and you want to push those, you just git push origin author:author.  The origin part here is the remote name again, and the last part is a refspec as usual, naming your branch (author) and then their branch (also just author).If you include a branch name on your push command, the lack of branch renaming here shows through: git push origin author ""means"" git push origin author:author.  Your branch name, author, on the left, is simply copied over to be used as their branch name, author, on the right.ReviewTime for a quick review:You set up a ""remote""which you use to fetch into your ""remote branches"", andwhich you use to push your local branches to their local branches.Think about that for a moment.  Notice that there's a step missing.How do you get their work, which (after step 2) is now listed in your remote-branches, into your own local branches?This is where git merge, and hence also git pull, come in.This is also where the item in your question title comes in.  Fast-forward, or non-fast-forward, is a property of a ""label move"", in git.To really understand this, we have to take another little side trip, discussing git's model for commits and branches.Commit graphsEvery commit has a guaranteed-unique identifier (the SHA-1, the 9afc317... number).  Neither your nor anyone else will ever create any different commit that has that number, but if you or anyone else can manage to recreate that commit exactly, you will get the same number.  (This is important for fetching.)Each commit also contains‰ÛÓindirectly, by reference‰ÛÓa complete stand-alone entity, the ""tree"".  The tree is the set of all files in that commit.  The commit, however, is not quite stand-alone: it has one or more ""parent"" commits.  These determine the commit history, and thus ""build up"" the actual branching structure.(In many‰ÛÓmaybe even most‰ÛÓother version control systems, the tree is not stand-alone: the VCS has to grind through parent and child commits to extract the tree, and/or to make new commits.  But in git, each tree is independent; it only has to go through parent/child sequencing to compare two trees, or to determine commit history.)Given a commit, git finds its parent commit(s), and their parent(s), and so on, and builds up a ""commit graph"":        C - F      /       \A - B           G   <-- master      \       /        D - EThis is a graph of a repository containing 7 commits in all, all on one branch named master.  A is the initial commit (A here stands for some big ugly unique SHA-1 number), B has some change since A (comparing the two trees for A and B will show the change), and then someone‰ÛÓor maybe two ""someones""‰ÛÓdid what would be called ""branching"": created commit C based on commit B, and created commit D also based on commit B.After that, someone created commit E based on D, and F based on C.Finally, someone combined the two branches to make a merge commit, commit G.  Commit G has as its (two) parents, both F and E.  The fact that it has two parents is, in fact, what makes it a ""merge commit"".When all this happens in a single repository, it's straightforward enough.  The one ""someone"", the person using the repository, made commits A, B, and C on branch master, then perhaps created a named branch starting from commit B:git checkout -b sidebranch master~1and made commits D and E.  Then they went back to master:git checkout masterand made commit F, and then ran:git merge sidebranchto create commit G.  After this they could delete branch sidebranch, as commit G (now the tip commit on master) points back to commit E as well as to commit F.This same pattern, however, occurs when both you, working in your own repo, and ""they"", working in theirs, make commits.  Let's say you're working on master and you've made commits A and B:A - B   <-- masterAt this point you push your work to the sharing point (github), so that it has A and B.  They clone this repository, giving them a third repo, with the github sharing point and the two commits A and B.Now you work within your repo and create commit C.  They work within theirs and create D and E, and before you push C to github, they push their D and E to github:[you:]        C   <-- master      /A - B[them, and github:]A - B      \        D - E   <-- masterAt this point, let's say you use git fetch github.  Remember, fetch renames ""their"" branch, so the result is this:        C   <-- master      /A - B      \        D - E   <-- github/masterGit can do this because each commit has a unique SHA-1, so it knows that your A and B and their A and B are the same, but your C is different from their D and E.At this point, you can create commit F, which makes your master point to your newest commit:        C - F   <-- master      /A - B      \        D - E   <-- github/masterNow if you want to share your work, this is when you'd git push github ... but the problem is, your master has commits A - B - C - F, while commits D and E are, from your point of view, only on github/master.If you push your master to github and make github's master point to commit F, commits D and E will be lost.  (""They"", whoever they are, will still have them, and you will still have them but named github/master, so it's possible to fix this, but it's a pain.)The solution is for you to patch this up so that ""their"" commits, D and E, are also on your master.  One easy way to do that is for you to merge your work and theirs, giving:        C - F      /       \A - B           G   <-- master      \       /        D - E   <-- github/masterFast-forwardNotice how your branch label, master, has ""moved forward"" every time you made a new commit?You made commit F and master, which used to point to commit C, moved forward to point to the new commit, F.Then, you made merge-commit G and master, which used to point to F, moved forward to point to the new commit, G.The label ""moves forward"" along the branch as you build it.Suppose we have another label‰ÛÓanother branch name‰ÛÓpointing to (say) commit B, all along, that we have not yet moved:      ..............<-- br     .    .   C - F    v /       \A - B           G   <-- master      \       /        D - EWe can now ask git to ""slide label br forward"", and to do it ""fast""‰ÛÓall at once, all the way to commit G:git checkout brgit merge --ff-only masterWhen we ask git to do a merge, if we tell it --ff-only (fast forward only), it will see if there's a way to slide the label forward from whichever commit it points to now, to the target commit, in this case G.  (The name master points to commit G so merge picks commit G as the fast-forward target.)  In this particular case there are actually two ways to do it, B-C-F-G or B-D-E-G; either one suffices to allow this ""fast forward"".(With --ff-only, if the branch label can't be fast-forwarded, the merge request is simply rejected.  Without --ff-only, git will attempt create a new, actual merge commit, so that the label can be moved forward.  And with --no-ff, git merge will create a merge even if it's already possible to do a fast-forward.  The default, with no options at all, is to fast-forward-if-possible, else make new merge commit.)push requires the fast-forward propertyIf you ask git to push our new master, it's allowed, because this meets the ""fast-forward"" test.  When we do our push, we'll tell github: ""Please take commits C, F, and G, and then move your label master (which we're calling github/master) from commit E to commit G"".  Is there a path from E to G?  There is, so it's allowed.pullAll git pull does, really, is run git fetch, and then run git merge.Unfortunately, that means you really do need to understand all of the above to really understand git pull.There are several large wrinkles here though.  First, I've been using git fetch origin and git fetch github above.  In other words, I keep naming a remote.  Where does the remote come from, when you do git pull?The answer is that it comes from your configuration.  Each branch in your repository can name a remote:$ git config branch.author.remote githubNow the ""remote"" for branch author is github.Second, if you run git merge, you have to tell it what to merge.  Where does the merge name come from, when you do git pull?The answer is, again, that it comes from the configuration.  Each branch can name an upstream merge branch:$ git config branch.author.merge authorGit combines the merge with the remote, so that after these two git config commands, git pull essentially does git merge github/author.I say ""essentially"" because there's yet another wrinkle: in older versions of git, pull runs fetch in such a way that it doesn't update the remote-branch names.  Instead, it uses a special FETCH_HEAD file.  (In newer versions of git, it still uses FETCH_HEAD but it does update the remote-branch names too.)Last, there's a very big wrinkle: you can configure git pull to use git rebase instead of git merge.  But this answer is now complete enough; I'm not going to get into those details."
"Javabrett's link got me to the answer, it revolves around Yosemite using an incorrect SSL dependency, which Git ends up using.  Installing Git via homebrew with these flags works:brew install git --with-brewed-curl --with-brewed-opensslJust installing git with ""brew install git --with-brewed-curl --with-brewed-openssl"" didn't help. I got resolved by setting 2 remote URL with any protocol https:// or ssh://.upstream for team repo origin for fork repoNow, I am able to push with my changes to origin without any problem. Hope it helps!"
"This is a bug in the libgit2 library, which overlooked the fact that a single quote character might appear as part of a valid reference name.There's a fix for libgit2 in the works, but short-term you might want to stay away from branches or tags with quote chars in them as a work-around.Make sure to raise this via the official Visual Studio support channels so they can track this in their system as a bug."
"Just do:git push origin master --forceor if you have a specific repo:git push https://git.... --forceThis will delete your previous commit(s) and push your current one.It may not be proper, but if anyone stumbles upon this page, thought they might want a simple solution...Short flagAlso note that -f is short for --force, sogit push origin master -fwill also work.And if push --force doesn't work you can do push --delete. Look at 2nd line on this instance:git reset --hard HEAD~3  # reset current branch to 3 commits agogit push origin master --delete  # do a very very bad bad thinggit push origin master  # regular pushBut beware...Never ever go back on a public git history!In other words:Don't ever force push on a public repository.Don't do this or anything that can break someone's pull.Don't ever reset or rewrite history in a repo someone might have already pulled.Of course there are exceptionally rare exceptions even to this rule, but in most cases it's not needed to do it and it will generate problems to everyone else.Do a revert instead.And always be careful with what you push to a public repo. Reverting:git revert -n HEAD~3..HEAD  # prepare a new commit reverting last 3 commitsgit commit -m ""sorry - revert last 3 commits because I was not careful""git push origin master  # regular pushIn effect, both origin HEADs (from the revert and from the evil reset) will contain the same files.edit to add updated info and more arguments around push --forceConsider pushing force with lease instead of push, but still prefer revertAnother problem push --force may bring is when someone push anything before you do, but after you've already fetched. If you push force your rebased version now you will replace work from others.git push --force-with-lease introduced in the latest 1.8.5 git release (thanks to @VonC comment on the question) tries to address this specific issue. Basically, it will bring an error and not push if the remote was modified since your latest fetch.This is good if you're really sure a push --force is needed, but still want to prevent more problems. I'd go as far to say it should be the default push --force behaviour. But it's still far from being an excuse to force a push. People who fetched before your rebase will still have lots of troubles, which could be easily avoided if you had reverted instead.And since we're talking about git --push instances...Why would anyone want to force push?@linquize brought a good push force example on the comments: sensitive data. You've wrongly leaked data that shouldn't be pushed. If you're fast enough, you can ""fix""* it by forcing a push on top.* The data will still be on the remote unless you also do a garbage collect, or clean it somehow. There is also the obvious potential for it to be spread by others who'd fetched it already, but you get the idea.First of all, I would not make any changes directly in the ""main"" repo. If you really want to have a ""main"" repo, then you should only push to it, never change it directly.Regarding the error you are getting, have you tried git pull from your local repo, and then git push to the main repo? What you are currently doing (if I understood it well) is forcing the push and then losing your changes in the ""main"" repo. You should merge the changes locally first.I would really recommend to:push only to the main repomake sure that main repo is a bare repo, in order to never have any problem with the main repo working tree being not in sync with its .git base. See ""How to push a local git repository to another computer?""If you do have to make modification in the main (bare) repo, clone it (on the main server), do your modification and push back to itIn other words, keep a bare repo accessible both from the main server and the local computer, in order to have a single upstream repo from/to which to pull/pull.If I'm on my local branch A, and I want to force push local branch B to the origin branch C I can use the following syntax:git push --force origin B:C"
"Try setting that configuration beforehand:StoredConfig config = git.getRepository().getConfig();config.setString(""branch"", ""master"", ""merge"", ""refs/heads/master"");"
"If you just want to remove the warning:git config --global core.warnambiguousrefs falseThe warning is coming because you have a branch named production and also a remote named production. It will be ideal to rename either of the two to something else.Thanks to Johannes Sixt on the Git mailing list. The most likely reason is that you have a ref 'production' directly in  the .git directory. Perhaps you or one of your scripts created it  accidentally using 'git update-ref production ae5b621', i.e., without  giving the full ref path nameIt wasn't actually in the .git root directory, but I had an empty production folder in branches.> ~/repo (chris-membership-fees)$ git show-ref | grep production88e0c37c9ae4ff6967ddd027b62b62fa2c0ac272 refs/heads/production9d739cff44a898f0c68da33fb22a230985e479ce refs/remotes/backup/production88e0c37c9ae4ff6967ddd027b62b62fa2c0ac272 refs/remotes/production/masterrefs/heads/production is ambiguos due to refs/remotes/production. Resolution is generic and independent of the reference-type prefix, thus branches, tags, remotes and even custom ref names must not collide."
"LittleSnitch was the problem, shutting off Network Filter while I did the pull/push resolved it."
"Solved it! (With a little help from this question, but a slightly different solution.)Browse to the repository in Stash.Click the little 'https' icon in the address bar. Click Show Certificate. Drag the little certificate icon onto the desktop. Open the Keychain Access utility (type it into Finder). In the Keychains list, select the bold item, and under Category, select Certificates. Drag the certificate from the desktop into the list, so that it gets added.Right-click the certificate, click Get Info. Expand the Trust section (click the little triangle) and in the top drop-down, select Always Trust. Close the window and ensure the changes get saved."
"You need to commit your changes before pulling:git rm -r --cached .git add .git commit -m 'Removed dir/.classpath'git pullDepending on the upstream commits, this could result in a merge conflict. If you get a ""modified/deleted"" merge conflict in dir/.classpath, you will need to remove it again before committing the merge.git rm -r dir/.classpathgit commit # Commit the mergeEdit: Since you already committed your change, all you need to do is remove the untracked directory before pulling. You may want to make a backup first if you need the directory contents.rm -rf dir/.classpathgit pull"
"This can be due to a temporary issue on GitHub side, as it was the case in this GitHub ticket.The GitHub site status page reported such an issue 5 days ago. Maybe your repo suffers from a side-effect of that incident?In the meantime, check if you cannot load an archive from this repository: see ""    All of your downloads. One big button.""That won't give you a repo, but at least an image of the project form which you can work from."
"Can you confirm that git-core is in the correct place?iMac:~ david$ git --exec-path/usr/local/git/libexec/git-coreiMac:~ david$ ls /usr/local/git/libexec/git-coreiMac:~ david$"
"If you get error 413, then the issue doesn't lie with git but with your web server. It's your web server that is blocking big upload files. Solution for nginxJust load your nginx.conf and add client_max_body_size 50m; ( changing the value to your needs ) in the http block. Reload nginx to accept the new config by executing sudo service nginx reload and try again to push your commit over http.Solution for ApacheIn your httpd.conf add LimitRequestBody 52428800 ( changing the value to your needs ) inside a <Directory /> block. Doing this you can limit the request of the whole server filesystem, just a single Virtual Host or a directory.I hope this helps.I figured it out!!! Of course I would right after I hit post!I had the repo set to use the HTTPS url, I changed it to the SSH address, and everything resumed working flawlessly.command to change the remote url ( from https -> git@... ) is something like thisgit remote set-url origin git@github.com:GitUserName/GitRepoName.gitorigin here is the name of my remote ( do git remote and what comes out is your origin ).I already had ""HTTPS//"" in the git URL yet faced this error.All I did was to add option -u with push and it worked.git push -u origin masterFor those who use IIS 7 to host a git http/https endpoint:You need to increase your uploadReadAheadSize.Launch Internet Information Services (IIS) ManagerExpand the Server fieldExpand SitesSelect the site you want to make the modification for.In the Features section, double click Configuration EditorUnder Section select: system.webServer > serverRuntimeModify the uploadReadAheadSize section (The value must be between 0 and 2147483647.)Click ApplyRestart the WebsiteI got this problem when I try to clone a git repo in Linux machine.the following URL is working for me in windows http://swamy@git.swamy.com/scm/project/swamy-main.gitwhereas the following URL works in Linux machine and it has https in URL https://swamy@git.swamy.com/scm/project/swamy-main.githttps clone of gists fails (ssh works, see below):12:00 jean@laptop:~/tmp$ GIT_CURL_VERBOSE=1 git clone https://gist.github.com/123456.git usernameInitialized empty Git repository in /home/jean/tmp/username/.git/* Couldn't find host gist.github.com in the .netrc file; using defaults* About to connect() to gist.github.com port 443 (#0)*   Trying 192.30.252.142... * Connected to gist.github.com (192.30.252.142) port 443 (#0)* found 141 certificates in /etc/ssl/certs/ca-certificates.crt*        server certificate verification OK*        common name: *.github.com (matched)*        server certificate expiration date OK*        server certificate activation date OK*        certificate public key: RSA*        certificate version: #3*        subject: C=US,ST=California,L=San Francisco,O=GitHub\, Inc.,CN=*.github.com*        start date: Mon, 30 Apr 2012 00:00:00 GMT*        expire date: Wed, 09 Jul 2014 12:00:00 GMT*        issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance CA-3*        compression: NULL*        cipher: ARCFOUR-128*        MAC: SHA1> GET /123456.git/info/refs?service=git-upload-pack HTTP/1.1User-Agent: git/1.7.1Host: gist.github.comAccept: */*Pragma: no-cache< HTTP/1.1 301 Moved Permanently< Server: GitHub.com< Date: Fri, 01 Nov 2013 05:00:51 GMT< Content-Type: text/html< Content-Length: 178< Location: https://gist.github.com/gist/123456.git/info/refs?service=git-upload-pack< Vary: Accept-Encoding<* Ignoring the response-body* Expire cleared* Connection #0 to host gist.github.com left intact* Issue another request to this URL: 'https://gist.github.com/gist/123456.git/info/refs?service=git-upload-pack'* Couldn't find host gist.github.com in the .netrc file; using defaults* Re-using existing connection! (#0) with host gist.github.com* Connected to gist.github.com (192.30.252.142) port 443 (#0)> GET /gist/123456.git/info/refs?service=git-upload-pack HTTP/1.1User-Agent: git/1.7.1Host: gist.github.comAccept: */*Pragma: no-cache< HTTP/1.1 200 OK< Server: GitHub.com< Date: Fri, 01 Nov 2013 05:00:52 GMT< Content-Type: application/x-git-upload-pack-advertisement< Transfer-Encoding: chunked< Expires: Fri, 01 Jan 1980 00:00:00 GMT< Pragma: no-cache< Cache-Control: no-cache, max-age=0, must-revalidate< Vary: Accept-Encoding<* Connection #0 to host gist.github.com left intact* Couldn't find host gist.github.com in the .netrc file; using defaults* About to connect() to gist.github.com port 443 (#0)*   Trying 192.30.252.142... * connected* Connected to gist.github.com (192.30.252.142) port 443 (#0)* found 141 certificates in /etc/ssl/certs/ca-certificates.crt* SSL re-using session ID*        server certificate verification OK*        common name: *.github.com (matched)*        server certificate expiration date OK*        server certificate activation date OK*        certificate public key: RSA*        certificate version: #3*        subject: C=US,ST=California,L=San Francisco,O=GitHub\, Inc.,CN=*.github.com*        start date: Mon, 30 Apr 2012 00:00:00 GMT*        expire date: Wed, 09 Jul 2014 12:00:00 GMT*        issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance CA-3*        compression: NULL*        cipher: ARCFOUR-128*        MAC: SHA1> POST /123456.git/git-upload-pack HTTP/1.1User-Agent: git/1.7.1Host: gist.github.comAccept-Encoding: deflate, gzipContent-Type: application/x-git-upload-pack-requestAccept: application/x-git-upload-pack-resultContent-Length: 116< HTTP/1.1 301 Moved Permanently< Server: GitHub.com< Date: Fri, 01 Nov 2013 05:00:53 GMT< Content-Type: text/html< Content-Length: 178< Location: https://gist.github.com/gist/123456.git/git-upload-pack< Vary: Accept-Encoding<* Ignoring the response-body* Connection #0 to host gist.github.com left intact* Issue another request to this URL: 'https://gist.github.com/gist/123456.git/git-upload-pack'* Violate RFC 2616/10.3.2 and switch from POST to GET* Couldn't find host gist.github.com in the .netrc file; using defaults* Re-using existing connection! (#0) with host gist.github.com* Connected to gist.github.com (192.30.252.142) port 443 (#0)> GET /gist/123456.git/git-upload-pack HTTP/1.1User-Agent: git/1.7.1Host: gist.github.comAccept-Encoding: deflate, gzipContent-Type: application/x-git-upload-pack-requestAccept: application/x-git-upload-pack-result* The requested URL returned error: 400* Closing connection #0error: RPC failed; result=22, HTTP code = 400This works: git clone git@gist.github.com:123456.gitI had this error (error: RPC failed; result=22, HTTP code = 413) when I tried to push my initial commit to a new BitBucket repository. The error occurred for me because the BitBucket repo had no master branch. If you are using SourceTree you can create a master branch on the origin by pressing the Git Flow button.I had the same problem but I was using a reverse proxy. So I had to setclient_max_body_size 50m; inside both configure files : on the gitlab nginx web server (as said inside the previous answers)but also on the nginx reverse proxy hosted on the dedicated server."
"What is the Git version are you using (Ubuntu 9.10 packages mentions 1.6.3)A recent thread reported a similar issue with Git1.7.1, although it was from a Cygwin environment.$ git clone git:/repo/git/acl acl.test  Initialized empty Git repository in /c/tmp/acl.test/.git/  remote: Counting objects: 9205, done.  remote: Compressing objects: 100% (3300/3300), done.  fatal: The remote end hung up unexpectedly  fatal: early EOFs:  62% (5708/9205)  fatal: index-pack failedDid you try downgrade your Git (on the server side and/or the client side) and see if the problem persists?As the OP Style reports in the comments, the message can also be trigger by an incorrect protocol:git+ssh://instead of just:ssh:// + git command@rickb I found that runninggit config --add core.compression -1in the client (cygwin) repository fixed it.git config --global --add core.compression -1For some reason, the problem went away after I enabled Compression in the ~/.ssh/config file.  God knows why."
"Assuming @ChrisHayes is right about an accidental sudo, this should fix it. From inside your repository:sudo chown -R $USER:$USER ""$(git rev-parse --show-toplevel)/.git""I am using Ubuntu and faced the same problem. To solve it, I simply switched user to root and I see no further error.$supasswordThen,$git pull origin master"
"You must have made a mistake in the remote URL, double-check the output with git remote -v and fix it with  git remote set-url origin <new-url>assuming the remote name is originThe problem solved right after update to git version 1.8.xIn my case, user permission was the problem. I added myself as a valid user of the repository after which 'Push' worked.Make sure your url has the correct username and passwordgit remote set-url origin http : //username:password..For people who using TFS git repositories while on Windows. My Windows password recently changed therefor i had error RPC failed; result=22, HTTP code = 401 fatal: The remote end hung up unexpectedlywhen doing diffrent things like fetch, push or pull. We using TFS git repo. I fixed this problem deleting my tfs password from Windows Credential Manager through Control Panel. http://windows.microsoft.com/en-us/windows7/what-is-credential-manager ."
"found this page. thanks author.http://stuffandymakes.com/2014/03/11/os-x-mavericks-10-9-2-causes-ssl-errors-git-bitbucket/Open KeyChain app, delete ""DigiCert High Assurance CA-*"" certificates, then reboot your mac."
"fatal: https://github.com/username/repository-name.git/info/refs not found: did you run git update-server-info on the server?In GitHub context, this message should be understood as ""The repository doesn't exist"". You're supposed to push toward an already existing bare repository. A bare repository is a repository without a working directory, usually found server-side.If I create my repository first on github, then I can push branches no problem. Is this procedure routine?Yes. You're supposed to first create your repository on GitHub. See the help topic about thisindeed, as stated by the documentation ""To put your project up on GitHub, you'll need to have a GitHub repository for it to live in.""I confirm you need to create your repo on GitHub first, before being able to push to said (remote) repo.Once created, you can add it as a remote named 'origin' to your local repo, and 'git push origin master' (for the first push).Also note that the repository name is case sensitive. Oops!Are you sure the git repo you're trying to access supports the HTTPS protocol?Instead of this:  git clone https://github.com/TeaCodie/TeaCodie-Website.gitTry this:  git clone git@github.com/TeaCodie/TeaCodie-Website.gitYou may need to configure your SSH key.For some details, see: http://git-scm.com/book/ch4-1.html  and https://help.github.com/articles/set-up-git and https://help.github.com/articles/generating-ssh-keys"
"A shallow repository is a repository which does not contain the full history.See the git-clone manpage:--depth Create a shallow clone with a history truncated to the specified  number of revisions. A shallow  repository has a number of limitations  (you cannot clone or fetch from it,  nor push from nor into it), but is  adequate if you are only interested in  the recent history of a large project  with a long history, and would want to  send in fixes as patches.Rename .git/shallow to something else, clone, rename it back, copy .git/shallow to cloned repository"
"Are you using any other tools while using TortoiseGit?For instance, this project mentions an interaction with Visual Studio:If you see errors about being unable to unlink old files when running git commands on Windows, it's quite likely that you have the chrome solution open in Visual Studio and it's updating IntelliSense, which will briefly lock files at random.  The workaround is either to disable IntelliSense entirely, or to be sure to close the solution temporarily while performing any git operations which could touch a large number of files. In other word, does the problem persists if you close as many currently running applications as you can?Would TortoiseGit allow you to checkout another branch then?I ran into this problem-Eclipse was locking the file even though it wasn't open in the editor. Once I closed eclipse I could checkout fine.If your problem is based on eclipse locking file,  you can start your eclipse with -Dosgi.locking=none.I ran into this problem with eclipse Luna 4.4.0The file is locked by another program and cannot be overwritten. See what application has the file locked, close that application, and try again."
"In this answer I've found that you should be careful defining multiple entries for a user in the sudoers file. Your second entry overrides your first entry for the git user, and that first entry does not have a NOPASSWD: directive.I also had the same problem, and using only the below value in the sudoers file for the git user fixed the problem:git     ALL=(ALL) NOPASSWD: ALLThis suggests that the git user is trying to use sudo for commands other than just git-upload-pack and git-receive-pack.It may also be the case that you have more than 1 of these commands in your PATH and the git user finds the commands from another location."
Git might be trying to do some smart stuff with hardlinks that fails on the network drive. Try using git clone --no-hardlinks /r/path/to/my/repo or git clone file:///r/path/to/my/repo
"From SourceTree, click on Tools->Options.  Then on the ""General"" tab, make sure to check the box to allow SourceTree to modify your Git config files.Then switch to the ""Diff"" tab.  On the lower half, use the drop down to select the external program you want to use to do the diffs and merging.  I've installed KDiff3 and like it well enough.  When you're done, click OK.Now when there is a merge, you can go under Actions->Resolve Conflicts->Launch External Merge Tool.I'm using SourceTree along with TortoiseMerge/Diff, which is very easy and convinient diff/merge tool.If you'd like to use it as well, then:Get standalone version of TortoiseMerge/Diff (quite old, since it doesn't ship standalone since version 1.6.7 of TortosieSVN, that is since July 2011). Links and details in this answer.Unzip TortoiseIDiff.exe and TortoiseMerge.exe to any folder (c:\Program Files (x86)\Atlassian\SourceTree\extras\ in my case).In SourceTree open Tools > Options > Diff > External Diff / Merge. Select TortoiseMerge in both dropdown lists.Hit OK and point SourceTree to your location of TortoiseIDiff.exe and TortoiseMerge.exe.After that, you can select Resolve Conflicts > Launch External Merge Tool from context menu on each conflicted file in your local repository. This will open up TortoiseMerge, where you can easily deal with all the conflicts, you have. Once finished, simply close TortoiseMerge (you don't even need to save changes, this will probably be done automatically) and after few seconds SourceTree should handle that gracefully.The only problem is, that it automatically creates backup copy, even though proper option is unchecked."
"Better for you to understand the various git commands then to just find the one you need ""right now"" as you will come up with this situation many times and just learn piecemeal while grumbling and blaming git.EDIT: I went ahead and tried all the options and this should do it. Thanks to pauljz in the comments.git clean -df # remove untracked files AND directoriesgit reset HEAD --hard # revert any uncommitted changesThe above should be all you need.Other options:git pull -f # replace local files even if you have unpushed commits.orgit reset HEAD --hard # remove unchanged, uncommitted filesgit pullor git clean -f # remove untracked files (uncommitted files)git pullYou could always delete the entire folder of your existing repo, and then create a new one with git clone"
"That's strange. Looking at Git/libexec/git-core/git-pull (as of git version 1.7.11.msysgit.0), there's the commandrequire_work_tree_existsThe command is implemented in Git/libexec/git-core/git-sh-setup:require_work_tree_exists () {  if test ""z$(git rev-parse --is-bare-repository)"" != zfalse  then    die ""fatal: $0 cannot be used without a working tree.""  fi}So, if you're really not in a bare repo (i.e. your posted .git/config is really the one of your repo), this will not print out the message.But there's another command in Git/libexec/git-core/git-sh-setup printing out that string:require_work_tree () {  test ""$(git rev-parse --is-inside-work-tree 2>/dev/null)"" = true ||  die ""fatal: $0 cannot be used without a working tree.""}I'd recommend changing one of the two messages to be able to identify which one is really relevant for you. The second one is issued if you're issuing git commands on directories that are no git repo directories. Just to be sure: git pull must be run inside a git repo...Edit:in order to check, what's going wrong, try the code of require_work_tree_exists on your git bash. It should not enter the then part of the code.See here•__ Troubleshooting git pullA bare repository doesn't have a working tree. git pull is functionally the same as a git fetchfollowed by a git merge, and to do a merge you have to have a working tree (in case there are conflicts you need to sort out).You have to push to a bare repo. Pull will not work as it requires a working directory to merge to, which is what the error message that you see says.So setup a remote to the bare repo from the repo that you will be working on and push from that.PS: The ideal way to create a bare repo is to do git init --bare Thanks~"
"Here is a question covering trusting a self-signed certificate. This is the proper way to fix the issue assuming you are using a self-signed cert.This question covers ignoring a certificate, however, depending on which method you use, this could result in ignoring all certificates, which would make communicating with your git server insecure, and is therefore a quick solution, but not a good solution. If you take this route, I would recommend at least using the per-repository setting (git config http.sslVerify false) instead of applying it more broadly in order to minimize the severe negative impact of this method."
"click fork button on original github project pageclone your forked repository instead originalpush to itpress Pull Requests button on your repositorycreate itwait for original author to accept itSee the github help on cloning URL. With HTTPS, if you are not authorized to push, you would basically have a read-only access. So yes, you need to ask the author to give you permission.If the author doesn't give you permission, you can always fork (clone) his repository and work on your own. Once you made a nice and tested feature, you can then send a pull request to the original author.For some reason my push and pull origin was changed to HTTPS-url in stead of SSH-url (probably a copy-paste error on my end), but trying to push would give me the following error after trying to login:Username for 'https://github.com': xxxPassword for 'https://xxx@github.com': remote: Invalid username or password.Editing the [remote ""origin""] url in the .git/config file to point the SSH url, there was no problem:[remote ""origin""]    url = git@github.com:<username>/<repo>.gitHope this helps!"
"You can circumvent the bash-ssh issue entirely by:launching a DOS shell with git-cmd.bat (packaged within your Git for Windows msysgit distribution)using git clone to make a new clone using the proper https url of your remote repo.That is:git clone https://<yourAccount>@github.mycompany.com/<yourAccount>/<yourRepo>Since you will be using in this case the https protocol, there won't be any shell session during a git pull (as opposed to the ssh protocol: see The Smart Protocols), and you shouldn't see any extra message like fatal: protocol error: bad line length character."
"Using git status -vs will show you a list of tracked changes.If you want to store them to deal with after the pull you can use git stash, pull your repo, then git stash pop to restore the changes. Keep in mind there may be conflicts you have to resolve.Another way of doing this is don't pull unless you are going to commit the changes you have made. Then just use git pull --rebase which will place your commit on top of the pulled commits."
"It could be similar to this GitHub help page:For most users, simply running ssh-add to load your keys into the SSH agent will fix this issue.$ ssh-add# Enter passphrase for /home/you/.ssh/id_rsa: [tippy tap]# Identity added: /home/you/.ssh/id_rsa (/home/you/.ssh/id_rsa)If your key does not have the default filename, you'll have to pass the path to ssh-add:$ ssh-add ~/.ssh/my_other_key# Enter passphrase for /home/you/.ssh/my_other_key: [tappity tap tap]# Identity added: /home/you/.ssh/my_other_key (/home/you/.ssh/my_other_key)You can install rhc openshift client toolsThen run setup which will then upload your ssh keys.rhc setup"
"Try git fetch so that your local repository gets all the new info from github. It just takes the information about new branches and no actual code. After that the git checkout should work fine.I got this error for a branch that was remote and had no local tracking branch. Even though I'm certain I've checked out remote branches via a simplegit checkout feature/fooin the past, to get around this error I had togit checkout -t -b feature/foo origin/feature/fooI have no idea what I did to get myself into that situation either.I was getting following error when I tried to checkout new brancherror: pathspec 'BRANCH-NAME' did not match any file(s) known to git.When I tried git checkout origin/<BRANCH-NAME> it went to detached HEAD (detached from origin/)Did following to resolve the issuegit remote updategit fetch git checkout --track origin/<BRANCH-NAME>""error: pathspec 'foo' did not match any file(s) known to git.""This happenned to me when the full repo was not fetched.try:$ git fetchGit Windows users beware - without the --icase-pathspecs or GIT_ICASE_PATHSPECS = 1 env var setting, that git pathspecs will be case-sensitive, in which case git checkout origin/FooBranch ""Some/Path/To/File.txt""is not the same as git checkout origin/FooBranch ""some/path/to/file.Txt""I got this when I did the following:Used IntelliJ IDE, connected to gitCreated a new file, and added to gitRenamed the new fileWhen I tried to check in the directory, I got this error.To fix:I opened the repo in git extensions. I saw that the file (with the old name) was staged. But since it didnt exist anymore, it could not be committed.I simply unstaged this file. Then I re-added the file (this time correctly named) into git and committed without errors.If it happens on Windows, it is probably the filename case issue. I had this error today - I've created new file, added to GIT, then I changed one letter in filename from lower to upper and then I couldn't to anything - commit, revert, delete file from repo. The only solution I found was changing the filename again back to exact same case when I added this file to GIT, then doing GIT revert to remove this file from GIT, then changing filename again as I want. After those changes I could commit to repo and then push without any problem.None of these answers solved my issue:Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git log --format=onelineb9cc6a9078312865280fb5432a43e17eff03a5c6 Formatted README288772f36befe6bd60dd41b8185f1e24e0119668 Updated README documentationd2bdbe18f4169358d46fad50eacfb89786df3bf8 Version object v3.0.0-SNAPSHOTa46b1910a3f548b4fa254a6055d25f68d3f217dd VersionFactory is now Platform agnostic24179ae569ec7bd28311389c0a7a85ea7b4f9594 Added internal.Platform abstraction252b684417cf4edd71aed43a15da2c8a59c629a7 Added IPlugin implementation for Spongee3f8d21d6cf61ee4fc806791689c984c149b45e3 Added IPlugin implementation for Bukkitaeb403914310b4b10dee9e980cf64472e2bfda79 Refactored Version.javaef50efcff700c6438d57f70fac30846de2747a7e Refactored TesterFactorya20808065878d4d28657ae362235c837cfa8e625 Added IPlugin abstraction9712a3575a70060d7ecea8b62bb5e888fdc32d07 Heavily refactored Tester02d025788ae740dbfe3ef76a132cea8ca4e47467 Added generic Predicate<T> interface9c565777abea9be6767dfdab4ab94ed1173750dd Minor refactoring of testCompareTo()2ff2a28c221681e256dcff28770782736d3a796a Version object v2.0.1d4b2e2bd830f77cdbc2297112c2e46b6555d4393 Fix compareTo()05fe7e012b07d1a5b8de29804f96d9a6b24229a1 Make compareTo() fail6e85371414357a41c1fc0cec0e75adba92f96832 Fix VersionFactory passing nullc1fd1f032f87d860d5ed9d6f6679c9fa522cff8d Version object v2.062c3a92c008a2ed11f0a4d016080afc3541d0700 Version object v1.2c42e9e617128085e872c51b4d977a04e48d69e8f Deprecated, doc'd, future-proofed getNmNikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 3a796aerror: pathspec '3a796a' did not match any file(s) known to git.I was trying to go back and build the commit for Version object v2.0.1. Luckily, I got the idea to try the whole hash code and it worked ! Which means that I was using the wrong end of the hash code.Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 2ff2aNote: checking out '2ff2a'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example:  git checkout -b new_branch_nameHEAD is now at 2ff2a28... Version object v2.0.1Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version ((2ff2a28...))$As shown above, for partial hash codes, you must supply the front-end, not the back-end.If you deleted a folder and pulled/cloned again your repo, you may need to create your local branch again. Try: git checkout -b yourbranchnameIn my case I had renamed a file changing the case of the file, i.e.   SomeFile.js -> someFile.jsI think that was related to the problem.  Doing a git fetch didn't fix the issue.I moved the files out of my project, did a fetch, and did a push without them.  Then I did a fetch, added them back, and did a push, and it worked.  I don't know if all those steps were needed, but it did ultimately work.in my case I enter submodule directory without doing git submodule init git submodule updateSo git was linked to the parent folder that indeed missed that branch.On Windows OS by default git is instaled with core.ignorecase = trueThis means that git repo files will be case insensitive, to change this you need to execute:\yourLocalRepo> git config core.ignorecase falseyou can find this configuration on .git\config file$ cat .git/refs/heads/feature/user_controlled_site_layouts3af84fcf1508c44013844dcd0998a14e61455034Can you confirm that the following works:$ git show 3af84fcf1508c44013844dcd0998a14e61455034It could be the case that someone has rewritten the history and that this commit no longer exists (for whatever reason really).This can be caused when upstream rewrites history.When this happens, I toss all affected repos, clone them fresh from upstream, and use 'git format-patch' / 'git am' to ferry any work in progress from old world to new.When I have this issue I install a new version of git. If I can't do that from a binary package, I install it from source into my $HOME directory like this:mkdir $HOME/binexport version=1.7.10.3  wget http://git-core.googlecode.com/files/git-$version.tar.gz  tar zxf git-$version.tar.gz  cd git-$version  ./configure --prefix=$HOME  make && make install  echo ""export PATH=$HOME/bin:\$PATH"" >> ~/.bashrc  chmod +x ~/.bashrc      which git      git --versionthe last two lines are to verify.(updated with code from user FractalSpace - thanks!)I had this problem today i was trying to git checkout foo and got error: pathspec 'testing' did not match any file(s) known to git. turns out i was in the wrong repo.. So lesson learned check your repo before freaking out.Happened to me after renaming an uncommitted file in Android Studio.Git seemed to have the old version in its repository, even if it didnå«t exist anymore.fetch, pull, checkout, add all and so on did not help in my case!So I opened the Git GUI of TortoiseGit which showed me the exactly file which caused trouble.Afterwards I deleted the file from the repository withgit rm -r --cached /path/to/affected/fileand the problem was goneI faced a similar issue. What led me into this trouble was:I had multiple remote branches and I deleted the folder that had the code.I did a get pull. : git pull git@git.corp......Then I added remote repository : git remote add upstream git@git.corp.......Then I tried to change branch to some other branch say AAAA and I got errorerror: pathspec 'AAAA' did not match any file(s) known to git.After spending an hour I found a solution.I deleted the source folder again.Then I did a git pull :git pull git@git.corp......Then I changed branch before linking it to remote repository : git checkout AAAthen I added it to remote repositorygit remote add upstream git@git.corp......After this I can easily switch branches.Although this is not a standard way but it worked for me after I tried all of above options.I faced this problem last time, and the thing I have done is remove the folder (or source code) related to that branch.Ex: the branch origin/foo create folder foo at your local, so I just delete it and use git fetch $ checkout to get code back from remote.Or you can do it by create folder at local same as the branch you intended to checkout.Ex: create folder foo at local, after that, use Git command: git branch --set-upstream-to=origin/foo foo, that all. Use git pull to get code."
"There are few ways you can avoid these errors, none of them looks or feels 'natural'.First one uses error stream redirection and some logic around errors:$out = git ? 2>&1if ($?) {    $out} else {    $out.Exception}Second depends on the ErrorAction, that is available only for PowerShell constructs, so we need to build one first:& {    [CmdletBinding()]    param()    git ?} -ErrorAction SilentlyContinue -ErrorVariable failif ($fail) {    $fail.Exception}In my ISEGit module I use latter to avoid error records 'leaking' to end user in uncontrolled manner.Finally you can 'fix it' (well, sort off...) by making sure you can a string in the end:""$(git ? 2>&1 )""Or something I would vote against as it will leave you unaware of any actual errors, setting global $ErrorActionPreference to SilentlyContinue - though this is not different from redirecting error stream to $null."
"When I run git branch, it only shows *master, not the remaining two branches.git branch doesn't list test_branch, because no such local branch exist in your local repo, yet. When cloning a repo, only one local branch (master, here) is created and checked out in the resulting clone, irrespective of the number of branches that exist in the remote repo that you cloned from. At this stage, test_branch only exist in your repo as a remote-tracking branch, not as a local branch.And when I rungit checkout test-branchI get the following error [...]You must be using an ""old"" version of Git. In more recent versions (from v1.7.0-rc0 onwards), If <branch> is not found but there does exist a tracking branch in  exactly one remote (call it <remote>) with a matching name, treat [git checkout <branch>] as  equivalent to$ git checkout -b <branch> --track <remote>/<branch>Simply run git checkout -b test_branch --track origin/test_branchinstead. Or update to a more recent version of Git.My friend, you need to create those corresponding branches locally first, in order to check-out to those other two branches, using this line of codegit branch test-branch  and  git branch change-the-titlethen only you will be able to do git checkout to those branchesAlso after creating each branch, take latest changes of those particular branches by using git pull origin branch_name   as shown in below codegit branch test-branchgit checkout test-branchgit pull origin test-branchand for other branch named change-the-title  run following code =>git branch change-the-titlegit checkout change-the-titlegit pull origin change-the-titleHappy programming :)"
"Your first branch is not created until your first commit is made.  If you simply git init and immediately switch to a new branch, you will not have created a master branch.  For example:% git init .% git branchShows that you do not have any branches.  If you are to switch branches, you will change the branch that will be committed to (and therefore created) when you create your first commit.  However you can see that this still does not show as a branch that exists:% git checkout -b experimental% git branchStill shows no branches.  However when you create your first commit:% echo hello > newfile.txt% git add newfile.txt% git commit -mexperimental[experimental (root-commit) dab457a] experimental 1 file changed, 1 insertion(+) create mode 100644 newfile.txtNow the experimental branch exists, though master does not, since you did not commit to it:% git branch* experimentalThe error message you received is particularly dense, as you can use git checkout to either switch to a different branch, or to write a file to the working directory.  When you run:% git checkout masterThis is first interpreted as ""switch to the master branch"".  Lacking a master branch, however, it is then interpreted as ""check out the file master to the working directory"".  Since you also lack that, it tells you that it could not find a file (or, really, a pathspec) master."
"As genisage noted in a comment, you're asking git explicitly to check out the file databaseName.tmp, as if you'd typed in:git checkout -- databaseName.tmpThis is because the * you typed in is handled by the shell, before git ever has a chance to see your command.  The shell replaces * with all the file names in your current working directory,1 and then having done that, then runs git, without any indication that the actual command you entered had * in it, rather than all those names.Again, git has no idea that you used the asterisk * character, all it sees is a list of file names, including any top-level ignored files that are not being stored in git.Confusingly, if you manage somehow2 to pass a literal asterisk * to git, git will expand the *, but with a different set of file names: those known to git.  That would do what you want.There's an easier way, though: git will check out directories recursively by checking out all the files it knows about in that directory.  So, instead of using *, simply use . to ask git to check out the current directory:git checkout -- .If git knows about ./a and ./b but not ./databaseName.tmp, this will check out ./a and ./b and not attempt to do anything with ./databaseName.tmp.31More accurately, files whose names do not start with a leading dot ..2And in fact, it's quite easy to manage, e.g., simply insert a backslash \ in front of the asterisk: git checkout -- \*.  Or, use single or double quotes, both of which protect against shell globbing.  Single quotes also inhibit shell variable expansion, while double quotes permit variable expansion but inhibit globbing.3It's worth pointing out a subtle difference here: * expands to file names that do not start with ., while asking git to check out . causes it to check out all files in the directory, including those whose names start with ..  Hence both git checkout -- \* and git checkout -- * will not undo changes to a file named .secret, for instance, while git checkout -- . will undo such changes."
"So after some back and forth in the comments, I think we've come to a solution here.  As it turns out, GIT does support the concept of checking out only subtrees of a given repository, through a process called 'sparse checkout' which you can find more information about here.The concept is to initialize a new, clean git repository, add your remotes, turn on the setting 'core.sparsecheckout,' and finally to check out your folders."
"In Bash (and many other Unixy shells) backticks are used for command substitution, e.g. see this description from The Linux Documentation Project:Command substitution allows the output of a command to replace the command itself. Command substitution occurs when a command is enclosed like this:$(command)or like this using backticks:`command`Bash performs the expansion by executing COMMAND and replacing the command substitution with the standard output of the command, with any trailing newlines deleted. Embedded newlines are not deleted, but they may be removed during word splitting.franky ~> echo `date`Thu Feb 6 10:06:20 CET 2003I don't think that cmd.exe supports real command substitution at all. It certainly doesn't treat backticks this way.There are some workarounds that you can try, e.g. using for /f or temporary files, but these are awkward to use.Depending on how you installed Git you might have access to a Bash shell on Windows that should work the way you want.If you have access to PowerShell it looks like the $(...) syntax should work, which is also supported on Bash. posh-git has a good reputation as an environment for Git on PowerShell, though I've never used it personally."
"It's worth understanding what those error messages mean - needs merge and error: you need to resolve your current index first indicate that a merge failed, and that there are conflicts in those files.  If you've decided that whatever merge you were trying to do was a bad idea after all, you can put things back to normal with:git reset --mergeHowever, otherwise you should resolve those merge conflicts, as described in the git manual.Once you've dealt with that by either technique you should be able to checkout the 9-sign-in-out branch.  The problem with just renaming your 9-sign-in-out to master, as suggested in wRAR's answer is that if you've shared your previous master branch with anyone, this will create problems for them, since if the history of the two branches diverged, you'll be publishing rewritten history.Essentially what you want to do is to merge your topic branch 9-sign-in-out into master but exactly keep the versions of the files in the topic branch.  You could do this with the following steps:# Switch to the topic branch:git checkout 9-sign-in-out# Create a merge commit, which looks as if it's merging in from master, but is# actually discarding everything from the master branch and keeping everything# from 9-sign-in-out:git merge -s ours master# Switch back to the master branch:git checkout master# Merge the topic branch into master - this should now be a fast-forward# that leaves you with master exactly as 9-sign-in-out was:git merge 9-sign-in-outgit checkout -f 9-sign-in-out # change branch, discarding all local modificationsgit branch -M master # rename the current branch to master, discarding current master"
"I followed your instructions and was able to reproduce the problem.Its not something you did, the object 280c12ab49223c64c6f914944287a7d049cf4dd0is corrupted and there is nothing you can do in order to fix it.I manged to do a workaround and to get the content of master:git show 280c12ab49223c64c6f914944287a7d049cf4dd0(will display bad object)cd siclgit checkout closgit branch -d mastergit fetch --all --prunegit checkout mastergit fsckAfter the above steps the git show 280c12ab49223c64c6f914944287a7d049cf4dd0 still display bad-object (since its a problem in the original repository)But what that is more strange is the git fsck does not find any errors, i will look into it later on today.As for now the workaround will allow you to continue your work."
"After some amount of use I now prefer git update-index --skip-worktree which is a much better alternative to the git update-index --assume-unchanged.Check out this SO answer for further information.I also am planning to check out the method specified in this other SO answer which seems to be more defensive approach."
"You did it the wrong way around. You are meant to reset first, to unstage the file, then checkout, to revert local changes.Try this:$ git reset foo/bar.txt$ git checkout foo/bar.txtThis worked perfectly for me:$ git reset -- foo/bar.txt$ git checkout foo/bar.txtgit checkout origin/[branch] .git status// Note dot (.) at the end. And all will be good"
"To remove tracked files (first_file.txt) from git:git rm first_file.txtAnd to remove untracked files, use:rm -r explore_californiastatus tell you what to do.Unmerged paths:  (use ""git reset HEAD <file>..."" to unstage)  (use ""git add <file>..."" to mark resolution)you probably applied a stash or something else that cause a conflict.either add, reset, or rm.If you want to discard modifications you made to the file, you can do:git reset first_Name.txtgit checkout first_Name.txtI don't think execute git rm first_file.txtis a good idea.when git notice your files is unmerged, you should ensure you had committed it.And then open the conflict file:cat first_file.txtfix the conflict4.git add filegit commit -m ""fix conflict""5.    git pushit should works for you."
"You can simply convert your remote repository to bare repository (there is no working copy in the bare repository - the folder contains only the actual repository data).Execute the following command in your remote repository folder:git config --bool core.bare trueThen delete all the files except .git in that folder. And then you will be able to perform git push to the remote repository without any errors.I just had the same error while I began learning Git. Some of the other answers are clearly not for someone new to Git!(I am going to use non technical terms to get the idea across.) Anyway, what is happening is that you have two repositories, one is the original you first made, and the other the work one you just made.Right now you are in your work repository and are using the ""master"" branch. But you also happen to be ""logged in"" in your original repository to the same ""master"" branch. Now since you're ""logged in"" in the original, Git fears you might mess up because you might be working on the original and screw things up. So you need to return to the original repository and do a ""git checkout someotherbranch"", and now you can push with no problems.I hope this helps.The error message describes what has happened. More modern versions of Git refuse to update a branch via a push if that branch is checked out.The easiest way to work between two non-bare repositories is either toalways update the repositories by pull (or fetch and merge) or, if you have to,by pushing to a separate branch (an import branch) and then merging that branch into the master branch on the remote machine.The reason for this restriction is that the push operation operates only on the remote Git repository, it doesn't have access to the index and working tree. So, if allowed, a push on the checked-out branch would change the HEAD to be inconsistent with the index and working tree on the remote repository.This would make it very easy to accidentally commit a change that undoes all of the pushed changes and also makes it very difficult to distinguish between any local changes that have not been committed and differences between the new HEAD, the index and the working tree that have been caused by push moving HEAD.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.There are multiple solutions, depending on your needs.Solution 1: Use a Bare RepostioryAs suggested, if on one machine, you don't need the working directory, you can move to a bare repository. To avoid messing with the repository, you can just clone it:machine1$ cd ..machine1$ mv repo repo.oldmachine1$ git clone --bare repo.old repoNow you can push all you want to the same address as before.Solution 2: Push to a Non-Checked-Out BranchBut if you need to check out the code on your remote <remote>, then you can use a special branch to push. Let's say that in your local repository you have called your remote origin and you're on branch master. Then you could domachine2$ git push origin master:master+machine2Then you need to merge it when you're in the origin remote repo:machine1$ git merge master+machine2Autopsy of the ProblemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.You can get around this ""limitation"" by editing the .git/config on the destination server. Add the following to allow a git repository to be pushed to even if it is ""checked out"":[receive]denyCurrentBranch = warnor[receive]denyCurrentBranch = falseThe first will allow the push while warning of the possibility to mess up the branch, whereas the second will just quietly allow it.This can be used to ""deploy"" code to a server which is not meant for editing. This is not the best approach, but a quick one for deploying code.I like the idea of still having a usable repository on the remote box, but instead of a dummy branch, I like to use:git checkout --detachThis seems to be a very new feature of Git - I'm using git version 1.7.7.4.I had the same issue. For me, I use Git push to move code to my servers. I never change the code on the server side, so this is safe.In the repository, you are pushing to type:git config receive.denyCurrentBranch ignoreThis will allow you to change the repository while it's a working copy.After you run a Git push, go to the remote machine and type this:git checkout -fThis will make the changes you pushed be reflected in the working copy of the remote machine.Please note, this isn't always safe if you make changes on in the working copy that you're pushing to.You can recreate your server repository and push from your local branch master to the server master.On your remote server:mkdir myrepo.gitcd myrepo.gitgit init --bareOK, from your local branch:git push origin master:masterWith a few setup steps you can easily deploy changes to your website using a one-liner like git push productionWhich is nice and simple, and you don't have to log into the remote server and do a pull or anything. Note that this will work best if you don't use your production checkout as a working branch! (The OP was working within a slightly different context, and I think @Robert Gould's solution addressed it well. This solution is more appropriate for deployment to a remote server.) First you need to set up a bare repository somewhere on your server, outside of your webroot.mkdir mywebsite.gitcd mywebsite.gitgit init --bareThen create file hooks/post-receive:#!/bin/shGIT_WORK_TREE=/path/to/webroot/of/mywebsite git checkout -fAnd make the file executable:chmod +x hooks/post-receiveOn your local machine, git remote add production git@myserver.com:mywebsite.gitgit push production +master:refs/heads/masterAll set! Now in the future you can use git push production to deploy your changes!Credit for this solution goes to http://sebduggan.com/blog/deploy-your-website-changes-using-git/. Look there for a more detailed explanation of what's going on.With git config --local receive.denyCurrentBranch updateInstead on the server repository, it also updates the working tree if no untracked overwrite would happen.It was added in Git 2.3 as mentioned by VonC in the comments.I've compiled Git 2.3 and gave it a try. Sample usage:git init servercd servertouch agit add .git commit -m 0git config --local receive.denyCurrentBranch updateInsteadcd ..git clone server localcd localtouch bgit add .git commit -m 1git push origin master:mastercd ../serverlsOutput:abYay, b got pushed!You should only be pushing to a bare repository.  A bare repository is a repository that has no checked out branches.  If you were to cd to a bare repository directory, you'd only see the contents of a .git directory.In fact, set the remote to a non-checked out branch is sufficient. After you checked out your remote in a different branch, you can push.I had the same problem using Git to synchronise repositories on my Android phone and laptop. The solution for me was to do a pull instead of a push, as @CharlesBailey suggested.git push origin master on the Android repository fails for me with the same error messages that @hap497 got because of a push to a nonbare checkout of a repository + working-copy.git pull droid master on the laptop repository and working-copy works for me. Of course, you need to have previously run something like git remote add droid /media/KINGSTON4GB/notes_repo/.Older versions of Git used to allow pushes to the currently checked out branch of a non-bare repository.  It turns out this was a terribly confusing thing to allow.  So they added the warning message you see, which is also terribly confusing.If the first repository is just acting as a server then convert it to a bare repository as the other answers recommend and be done with it.If however you need to have a shared branch between two repos that are both in use you can achieve it with the following setupRepo1  - will act as the server and also be used for developmentRepo2  - will be for development only Setup Repo1 as followsCreate a branch to share work on.git branch shared_branchTo be safe, you should also create a $(REPO).git/hooks/update that rejects any changes to anything other than shared_branch, because you don't want people mucking with your private branches.repo1/.git/hooks  (GIT_DIR!)$ cat update#!/bin/shrefname=""$1""oldrev=""$2""newrev=""$3""if [ ""${refname}"" != ""refs/heads/shared_branch"" ]then   echo ""You can only push changes to shared_branch, you cannot push to ${refname}""   exit 1fiNow create a local branch in repo1 where you will do your actual work.git checkout -b my_work --track shared_branchBranch my_work set up to track local branch shared_branch.Switched to a new branch 'my_work'(may need to git config --global push.default upstream in order for git push to work)Now you can create repo2 with git clone path/to/repo1 repo2 git checkout shared_branch At this point you have both repo1 and repo2 setup to work on local branches that push and pull from shared_branch in repo1, without needing to worry about that error message or having the working directory get out of sync in repo1.  Whatever normal workflow you use should work.You have 3 optionsPull and push again:git pull; git pushPush into different branch:git push origin master:fooand merge it on remote (either by git or pull-request)git merge fooForce it (not recommended unless you deliberately changed commits  via rebase):git push origin master -fIf still refused, disable denyCurrentBranch on remote repository:git config receive.denyCurrentBranch ignoreHere is one test you can do to see how the bare server stuff work:Imagine you have a workstation and a server with live site hosted on it, and you want to update this site from time to time (this also applies to a situation where two developers are sending their work back and forth through a bare middleman).InitializationCreate some directory on your local computer and cd into it, then execute these commands:# initializationgit init --bare server/.gitgit clone server contentgit clone server localFirst you create a bare server directory (notice the .git at the end). This directory will serve as a container for your repository files only.Then clone your server repository to a newly created content directory. This is your live/production directory which will be served by your server software.The first two directories resides on your server, the third one is a local directory on your workstation.WorkflowNow here is the basic workflow:Enter the local directory, create some files and commit them. Finally push them to the server:# create crazy stuffgit commit -avgit push origin masterNow enter the content directory and update the server's content:git pullRepeat 1-2. Here content may be another developer that can push to the server too, and local as you may pull from him.OK, in case you want a normal remote repository, then create an extra branch and check it out. Push it into one branch (which is not checked out) and merge it with one which is currently active later after pushing from locally.For example, on a remote server:git branch devgit checkout devOn the local setup:git push On remote server:git merge devI had to re-run git --init in an existing bare repository, and this had created a .git directory inside the bare repository tree - I realized that after typing git status there. I deleted that and everything was fine again :)(All these answers are great, but in my case it was something completely different (as far as I can see), as described.)I'm sure most people viewing this question will stop at the first two huge answers, but I'd still like to offer my solution.I had an Eclipse + EGit web project setup when encountering the described error. What helped me was simply using the GitHub app, which seemed to magically resolve the issue. While EGit would always refuse the push, the GitHub desktop app would just shrug its shoulders and push my changes. Maybe it handles the multi-login-situation more gracefully.An article I found that might be useful to others is Git in 5 minutes.I had an Xcode project under Git version control that I wanted to push up to a Virtual Distributed Ethernet (VDE) I have in a DC. The VDE runs Centos 5.None of the articles I read about Git talked about bare repositories. It all sounded so simple until I tried what I thought should be easy coming from an SVN background.The suggestions here to make the remote repository bare worked. Even better for my requirements was to clone the Xcode project to projectname.git, copy that to the remote server; then pushes magically worked. The next step will be getting Xcode to push without errors about commits, but for now I'm okay doing it from Terminal.So:cd /tmp (or another other directory on your system)<br/>git clone --bare /xcode-project-directory projectname.git<br/>scp -r projectname.git sshusername@remotehost.com:repos/<br/>To push changes from your Xcode project after you've committed in Xcode:cd /xcode-project-directory<br/>git push sshusername@remotehost.com:repos/projectname.git<br/>I'm certain there is a smoother more sophisticated way of doing the above, but at a minimum this works. Just so everything is clear, here are some clarifications:/xcode-project-directory is the directory your xcode project is stored in. It's probably /Users/Your_Name/Documents/Project_Name.projectname is literally the name of the project, but it can be anything you care to call it. Git doesn't care, you will.To use scp you need to have a user account on the remote server that's allowed SSH access. Anyone running their own server will have this. If you're using shared hosting or the like, you might be out of luck.remotehost.com is the name of your remote host. You could as easily use its IP address. Just for further clarity I'm using Gitosis on the remote host with SSH keys, so I'm not prompted for passwords when I push. The article Hosting Git Repositories, the Easy (and Secure) Way tells you how to set all that up.The best way to do this is:mkdir ..../remotecd ..../remotegit clone --bare .../currentrepo/This will clone the repository, but it won't make any working copies in .../remote. If you look at the remote, you'll see one directory created, called currentrepo.git, which is probably what you want.Then from your local Git repository:git remote add remoterepo ..../remote/currentrepo.gitAfter you make changes, you can:git push remoterepo masterI just ran into this problem with a deployment git repository on Heroku.I don't know why Heroku has a non-bare repository on their side, but as a workaround I was able to reset the remote repository, and reupload.You shouldn't use Heroku's copy of your repository as your only git repository for collaboration, but just in case, I'll say clearly: Do not do this unless you are sure you have a full copy of your repository stored securely somewhere other than Heroku. Doing a reset will delete the repository contents.To reset:Install the Heroku toolbelt (which contains the command line client) if you haven't already.Install the heroku-repo plugin if you haven't already.heroku plugins:install https://github.com/heroku/heroku-repo.gitDo the reset, which deletes the repository and creates a new, empty oneheroku repo:resetPush to your Heroku remote as you normally would; it will reupload everything."
"I set-up a test to fail. This is what I got:$ git merge newbranchAuto-merging test.txtCONFLICT (content): Merge conflict in test.txtAutomatic merge failed; fix conflicts and then commit the result.$ echo $?1Git returns 0 when it merges correctly, as expected.In short, no. You're going to see exit code 1 for errors, and 0 for success.From a quick grepping of the source, there are some of the expected 127 and 128 for their specific purposes (command not found, errors already reported), and a few unusual codes in a few places, but for run of the mill errors, it's all exit(1).Running git status on a non-git repo returns 128, not 1, which is helpful in quickly determining whether a git repo exists or not.Error 128, with no error message from git, could be a catch-all for ""unexpected problem"".I was getting this on operations that needed to modify files under .git (e.g. ""git checkout -- myfile"" to revert a modified file) by a different user. (In my case ""chmod -R og+w .git"" fixed it; naturally, don't do that unless you understand the security implications for your case!)"
"I guess you solved this problem already but i had this to and could fix it simply by run git pullThis has resulted into a working condition. eventough your files are intact you should backup your local git directory and then run the git pull. after that you should be back in business.If there are files deleted (it should not happen) you can copy them back over a working checkout and commit them from there.This happened to me when I accidentally added my bin/ folder in an Eclipse Java project.Using 'git pull' did not work for me.I fixed it by:closing Eclipserm -rf bingit rm binThen I was able to 'git commit' and continue normally.If your .git/HEAD is corrupted or points to a corrupted object, you can change it manually or by git checkout."
"You might need to reset the file first, before doing the checkout:git reset -- Jovie/Jovie-Info.plistgit checkout -- Jovie/Jovie-Info.plistThe reset un-stage the changes in progress (here the merge, with the conflict markers in the file).Then the checkout can restore the index with the last commit content."
"you need to use git clone to clone a repository:inside your working directory (normally NOT inside a git repository):git clone https://coding@bitbucket.org/coding/coding.git"
"I experienced similar problems when checking out a project into a Windows directory that had a 67- (Windows) or 76- (cygwin) character base path - when added to the path-length of the checked out files, it exceeded Windows' path-length limit:git checkout -f HEADerror: unable to create file <194-character filepath> (No such file or directory)fatal: cannot create directory at '<187-character directory path>': No such fileor directoryI solved the problem by checking out to c:\git, which, at 6 or 15 characters in length, kept the maximum path-length under the Windows limit.Many Windows APIs are limited to 260 symbols for file path name. So git can't create files with names longer than 260 symbols. NTFS file system actually supports longer names (32k) but there is no easy way to allow long names for programs.Workaround 1: move your project to a new location, closer to disk root.Advantage:Everything should work fine (assuming there no files with path longer 260)Disadvantage:You have to change project locationWorkaround 2: create a Junction to your project folder from a folder that is closer to disk root and do git clone from the junction folder. You can do this with mklink command or Link Shell Extension.Advantage:You can have long file names (greater than 260)You can preserver project locationYou may safely delete junction after initial cloning (if you don't need to work with files that violate 260 symbol limit at original location)Disadvantage:Full file name at junction still have to be less 260 symbols. Otherwise this solution will not help.If you want to modify the files with long"
"git checkout only operates inside the ""working tree"".  To do what you want, change Git's idea of what the working tree is.  There are a few different ways to do this:option 1:  run from the Git repositorycd /path/to/repository# git automatically locates the .git directory as usualgit --work-tree=C:/file/path/temp/versionX checkout master~Xoption 2:  run from the destination directorycd C:/file/path/temp/versionX# if --git-dir is specified, Git assumes the working tree is .git --git-dir=/path/to/repository/.git checkout master~Xoption 3:  run from some other directorycd /some/arbitrary/path# need to specify both the path to .git and the destination directorygit --git-dir=/path/to/repository/.git \    --work-tree=C:/file/path/temp/versionX \    checkout master~X"
"Without a complete picture of the repo, what follows is more of a guess than anything else, but it might explain the situation. Let's say your history looks as follows:A -- C [origin/master]  \    B [HEAD, master]You write:This file has been coming up constantly and when I remove it from file system, git will say I removed this file, while in the other messages, it says it is untracked.I'm guessing you may have rungit rm --cached <file-in-question>and committed that deletion in commit B; therefore, the file is no longer tracked in your local repo and but it's still present in your working tree.In the meantime, the upstream branch received commit C from one of your collaborators, in which <file-in-question> was not removed from version control. What you're attempting to effect withgit pull --rebaseis something like this: A -- C [origin/master]       \         B' [HEAD, master]However, as the message says,The [...] untracked working tree [file] would be overwritten by checkoutIndeed, rewinding commit C (in order to replay B on top of it) would result in the revision of <file-in-question> (from commit C) to be checked out in your working tree, in which an untracked file of the same name already exists. The contents of that untracked file may be valuable; you may not want that file to be overwritten by a another version of it. Therefore, Git stops in its track and tells you what's wrong.Edit: Here is a baby example that reproduces the situation...cd ~/Desktopmkdir testcd testgit inittouch README.mdgit add README.mdgit commit -m ""add README""# simulate a remote branch moving ahead by one commit# (that doesn't remove the README)git checkout -b origin_masterprintf ""This is a README.\n"" > README.mdgit add README.mdgit commit -m ""add description in README""# remove the README and create a new commit on mastergit checkout mastergit rm --cached README.mdgit commit -m ""remove README""# simulate an attempt to rebase master to its ""upstream"" branch, origin_mastergit rebase --onto origin_master masterThat last command spews out the following:First, rewinding head to replay your work on top of it...error: The following untracked working tree files would be overwritten by checkout:    README.mdPlease move or remove them before you can switch branches.Abortingcould not detach HEADI suggest you rungit fetchgit log --stat origin/master..master -- <file-in-question>to check whether something like that happened.This could also happen due to a case change on the filename.  I had the same problem and this is what solved it for me.git config core.ignorecase trueTrue for Mac or PC.Alternative solutions at:  Git error: The following untracked working tree files would be overwritten by checkout"
"You don't have any local branch called develop. When doing git checkout develop and no local branches are found, git will understand that you want to make a new local branch called develop, based on a develop branch in a remote repo, if any exists. In your case, you have 2 such branches origin/develop and pateketrueke/develop, so there is an ambiguity.You can be more explicit about it by using the following form:git branch develop origin/developgit checkout developorgit branch develop pateketrueke/developgit checkout developdepending on what you want.These can be abbreviated as:git checkout -b develop origin/developorgit checkout -b develop pateketrueke/develop"
"When you are switching between the branches, git will restore or remove files based on the commits. This is windows issue where the t2.txt is locked up by one of the windows application or server. Try closing down all the application which you think might be culprit (in my case it was Visual studio) and retry git checkout master or git reset --hard origin/master which will reset to master HEAD"
"try git checkout -f master-f or --force Source : https://www.kernel.org/pub/software/scm/git/docs/git-checkout.htmlWhen switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes.When checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored."
"When you clone, git gets all the objects from the remote end (compressed and stashed into the .git directory). Once it has all the pieces, it proceeds to unpack all files needed to (re)create the working directory. It is this step that fails, due to not having enough space. This might be due to a disk that is full, or a disk quota exceeded (on shared machines, quotas are often enforced to avoid having users grab more than their fair share of space).Delete your cruft. Make sure you aren't trying to squeeze the Linux kernel or some such monster repository into your few megabytes of account space.I solved the problem. It turns out that my disk was full. You can find out by runningquotaMy result said$ quotaHome Area quota for: jamie_yCurrent Usage: 8 GBCurrent Limit: 8 GBRun du command to find your disk usage.The du command shows the disk space used by the files and directories in a directory. The -h option makes the output easier to read, and the -s option summarizes the result. For example, du -h -s (quoted from http://linux.about.com/od/commands/a/blcmdl1_dux.htm)Run rm -rf folderName to remove the folder/file."
"You can't check out a commit by its message.  You need to check out using the hash:git checkout cc3c292ffd110414cf4db54c5b976f2fIf you want a symbolic name, make a branch or tag at that hash:git branch hw2_c cc3c292ffd110414cf4db54c5b976f2fgit tag hw2_c cc3c292ffd110414cf4db54c5b976f2f"
"I had a similar problem. My laptop ran out of battery during a git operation. Boo. I didn't have any backups. (N.B. Ubuntu One is not a backup solution for git; it will helpfully overwrite your sane repository with your corrupted one.)To the git wizards, if this was a bad way to fix it, please leave a comment. It did, however, work for me... at least temporarily. Step 1: Make a backup of .git (in fact I do this in between every step that changes something, but with a new copy-to name, e.g.  .git-old-1, .git-old-2, etc.): cp -a .git .git-oldStep 2: Run git fsck --fullnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullerror: object file .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e is emptyfatal: loose object 8b61d0135d3195966b443f6c73fb68466264c68e (stored in .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e) is corruptStep 3: Remove the empty file. I figured what the heck; its blank anyway. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e rm: remove write-protected regular empty file `.git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e'? yStep 3: Run git fsck again. Continue deleting the empty files. You can also cd into the .git directory and run find . -type f -empty -delete to remove all empty files. Eventually git started telling me it was actually doing something with the object directories: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: object file .git/objects/e0/cbccee33aea970f4887194047141f79a363636 is emptyfatal: loose object e0cbccee33aea970f4887194047141f79a363636 (stored in .git/objects/e0/cbccee33aea970f4887194047141f79a363636) is corruptStep 4: After deleting all of the empty files, I eventually came to git fsck actually running: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: HEAD: invalid sha1 pointer af9fc0c5939eee40f6be2ed66381d74ec2be895ferror: refs/heads/master does not point to a valid object!error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 5: Try git reflog. Fail because my HEAD is broken. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git reflogfatal: bad object HEADStep 6: Google. Find this. Manually get the last two lines of the reflog: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ tail -n 2 .git/logs/refs/heads/masterf2d4c4868ec7719317a8fce9dc18c4f2e00ede04 9f0abf890b113a287e10d56b66dbab66adc1662d Nathan VanHoudnos <nathanvan@gmail.com> 1347306977 -0400  commit: up to p. 24, including correcting spelling of my name9f0abf890b113a287e10d56b66dbab66adc1662d af9fc0c5939eee40f6be2ed66381d74ec2be895f Nathan VanHoudnos <nathanvan@gmail.com> 1347358589 -0400  commit: fixed up to page 28Step 7: Note that from Step 6 we learned that the HEAD is currently pointing to the very last commit. So let's try to just look at the parent commit:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git show 9f0abf890b113a287e10d56b66dbab66adc1662dcommit 9f0abf890b113a287e10d56b66dbab66adc1662dAuthor: Nathan VanHoudnos <nathanvan@XXXXXX>Date:   Mon Sep 10 15:56:17 2012 -0400    up to p. 24, including correcting spelling of my namediff --git a/tex/MCMC-in-IRT.tex b/tex/MCMC-in-IRT.texindex 86e67a1..b860686 100644--- a/tex/MCMC-in-IRT.tex+++ b/tex/MCMC-in-IRT.texIt worked!Step 8: So now we need to point HEAD to 9f0abf890b113a287e10d56b66dbab66adc1662d. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git update-ref HEAD 9f0abf890b113a287e10d56b66dbab66adc1662dWhich didn't complain.Step 9: See what fsck says:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 10: The invalid sha1 pointer in cache-tree seemed like it was from a (now outdated) index file (source). So I killed it and reset the repo.nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/indexnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git resetUnstaged changes after reset:M   tex/MCMC-in-IRT.texM   tex/recipe-example/build-example-plots.RM   tex/recipe-example/build-failure-plots.RStep 11: Looking at the fsck again...nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!dangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79aThe dangling blobs are not errors. I'm not concerned with master.u1conflict, and now that it is working I don't want to touch it anymore! Step 12: Catching up with my local edits: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git status# On branch master# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   tex/MCMC-in-IRT.tex#   modified:   tex/recipe-example/build-example-plots.R#   modified:   tex/recipe-example/build-failure-plots.R#< ... snip ... >no changes added to commit (use ""git add"" and/or ""git commit -a"")nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""recovering from the git fiasco""[master 7922876] recovering from the git fiasco 3 files changed, 12 insertions(+), 94 deletions(-)nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git add tex/sept2012_code/example-code-testing.Rnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""adding in the example code""[master 385c023] adding in the example code 1 file changed, 331 insertions(+) create mode 100644 tex/sept2012_code/example-code-testing.RSo hopefully that can be of some use to people in the future. I'm glad it worked.I solved this removing the various empty files that git fsck was detecting, and then running a simple git pull.I find it disappointing that now that even filesystems implement journaling and other ""transactional"" techniques to keep the fs sane, git can get to a corrupted state (and not be able to recover by itself) because of a power failure or space on device.I just had the same issue : after pulling the distant repository, when I did a git status I got :""error: object file (...) is empty""""fatal: loose object (...) is corrupted""The way I resolved this was to :git stashremoving git file in error (not sure that is necessary)git stash clearI dont know exactly what things happened, but that instructions seemed to make everything clean.This error happens to me when I am pushing my commit and my computer hangs.This is how I've fix it.Steps to fixgit statusshow the empty/corrupt object filerm .git/objects/08/3834cb34d155e67a8930604d57d3d302d7ec12remove itgit statusI got fatal: bad object HEAD messagerm .git/indexI remove the index for the resetgit resetfatal: Could not parse object 'HEAD'.git statusgit pulljust to check whats happeningtail -n 2 .git/logs/refs/heads/MY-CURRENT-BRANCHprints the last 2 lines tail -n 2 of log branch to show my last 2 commit hashgit update-ref HEAD 7221fa02cb627470db163826da4265609aba47b2I pick the last commit hashgit statusshows all my file as deleted because i removed the .git/index filegit resetcontinue to the resetgit statusverify my fixNote:    The steps starts when I landed on this question and used the answers as reference.The git object files have gone corrupt (as pointed out in other answers as well). This can happen during machine crashes, etc.I had the same thing. After reading the other top answers here I found the quickest way to fix the broken git repository with the following commands (execute in the git working directory that contains the .git folder):(Be sure to back up your git repository folder first!)find .git/objects/ -type f -empty | xargs rmgit fetch -pgit fsck --fullThis will first remove any empty object files that cause corruption of the repository as a whole, and then fetch down the missing objects (as well as latest changes) from the remote repository, and then do a full object store check. Which, at this point, should succeed without any errors (there may be still some warnings though!)PS. This answer suggests you have a remote copy of your git repository  somewhere (e.g. on GitHub) and the broken repository is the local repository that is tied to the remote repository which is still in tact. If that is not the case, then do not attempt to fix it the way I recommend.mv your folder app to make backup, i.e. mv app_folder app_folder_bk (it is like a git stash)git clone your_repositoryFinally,.  Open a merge tool (I use meld diff viewer linux or Winmerge Windows) and copy the changes from right(app_folder_bk)  to left( new app_folder)  (it is like a git stash apply).That's all. Maybe it is not the best way, but I think it is so practical .In my case, this error occurred because I was typing commit message and my notebook turned off.I did these steps to fix the error:git checkout -b backup-branch # Create a backup branchgit reset --hard HEAD~4 # Reset to the commit where everything works well. In my case, I had to back 4 commits in the head, that is until my head be at the point before I was typing the commit message. Before doing this step, copy the hash of the commits you will reset, in my case I copied the hash of the 4 last commitsgit cherry-pick <commit-hash> # Cherry pick the reseted commits (in my case 4, so I did this step 4 times) from the old branch to the new branch. git push origin backup-branch # Push the new branch to be sure everything works wellgit branch -D your-branch # Delete the branch locally ('your-branch' is the branch with problem)git push origin :your-branch # Delete the branch from remotegit branch -m backup-branch your-branch # Rename the backup branch to have the name of the branch that had the problemgit push origin your-branch # Push the new branchgit push origin :backup-branch # Delete the backup branch from remoteHere is a really simple and quick way to deal with this problem IF you have a local repo with all the branches and commits you need, and if you're OK with creating a new repo (or deleting the server's repo and making a new one in it's place):Create a new empty repo on the server (or delete the old repo and create a new one in its place)Change the remote URL of your local copy to point to the remote URL of the new repo.Push all branches from your local repo to the new server repo.This preserves all the commit history and branches that you had in your local repo.If you have collaborators on the repo, then I think in many cases all your collaborators have to do is change the remote URL of their local repo as well, and optionally push any commits they have that the server doesn't have.This solution worked for me when I ran into this same problem. I had one collaborator. After I pushed my local repo to the new remote repo, he simply changed his local repo to point to the remote repo URL and everything worked fine.If you don't care about keeping your historical commits, just run rm -r .gitThen answer yes to anything asking about deleting write-protected files.Problem solved in under a minute.Because I have to reboot my VM regularly, so somehow this problem happens to me very often. After few times of it, I realized I cannot repeat the process described by @Nathan-Vanhoudnos every time this happens, though it always works. Then I figured out the following faster solution.Step 1Move your entire repo to another folder.mv current_repo temp_repoStep 2Clone the repo from origin again.git clone source_to_current_repo.gitStep 3Remove Everything under the new repo except the .git folder.Step 4Move Everything from the temp_repo to the new repo except the .git folder.Step 5Remove the temp_repo, and we are done.After few times, I'm sure you can do this procedures very quickly."
"This happened to me and git reset --hard HEAD from the accepted answer didn't help. However, running spring stop did the trick. I suspect spring is rewriting the file whenever it is modified to ensure that it is in sync with the code running via spring.After doing the following, I was able to pull and check out branches again.git checkout Gemfile.lockgit reset --hard HEADI'm not sure why and how this solution works. Explanations are welcome.The reason git was detecting Gemfile.lock as modified in my case, was that the bottom of the file had BUNDLED WITH 1.10.3. After updating bundler gem update bundler, regenerating and committing Gemfile.lock, it stopped appearing in git as modified.git version 2.2.1, Mac OSX version 10.10.4, iTerm2 Build 2.9.20150624-nightly (w/shell integration)"
"I've only ever seen this error on Windows and what it seems to mean is that something blocked git from modifying a file at the moment when it tried to a apply a patch.Windows tends to give processes exclusive access to files when it shouldn't really be necessary, in the past virus checkers have been one source of suspicion but I've never proved this conclusively.Probably the easiest thing to do is to abort and try again, hoping that it doesn't happen the next time.git rebase --abortYou can attempt to use git apply and knowledge of what commit git was actually trying to do before doing a git rebase --continue but in all honesty I wouldn't recommend this. Most of the times I've seen this tried there's been a better than evens chance that something gets accidentally missed or messed up.Try closing any programs that have the folder open, such as editors, explorer windows, command prompts, and FTP programs. This always fixes the issue for me on Windows.Just close VISUAL STUDIO. It might workWhen I see this on my machine, it's worse than just a ""some process has the file open"".  The actual ownership of the file gets jacked up to the point where I (running as administrator) can only access it after rebooting.Nearest I can tell, IIS is part of the problem.  If I switch between two major branches that require a lot of files to modify, git will delete a file or directory (usually DLLs) while IIS is trying to do something or another with it.  At this point, the IIS process automatically overwrites the file on disk with a version that's locked and appears to be owned by nobody.Stopping IIS at this point doesn't do it.  Best I've found out to do is to reboot, and remember to stop IIS before changing across major branches in the future.I know that doesn't really answer the question, but might be helpful to others.On Windows, it can be a TortoiseGIT process that blocks those files. Open task manager and end process TGitCache.exe.This can also happen when you're using SublimeText and the popup window asking you to buy the program is not closed.I had a similar problem. But it was very simple to resolve. On a Windows machine, my file explorer had a folder open that existed in one branch but not in the other I checked out. Closing the File explorer resolved the problem.If the IDE you use(in case you use one) might have been getting in the way as well. That's what happened to me when using QtCreator.My encounter with this problem was caused by my editor, Intellij.  As part of its internal version controls, it had gone through and locked all hidden git files.  (For various reasons, I was not using the git plugin that comes with Intellij...)  So I opened a normal dos window as Administrator, changed to the directory, and executedattrib -R /SThat removed the lock on the files and everything worked after that and I could sync my changes using the GitHub windows client.I agree with the above ""Close Visual Studio"" answers. However, an additional step I had to do even after I'd closed Visual Studio was to manually kill the ""devenv.exe"" Visual Studio process in Task Explorer.After I had done this I was able to again run in gitbash:git pulland the ""cannot stat filename"" error disappeared. It is perhaps due to a Visual Studio extension keeping the process open for longer even after closing."
"I often have this problem if something has changed, added files to gitignore or something else. Maybe you have to rebuild the index.Updated: added recursive and file param to git rmIn my case this worked:remove cached files (only the paths are removed from the index, not the real files!!!)git rm -r --cached .add all files to the indexgit add .commitgit commit -m ""hopefully fixed pathspec error""UPDATE:If this won't work, try the following:Get a new checkout from your reporemove composer, composer.lock, vendor/ from your .gitignorerun the above suggestion againmove the folders composer, composer.lock, vendor/ outside your repoadd and commit, maybe add with -A to add that the files are deletedadd composer, composer.lock, vendor/ to your .gitignore and commitmove back the folders composer, composer.lock, vendor/ to your repoNow it should be gone from the repo and due to your .gitignore, never will be commited again. Hopefully the pathspec error is gone :)"
"I have solved the same problem by using the Git command prompt in Visual Studio, because it gives you more ability:http://msdn.microsoft.com/en-us/library/vstudio/dd286572.aspxYou also may install this extension to facilitate the work with it (it gives you ability do not enter passwords each time):http://gitcredentialstore.codeplex.com/Then I used this commands:git pull // I got an error on this stepgit stashgit pullmore information about commands here:http://git-scm.com/docs/git-pullhttp://git-scm.com/book/en/Git-Tools-Stashinghttp://git-scm.com/docs/git-commitAnd as CharlesB said it is due to ""conflict between your changes and the changes from another branch"".You have some uncommited changes, commit or undo it and git pull will workI experienced this issue during a pull via visual studio. There was a change to a hidden file: .ntvs_analysis.datSo I:Show hidden files via control panel => folder options => view => show hidden files and dirs just to see that is was thereIn the project dir use the git gui to undo the change to that fileAfter that the pull request was successful."
"tl;drFrom the folder in which you want the source to live, using a git-bash prompt NOT powershell (although see my edit below):git clone ‰ÛÒn <repo> <local-directory-name>cd <local-directory-name>git config core.sparsecheckout trueecho some/sub-folder/you/want >> .git/info/sparse-checkoutgit checkout <branch-name>Full explanationSparse checkouts enable you to work on a subset of the repository. It‰Ûªs worth the effort to set up sparse checkouts on large repositories, everything is much faster!I struggled with setting it up on windows getting a lot of ‰ÛÏerror: Sparse checkout leaves no entry on the working directory‰Ûù. After a bit of research, I found the following steps were minimal and had consistently good results for me ‰ÛÒ YMMV.The most important point is this ‰ÛÒ DO NOT USE POWERSHELL/CMD FOR THESE STEPS ‰ÛÒ use a git bash prompt. This is because otherwise the echo command produces a UNICODE file with a BOM marker. The file MUST be an ANSI formatted file with UNIX style line endings for git to parse it correctly. This is the most likely cause of ‰ÛÏerror: Sparse checkout leaves no entry on the working directory‰Ûù errors.From a parent of the directory you wish to be the root folder, assuming a folder name of ‰ÛÏsrc‰Ûù do the following, This grabs the whole repo (which is still required), but does importantly does not perform a checkout, and correctly sets up the origin remote and branch tracking.git clone ‰ÛÒn <your repository> srcYou should have a fairly empty looking src folder (it will have the .git hidden folder). Now run the following. This updates the local git config to turn on sparse checkouts, and creates a file in the .git/info hidden folder that will list all the folders you want to include when doing a sparse checkout. This can be edited later to add other folders. Important: Be sure to use a git bash prompt for the below, and use an editor supporting unix line-ending conventions and save as ANSI when editing the sparse-checkout file, or you may get ‰ÛÏerror: Sparse checkout leaves no entry on the working directory‰Ûù errors. The <path you want to checkout> might look like this: path/to/subfolder - note the lack of leading and trailing path separators.cd srcgit config core.sparsecheckout trueecho <path you want to checkout> >> .git/info/sparse-checkoutNow you are ready to checkout. This should leave just the sparse-checkout folders populated. If it doesn‰Ûªt, carefully check your spelling of everything above!git checkout <branch-name>Edit - Echo in PowershellI recently discovered that echo in powershell is a synomym for write-output. It's possible to get ASCII output by piping the echo to the out-file command which allows you to specify an encoding. So this will work from Powershell and give the correct file contents:echo some/sub/folder/you/want | out-file -encoding ascii .git/info/sparse-checkout"
"Doh.  The commit that deleted those files would necessarily not have them anymore.  Thus, I need to go one commit further back.  Running:git checkout <sha of deleting commit>^ path/to/my/fileworks perfectly"
"'origin/master' which can not be resolved as commitStrange: you need to check your remotes:git remote -vAnd make sure origin is fetched:git fetch originThen:git branch -avv(to see if you do have fetched an origin/master branch)FWIW: If you have a typo in your branchname you'll get this same error.You can get this error in the context of, e.g. a Travis build that, by default, checks code out with git clone --depth=50 --branch=master. To the best of my knowledge, you can control --depth via .travis.yml but not the --branch. Since that results in only a single branch being tracked by the remote, you need to independently update the remote to track the desired remote's refs.Before:$ git branch -a* masterremotes/origin/HEAD -> origin/masterremotes/origin/masterThe fix:$ git remote set-branches --add origin branch-1$ git remote set-branches --add origin branch-2$ git fetchAfter:$ git branch -a* masterremotes/origin/HEAD -> origin/masterremotes/origin/branch-1remotes/origin/branch-2remotes/origin/masterThis simple thing worked for me!If it says it can't do 2 things at same time, separate them. git branch branch_name origin/branch_name git checkout branch_nameFor me I needed to add the remote:git remote -add myRemoteName('origin' in your case) remoteGitURLthen I could fetchgit fetch myRemoteName"
"Git protects you from switching to another branch, because that would override some changes you applied to the file project.properties. You can either throw the changes away by using git checkout -f lab_master or stash them first via git stash (and git stash pop after you checked out the other branch.) If you are sure, you want to keep the changes, you can also simply commit them.You need to either commit your changes or stash them, http://git-scm.com/book/en/Git-Tools-Stashing"
"The rule here is simple in one way and complicated/hard-to-explain in another:You may switch branches with uncommitted changes in the work-tree if and only if said switching does not require clobbering those changes.That is‰ÛÓand please note that this is still simplified; there are some extra-difficult corner cases with staged git adds, git rms and such‰ÛÓsuppose you are on branch1.  Without -f, git checkout branch2 would have to do this:For every file that is in branch1 and not in branch2, remove that file.For every file that is in branch2 and not in branch1, create that file (with appropriate contents).For every file that is in both branches, if the version in branch2 is different, update the working tree version.Each of these steps could clobber something in your work-tree:Removing a file is ""safe"" if the version in the work-tree is the same as the committed version in branch1; it's ""unsafe"" if you've made changes.Creating a file the way it appears in branch2 is ""safe"" if it does not exist now.1  It's ""unsafe"" if it does exist now but has the ""wrong"" contents.And of course, replacing the work-tree version of a file with a different version is ""safe"" if the work-tree version is already committed to branch1.Creating a new branch (git checkout -b newbranch) is always considered ""safe"": no files will be added, removed, or altered in the work-tree as part of this process, and the index/staging-area is also untouched.  (Caveat: it's safe when creating a new branch without changing the new branch's starting-point; but if you add another argument, e.g., git checkout -b newbranch different-start-point, this might have to change things, to move to different-start-point.  Git will then apply the checkout safety rules as usual.)Does it matter whether the changes are staged or unstaged?Yes, in some ways.  In particular, you can stage a change, then ""de-modify"" the work tree file.  Here's a file in two branches, that's different in branch1 and branch2:$ git show branch1:inboththis file is in both branches$ git show branch2:inboththis file is in both branchesbut it has more stuff in branch2 now$ git checkout branch1Switched to branch 'branch1'$ echo 'but it has more stuff in branch2 now' >> inbothAt this point, the working tree file inboth matches the one in branch2, even though we're on branch1.  This change is not staged for commit, which is what git status --short shows here:$ git status --short M inbothThe space-then-M means ""modified but not staged"" (or more precisely, working-tree copy differs from staged/index copy).$ git checkout branch2error: Your local changes ...OK, now let's stage the working-tree copy, which we already know also matches the copy in branch2.$ git add inboth$ git status --shortM  inboth$ git checkout branch2Switched to branch 'branch2'Here the staged-and-working copies both matched what was in branch2, so the checkout was allowed.Let's try another step:$ git checkout branch1Switched to branch 'branch1'$ cat inboththis file is in both branchesThe change I made is lost from the staging area now (because checkout writes through the staging area).  This is a bit of a corner case.  The change is not gone, but the fact that I had staged it, is gone.Let's stage a third variant of the file, different from either branch-copy, then set the working copy to match the current branch version:$ echo 'staged version different from all' > inboth$ git add inboth$ git show branch1:inboth > inboth$ git status --shortMM inbothThe two Ms here mean: staged file differs from HEAD file, and, working-tree file differs from staged file.  The working-tree version does match the branch1 (aka HEAD) version:$ git diff HEAD$But git checkout won't allow the checkout:$ git checkout branch2error: Your local changes ...Let's set the branch2 version as the working version:$ git show branch2:inboth > inboth$ git status --shortMM inboth$ git diff HEADdiff --git a/inboth b/inbothindex ecb07f7..aee20fb 100644--- a/inboth+++ b/inboth@@ -1 +1,2 @@ this file is in both branches+but it has more stuff in branch2 now$ git diff branch2 -- inboth$ git checkout branch2error: Your local changes ...Even though the current working copy matches the one in branch2, the staged file does not, so a git checkout would lose that copy, and the git checkout is rejected.1It might be considered ""sort-of-safe"" if it already exists with the ""right contents"", so that git does not have to create it after all.  I recall at least some versions of git allowing this, but testing just now shows it to be considered ""unsafe"" in git 1.8.5.4.  The same argument would apply to a modified file that happens to be modified to match the to-be-switch-to branch.  Again, 1.8.5.4 just says ""would be overwritten"", though.You have two choices: stash your changes:git stashthen later to get them back:git stash applyor put your changes on a branch so you can get the remote branch and then merge your changes onto it. That's one of the greatest things about git: you can make a branch, commit to it, then fetch other changes on to the branch you were on.You say it doesn't make any sense, but you are only doing it so you can merge them at will after doing the pull. Obviously your other choice is to commit on your copy of the branch and then do the pull. The presumption is you either don't want to do that (in which case I am puzzled that you don't want a branch) or you are afraid of conflicts.If the new branch contains edits that are different from the current branch for that particular changed file, then it will not allow you to switch branches until the change is committed or stashed. If the changed file is the same on both branches (that is, the committed version of that file), then you can switch freely.Example:$ echo 'hello world' > file.txt$ git add file.txt$ git commit -m ""adding file.txt""$ git checkout -b experiment$ echo 'goodbye world' >> file.txt$ git add file.txt$ git commit -m ""added text""     # experiment now contains changes that master doesn't have     # any future changes to this file will keep you from changing branches     # until the changes are stashed or committed$ echo ""and we're back"" >> file.txt  # making additional changes$ git checkout mastererror: Your local changes to the following files would be overwritten by checkout:    file.txtPlease, commit your changes or stash them before you can switch branches.AbortingThis goes for untracked files as well as tracked files. Here's an example for an untracked file.Example:$ git checkout -b experimental  # creates new branch 'experimental'$ echo 'hello world' > file.txt$ git add file.txt$ git commit -m ""added file.txt""$ git checkout master # master does not have file.txt$ echo 'goodbye world' > file.txt$ git checkout experimentalerror: The following untracked working tree files would be overwritten by checkout:    file.txtPlease move or remove them before you can switch branches.AbortingA good example of why you WOULD want to move between branches while making changes would be if you were performing some experiments on master, wanted to commit them, but not to master just yet...$ echo 'experimental change' >> file.txt # change to existing tracked file   # I want to save these, but not on master$ git checkout -b experimentM       file.txtSwitched to branch 'experiment'$ git add file.txt$ git commit -m ""possible modification for file.txt"""
"The msysgit FAQ on Git cannot create a filedirectory with a long path seems not up to date, as it still links to old msysgit ticket #110. However, according to later ticket #122 the problem has been fixed in msysgit 1.9, thus:Update to msysgit 1.9 (or later)Launch Git BashGot to your Git repository which 'suffers' of long paths issueEnable long paths support with git config core.longpaths trueSo far, it's worked for me very well.Be aware of important notice in comment on the ticket #122don't come back here and complain that it breaks Windows Explorer,  cmd.exe, bash or whatever tools you're using.As someone that has ran into this problem constantly with java repositories on Windows, the best solution is to install Cygwin (https://www.cygwin.com/) and use its git installation under all > devel > git.  The reason this is the best solution I have come across is since Cygwin manages the long path names so other provided commands benefit. Ex: find, cp and rm.  Trust me, the real problem begins when you have to delete path names that are too long in Windows.Or you can edit directly your git config file:edit file : YourRepoFolder -> .git -> config[core]    repositoryformatversion = 0    filemode = false    ...    longpaths = true        <-- (add this line under core section)Try to keep your files closer to the file system root. More details : for technical reasons, Git for Windows cannot create files or directories when the absolute path is longer than 260 characters."
"Try run :git checkout spring/50c4ccb1d8f630979e84c03ba14676d1.pidAnd then try merge branches again.git merge filling-in-layoutYour local changes to file spring/50c4ccb1d8f630979e84c03ba14676d1.pid giving this error.There might be some issue with your .gitignore file. Because you already have /spring/*.pid in your gitignore file but it still checking this file. Might be your previous commit have this file.The spring process probably got too big. I had the same problem.you can use pkill -15 -f springand here is more info from https://www.railstutorial.org/book/static_pagesOn Unix-like systems such as Linux and OS X, user and system tasks  each take place within a well-defined container called a process. To  see all the processes on your system, you can use the ps command with  the aux options:$ ps aux To filter the processes by type, you can run the results of  ps through the grep pattern-matcher using a Unix pipe |:$ ps aux | grep spring   ubuntu 12241 0.3 0.5 589960 178416 ? Ssl  Sep20 1:46   spring app | sample_app | started 7 hours ago The result  shown gives some details about the process, but the most important  thing is the first number, which is the process id, or pid. To  eliminate an unwanted process, use the kill command to issue the Unix  kill code (which happens to be 9) to the pid:$ kill -15 12241 This is the technique I recommend for killing  individual processes, such as a rogue Rails server (with the pid found  via ps aux | grep server), but sometimes it‰Ûªs convenient to kill all  the processes matching a particular process name, such as when you  want to kill all the spring processes gunking up your system. In this  particular case, you should first try stopping the processes with the  spring command itself:$ spring stop Sometimes this doesn‰Ûªt work, though, and you can kill  all the processes with name spring using the pkill command as follows:$ pkill -15 -f spring Any time something isn‰Ûªt behaving as expected  or a process appears to be frozen, it‰Ûªs a good idea to run ps aux to  see what‰Ûªs going on, and then run kill -15  or pkill -15 -f   to clear things up."
"If you are running git under a file system that is not case sensitive (Windows or OS X) this will occur if there are two branches with the same name but different capitalisation, e.g. user_model_changes and User_model_changes as both of the remote branches will match the same tracking ref.Delete the wrong remote branch (you shouldn't have branches that differ only by case) and then git remote prune origin and everything should workPermanent Fixgit update-ref -d resolved my instance of this error, e.g.git update-ref -d refs/remotes/origin/userNote that this doesn't impact remote.In my case, a subsequent git fetch fetched that branch again, and following git fetches/pulls no longer gave the error ""remote ref is at but expected"".If that doesn't work, a temporary fix:Note also that if you don't care about the branch in question (e.g. you just want to update master, not origin/user), a git pull workaround is to fetch then just merge the particular branch you care about, e.g.git fetch # may give an error for a particular branch, but other branches will still be successfully fetchedgit merge origin/master"
"Yes you will have to resolve the conflicts, mark them as so with git add or git rm and git commitThe commit is not done yet, after the git revert - if you see .git/MERGE_MSG, you will see something like:Revert ""adding revert""This reverts commit  c1366607f15a8384434948cb0bcbf8ece48bb460.Conflicts:revertSo once you resolved the merge and do a git commit you will be presented with the message from the MERGE_MSG file and you can commit and that completes the revert.Below is an alternative to revertIt's a bit fuzzy, so ignore me if I'm at the wrong track here!To reset to previousgit reset --hard HEAD^Discard changes of a certain filegit checkout path/to/file/to/revertIf this isn't what you are looking for you always have the option of doing a new checkout of an older revision."
"If you want remove all local changes from your working copy, simply stash them:git stash save --keep-indexIf you don't need them anymore, you now can drop that stash:git stash dropIf you want to overwrite only specific parts of your local changes, there are two possibilities:Commit everything you don't want to overwrite and use the method above for the rest.Use git checkout path/to/file/to/revert for the changes you wish to overwrite. Make sure that file is not staged via git reset HEAD path/to/file/to/revert.Alright with the help of the other two answers I've come up with a direct solution:git checkout HEAD^ file/to/overwritegit pullHere is a solution that throws away changes:git reset file/to/overwritegit checkout file/to/overwriteYou can either commit your changes before you do the merge, or you stash them:git stashgit merge origin/mastergit stash popMy solution to solve this issue was:git checkout -- <file>Then I could overwrite the file just using:git pullThis works for me to override all local changes and does not require an identity:git reset --hardgit pullIf your repo contains few files which is removed from master:git checkout mastergit fetch origingit reset --hard origin/mastergit checkout -b newbranchIf you want to overwrite specific changes, you need some way of telling it which ones you want to forget.You could try selectively stashing the changes you want to abandon using git stash --patch and then dropping that stash with git stash drop. You can then pull in the remote changes and merge them as normal.You can use this for overwrite filegit checkout file_to_overwriteSometimes, none of these work.  Annoyingly, due to the LF thing I think, what will work is deleting the files, then pulling.  Not that I recommend this solution, but if the file doesn't exist, git won't uselessly inform you that your changes (which may not even be changes) will get overridden, and will let you continue.Use at your own risk."
"I have seen something similar when there is a folder master in the source tree. Unfortunately I didn't find a way to tell git to interpret the value as a branch. Renaming the folder fixed the problem for me.The local master branch in your repository is not different from any other local branch in your repo. You cloned your repository to your development branch, which is the only local branch you have. Thus, if you try to checkout to your local master branch, git says it does not exist. If you want to have both development and master local branch initially the same, you can do one of these things:Download your repo to master branch, and create a local development branch:git clone <repo_url>git checkout -b developmentor download your repo to development branch, and create a local master branch:git clone <REPO-URL> --branch developmentgit checkout -b master"
"If I read that log well, those files have names that end with ""?ref=users""Windows does not allow you to have a '?' in a filename, just like it does not allow to have a ""\"" or ""*"". Under Linux it is possible, if you escape those characters. On Windows, I think it's not possible at all. See http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247You will have a hard time with such names.. I actually can't come up with any idea that would allow you to sync that 1:1. You certainly can fetch them and save them under some safe names like _projects_1099992656_heavenly-sight-a-vision-out-of-blindness__ref=users but I don't know how to do that automatically, or how to later inform Git about that mapping, sorry..These filenames look like they have a HTML-query-parameters suffixed to them. Is it really required? maybe that's just some artifact that could be removed? try talking to the mantainers of the project, maybe they will be able to simply remove that odd suffix?I ran into the same problem, but wasn't willing to rename or delete these files. So here's a workaround in case you can live without accessing those files using a sparse-checkout:Go to the .git folder in your repo and open the file config. (You can also edit your configuration using tortoise-git, but I havn't got it installed here.) In the [core]section add the linesparsecheckout = truethen go to the folder .git/info and create the file sparse-checkout. Add something like*!kickstarter/parsers/data/kickstarter/campaigndetails/*The first line includes everything, while the second excludes all files in kickstarter/parsers/data/kickstarter/campaigndetails/. You should now be able to checkout the repo. Using wild-cards you can probably do more sophisticated excludes. You should now be able to checkout your repo."
"Option 1git checkout -f gh-pagesOption 2git reset --hard     # beware: don't make that a habitgit checkout gh-pagesYou can ignore all uncommitted changes.git reset --hard HEADIf you're really sure that you want to throw away your uncommitted changes (i.e. those that are staged as well as those in your working tree) you can do:git reset --hardIn general, stashing is often saferJust for the sake of completeness, and for those who landed here by searching: Although the OP asks specifically for a solution without stashing, it is worth mentioning that stash is indeed a very nice option:The command saves your local modifications away and reverts the working directory to match the HEAD commit.So you can simplygit stashThis is like resetting to HEAD. When being absolutely positively certain that indeed those uncommitted changes are worthless, simplygit stash dropYou can even have multiple stashes etc. as mentioned in the documentation link above.I would recommend this practice since it puts one in the habit to double-think before resetting without a significant cost.If you have unstaged file, try:git checkout -- .Orgit checkout -- filename"
"The answer should be:we can't create a file named aux.c in windows!See http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx Do not use the following reserved device names for the name of a file:CON, PRN, AUX, NUL, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9. Also avoid these names followed immediately by an extension; for example, NUL.txt is not recommended. For more information, see Namespaces.Was your directory plus your filenames too long for Windows? I came across this problem once, and it was fixed when I tried cloning into a lower directory.A common problem is two files whose names differ only by case ‰ÛÓ git assumes a case sensitive system. If the repository contains both FOO and foo, then attempting to create one after the other will fail.Maybe related to http://stackoverflow.com/questions/1209902/git-checkout-and-reset-on-windows-occasionally-shows-random-files-have-changed"
"I had this problem as well. I solved it by changing the ownership of the directories to the user I was trying to git pull with:sudo chown -R anthony:anthony *I ran that at the root of my git tracked directory to make sure all the files were owned by the correct user.In my case it was having sublime text open with the git controlled directory added as a folder in the sublime project. After closing sublime I was able to switch branches without a problem."
"You have files that are not being tracked. Eitherrm untracked.file1 untracked.file2orgit add . && git commit -m ""adding new previously untracked files that serve a purpose""if you're having permission issues:git add --ignore-errors .Either delete the file if you don't care about it or stash it if you think you will need it in the future.  Or simply rename.Commit the files you want to keep and then do a git clean to remove the extra files you don't want to keep. This article on the git ready website describes it very well.If you just want to get rid of one or two files in your working directory then you can do a dry run first and see which files would be cleaned up using:git clean -nAnd then when you are sure do this: git clean -fgit clean has a -d switch if you want to clean up directories as well. And you can use that together with the other switches, so this is what I would normally use (and then after the dry run change -n to -f):git clean -n -dThen after your git clean, use:git statusto make sure that you have no untracked files or uncommitted changes. And lastly switch to master with:git checkout master"
"Fixed with the following commands:$ cd `brew --prefix`$ git remote add origin https://github.com/Homebrew/homebrew.git$ git fetch origin$ git reset --hard origin/master$ brew updateAlready up-to-date.when i try it, sudo is needed:$ git reset --hard origin/mastererror: unable to unlink old 'Library/Homebrew/macos/xcode.rb' (Permission denied)fatal: Could not reset index file to revision 'origin/master'.$ sudo !!sudo git reset --hard origin/masterPassword:HEAD is now at 97302bf xrootd 3.2.2In my case, I had just upgraded to OS X El Capitan and none of the other solutions worked. I took note of the packages in /usr/local/Cellar and then deleted the Cellar folder and started with a fresh install. rm -rf /usr/local/Cellarruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install )""Then I brew installed the packages again.I had a similar problem where from /usr/local (== $(brew --prefix)) I tried the answer by @Julien Carsique but still got the error:[local]master$ git checkout 3115d85 hdf5.rberror: pathspec '3115d85' did not match any file(s) known to git.error: pathspec 'hdf5.rb' did not match any file(s) known to git.This was because I the hdf5 routine was in /usr/local/Library/tab/homebrew-science which has it's own git repository. To fix this I entered:[local]master$ cd Library/Taps/homebrew/homebrew-science/[homebrew-science]master$ git checkout 3115d85 hdf5.rbNow I can install a previous version of the desired library (e.g. hdf5)Hope this helps someone!"
"I encountered a similar problem today. git status wasn't listing the files which checkout was complaining about. I did a:git checkout -- path/to/fileAnd that undoes any changes to the file.An even easier way to undo all unstaged changes:git checkout -- .As simple as this:git stashgit stash popThe ""errors"" you see when running git stash aren't anything to be concerned about. It's just git recognizing that the file doesn't have any uncommitted changes.Move the offending file to some other location.  Then delete the offending file from your tree.  Pull again.  then diff the changes from your offending file over the file you just pulled.  hack, but it works.I had a similar problem on a fresh clone. I just forced the checkout with the --force (-f) flaggit checkout --force some_branch Probably not the best way of resolving the issue on a repo that you are making changes to, but in my case I was sure I hadn't made any changes, and just wanted to switch branch.It seems that you have untracked files in your working copy, which are tracked on the other branch. Git refuses to checkout the other branch, since your currently untracked local files would be overwritten by the files on the other branch.You can nowAdd those files to your current branch, if those files are relevant for this branchremove those files if they are not needed"
"How can I tell git where to get this file?What can be done?use git reflog and checkout the previous commit before the changes if you need to.reflog is the full history of your repository which allow you to go back to any desired point in timegit log --follow <file> will display the commits where the file was modified (last change will be the first one)This command will display all the log entries for the given file so you can grab the required commit and take the file form there using git checkout SHA-1 file_pathgit bisect  to search in which commit the file was removed.Bisect is the way to search for ""bugs"" and or changes made to the repository use it to track when the file was deleted. you can write script that search if the file exists and run it with the git bisect --run... flagOnce you have the desired SHA-1 use git revert SHA-1 to ""undo"" the changes made in the given commit. I assume you want to do it in a new branch to be safe.If you need only the file and not the rest of the changes:git checkout SHA-1 -- file_pathThe solution to the pathspec issue is specifiying the parent directory, relative to the directory bash is looking at, rather than just the filename, because git is not necessarily running in the same directory that bash is ""on"".Assuming git is running at C:/Program Files (x86)/Git/name@machine ~/path/inside/the/repo/to/the/parent/dir$ git checkout megalongshaofthecommitthatdeletedthefile^ -- filename.extwill look for C:/Program Files (x86)/Git/filename.ext.Instead, run:name@machine ~/path/inside/the/repo/to/the/parent/dir$ git checkout megalongshaofthecommitthatdeletedthefile^ -- ../dir/filename.extwhich will look for C:/repodir/path/inside/the/repo/to/the/parent/dir/filename.ext"
"Git is warning you that forms/answers.php has changes in your working copy or index that have not been committed.You can use git-stash to save your changes then git-stash apply to restore them.The common use case of git-stash is that you are working on changes but then must temporarily checkout a different branch to make a bug fix.  So you can stash your changes in your index and working copy, checkout the other branch, make the bug fix, commit, checkout the original branch, and git-stash apply to restore your changes and pick-up where you left off.Git does a 2-way merge of uncomitted changes when switching branches (using git checkout <branch>), but ordinarily it does only trivial (tree-level) merge.Besides git-stash solution by Karl Voigtland, you can give additional options to git checkout, choosing one of the following options:Tell git to try harder to merge uncomitted changes into branch you switch to with -m / --merge option. With this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.Tell git to overwrite uncomitted changes, throwing away local changes with -f option.  Warning: uncomitted changes will be lost!"
"I've currently made it work by indexing the ignored file once more. I used the command:git update-index --no-assume-unchanged files/dependency/config.luaand then the checkout command executed easily and properly. I'll leave this as an answer here. If someone can answer the following question, I'd be grateful:Is there some way to checkout the remote branch and then either force  ignoring the file files/dependency/config.lua whenever someone pulls  in my changes or something similar?Responding to your earlier question:Check git status if it shows that files/dependency/config.lua is modified.Then you need to follow these steps:add file to gitignore. I think you already have this covered.git rm --cached files/dependency/config.luacommit this change.Related: Remove an Existing File from a Git Repo"
"Are you sure branch labs does not already exist (as in this thread)?You can't have both a file, and a directory with the same name.You're trying to get git to do basically this:% cd .git/refs/heads% ls -ltotal 0-rw-rw-r-- 1 jhe jhe 41 2009-11-14 23:51 labs-rw-rw-r-- 1 jhe jhe 41 2009-11-14 23:51 master% mkdir labsmkdir: cannot create directory 'labs': File existsYou're getting the equivalent of the ""cannot create directory"" error.  When you have a branch with slashes in it, it gets stored as a  directory hierarchy under .git/refs/heads.It is possible to have hierarchical branch names (branch names with slash).  For example in my repository I have such branch(es).  One caveat is that you can't have both branch 'foo' and branch 'foo/bar' in repository.Your problem is not with creating branch with slash in name.$ git branch foo/barerror: unable to resolve reference refs/heads/labs/feature: Not a directoryfatal: Failed to lock ref for update: Not a directoryThe above error message talks about 'labs/feature' branch, not 'foo/bar' (unless it is a mistake in copy'n'paste, i.e you edited parts of session).  What is the result of git branch or git rev-parse --symbolic-full-name HEAD?Sometimes that problem occurs if you already have a branch with the base name.I tried this:git checkout -b features/aName origin/features/aNameUnfortunately, I already had a branch named features, and I got the exception of the question asker.Removing the branch features resolved the problem, the above command worked.I my case I forgot that there was already an unused labs branch. Deleting it solved the problem:git branch -d labsgit checkout -b labs/featureExplanation: You can only have a branch name as parent for other sub-branches or as a normal branch. So the branches labs and labs/feature at the same time is not possible in git.The reason is that the branches are stored in the file system and there you also can't have a file labs and a directory labs at the same level."
"Situation:You have local uncommitted changes You pull from the master repo You get the error ""Checkout conflict with files: xy""Solution:Stage and commit (at least) the files xyPull againIf automerge is possible, everything is ok.If not, the pull merges the files and inserts the merge-conflict markers (<<<<<<, >>>>)Manually edit the conflicting filesCommit and pushThis is the way I solved my problem:Right click the folder that has uncommitted changes on your localClick Team > Advanced > Assume UnchangedPull from master.UPDATE:As Hugo Zuleta rightly pointed out, you should be careful while applying this. He says that it might end up saying the branch is up to date, but the changes aren't shown, resulting in desync from the branch.After closing the Conflict Error Dialog; from the Project Explorer, right click on the head of the project -> Team -> Stashes -> Stash ChangesEnter a name for your stash. E.G. ""Conflict""Try Pulling again. Hopefully there are no errors this time.From the Git Repository view, expand your repository -> Stashed CommitsRight Click on the stash you created in step 2 -> Apply Stashed ChangesThis brings up the merge tool if it can't automatically merge it.Manually resolve the merge conflicts in the file/s.Right Click on the file editor -> Team -> Add To IndexIf you are not ready to commit the file or just don't want it in the Index, right click on the file editor -> Team -> Remove from Index.Your local working directory file should be be merged"
"To throw away all your changes and go back to the latest commit, usegit reset --hard HEADA fast-forward is a kind of merge where there's no actual merging to do, you just have to hop along the commits. In this case, git isn't actually telling you what to do, but it's letting you know that you really ought to pull (because it would be trivial).The git checkout -- file operation operates strictly on the working directory, or the filesystem state of your repository (note that there is a space between the -- and the file argument, to distinguish the command from checking out a branch or tag named file).If anything has been git add-ed to the repository, in git terminology it is a part of the index, and a checkout won't fix that, you need to use the git reset command, which updates the state of the index.As a shortcut for doing both of the above, git reset --hard will reset the index and flush out the changes in the working directory (so that your working directory and index are in identical states (the state given by an option argument; without any argument the default is HEAD). Usual caveats apply with regards to making sure you don't nuke things you want saved if they haven't been committed, but from the sounds of it this is what you want.As for the fast-forward merge, git pull should take care of that automatically, but since in git terms a pull involves both fetching the changes from upstream and merging your local branches with the new upstream, the merge part of this will fail if you have a dirty working tree, so the above commands will need to be done (or other permutations of committing/stashing operations) before the merge can proceed. Git is in general very careful to keep you from losing work unless you specifically tell it not to care.As a recommendation, if you want to track upstream, do so in your master branch and make any additional changes (even if you're just playing around) in a topic branch, where you can feel free to commit away and not worry about being able to absorb changes back from upstream.UPDATE: If reset/checkout are not actually resetting your working directory, check the core.autocrlf property on your directory: git config --get core.autocrlfIf you are using a repository that makes the rounds between Windows/UNIX/whatever filesystems with different line-ending conventions, and attempts to prevent the madness that lies therein by reading files from the filesystem with a CRLF as if they had LF terminators, and then reversing that conversion when writing to the filesystem, the idea being that you can work on files normally without introducing a ton of whitespace changes into your diffs, but it often causes more issues than necessary. Try a git diff --ignore-all-space and, if it shows nothing, that's your issue, and you can try to update the config file to turn that off, and repeat."
"I've solved the problem , and I will explain how :Download Github For Windows client and install it.After The client successfully installed , connect it with your github account.It should be easy , just follow the wizard.Then you should add git.exe location to your ""Path Variable"". The location you should add will probably be something like :C:\Users\Your_Username\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\binAlternatively , if you don't want to add to environment variables. You can open the android studio and go to :Settings -> Version Control -> GitIn text box next to ""Path to Git Executable"" you will see ""git.exe"" , just give it a full path like so :C:\Users\Your_Username\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\bin\git.exeHope it saved your time . Happy coding :)EDIT :For latest Github for windows versions some can find the git.exe under ""...\cmd\git.exe"" rather than ""...\bin\git.exe"".I found what I think is a faster solution.Install Git for Windows from here: http://git-scm.com/download/winThat automatically adds its path to the system variable during installation if you tell the installer to do so (it asks for that). So you don't have to edit anything manually.Just close and restart Android Studio if it's open and you're ready to go."
"Thanks to my twitter friend (dotNet and Azure guru) Ilija for pointing me to the right direction. I was able to achieve my goal after reading through the SO post I've mentioned in the OP.Here's what I did:#!/bin/bashexport GIT_WORK_TREE=/path/to/xyzexport GIT_DIR=/path/to/xyz/.gitcd $GIT_WORK_TREE echo ""Checking out dev""git checkout devgit clean -df & git checkout devunset GIT_WORK_TREEunset GIT_DIRecho ""Checking out sumodules""mkdir ""codeigniter""git submodule update --init echo ""clean""echo ""Setting access rights on files and folders""echo ""Run: chmod 755 -R $GIT_WORK_TREE""cd ""$GIT_WORK_TREE""chmod 755 -R ""$GIT_WORK_TREE""echo ""Done.""export was the the key to solving my issue.Please note two unset commands.I ran them as my repo has a submodule. To have the submodule fetch smooth."
"I usually see that kind of error when there is a process not releasing the handle of those files.Make sure nothing is running, and then try your checkout again.Note: it can also be related with the way Git has been installed (on Windows, UAC can generate problem if msysgit is installed in C:\Program or C:\Program Files, see ""msysgit - sh.exe - fork: Permission denied - Vista 64 bit"" and comment 2 of issue 437)In my first encounter with this error my user had rights to ""write"" to the file but not the containing directory. Check the permissions of the directory containing the file.""Unlink"" essentially means ""delete file"" in this case. This error is not caused by git itself. You should have similar errors deleting those files manually, in a command line or file explorer.I was having the issue with a default-settings.php file in drupal 7. In this case I wasn't able to delete it or revert it just like @rtconner said. I didn't have an application or anything using this file, and it ended up being a permissions error.I added chmod 777 * to the folder and then I was able to revert it no problem.You don't have the access permission, maybe because you are not the owner.Fix by changing the owner to yourself:sudo chown -R your_login_name /path/to/folderTo those who are using Intellij, as @rtconner said this problem is not caused by git. Since your IDE is locked a file(s) git cannot un-link it. So, you need to close your IDE and then try to merge (or whatever you like) it via command line.In my case it was a "":"" character in a folder name prevenitng the git repo to checkout on windows.I ran into this problem whenever running ""git repack"" or ""git gc"" on my OS X machines, even when running git with admin privileges, and I finally solved it after coming across this page: http://hints.macworld.com/comment.php?mode=view&cid=1734The fix is to open a terminal, go to your git repo, cd into the .git folder, and then do:chflags -R nouchg *If that was the issue, then after that, your git commands will work as normal."
"There was a bug in Homebrew that was fixed just a few days ago. To fix the bug you can run git reset --hard FETCH_HEAD inside your Homebrew installation. Since that won't fix files that are already seen as modified you can also run git checkout Library to replace your checkout with the latest files. (That wipes all edits so take appropriate measures with any you made.)The accepted answer is correct but incomplete. If you are getting the error of error: The following untracked working tree files would be overwritten by merge:Then go to your terminal and run these commandscd /usr/localThen git reset --hard FETCH_HEADThen git checkout LibraryThat should get everything in order. Then run brew updateLet me add: cd /usr/local/gitand then run git reset --hard FETCH_HEADgo to your terminal and run these commandscd /usr/localsudo git reset --hard FETCH_HEADsudo git checkout LibraryFor those of you using OS X El Capitan, your problem may be System Integrity Protection. The fix is documented here.If /usr/local exists already, run the following in Terminal:sudo chown -R $(whoami):admin /usr/localIf /usr/local does not exist:First, try to create /usr/local the normal way:sudo mkdir /usr/local && sudo chflags norestricted /usr/local && sudo chown -R $(whoami):admin /usr/localIf you see permission issues instead try:Reboot into Recovery mode (Hold Cmd+R on boot) & access the Terminal.In that terminal run: csrutil disableReboot back into OS XOpen your Terminal application and execute the line from just aboveReboot back into Recovery Mode & access the Terminal again.In that terminal execute: csrutil enableReboot back into OS X & you'll be able to write to /usr/local & install Homebrew.Out of no reason (or at least no one I'd understand) the repository in /usr/local (which is the brew install!) lost its remote repository. So, neither a git reset nor a git pull and for sure no brew update would work. How do you know that happened? Check /usr/local/.git/config whether there are some lines like the following:[remote ""origin""]url = http://github.com/mxcl/homebrew.gitfetch = +refs/heads/*:refs/remotes/origin/*If not do as follows:cd /usr/localgit remote add origin http://github.com/mxcl/homebrew.gitgit pull origin master"
"Use either -b or --track options. Do not use them simultaneously, as both have similar functionality. git checkout -b feature/validation fork/feature/validationorgit checkout --track fork/feature/validationwill have have same output i.e. create feature/validation branch which tracks tracks remote branch feature/validation. The first approach gives you the flexibility of having a local branch which tracks remote branch with different name. Second one is a shorthand approach which sets up local and remote branch with same names. Use the one which suits your needs."
"Most Git repositories use master as the main (and default) branch - if you initialize a new Git repo via git init, it will have master checked out by default.However, if you clone a repository, the default branch you have is whatever the remote's HEAD points to (HEAD is actually a symbolic ref that points to a branch name). So if the repository you cloned had a HEAD pointed to, say, foo, then your clone will just have a foo branch.The remote you cloned from might still have a master branch (you could check with git ls-remote origin master), but you wouldn't have created a local version of that branch by default, because git clone only checks out the remote's HEAD.master is just the name of a branch, there's nothing magic about it except it's created by default when a new repository is created.You can add it back with git checkout -b master.To checkout branch which not exists locally but is in the remote repo you could use this command: git checkout -t -b master origin/masterI actually had the same problem with a completely new repository. I had even tried creating one with git checkout -b master, but it would not create the branch. I then realized if I made some changes and committed them, git created my master branch.if it is a new repo you've cloned, it may still be empty, in which case:  git push -u origin master should likely sort it out.  (did in my case.  not sure this is the same issue, thought i should post this just incase. might help others.)In my case there was a develop branch but no master branch. Therefore I cloned the repository pointing the newly created HEAD to the existing branch. Then I created the missing master branch and update HEAD to point to the new master branch.git clone git:repositoryname --branch otherbranchgit checkout -b mastergit update-ref HEAD mastergit push --set-upstream origin masterI ran into the same issue and figured out the problem. When you initialize a repository there aren't actually any branches. When you start a project run git add . and then git commit and the master branch will be created.Without checking anything in you have no master branch. In that case you need to follow the steps other people here have suggested."
"The core.ignorecase config option was not set and Visual Studio had renamed the .Designer.cs file in case, switching from a capital to lower ""D"" (or vice versa). That was the problem in the end. It took me some file history breakup (deleting and re-adding files) to resolve this error after setting the option to true. Actually the option was set on one computer, but when cloning the repository, the setting got lost somehow. And then destiny was only waiting for VS to rename that file to catch me.So on Windows, you always need to make sure that these two settings are correct after any init/clone operation:git config core.ignorecase truegit config core.autocrlf falseSome tools (TGit, gitscc etc.) don't seem to do it right. It's absolutely necessary for normal operation on Windows, but Git doesn't care if they're not set correctly and just lets you stumble over them not telling you why. It's as much lying as it's helpful in this matter."
"The error message from git say it all. You have un-merged changes between your two branches that need to be resolved before submitted the merge commit. Those merge conflicts happen because the file have been modified in the two branches.To resolve this, you need to edit the files in conflict. For each file, you'll have to resolve the merge. The conflicts will be surrounded by <<<<<<<<<<<, =========== and >>>>>>>>>> markers. How you resolve them will depends on the changes (you may want to keep your changes, the changes in the remote branch or a combination of the two).Once you've resolved all the conflicts, then you'll have to do git add for each file. And then git commit. The pre-filled commit message will indicate this is a merge commit and that there were some conflict resolved. You probably don't have to edit it unless your coding style mandate some particular formatting of your commit message.So, to summarise, you'll have to do:$ emacs GDCatalog/.classpath... resolve conflict ...$ git add GDCatalog/.classpath... do the same for all other files ...$ git commit"
"You need to change the default push behavior.  The branch being complained about is master, which doesn't appear to be the branch you are working on.  By default, Git treats push.default as matching, which means that when you say git push, it will push every branch that goes to origin.  Unfortunately, most people don't keep all their local versions of branches up-to-date, which will result in the error that you see above.It happens because there are new commits on the master branch in the remote repository, but your local version of master doesn't have them.  When you push, Git is trying to make the remote master branch match your local version.  Since the local version is behind by several commits, this is a non-fast-forward update (you would lose history) and Git complains.I generally recommend that folks change the push.default setting right away to either upstream, simple, or current:git config push.default upstreamgit config push.default simplegit config push.default currentYou can read about the difference it the git-config man page (search for ""push.default"").  You can also see it at the command line with:git help configOnce set, git push will only push the branch that you are on, and this message will go away.Also, if you're debating on using git push --force, don't consider it until after you've changed your default push setting.  It's a great way to lose history, and it's also the reason why Git will change the default behavior in 2.0--though I think they should've done it already.You're still on the branch myBranch, so you need to specifically say that you only want to push that branch:git push origin myBranchOr, you can configure to always push the branch that you're on by default:git config push.default currentAfter that, to fix the master branch:git rebase origin/master mastergit push origin masterIt looks, like your branch didn't configured well for git pull. In case you just want to push a bunch of simple commits (no merge commits) I would suggest using git rebase:git checkout mastergit rebase origin/mastergit pushIn case your changes contain merge commits and you want to push it, like you see it in the history (gitk --all) you can dogit checkout mastergit merge origin/mastergit push"
"The first command (git checkout refs/pull/1/head) didn't work because refs/pull/1/head is the name of the reference in the remote repository.  You don't have a reference with that name in your local repository because your fetch refspec translated it to refs/remotes/origin/pr/1/head.The second command (git checkout origin/pr/1/head) should have worked, although it should have given you a ""detached HEAD"" warning.  Was there a typo that you fixed when posting your question to Stack Overflow?Your fetch refspec told git to translate the remote references into local references in the refs/remotes directory.  The references in that directory are treated specially -- they're ""remote references"" meant to indicate the state of the remote repository the last time you did a fetch.  Normally you don't want to check those refs out directly -- you want to create a local branch that is configured to ""follow"" or ""track"" the remote reference (which enables special convenience shortcuts such as the @{u} revision parameter and easier push/pull usage).Try:git checkout -b whatever-branch-name-you-want origin/pr/1/headThe above creates a new local branch called whatever-branch-name-you-want (I recommend calling it pr/1/head) pointing at the same commit as origin/pr/1/head, configures whatever-branch-name-you-want to track origin/pr/1/head, then switches to the new branch."
"First you'll want to add the files in question so that they're tracked by Git (you don't have to commit any changes, but Git needs to know about the files):git add pages/memclub/images/subheaders/leadership.png pages/memclub/images/subheaders/male.png git add pages/memclub/images/subheaders/marketing.png pages/memclub/images/subheaders/training.pngThen you can stash your changes:git stash When you're ready to start working on the files again, you can use:git stash pop"
"As CommuSoft says, you're not on master.  You're in ""detached HEAD"" mode.  You get that any time you explicitly check out something that is not a (local) branch name:$ git checkout origin/master    # detach to remote branchor if there's a tag v1.7:$ git checkout v1.7             # detach to tagand you can even explicitly detach when using a local branch name:$ git checkout --detach master  # forcibly detachA ""detached HEAD"" means you're not on a branch.  Being ""on a branch"" means you're not using the detached HEAD mode.  Yes, that's pretty circular; see this question and its answers for more details.As for the:error: The following untracked working tree files would be overwritten ...When you get git checkout to move from one commit to another, it does two main things:choose whether to be in ""detached HEAD"" mode, andrearrange the work tree to match the moved-to commit.Step 2 is where the problem is occurring.  You're on the commit identified by origin/master, and in that commit, there is no record of the files git is currently complaining about.  You've asked to switch to the commit identified by master, which is obviously a different commit.1  Git sees that in the commit identified by master, there are some (maybe just one) files with the same names, that are different from the files or directories that are in your work-tree right now.In order to switch from the current commit to the new one, git checkout must remove the existing files-or-directories and replace them with the ones in the new commit‰ÛÓthe one you're asking to switch to.  If those files or directories were tracked in the current commit, git would be happy to remove and replace them as needed, as git can always get them back for you: just switch back to that old commit, and there they are.  But they're not in the current, to-be-switched-away-from, commit.  So git tells you: ""Hey, if I make this switch you asked for, I can't guarantee that I'll be able to restore these files and/or directories.""It's now up to you, not git, to figure out what to do with these files and/or directories.  Based on the error message, it's a directory,2 and switching to master will cause that directory to be removed and replaced with something else (possibly a different directory with some file(s) in it, possibly just a file).  Do you:want to save it/them?if so, do you want to save it/them in a commit, or just move them out of the way?or do you just want to blow them away?To save them, either commit them, or move them out of the way (e.g., rename them to a path that's not part of the work-tree, or to a different untracked name that's ""safer"", whatever that would be).To simply blow them away, remove them manually or use git checkout -f (force) to make git do it.Since you're not on a branch now (are in ""detached HEAD"" mode), if you want to commit them permanently to the repository, you can use something like the method CommuSoft added while I was writing this up.  (You can create the new branch at any time, before or after doing a ""git commit"".)You can also use git stash.  Git's stash is deceptively complex little script: it makes commits that are not on any branch at all, that can later be transplanted to a branch.  Using it is quite simple and easy: you just run git stash save and all pending tracked changes are saved and cleaned up, or run git stash save -u and all pending tracked changes and untracked files are saved and cleaned up.  They are now all safely squirreled away in the repository, under a commit, even though it's not a commit-on-a-branch.There is no single right answer for what to do here.1Obviously different, because if you were already on the commit you're asking git to move to, then either the file would be in the commit and hence tracked, or it would be not-in-the-commit and hence you would not be asking git to clobber it.2This is a little odd.  If I make a directory that will be clobbered by my git checkout, and I make it as an empty directory, git just goes ahead and clobbers it.  Here the difference between master^ and master is that moving forward from master^ to master creates file mxgroup.py (so stepping back removes it):$ git checkout -q master^  # file goes away, now let's mkdir...$ mkdir mxgroup.py; git checkout -q master$ file mxgroup.pymxgroup.py: Python script, ASCII text executableHowever, if I have a non-empty directory, I get a different error message:$ git checkout -q master^  # file goes away; mkdir and make file$ mkdir mxgroup.py; touch mxgroup.py/file; git checkout -q mastererror: Updating the following directories would lose untracked files in it:    mxgroup.pyAbortingBut this is with git version 2.0.2; perhaps older gits are not as clever.No you're not on the master branch, your on some kind of ""newly invented"" branch without a name that was once the master.You simply need to switch back to the master:git checkout masterHowever if you wish to fix a bug, you should work at your own branch (according to most git workflows). Thus checkout the master and branch from it:git checkout mastergit checkout -b fix-issue #give the branch a name that refers to the bugthen fix the bug and run:git checkout mastergit merge --no-ff fix-issue -m ""Fixed some strange issue, here follows a description""EDITAs specified in your question you have an untracked file. If these file(s) are of no importance, you can remove them. If on the other hand you wish to maintain them, you can merge them into the master first.Therefore you create a temporary branch:git commit -m ""some temporary message""git checkout -b temporarygit checkout mastergit merge --no-ff temporary"
"There are two types of repositories: bare and non-bareBare repositories do not have a working copy and you can push to them. Those are the types of repositories you get in Github! If you want to create a bare repository, you can usegit init --bareSo, in short, you can't push to a non-bare repository (Edit: Well, you can't push to the currently checked out branch of a repository. With a bare repository, you can push to any branch since none are checked out. Although possible, pushing to non-bare repositories is not common). What you can do, is to fetch and merge from the other repository. This is how the pull request that you can see in Github works. You ask them to pull from you, and you don't force-push into them.Update: Thanks to VonC for pointing this out, in the latest git versions (currently 2.3.0), pushing to the checked out branch of a non-bare repositories is possible. Nevertheless, you still cannot push to a dirty working tree, which is not a safe operation anyway.I solved this problem by first verifying the that remote did not have anything checked out (it really was not supposed to), and then made it bare with:$ git config --bool core.bare trueAfter that git push worked fine.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.Autopsy of the problemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.As there's already an existing repository, runninggit config --bool core.bare trueon the remote repository should sufficeFrom the core.bare documentationIf true (bare = true), the repository is assumed to be bare with no working directory associated. If this is the case a number of commands that require a working directory will be disabled, such as git-add or git-merge (but you will be able to push to it).This setting is automatically guessed by git-clone or git-init when the repository is created. By default a repository that ends in ""/.git"" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).TLDRPull & push again: git pull &&& git push.Still a problem? Push into different branch: git push origin master:foo and merge it on remote repo.Alternatively force the push by adding -f (denyCurrentBranch needs to be ignored).Basically the error means that your repository is not up-to-date with the remote code (its index and work tree is inconsistent with what you pushed).Normally you should pull first to get the recent changes and push it again.If won't help, try pushing into different branch, e.g.:git push origin master:foothen merge this branch on the remote repository back with master.If you changed some past commits intentionally via git rebase and you want to override repo with your changes, you probably want to force the push by adding -f/--force parameter (not recommended if you didn't do rebase). If still won't work, you need to set receive.denyCurrentBranch to ignore on remote as suggested by a git message via:git config receive.denyCurrentBranch ignorecd into the repo/directory that you're pushing into on the remote machine and enter$ git config core.bare trueMaybe your remote repo is in the branch which you want to push. You can try to checkout another branch in your remote machine. I did this, than these error disappeared, and I pushed success to my remote repo. Notice that I use ssh to connect my own server instead of github.com."
"First: Make a backup of your .git directory in case you corrupt things more in this process. Then:Put back the best version of the packfiles you have available.For each of the corrupt packfiles, run:mv .git/objects/pack/pack-**yourpack**.pack oldpackgit-unpack-objects -r < oldpackRun git fsck --full and git checkout again, give us the output.Looks like now you should be able to check out, but you will have to run git checkout -f **yourbranch**, as you have changes in your working dir that are not yet committed. These changes will get lost when you run git checkout -f, though."
"Just use git checkout -f to swap branches, then remove them like you normally would and merge in master to get your submodule introduction."
"Try this:mkdir myrepocd myrepogit initgit config core.sparseCheckout truegit remote add -f origin git://...echo path/to/subdir/*> .git/info/sparse-checkoutgit checkout [branchname]Git clone has an option (--no-checkout or -n) that does what you want.In your list of commands, just change:git clone <path>To this:git clone --no-checkout <path>You can then use the sparse checkout as stated in the question.I'm new to git but it seems that if I do git checkout for each directory then it works. Also, the sparse-checkout file needs to have a trailing slash after every directory as indicated. Someone more experience please confirm that this will work.Interestingly, if you checkout a directory not in the sparse-checkout file it seems to make no difference. They don't show up in git status and git read-tree -m -u HEAD doesn't cause it to be removed. git reset --hard doesn't cause the directory to be removed either. Anyone more experienced care to comment on what git thinks of directories that are checked out but which are not in the sparse checkout file?Sadly none of the above worked for me so I spent very long time trying different combination of sparse-checkout file.In my case I wanted to skip folders with IntelliJ IDEA configs.Here is what I did:Run git clone https://github.com/myaccount/myrepo.git --no-checkoutRun git config core.sparsecheckout trueCreated .git\info\sparse-checkout with following content!.idea/*!.idea_modules/*/*Run 'git checkout --' to get all files.Critical thing to make it work was to add /* after folder's name.I have git 1.9I found the answer I was looking for from the one-liner posted earlier by pavek (thanks!) so I wanted to provide a complete answer in a single reply that works on Linux (GIT 1.7.1):1--> mkdir myrepo2--> cd myrepo3--> git init4--> git config core.sparseCheckout true5--> echo 'path/to/subdir/' > .git/info/sparse-checkout6--> git remote add -f origin ssh://...7--> git pull origin masterI changed the order of the commands a bit but that does not seem to have any impact. The key is the presence of the trailing slash ""/"" at the end of the path in step 5."
"On a ""broken link"" message, you could follow the GitFaq recommendations:back up all your state so that anything you do is re-doable if you corrupt things more!explode any corrupt pack-files  See ""man git-unpack-objects"", and in particular the ""-r"" flag.  Also, please realize that it only unpacks objects that aren't already available, so you need to move the pack-file away from its normal location first (otherwise git-unpack-objects will find all objects that are in the pack-file in the pack-file itself, and not unpack anything at all) replace any broken and/or missing objects  This is the challenging part.  Sometimes (hopefully often!) you can find the missing objects in other copies of the repositories.  At other times, you may need to try to find the data some other way (for example, maybe your checked-out copy contains the file content that when hashed will be the missing object?). make sure everything is happy with ""git fsck --full""repack everything to get back to an efficient state againNotes: missing objects can also be related to alternate (when you share objects between repositories) with git alternates (even though that can be risky).The JGit/Egit eclipse plugin is also known to have a few issues.(Update February 2012: those plugins have come a long way and are now quite stable)I had a similar issue just now. The corruption arose when my laptop did a hard power-off during a git pull. I have a remote backup repository. First I had several object files in .git/objects/??/* that were zero size. After a cp -a backup of the repository, I did this:remove the zero length objectsclone the remote repository into a ../fresh/ repositoryin the broken repository, I did cat ../fresh/.git/objects/pack/pack-*.pack | git unpack-objectsThis filled up the missing objects in the object database. The repository seems to be back up now.I had the same problem. After a lot of hair-pulling, I discovered that it was cause by changed permission to the repository's git files. I have solved it as follows:$ cd .git$ chmod 755 *Done!If you don't have uncommited changes the easiest solution is to delete the local branch:git branch -D [branch name]and then checkout again the remote branch:git checkout -b [branch name] origin/[branch name]I got a similar error in my Homebrew install‰Ûªs Git repository. Rather than restoring all the missing objects one by one, I found it easier to simply delete the .git directory and create it again by re-cloning from Homebrew‰Ûªs public repository. These were my steps:Check what information you have in your Git repository that you won‰Ûªt get by just re-cloning. For me, it was private branches, stashes, and remotes.Convert stashes into real commits by creating a new branch, applying the stash, and committing with something like ‰ÛÏ[WIP]‰Ûù in the name to show that it‰Ûªs a stash.Save branches that are not on the public remote by pushing them to a remote of your own. This could be fork of the repository on GitHub, or just a new Git repository in a different location on your machine.If you have more than one remote, save the output of git remote -v, which contains the names and URLs of your remotes, so you can manually add them back later.Delete your repoistory‰Ûªs .git directory (or rename it to .git-broken and delete it later). On the command-line, this is rm -rf .git.Re-clone the remote directory with git clone https://github.com/Homebrew/homebrew.git or whatever URI.This will have created a new sub-folder homebrew named after the repository. You want just the .git directory from that; your local files are already okay. So mv homebrew/.git .git, and then delete the homebrew folder.Your Git repository should have no errors, since you recreated it from scratch. Now just restore any information you saved in the first step.If you had additional remotes, add them again with git remote add <name> <url>.If you backed up any branches (or stashes converted to branches) to a remote repository, pull them from that repository to your local repository.If you want, you can convert the stash-branches back to stashes by rolling the ‰ÛÏ[WIP]‰Ûù commit with git reset HEAD^ and saving the working directory to a stash again with git stash save <custom-message>.If you run git fsck, you should see no errors:$ git fsckChecking object directories: 100% (256/256), done.Checking objects: 100% (197135/197135), done.Checking connectivity: 197162, done.$And git stash list, git branch, and git remote -v should show the same output as before."
"If you're just trying to checkout the master branch, just run:git checkout masterImmediately after a clone, your local master branch fully reflects the remote(i.e. origin/master) so you don't need to try and reference the remote when checking out"
"Execute a simple npm install inside the App-Directory.The Problem is:The Yeoman-Projcet has lots of npm-dependencies, not only grunt itself, but also all of grunts tasks and generators. But of course you wouldnt want all those packages inside your repository. Thats were the ""package.json"" File comes in: It Lists alls Packages the Project depents on. npm install reads the package.json and installs all needed packages by itself.To run the app properly, you will also need to execute bower install.Bower is for the Frontend-Packages what npm is for node. ""bower install"" looks for the dependent packages in the ""bower.json""-File and installs them.Solved in 2 steps. The the following commands :npm installbower installNow run grunt serve$ grunt serveRunning ""serve"" taskRunning ""clean:server"" (clean) taskRunning ""bower-install:app"" (bower-install) taskRunning ""concurrent:server"" (concurrent) task    Running ""compass:server"" (compass) task    directory .tmp/styles/        create .tmp/styles/main.css (8.454s)    Compilation took 8.455s    Done, without errors.    Execution Time (2014-03-13 10:53:01 UTC)    compass:server  9.1s  ‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à‰_à 100%    Total 9.1sRunning ""autoprefixer:dist"" (autoprefixer) taskPrefixed file "".tmp/styles/main.css"" created.Running ""connect:livereload"" (connect) taskStarted connect web server on 127.0.0.1:9000.Running ""watch"" taskWaiting...This solves the problem. Let me know if this can be avoided or done in better way :)"
"I switch back to master, where I make a few changes and I don't commit it..  Now when I try to switch to b1, I get the error shown aboveIf you make changes to files which are present both in master and b1, you will get that message when changing back to b1.Branch b1 would overwrite the local modifications done in those file in master.Your second scenario has modifications done to a private file (not versioned in git): changing branches won't affect its content, hence no need to stash.You will see many examples of git stash at codesearch:Amiel Martin points out that:Do you ever find yourself doing this?$ git checkout some_brancherror: Your local changes to the following files would be overwritten by checkout:        GemfilePlease, commit your changes or stash them before you can switch branches.Aborting$ git stash$ git checkout some_branch$ git stash popHere‰Ûªs a nice little shortcut:$ git checkout --merge some_branchgitguys provides a good scenario for git stash.This gist allows for a stash-checkout-shash pop in one command.There are already several right answers, but here's another way to look at it.Imagine you're shrunken way down and stuck inside a computer, and are given the job of ""be the git checkout command"".  A user does something like this:$ cd somewhere$ ls... various commands, etc$ echo something_extra >> some_file$ git checkout branchSo now, you go see what it takes to git checkout branch.  First you find out whether the guy asking you to do stuff is in a git repo (he is) and what branch if any he's on now (let's say master, just for concreteness).  So it's possible to switch branches, which seems to be what he wants to do.Next, you need to take a look at all the files involved in switching branches, including (maybe) some_file.Is there a version of some_file in branch branch?  Is there a version of some_file in the current branch, master?  If there is, are those the same, or different?  What about the current working directory (and, since this is git, the ""staging area"", aka ""index"")?Here are all your possibilities:The file is not in either branch.  It's untracked both ways, so, no problem!The file is in master but not in branch.  You're supposed to remove it.You need to check, now, whether it's ""safe"" to remove it.  It's ""safe"" if it's not staged for commit and the contents of the file match the contents in master.  (That means, you probably put it there earlier, when the guy did git checkout master.)  As a slightly oddball case, it's also ""safe"" if it's not there now: there's nothing to remove.The file is not in master but is in branch.  You're supposed to create it, with the contents as in branch.You need to check, now, whether it's ""safe"" to create it.  It's ""safe"" if it's not staged for commit and it's not there now either.  (In theory, it should also be safe if it's there now but already contains what you're supposed to put in it.  git checkout gives me an error here though‰ÛÓwhich is odd considering in the ""oddball"" cases, git checkout usually allows the switch.)The file is in both master and branch.  You're supposed to ... well, that depends!  Is it the same in both, or different in both?This last case gets messy, especially with the difference between ""index"" and ""working directory"", but let's run through them:The file is in both branches, and is the same in both.  You are to do nothing, so it's OK to switch branches, even if the file is staged and/or modified.The file is in both branches, and is different in both.  You're supposed to replace its contents.  If it's not staged and not modified (git status shows nothing for the file), you're good to go.The file is in both branches, and is different in both, and the one in the work directory doesn't match the one in the current branch master or the one in the target branch branch.  If you replace it you'll lose the guy's changes, so you have to error-out.The oddball case here is: the file is staged and/or modified, but now matches the one in the target branch.  That is, someone made, to master, the same change that is already in branch.  In this case you don't have to overwrite the file, so you may be able to switch branches.  The staging area makes this harder, because when you do the checkout, you first have to write the new contents into the staging area, and only then copy it out to the work directory.  So you have to make sure it's the same (as the target-branch version) in the stage-area too, before allowing the git checkout branch to proceed.In all cases, though, your job is: ""make sure the guy won't lose changes he's put in the work directory or staging area"".  If he would lose some changes, complain and quit.  Otherwise, allow the checkout, and update the staging area and the work tree.(Because git's user interface is ... well, let's not say ""deliberately hostile"" :-) but rather ""complicated due to history"", the ""switch branches"" action of git checkout is only one of a number of different things you can have git checkout do.  In particular, git checkout rev path is actually a different command, that does not switch branches, and is perfectly happy to overwrite changes.  Just make sure you're only doing git checkout branch here, and not git checkout branch and some file names.  I'd be happier with this if all of the ""overwrite"" uses had a different action verb, but it is what it is.I've also skipped over the ""middle of a merge"" cases.  If you have merge conflicts, the staging area is always modified and never matches, so you error-out here.  If no merge conflicts remain, checkout proceeds as usual, and if successful, aborts the merge.  I'm not sure I like the latter action‰ÛÓit seems safer to make the user git merge --abort manually‰ÛÓbut any work ""lost"" in this case is merely choices made during the merge, as if that's ""mere""....)You will get the error when the working directory changes that you have cannot be applied on top of the changes that are available to the files(s) in the other branch.In the first scenario, master and branch have diverged. file1 is changed in b1. It is not in master. But you make a local change on master's version, and switch branches. Now the changes cannot be applied as the version of file1 in b1 is different from what the base version was in master.In scenario 2, the base copy of the file is same in both branches. Now local changes while any branch checked out will be same and you can easily switch between them."
"You can't merge with local modifications. Git protects you from losing potentially important changes.You have three options. One is to commit the change usinggit commit -m ""My message""The second is to stash it. stashing acts as a stack, where you can push changes, and you pop them in reverse order.To stash type:git stashDo the merge, and than pull the stash:git stash popThe third options is to discard the local changes using git reset --hard.$ git stash$ git pull <remote name> <remote branch name> (or) switch branch$ git stash apply --indexFirst command store your changes temporarily and discard those changes from working directory Second command you can pull / switch branches  Third command to restore the important changes which you have discarded temporarily. (--index option is useful for those files are not staged are being upstaged) Refer Git - StashingSo the situation that I ran into was the following:error: Your local changes to the following files would be overwritten by merge:  wp-content/w3tc-config/master.php  Please, commit your changes or stash them before you can merge.except, right before that, was remote:so actually this:remote: error: Your local changes to the following files would be overwritten by merge:  some/file.ext  Please, commit your changes or stash them before you can merge.What was happening was (I think, not 100% positive) the git post receive hook was starting to run and screwing up due to movement changes in the remote server repository, which in theory, shouldn't have been touched.So what I ended up doing by tracing through the post-receive hook and finding this, was having to go to the remote repository on the server, and there was the change (which wasn't on my local repository, which, in fact, said that it matched, no changes, nothing to commit, up to date, etc.) So while on the local, there were no changes, on the server, I then did a git checkout -- some/file.ext and then the local and remote repositories actually matched and I could continue to work, and deploy. Not entirely sure how this situation occurred, though a couple dozen developers plus IT changes may had something to do with it."
"You need to fetch the data onto your local repository on machine 2 first$git fetch origin$git checkout origin/myNewBranchMy guess on what happened there is a remote origin/myNewBranch, but not a local branch myNewBranch.  What your command did was to fetch origin/myNewBranch to your current local branch.  When you did the git checkout myNewBranch, the error happened because there was no local branch named myNewBranch.  I suggest try git checkout -b myNewBranch origin/myNewBranch.Try doing  git checkout origin/myNewBranch."
"When you have to unlink file, you have to have permission 'w' for directory, in which file is, not for the file...FWIW - I had a similar problem and I'm not sure if this alleviated it (beyond the permission mod):  Closing Eclipse that was using the branch with this problem.If you are using any IDE most likely the problem is that file was used by some process. Like your tomcat might be using the file. Try to identify that particular process and close it. That should solve your problem."
"You are slightly misinterpreting your situation:You do not need to revert anything, you didn‰Ûªt lose anytingYour situation is as follows: You have a local branch named feature/form, the remote has branch a named feature. Now this may come as a surprise, but these names conflict. feature/form actually creates a folder named ‰ÛÏfeature‰Ûù with a branch named ‰ÛÏform"" in it. Because of that you can not create a branch named ‰ÛÏfeature‰Ûù, as a folder with that name already exists.git checkout --track origin/feature tries to create a branch named ‰ÛÏfeature‰Ûù, which is not possible, so it fails.regarding question 2: Well, there just is a naming collision ‰ÛÒ these two branches can‰Ûªt coexist in your local repo. But you can work on the remote feature branch without deleting or renaming your local feature/form branch ‰ÛÒ even though I would not really recommend that as it‰Ûªs easy to get confused there.Running this command:git checkout -b mylocalname --track origin/featurewill generate a local branch named mylocalname that tracks the remote branch feature on the remote origin."
"Edit: For newer versions of Git, --set-upstream master has been deprecated, you should use --set-upstream-to instead:git branch --set-upstream-to=origin/master masterAs it prompted, you can just run:git branch --set-upstream master origin/masterAfter that, you can simply run git pull to update your code.I had the same problem and fixed it with this command:$ git push -u origin masterFrom the help file the -u basically sets the default for pulls:-u, --set-upstream`  For every branch that is up to date or successfully pushed, add   upstream (tracking) reference, used by argument-less git-pull(1) and  other commands. For more information, see branch.<name>.merge in   git-config(1).Try these commands:git pull origin mastergit push -u origin master@alesko : it is not possible to only do only git pull after checkout my_branch to update master branch only.Because git pull will also merge to the current branch -> in your scenario to the my_branch@Simon: that will do also the push. why is that?$ git branch -u origin/masterBranch master set up to track remote branch master from origin.and acording to docs:-u <upstream>  Set up <branchname>'s tracking information so <upstream> is considered    <branchname>'s upstream branch. If no <branchname> is specified,    then it defaults to the current branch.First, make sure you are on the right branch.Then (one time only):  git branch --trackAfter that this works again:git pullSwitch back to the master branch using$ git checkout masterand then run the git pull operation$ git pull origin/masterAfterwards, you can switch back to your my_branch again.You might have multiple branch. And your current branch didn't set its upstream in remote.Steps to fix this:git checkout branch_namegit branch --set-upstream-to=origin/remote_branch_name local_branch_namee.g.// this set upstream of local branch develop to remote branch  origin/develop,git branch --set-upstream-to=origin/develop developAfter doing this, when you do git pull, it pull from specified branch.You need to set up your tracking (upstream) for the current branchgit branch --set-upstream master origin/masterIs already deprecated instead of that you can use --track flaggit branch --track master origin/masterI also like the doc reference that @casey notice:-u <upstream>  Set up <branchname>'s tracking information so <upstream> is considered    <branchname>'s upstream branch. If no <branchname> is specified,    then it defaults to the current branch.What worked for me was:git branch --set-upstream-to=origin masterWhen I did a pull again I only got the updates from master and the warning went away.Try thisgit checkout mastergit pull origin master"
"I haven't seen this error exactly as shown. I often see a similar error when the branch it's trying to checkout has been deleted from the remote. But one thing to do, is in the git clone options for your jenkins job, set clean before checkout We also prune stale remote branches"
"Say the remote is origin and the branch is master, and say you already have master checked out, might try the following:git fetch origingit reset --hard origin/masterThis basically just takes the current branch and points it to the HEAD of the remote branch.WARNING: As stated in the comments, this will throw away your local changes and overwrite with whatever is on the origin.Or you can use the plumbing commands to do essentially the same:git fetch <remote>git update-ref refs/heads/<branch> $(git rev-parse <remote>/<branch>)git reset --hardEDIT: I'd like to briefly explain why this works.The .git folder can hold the commits for any number of repositories. Since the commit hash is actually a verification method for the contents of the commit, and not just a randomly generated value, it is used to match commit sets between repositories.A branch is just a named pointer to a given hash. Here's an example set:$ find .git/refs -type f.git/refs/tags/v3.8.git/refs/heads/master.git/refs/remotes/origin/HEAD.git/refs/remotes/origin/masterEach of these files contains a hash pointing to a commit:$ cat .git/refs/remotes/origin/masterd895cb1af15c04c522a25c79cc429076987c089bThese are all for the internal git storage mechanism, and work independently of the working directory. By doing the following:git reset --hard origin/mastergit will point the current branch at the same hash value that origin/master points to. Then it forcefully changes the working directory to match the file structure/contents at that hash.To see this at work go ahead and try out the following:git checkout -b test-branch# see current commit and diff by the followinggit show HEAD# now point to another locationgit reset --hard <remote>/<branch># see the changes againgit show HEADI've had luck with git checkout -f <branch>in a similar situation.http://www.kernel.org/pub//software/scm/git/docs/git-checkout.htmlUndo delete in GITAssuming you want to throw away any changes you have, first check the output of git status. For any file that says ""unmerged"" next to it, run git add <unmerged file>. Then follow up with git reset --hard. That will git rid of any local changes except for untracked files."
"You did it the wrong way around. You are meant to reset first, to unstage the file, then checkout, to revert local changes.Try this:$ git reset foo/bar.txt$ git checkout foo/bar.txtThis worked perfectly for me:$ git reset -- foo/bar.txt$ git checkout foo/bar.txtgit checkout origin/[branch] .git status// Note dot (.) at the end. And all will be good"
"It turns out that ""some/dir/"" was wrong, since I didn't have the repository I didn't know it's real structure. I was able to browse it through web interface but I just discovered the folders don't correspond exactly to the real repository folder structure.Lesson for the future: make sure you know the folder structure before creating sparse-checkout file."
"It's probably because your SSH key has been compromised. Make a new one and add it to your GitHub account.for me I simply had to add configure my git username and email with the following commands:git config --global user.email ""you@example.com""git config --global user.name ""Your Name""git-bash reports fatal: Unable to create '/.git/index.lock': File exists. Deleting index.lock makes the error go away.If you're running windows 7: I was trying to decide the best way to do this securely, but the lazy way is right-click the parent folder -> click the ""properties"" button -> click the ""security"" tab -> click the ""edit"" button - > click the group that starts with ""Users"" - > click the checkbox that says ""full control"" -> click all the OK's to close the dialogs. I realize this might circumvent windows ""security"" features, but it gets the job done.In my case a folder in my directory named as the git-repository on the server caused the failure.on win7 64:git-gui gives a good answer: a previous git has crashed and left a lock file. Manually remove.In my case, this was in .git/ref/heads/branchname.lock.delete, and error 128 goes away. It surprises that tortoisegit doesn't give such an easy explanation.In my case, it was because of the proxy. A proxy was needed in the corporate network and TortoiseGit / Git does not seems to automatically get information from Windows internet settings. Setting up the proxy address solved the issue.For me, I tried to check out a SVN-project with TortoiseGit. It worked fine if I used TortoiseSVN though. (May seem obvious, but newcomers may stumble on this one)I was having this same issue and I resolved it in the following way...I have the NVIDIA ""Tegra Android Development Pack"" installed and it seems to also have a version of mysysgit.exe with it. TortoiseGit automatically found that installation location (instead of the standard git installation) and auto-populated it in the settings menu.To correct this, go to: ""Settings -> General"" and there is a field for the path to mysysgit.exe. Make sure this is pointing to the correct installation.Deleting index.lock worked for meAn quick solution would be to create a new local directory for example c:\git_2014, In this directory rightklick and choose Git Clone"
"The error message leads to the conclusion that you do not have a master branch in your local repository. Either push your main development branch (git push origin my-local-master:master which will rename it to master on github) or make a commit first. You can not push a completely empty repository.I was having the same issue and then smacked myself in the head because I hadn't actually added my project files.git add -Agit commit -am ""message""git push origin masterI had the same issue. I deleted the .git folder then followed the following commands$ git init$ git add .$ git remote add origin git@gitorious.org:project/project.git$ git commit -m ""Initial version""$ git push origin masterI just had the same problem while creating my first Git repository ever. I had a typo in the Git origin remote creation - turns out I didn't capitalize the name of my repository. git remote add origin git@github.com:Odd-engineFirst I removed the old remote using git remote rm originThen I recreated the origin, making sure the name of my origin was typed EXACTLY the same way my origin was spelled. git remote add origin git@github.com:Odd-EngineNo more error! :)I have same issue . it's solved my problem . €¡f you init your git . you have to do on Terminal 1) git add .2)git commit -m ""first commit""For send to bitbucket 3) git push -u origin --all # pushes up the repo and its refs for the first timeI had the same error, as Bombe said I had no local branch named master in my config, although git branch did list a branch named master...To fix it just add this to your .git/config[branch ""master""]    remote = origin    merge = refs/heads/masterKinda hacky but does the jobmake sure you are on a branch, at least in master branchtype:git branchyou should see:ubuntu-user:~/git/turmeric-releng$ git branch* (no branch)masterthen type:git checkout masterthen all your changes will fit in master branch (or the branch u choose)i fixed my problem....not sure what the problem was but using the gitx interface to commit my staged files, then...$ git push origin masterworked...i am having the same problem...created a new folder added in the bort template files...$ git commit -m 'first commit'$ git remote add origin git@github.com:eltonstewart/band-of-strangers.git$ git push origin masterthen i get the same error...error: src refspec master does not match any.  fatal: The remote end hung up unexpectedly  error: failed to push some refs to 'git@github.com:eltonstewart/band-of-strangers.git'error: failed to push some refs to 'git@github.com:{username}/{projectname}.git'Unless you're generalizing the error message, it looks like you literally put git@github.com:{username}/{projectname}.git as your remote Git repo. You should fill in {username} with your GitHub username, and {projectname} with your project's name.To actually resolve the issue I used the following command to stage all my files to the commit.$ git add .$ git commit -m 'Your message here'$ git push origin masterThe problem I had was that the -u command in git add didn't actually add the new files and the git add -A command wasn't supported on my installation of git. Thus as mentioned in this thread the commit I was trying to stage was empty.cd  app git init git status touch  test git add . git commit  -a  -m""message to log "" git commit  -a  -m ""message to log"" git remote add origin  git remote add origin git@git.google.net:cherry git push origin master:refs/heads/mastergit clone git@git.google.net:cherry test1I had same issue. I had mistakenly created directory in machine in lower case. Once changed the case , the problem solved(but wasted my 1.5 hrs :( )Check it out your directory name and remote repo name is same.It looks like this question has a number of answers already, but I'll weigh in with mine since I haven't seen any that address the issue I had.I had this error as well on a brand new github repository. It turns out the user I was pushing from did not have push access. For some reason, this results in an ""ERROR: repository not found"" error instead of some sort of access error.Anyway, I hope this helps the poor soul who runs into the same issue."
"You end up with both modified in the output of git status if there were conflicts produced by a merge.  git isn't letting you change branch until you've resolved these conflicts.  If you edit that file, you should see some conflict markers in it - there's a guide to resolving those conflicts in the git manual.  (Since kernel.org is currently down,  you can find that guide here instead.)Alternatively, if you think the merge was a mistake, you could undo it with: git reset --mergeTry this if you don't want any of the merges listed in git status:git reset --mergeThis resets the index and updates the files in the working tree that are different between <commit> and HEAD, but keeps those which are different between the index and working tree (i.e. which have changes which have not been added).If a file that is different between <commit> and the index has unstaged changes -- reset is aborted.More about this - https://git-scm.com/docs/git-resetI got this message when updating new files from remote and index got out of whack. Tried to fix the index, but resolving via Xcode 4.5, GitHub.app (103), and GitX.app (0.7.1) failed.  So, I did this:git commit -a -m ""your commit message here""which worked in bypassing the git index.Two blog posts that helped me understand about Git and Xcode are:Ray Wenderlich on Xcode 4.5 and Oliver Steele from 2008you can reset your branch with HEADgit reset --hard branch_namethen fetch branches and delete branches which are not on remote from local,git fetch -p"
"You aren't setting up any remotes when you initialize an empty repository and issue a git pull.If you want to use any/all of the remote branches in your repository, you should be using git clone <remote> to create a local clone of the repo, rather than git init; git pull <remote> which simply gives you a copy of the default branch from the remote.Once you've properly cloned the repository, assuming there is a remote branch origin/mybranch, you can check out a local copy which will track the remote through your command:git checkout mybranchIf you're creating a new brach, use eithergit checkout -b rvm-upgradeAlso, there's no need to put the branch name in quotes.If you expect the branch to already exist, run    git branch -aand it should be in the list.  If it's not in the list, it doesn't exist yet."
"Steps taken to solve the problem.Credits go to: jszakmeister1) I have cloned the project to somewhere else.2) I've checkout master on that clone.3) Placed the gitignore into the master as it should have been there from the beginning:      git show dev:.gitignore > .gitignore4) I've removed the files from the tree by doing git rm ""all files that where on gitignore one by one""5) I've added the .gitignore file to the repo.6) commit it7) switch back to the original repo and did:8) git fetch /path/to/fix-project master:master9) git checkout master, and I got:    Switched to branch 'master'     Your branch is ahead of 'hub/master' by 1 commit.    this is my remote master branch.10) Pushed to remote master.11) checkout dev again"
"Daniel Hilgarth's anti-virus suggestion in the question's comments reminded me that I had run (and prematurely canceled) file recovery scans shortly before the problem manifested. It's possible these scan processes were causing the problem if they didn't cancel properly.Regardless, rebooting my machine fixed the issue."
"In my case I could not see the Resolve the conflicts option because I had local changes not committed yet and I was trying to sync with the remote changes. As soon as I committed my local changes and then tried a sync again, Resolve the conflicts link appeared.So the point here is: commit your changes first and then try to sync. A merge will start and Visual Studio will allow you to go through each of the conflicts.I have encountered the same issue where ""An error occurred. Detailed message: 1 conflict prevents checkout"" is shown where there's no option to resolve the conflict as shown in Leinel's answer.The reason was due to an untracked file that is the same file that is to be pulled. I just deleted the untracked file and retried the pull.I had the same issue. It turns out that I had an untracked file that needed to be included. Therefore, check in Changes tab for untracked files.I did not have any ""Changes"" (untracked or otherwise) listed on either branch, so the other answers did not work for me.I decided to go command line:Click Sync on both branches.Switch to the branch you want to ""merge into"" (master in my case).In Team Explorer under Manage Branches, do Action -> Open Command Line.In the command line type git merge BRANCH_NAME.  (my work branch / merge ""from"")Now the Resolve the conflicts button is available.If the conflicts during the pull are about end of line charaters:git config --global core.autocrlf falseThat should avoid any automatic eol conversion.You can see more in ""Why does git think each line of an untouched file has changed"" how to detect that situation in the working tree (git diff --word-diff-regex=.)."
"try git checkout -f master-f or --force Source : https://www.kernel.org/pub/software/scm/git/docs/git-checkout.htmlWhen switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes.When checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored."
"Looks like you have an edited spec that's messing with the git repo. The easiest way to fix this would be to delete the local copy of the specs repo. From terminal:rm -rf ~/.cocoapods; pod setupEDIT:Today (1/30/14) there was an issue with the specs repo that may make you want to fix this. Read more about it on the CocoaPods Blog"
"It appears that git created files in .git/objects for the new commit, but didn't successfully write to them. I solved it by deleting them one at a time and re-running git fsck --full to find the next one. I started with the one originally reported by git fsck:% rm -f .git/objects/43/46883490a0990e68db0187241abc1642765a73% git fsck --fullChecking object directories: 100% (256/256), done.error: inflate: data stream error (incorrect header check)error: unable to unpack 86e7247af5865e857a3b61eed99986e2d9538df1 headererror: inflate: data stream error (incorrect header check)fatal: loose object 86e7247af5865e857a3b61eed99986e2d9538df1 (stored in .git/objects/86/e7247af5865e857a3b61eed99986e2d9538df1) is corrupt% rm -f .git/objects/86/e7247af5865e857a3b61eed99986e2d9538df1% git fsck --fullChecking object directories: 100% (256/256), done.error: inflate: data stream error (incorrect header check)error: unable to unpack a94406345ac44982b00cf57b4b9660a35436637f headererror: inflate: data stream error (incorrect header check)fatal: loose object a94406345ac44982b00cf57b4b9660a35436637f (stored in .git/objects/a9/4406345ac44982b00cf57b4b9660a35436637f) is corruptAnd so on. I deleted five objects before git fsck came up clean, corresponding (as I suppose) to the five files in the commit I was trying to make. I guess that the file history was not corrupted at all.Incidentally, I thought of another method that seems to work as well. git clone copies the bad objects, but git push does not. After backing up, I created a new empty repository (--bare, because otherwise you can't push to master), then unstaged my changes and pushed both branches into the new repository. Then it was just a matter of checking it out again and restoring the latest changes from my backups.Still interested if anyone cares to shed light on the failure mechanism here. Thanks jkyako for the help.Simple answer to this question for anyone facing this problem: the git clone command is the fix, if have a remote repo then clone it to the local folder (after deleting the corrupted local repo), in case you dont have remote repo then try to push the corrupt repo to github and then clone it from there, I think that corrupted objects wont be pushed and it will fix the problem"
"I was having this problem and Tim's answer helped me figure out the solution.  In the past I had run:git update-index --assume-unchanged index.phpThe ProblemAfter making a bunch of changes to another branch remotely, I was getting the overwrite warning while trying to switch over locally. git checkout other-brancherror: Your local changes to the following files would be overwritten by checkout:index.phpPlease, commit your changes or stash them before you can switch branches.AbortingStashing wasn't working.git stash save --keep-indexNo local changes to saveThe Solutiongit update-index --no-assume-unchanged index.phpgit add index.phpgit commitAfter that.git checkout other-branchSuccess!It turns out that I had the skip-worktree bit set, so I needed to rungit update-index --no-skip-worktree <filename>I found this out by running git ls-files -v | grep ""^[^H]""(Or git ls-files -v | where { $_ -match ""^[^H]""} with Windows Powershell)Typing git help ls-files explained what the output meant."
"First in the clone folder you can create a Branch (so the master stay untouched)Git Branch [name]After just copy the file you want (in your old folder) to the clone folder.When you are done, just add / commit your change and Merge your branch into the ""master"" branchIt's  will look to something like this.git add .git commit -m ""Comments""git checkout mastergit merge [new_branch]Try this tutorial from GitHubThat's because you are versioning stuff inside /home/mylogin/gitclone and git tracks everything inside that folder. You cannot track other folders outside of this repository.A solution might be create a submodule, or using a symbolic link using ln -sYou'll have to move all the files from /var/www/myapp to /home/mylogin/gitclone and then do a git add . and then git commit -m ""Your message"".To add some files or folder to your repository, they have to be in the folder you created with ""git clone"". So copy/paste your application in your local git folder and then go in it and do ""git add *"" and then you'll be able to commit to the server with ""git commit -m 'message'"" and finally push the changes to the server with ""git push"""
"This should be enough# I prefer fetching everything from upstreamgit fetch upstream# Then I track the new remote branch with a local branchgit checkout -b 1.6.x --track upstream/1.6.xgit push origin 1.6.xIf there are update issues like:fatal: Cannot update paths and switch to branch '1.6.x' at the same time. Did you intend to checkout 'upstream/1.6.x' which can not be resolved as commit?""And if this doesn't work either:git checkout upstream/1.6.x -b 1.6.xThen a simpler version is:# let's create a new local branch firstgit checkout -b 1.6.x# then reset its starting pointgit reset --hard upstream/1.6.xWhat the OP Everett Toews has to do in his case was:Ultimately I had to explicitly add the upstream branch with git remote add --track 1.6.x upstream-1.6.x https://github.com/jclouds/jclouds and then:git pull upstream-1.6.x 1.6.x"
"Try using this syntax:git checkout -- -feature-abcThe double hyphen syntax should help git separate the command options from the actual branch name parameter, as I explained before in ""Deleting a badly named git branch"".If that doesn't work, you can follow the recipe suggested in ""How do I rename a local Git branch?""Go into your working copy's .git/refs/heads, find the filename ""-dumb-name"", get the hash of the branch. Then this will check it out, make a new branch with a sane name, and delete the old one.Go into your working copy's .git/refs/heads,  find the file named ""-feature-abc"", get the hash of the branch (cat the file).  Then check it out, make a new branch with a sane name, and delete the old one.git checkout {hash}git checkout -b brilliant-namegit branch -d -- -dumb-nameFinally I am able to get things working based on VonC's Answer. Solution 1:git checkout -b feature-abc origin/-feature-abcSolution 2:Go into your working copy's .git/refs/remotes/origin,  find the file named ""-feature-abc"", get the hash of the branch (cat the file),  Then check it out, make a new branch with a sane name,Make new branch track remote branch.git checkout {hash}git checkout -b feature-abcgit branch --set-upstream-to=origin/-feature-abc feature-abcHow do you make an existing Git branch track a remote branch?"
"As mentioned in ""Unresolvable Git error: The following untracked working tree files would be overwritten by checkout"", setting core.ignore to true is a valid way to allow the checkout to proceed.But I would prefer, as in ""GIT: The following untracked working tree files would be overwritten by checkout"", to:git add what I just modified (in your case, git mv might have already added the renamed file to the index)git stash, saving the indexgit checkout -b anotherBranch: this should work since the index is cleangit stash pop, if you want to restore the case change on that new index.A simple (but inelegant) way to overcome this problem without having to change the config setting is to delete the file and to check it out again. In my case this allowed my changes branches as normal again.Edit: As Avivr has pointed out, my proposed workaround doesn't solve the problem permanently. I will still not delete this answer because it may help as a temporary hot-fix in some cases."
"You can try (git update-index man page):git update-index --skip-worktree -- pathSkip-worktree bit can be defined in one (long) sentence: When reading an entry, if it is marked as skip-worktree, then Git pretends its working directory version is up to date and read the index version instead.However, as mentioned in ""git assume unchanged vs skip worktree"":Both options have problems. --assume-unchanged resets itself whenever the index gets discarded (e.g. git reset), so that will probably trip you up sooner or later. Same goes for --skip-worktree.What I've started doing is creating a branch off master called private that has my local changes; think of it as a proxy branch between my work branch and master. I can rebase my current work branch against private when I need my local-only changes and I have a couple of aliases in my .gitconfig that automate keeping private up-to-date with master. When I need to merge to master, my aliases make sure to rebase --onto master private my work branch first.I posted a blog entry about this in more detail here http://blog.ericwoodruff.me/2013/02/git-private-branch-pattern.html"
"After a long discussion in chat, it turns out that the your earlier commit (with log message ""Implement chat services"" was still visible in reflog. (You had said in the question that it wasn't, but you simply missed seeing it). So what you need to do (and have already done, as I know from chat) is:git reflogAbout ten lines down in reflog, you'll see ""a8d4aa0 HEAD@{12}: commit: Implement chat services"". So the commit hash you needed was a8d4aa0. Now you can simply do:git checkout -b new-branch-name a8d4aa0Now your commit is safe on a new branch, and ready to be merged or rebased as needed.By the way, it was also findable via git fsck --no-reflog; you just gave up too soon when you said ""unfortunately these commits are old commits which i think were craeted way before the ones i lost"". Here's the line from the git fsck --no-reflog output you posted:dangling commit a8d4aa02b375cb3e04b90033a1a9d17697f6583dIf you had run git show a8d4aa02b375cb3e04b90033a1a9d17697f6583d, you would have found your commit.Lesson: When looking for lost commits, never give up. Never surrender. (Thanks, Galaxy Quest!)"
"I do not have any submodules in my repository.That means you shouldn't see any .gitmodules file in your repo.If there is, that means that you have somehow a submodule declared (in which case you might want to remove it).If there isn't any .gitmodules file, then something within the school path makes the deployment script believe it is a submodules, and tries to access the (non-existent) .gitmodules file of the parent repo.May be school has a .git directory in it?I was experiencing this as well, but had a different solution.  Simply, gemfile was referencing a version on github, but I had failed to push the latest commits online.  So once I made sure all my subrepos were up to date, it was able to checkout."
"You need to create local tracking branch manually:$ git checkout -b feature-cg-interesting_branch origin/feature-cg-interesting_branchYou should do it for each remore branch except masterorigin/master is not a local branch, and therefore it leaves your repository in detached head state (like when you check out a tag or a commit by its hash). Remote branches are there to keep track about what the last state of each branch the last time synced with the remote repository.You need to create a local branch when you want to develop that branch further."
"There's a couple of ways to fix this but I've found git stash works good for me. It temporary puts your local changes into another place. Then you can pull, to grab the latest changes. And then you can get your local changes back.Just like this:$ git pull......file your_file.rb not up to date, cannot merge.$ git stash$ git pull$ git stash popThis sort of problem is frequently caused by trying to pull from a repository that has two filenames that differ only in case. If you are on FAT, NTFS in case-insensitive mode (essentially, any time it's being used under Windows), or HFS+ in case-insensitive mode, and have two files ""foobar"" and ""FOOBAR"", then Git will see two distinct files, but the filesystem will only see one, which will cause all kinds of problems. Git will checkout, say, ""FOOBAR"", and then checkout ""foobar"", which the filesystem sees as simply replacing the contents of ""FOOBAR"" but leaving it in place. Now to Git, it appears that ""FOOBAR"" has been replaced with the contents of ""foobar"", and ""foobar"" is gone.There are two different manifestations of this basic problem. One is when your repository actually contains two files that differ only on case. In this case, you need to work on a case-sensitive file system, or you will need to edit the repository to ensure that no collisions of this sort occur; a case-insensitive file system simply cannot store the contents of this repository.A different case that you can workaround is when a rename happens that changes the case of the file. Say, for example, that the Git repository contains a rename from ""EXAMPLE"" to ""example"". Before Git checks out the new version, it will try and check to make sure it's not overwriting some existing file that you have on your disk. Since it thinks that ""example"" is a new filename, it will ask the filesystem if it exists, and the filesystem will see ""EXAMPLE"" and say yes, so Git will refuse to check out the new version since it thinks it will be overwriting untracked files. In this case, if you have no local changes that you care about, a simple git reset --hard <revision-to-checkout> will generally be sufficient to get you past the problem and to the new revision. Just try and remember not to rename files to other names that differ only in case if you're on a case-insensitive file system, as it will cause problems like this.Generally speaking, this means you have changes in your local files that haven't been committed to your local repository.  You can also see this stackoverflow question for a bit more detail.It might a problem also with file permissions. Git is versioning them too, unless config says otherwise. Just adding this answer for people who has almost but not the like problem.Worth a try:Could you set, just for this update, set the config parameter core.trustctime to false?core.trustctimeIf false, the ctime differences between the index and the working copy are ignored; useful when the inode change time is regularly modified by something outside Git (file system crawlers and some backup systems)."
"Sadly, the Visual Studio plugin for Git doesn't display the error messages you need to troubleshoot this problem. (I hope they plan that feature for a later release.)Try pulling the latest commits using Git Bash or using TortoiseGit. Either of those tools should let you know where your conflicts are.To see the error you should run git command lineYou can find it at Team Emplorer -> Unsynched commits -> Actions -> Open in Command PromptThen you should use git pull commandBe careful with credential if you are using visualstudio.com,in this case you must have an alternative login and password for connect to git from command prompt.For resolving the issue follow below steps:-1)Close visual studio.2)Now Open visual studio without opening any solution..3)Open team viewer and then go to git home->changes..4)Then click on commit..5)Now you will get the unresolved conflicts..6)Resolve the conflicts and commit..Problem Resolved :).CheersThis error often occurs when:You have a proxy on your network:See some solutions on configuring your git proxy settings here.or... The git url you are trying to connect to is over 256 charactersVisual Studio Tool for Git didn't supported the remote repositories using the SSH protocol, only HTTP and HTTPS were supported but now it supports SSH as well.See the url on how to resolve this-https://github.com/libgit2/libgit2sharp/issues/255"
"As mentioned in ""git rebase: error: cannot stat 'file': Permission denied"", this should be an error seen mainly on Windows.It is usually related to files locked by a Windows process, either an anti-Virus or an IDE (Visual Studio, Eclipse, ...).Make sure no other processes are running when trying to make your checkout or merge, and see if the issue persists.TortoiseGIT process that blocks those files. Open task manager and end process TGitCache.exe. The OP virtuesplea reports:Killing the TGitCache.exe process (from the other topic) ended up being the solution"
"Assuming you're wanting to undo the effects of 'git rm ' or 'rm ' followed by 'git add -A' or something similar:# this restores the file status in the indexgit reset -- <file># then check out a copy from the indexgit checkout -- <file>To undo 'git add ', the first line above suffices, assuming you haven't committed yet.Both questions are answered in git status.To unstage adding a new file use git rm --cached# Changes to be committed:#   (use ""git rm --cached <file>..."" to unstage)##   new file:   testTo unstage deleting a file use git reset HEAD# Changes to be committed:#   (use ""git reset HEAD <file>..."" to unstage)##   deleted:    testIn the other hand, git checkout -- never unstage, it just discards non-staged changes.The answers to your two questions are related.  I'll start with the second:Once you have staged a file (often with git add, though some other commands implicitly stage the changes as well, like git rm) you can back out that change with git reset -- <file>.In your case you must have used git rm to remove the file, which is equivalent to simply removing it with rm and then staging that change.  If you first unstage it with git reset -- <file> you can then recover it with git checkout -- <file>."
"This error:stderr: Permission denied (publickey). fatal: The remote end hung up  unexpectedlyindicates that Jenkins is trying to connect to github with the wrong ssh key.You should:Determine the user that jenkins runs as, eg. 'build' or 'jenkins'Login on the jenkins host that is trying to do the clone - that is, do not login to the master if a node is actually doing the build.Try you ssh to github - if it fails, then you need to add the proper key to /.sshi had sometime ago the same issue.make sure that your ssh key doesn't have password and use not common user account (e.g. better to user account called jenkins or so).check following article http://fourkitchens.com/blog/2011/09/20/trigger-jenkins-builds-pushing-github"
"As ever, Git is right, it just has a quirky way of saying it: when you create a repository, the master branch actually doesn't exist yet because there's nothing for it to point to.Have you tried committing something after your git init? Adding a remote and pulling from it will also work, of course."
"Finally, the native git for windows has an option for long paths: The msysgit development team has implemented what appears to be a  solution in msysgit 1.9.0. It appears that the solution needs to be  specifically enabled, but it may allow you to resolve this problem by  installing msystgit 1.9.0 and runninggit config --global core.longpaths trueRefer to  https://github.com/msysgit/git/commit/c5f98452e98dca292c615000df7973ead63cf29b  for more details on the option. You should probably only enable that  option if you encounter the problem, since the msysgit people warn  that there may be compatibility issues with other tools when longpaths  are enabled in core git."
"See the 'non-fast forward' section of 'git push --help' for details.You can perform ""git pull"", resolve potential conflicts, and ""git push"" the result. A ""git pull"" will create a merge commit C between commits A and B.Alternatively, you can rebase your change between X and B on top of A, with ""git pull --rebase"", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A.You can also force a push by adding the + symbol before your branch name.git push origin +some_branchYou probably have changes on github that you never merged. Try git pull to fetch and merge the changes, then you should be able to push. Sorry if I misunderstood your question.If you ""git pull"" and it says ""Already up-to-date."", and still get this error, it might be because one of your other branches isn't up to date.  Try switching to another branch and making sure that one is also up-to-date before trying to ""git push"" again:Switch to branch ""foo"" and update it:$ git checkout foo$ git pullYou can see the branches you've got by issuing command:$ git branchYou can force it to push, but please do this ONLY when you're quite sure what you are doing.The command is:git push -fThis problem can also occur when you have conflicting tags. If your local version and remote version use same tag name for different commits, you can end up here.You can solve it my deleting the local tag:$ git tag --delete foo_tagWhen I got this error, I backed up my entire project folder.  Then I did something like$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master...depending on your branch name (if it's not master).Then I did git pull --rebase.  After that, I replaced the pulled files with my backed-up project's files.  Now I am ready to commit my changes again and push."
"Here are some common forms. Which is the best to choose depends on what you do. You can use any subset or combination of them in a single script without it being bad style.if ! failingcommandthen    echo >&2 message    exit 1fifailingcommandret=$?if ! test ""$ret"" -eq 0then    echo >&2 ""command failed with exit status $ret""    exit 1fifailingcommand || exit ""$?""failingcommand || { echo >&2 ""failed with $?""; exit 1; }You could do something like:git clone git@github.com:my-username/my-repo.git || exit 1Or exec it:exec git clone git@github.com:my-username/my-repo.gitThe latter will allow the shell process to be taken over by the clone operation, and if it fails, return an error.  You can find out more about exec here."
"Try cleaning-up your local repository with:$ git gc --prune=now$ git remote prune originman git-gc(1):git-gc - Cleanup unnecessary files and optimize the local repositorygit gc [--aggressive] [--auto] [--quiet] [--prune=<date> | --no-prune]       Runs a number of housekeeping tasks within the current repository, such as compressing file revisions       (to reduce disk space and increase performance) and removing unreachable objects which may have been       created from prior invocations of git add.       Users are encouraged to run this task on a regular basis within each repository to maintain good disk       space utilization and good operating performance.man git-remote(1):git-remote - manage set of tracked repositoriesgit remote prune [-n | --dry-run] <name>           Deletes all stale remote-tracking branches under <name>. These stale branches have already been           removed from the remote repository referenced by <name>, but are still locally available in           ""remotes/<name>"".Happened to me as well. In my case, the bad ref was master, and I did the following:rm .git/refs/remotes/origin/mastergit fetchThis made git restore the ref file. After that everything worked as expected again.This did the job for me:git gc --prune=nowI had this same issue and solved it by going to the file it was erroring on:\repo\.git\refs\remotes\origin\masterThis file was full of nulls, I replaced it with the latest ref from github.This works for me:git gc --prune=nowOn SourceTree requires one more pull to fix.For me it worked to remove the files files that are throwing errors from the folder .git/refs/remotes/origin/"
"You face the problem that the branch you want to check out contains numerous files like foo.phtml which are not tracked in your current branch. It seems that you can just delete the files, so try:git checkout -f otherbranchjust in case you did care about the files later, usegit stash -uthat will clean your working directory but in case you lose something, you can get it back from the stash. Now you can go ahead and checkout your other branch.The other scenario is that the files are ignored in one branch and not in the other. In this case you should follow up the stash command (if git status shows something is changed) with the git checkout -f theotherbranch."
"If you are getting an error while doing a git clone, then above needs to be changed to:git config --global http.sslVerify falseYou might have to disable the certificate verification in your case:git config http.sslVerify false(as in ""Git: ignore a self signed certificate"")The other option, similar to ""Unable to clone Git repository due to self signed certificate"" would be to import that certificate into git.That is: copied it at the end of the file /path/to/git/bin/curl-ca-bundle.crt.Check your .gitconfig file.If you've found the following line, Remove it![http]sslCAinfo = /bin/curl-ca-bundle.crtIt worked for me."
"The warning: remote HEAD refers to nonexistent ref, unable to checkout. means that the remote (bare) repository contains branch reference in the file HEAD that does not match any published branch in the same repository.Note that the warning only means that git didn't do checkout. The cloned repository is otherwise just fine. Just do git branch -a to see possible branches and git checkout the-branch-you-want to workaround the issue.This usually happens because the default contents for that file (.git/HEAD or plain HEAD for bare repositories) is ref: refs/heads/master which says that if somebody is going to clone this repository, they should by default clone the branch refs/heads/master. By default Git will create local branch without the refs/heads/ prefix (that is, master by default). Try git help symbolic-ref for more information.The problem with this situation is that Git does not provide a method for modifying remote symbolic refs so either you use something the Git hosting provider has implemented (e.g. Settings - Default branch in GitHub if you have admin rights) or you have to use branch name master as the default branch (because that's the default value for that symbolic ref).One way to hit this issue is to create a new remote bare repo with no commits and then do git push name-of-the-remote my-special-branch-name which will result in bare repository containing a single branch my-special-branch-name but the HEAD symbolic ref still contains the default value pointing to master. As a result, you'll get the aforementioned warning.I have had the same issue because I was not using anymore the master branch and it went lost in both my local and remote repository. The remote repository had still the HEAD set to master, I have changed it to one of the remote branch I actually use and everything works fine.If you can access your remote repository:Go to your remote_repo.git;Edit HEAD fileChange ref: refs/heads/master to ref: refs/heads/your_branchEven though this error was displayed - my project was still connected to the corresponding  repository - I ran the 'git branch' command and saw the appropriate branches - I then ran 'git checkout *branchname' and BOOM - all was well."
"Looks like the following process had a lock on the .git\index file:ssh-agent.exeC:\Users\Tom\AppData\Local\GitHub\PortableGit_8810fd5c2c79c73adcc73fd0825f3b32fdb816e7\bin\ssh-agent.exeI killed the process and ran git reset HEAD and looks like I'm back to normal now."
"Aha - solved it. The problem was that by doing init it was creating an empty repository, so I couldn't do a checkout. (I don't know why the pull didn't work.) Instead, do a clone , but use the -n parameter for ""no checkout"". This clones the git repository but leaves your working tree empty. Then set up sparse checkout. Then checkout just what you want.To whit:cd <parentdir>git clone -n <url>cd <repo_dir>git remote add ‰ÛÒf <name> <url>git config core.sparsecheckout trueecho /<foldername>/ >> .git/info/sparse-checkoutgit checkout <tagname>"
"By explicitly specifying ‰ÛÏgit checkout HEAD $blah‰Ûù instead of just saying ‰ÛÏgit checkout $blah‰Ûù, assuming you did want to check out a file.You don‰Ûªt say what you were trying nor what you typed, however, so no one can give you anything but a blind guess.When I encounter this message, it is because I have tried to do git checkout -f $blah, expecting to throw away local changes, as described in git checkout --help.Instead, I use rm $blah && git checkout $blah to throw away local changes."
"This could be possible because the the file is added to the repo in the 'target branch', ensure that the file is git rm 'ed from the 'target branch', and then try switching branches.As charles said, git does it to ensure data integrity, so that nothing is lost when switching directories.It's a good thing that git warns you about this, because switching to a branch that doesn't have the file deleted will... delete it. So you're doing it right, remove (or rename) it before checking out a branch that have it deleted.So it's just that git cares about your data before overwriting it, since it's unversioned you won't be able to recover it after the checkout."
"OK, I got this working. As I expected it was not working because of step 5.The line below works now:5. echo MyProject/*> .git/info/sparse-checkoutThe important thing is to use ""/"", use ""*"" and leave no space at the end of the directory."
"This error message indicates that the reference point from which you are trying to create a new branch does not exist in your local repository (origin/new_branch_name in your stated example). The solution to this is to run git fetch origin to make sure that those branches that exist your origin remote repository have been created locally as well (if you've messed with the default configuration for your origin remote, you may need to do git fetch origin refs/heads/*:refs/remotes/origin/* instead).Additionally, since the argument to -b is intended to be the name of the new local branch being created, git checkout -b master ... is probably not correct, as you most likely already have a local master branch. Most of the time, it makes sense to name the local branch after the remote branch to avoid confusion, so the command you want to run after git fetch origin is git checkout -b new_branch_name origin/new_branch_name. (You could shorten that to simply git checkout new_branch_name, because the default behavior of git checkout <branch> if <branch> doesn't exist is to look for origin/<branch> and to create a local branch with the same name pointed to the remote branch)."
"I had this problem, and I solved it by removing the file .git/ORIG_HEAD then doing the pull again.   The .git/ORIG_HEAD file was 0 bytes instead of the git reference it was supposed to contain, so I just got rid of it.Check the git remote prune origin mentioned in addition of the git gc --prune=now in ""git pull fails ‰ÛÏunalble to resolve reference‰Ûù ‰ÛÏunable to update local ref‰Ûù"".If you have a .git/rebase-merge, consider removing it (as in ""git rebase and deleted rebasing branches causing ‰ÛÏInteractive rebase already started‰Ûù error message"")Check also the content of .git/HEAD, as in this issue.If this is a repo corruption of some kind (see ""Git corrupt master branch""), try first to clone your repo again, and re-apply your current modifications on top of that repo (through git format-patch if you need to)This answer doesn't solve the OP's problem, but solves a similar one.I had a similar problem (I got error: cannot lock ref ... is at ... but expected ...), but it was because there were two branches in the repo with the same name, but with different case. Maybe this answer could help people that get here, I wasn't able to find an answer elsewhere.I deleted one of the branches, and then deleted its corresponding reference from: .git/ref/.../branch_name, then git pulled. This happens due to me working on a case-insensitive file system, while the two branches were pushed on a case-sensitive file system.For example, the two branches are BRANCH1 and branch1, and they are both under origin remote. First, delete one of the branches, for example BRANCH1. Then remove its ref:rm .git/refs/remotes/origin/BRANCH1Then git pull, and it should be fine."
"I found a solution Here that worked for me.In .git/config file (client and/or server) I added the following:[core]  packedGitLimit = 128m  packedGitWindowSize = 128m[pack]  deltaCacheSize = 128m  packSizeLimit = 128m  windowMemory = 128mFor reference (you might already seen it), the msysgit case dealing with that issue is the ticket 292.It suggests several workarounds:Disable delta compression globally. For this you have to set pack.window to 0. Of course this will make the repository much larger on disc.Disable delta compression for some files. Check the delta flag on the manpage to gitattributes.git config --global pack.threads 1git config --global pack.windowMemory 256m (you already tried that one, but also illustrated in ""Error when pulling warning: suboptimal pack - out of memory"")other settings are mentioned in ""git push fatal: unable to create thread: Resource temporarily unavailable"" and ""Git pull fails with bad pack header error"" in case this is pack-related.sm4 adds in the comments:To disable the delta compression for certain files, in .git/info/attributes, add:*.zip binary -deltaFrom Gitattributes man page:Delta compression will not be attempted for blobs for paths with the attribute delta set to false.Maybe a simpler workaround would be to somehow reset the history before that large file commit, and redo the other commits from there.EDIT: ‰ÛÄSince git-v2.5.0 (Aug/2015), git-for-windows (formerly MSysGit)‰ÛÄ ‰ÛÄ ‰ÛÄ provides 64-bits versions as noticed by Pan.student.‰ÛÄ ‰ÛÄ ‰ÛÄ In this answer I was advising to install Cygwin 64-bits (providing 64-bits Git version).I got a similar Out of memory, malloc failed issue using MSysGit when reaching the 4GB barrier:> git --versiongit version 1.8.3.msysgit.0> file path/Git/cmd/gitpath/Git/cmd/git: PE32 executable for MS Windows (console) Intel 80386 32-bit> time git clone --bare -v ssh://linuxhost/path/repo.gitCloning into bare repository 'repo.git'...remote: Counting objects: 1664490, done.remote: Compressing objects: 100% (384843/384843), done.remote: Total 1664490 (delta 1029586), reused 1664490 (delta 1029586)Receiving objects: 100% (1664490/1664490), 550.96 MiB | 1.55 MiB/s, done.Resolving deltas: 100% (1029586/1029586), done.fatal: Out of memory, malloc failed (tried to allocate 4691583 bytes)fatal: remote did not send all necessary objectsreal    13m8.901suser    0m0.000ssys     0m0.015sFinally git 64 bits from Cygwin fix it:> git --versiongit version 1.7.9> file /usr/bin/git/usr/bin/git: PE32+ executable (console) x86-64 (stripped to external PDB), for MS Windows> time git clone --bare -v ssh://linuxhost/path/repo.gitCloning into bare repository 'repo.git'...remote: Counting objects: 1664490, done.remote: Compressing objects: 100% (384843/384843), done.remote: Total 1664490 (delta 1029586), reused 1664490 (delta 1029586)Receiving objects: 100% (1664490/1664490), 550.96 MiB | 9.19 MiB/s, done.Resolving deltas: 100% (1029586/1029586), done.real    13m9.451suser    3m2.488ssys     3m53.234sFYI on linuxhost 64 bits:repo.git> git config -luser.email=name@company.comcore.repositoryformatversion=0core.filemode=truecore.bare=truerepo.git> git --versiongit version 1.8.3.4repo.git> uname -aLinux linuxhost 2.6.32-279.19.1.el6.x86_64 #1 SMP Sat Nov 24 14:35:28 EST 2012 x86_64 x86_64 x86_64 GNU/LinuxIf my answer does not fix your issue, you may also check these pages:git clone out of memory even with 5.6GB RAM free and 50 GB hard diskGit clone fails with out of memory error - ‰ÛÏfatal: out of memory, malloc failed (tried to allocate 905574791 bytes) / fatal: index-pack failed‰Ûùgit-clone memory allocation errorMSysGit issues tracker"
"When there is a conflict during a merge, you have to finish the merge commit manually. It sounds like you've done the first two steps, to edit the files that conflicted and then run git add on them to mark them as resolved. Finally, you need to actually commit the merge with git commit. At that point you will be able to switch branches again.In case you ever get stuck during a merge/rebase you can alwaysgit reset --hardto restore your working to the state of the last commit. This will lose your changes from the working tree so if you had local modifications before the merge they will be gone after this‰ÛÓwhich is why it‰Ûªs advisable to not start a merge when you have local modifications. :)The next steps after resolving the conflicts manually are:-git add .git status (this will show you which commands are necessary to continue automatic merge procedure)[command git suggests, e.g. git merge --continue, git cherry-pick --continue, git rebase --continue]"
"Just fetch the refs from the remote (this will fetch all branch, commit, refs etc for the upstream repo)git fetch upstreamAfter this, checkout the needed branch (this creates a local copy of the branch)git checkout -b <branchname> --track upstream/<branchname>Now if you want to pull the changes in this branch in future, all you need to do is git pull upstream <branchname>As mentioned here, try doing an explicit fetch on the branch name:git fetch upstream master:branch_nameIf you just added the remote, you'll need to fetch it so that Git knows which branches are available:git fetch upstream masterAfter this you can dogit checkout upstream/masterwithout any issues."
"Git tries to resolve git checkout test like this:If there is a local branch named ""test"", then checkout thatIf there is a remote branch named ""test"", for example origin/test, then create a local branch from it and checkout (equivalent to git checkout -b test origin/testIf there is a file or directory named ""test"", then checkout that, which will undo uncommitted (but unstaged) changes to that file/directoryIf none of the above match, then Git gives the error:error: pathspec 'test' did not match any file(s) known to git.I'm not sure what you were trying to do here. If you wanted to checkout the ""test"" branch, it seems it doesn't exist. Check what branches you have with git branch -a. If you wanted to checkout a file/dir, it doesn't exist. Check what files you have with git ls-files."
"This could mean that another program is using the file, which is preventing git from ""moving"" the file into or out of the working directory when you are attempting to change branches. I have had this happen on Windows Vista where eclipse is the program ""using"" the file. The file may not be actually open in eclipse but may have been opened by a process run by eclipse. In this event, try closing the file in any applications that might have used it. If that doesn't work, completely exit any applications which may have opened the file.I had this issue and solved it by the command : git gcThe above command remove temp and unnecessary files. (Garbage collector.)this solution from here worked for me:This is a Windows specific answer, so I'm aware that it's not relevant to you... I'm just including it for the benefit of future searchers.In my case, it was because I was running Git from a non-elevated command line. ""Run as Administrator"" fixed it for me.I encountered this issue while doing a git pull.I tried git gc and it resolved my problem.In my case there are no processes touching the file or directory. Maybe it happens if the path is very long, because an operating system restriction (windows). Try enabling the longpath support flag in the global git configuration as indicated below:git config --global core.longpaths trueor try to setting the yes/no answer flag if it is not conflictive for youset GIT_ASK_YESNO=falseIf the path is too long, I've not found a successful solution.I ran into this issue running git Bash and Eclipse EGit at the same time.Solution: close Eclipse. Also wouldn't hurt to run git gc as @khilo mentioned.I had this kind of issue on Windows 7 and it turned out to be due to some orphaned git.exe process.To solve it, open Task Manager and kill all git.exe processes.Since git commands are short-lived, you should normally never see any git.exe in Task Manager. When they are there, it usually means something is wrong, and you should kill those processes.In my case (Win8.1, TortoiseGit running), it was the process called ""TortoiseSVN status cache"" that was locking the file.Killing it allowed me to run ""git gc"" without any more problems.The above process is fired up by TortoiseGit, so there is no need to manually restart it.I had this issue with .tmp files in /.git/objects/pack folder. I think something had failed during a push or pull, so I removed these temporary files and reset the HEAD to my last commit. Not sure if this is advised but it worked for me. Also git count-objects -v gave me a list of the .tmp files that didn't belong in the pack folder.Or to suppress the y/n messages in windows git open cmd.exe and run:SETX GIT_ASK_YESNO falseseen here: https://twitter.com/petercamfield/status/494805475733807104This may be a separate gitk window running to see some git history.Just close that window to fix that problem.On Windows 8:I ran git gc and it said git gc was already running, I ran git gc --force and the garbage collector ran.I could then switch branches and merge without any issues, try git gc --force.Perhaps the gc process didn't stop gracefully for one reason or another."
"Assuming you cloned the repository in 'path/to/repo', just try this:from git import Gitg = Git('path/to/repo')g.checkout('tag_name')"
"I had to deal with a broken repository too. After commenting out Capistrano's shallow clone option (:git_shallow_clone, 1 which yields --depth 1) deployment worked well.See the accepted answer of this question for a detailed explanation on how to possibly fix it: Git submodule head 'reference is not a tree' error"
"In this case, the problem stemmed from my ""autocrlf"" setting to ""input"".For better or worse, our build process generated xml files with ""CRLF"" line endings. ""git status"" must work in conjunction with ""autocrlf"".  Though I had not touched or edited the file, ""git status"" must say ""when you commit this file, git will have to modify it, so I will report it right-now as modified"".The ""solution"" was to turn off autocrlf.With no autocrlf, git status returned ""the right thing""I ran into a similar problem which was due to the case of filenames. In the repository, there was a file called file.txt and another called File.txt (or other such names that differed only by case). Git doesn't expect this, and when checking out the repo on a non-case-sensitive filesystem (Mac OS X in my case), I had this same sort of problem.My eventual solution was to entirely exclude the directory containing the file from that checkout. In my situation I didn't need that directory in that situation, which was lucky."
"Git has a limit of 4096 characters for a filename, except on windows when git is compiled with msys. It uses an older version of the windows api and there's a limit of 260 characters for a filename.So as far as I understand this, it's a limitation of msys and not of git. You can read the details here:https://github.com/msysgit/git/pull/110You can circumvent this but using an other git-client on windows.You should be able to run the commandgit config --system core.longpaths trueor add it to one of your git config files manually to turn this functionality on, once your are on a supported version of git. It looks like maybe 1.9.0 and after.This might help :git config core.longpaths true"
"As shown in How does ""not something we can merge"" arise?, this error can arise from a typo in the branch name because you are trying to pull a branch that doesn't exist.If that is not the problem (as in my case), it is likely that you don't have a local copy of the branch that you want to merge. Git requires local knowledge of both branches in order to merge those branches. You can resolve this by checking out the branch to merge and then going back to the branch you want to merge into.git checkout branch-namegit checkout mastergit merge branch-nameThis should work, but if you receive an error sayingerror: pathspec 'remote-name/branch-name' did not match any file(s) known to git.you need to fetch the remote (probably, but not necessarily, ""origin"") before checking out the branch:git fetch remote-nameIt's a silly suggestion, but make sure there is no typo in the branch name!I had this issue as well. The branch looked like 'username/master' which seemed to confuse git as it looked like a remote address I defined. For me using thisgit merge origin/username/masterworked perfectly fine.git fetch --all did the trick for me:git remote add upstream [url to the original repo]git checkout [branch to be updated]git fetch --allgit merge upstream/[branch to be updated]If the string containing the reference is produced by another Git command (or any other shell command for that matter), make sure that it doesn't contain a return carriage at the end. You will have to strip it before passing the string to ""git merge"".Note that it's pretty obvious when this happens, because the error message in on 2 lines:merge: 26d8e04b29925ea5b59cb50501ab5a14dd35f0f9 - not something we can mergeI got this error when I did a git merge BRANCH_NAME ""some commit message"" - I'd forgotten to add the -m flag for the commit message, so it thought that the branch name included the comment."
"Try git fetch so that your local repository gets all the new info from github. It just takes the information about new branches and no actual code. After that the git checkout should work fine.I got this error for a branch that was remote and had no local tracking branch. Even though I'm certain I've checked out remote branches via a simplegit checkout feature/fooin the past, to get around this error I had togit checkout -t -b feature/foo origin/feature/fooI have no idea what I did to get myself into that situation either.I was getting following error when I tried to checkout new brancherror: pathspec 'BRANCH-NAME' did not match any file(s) known to git.When I tried git checkout origin/<BRANCH-NAME> it went to detached HEAD (detached from origin/)Did following to resolve the issuegit remote updategit fetch git checkout --track origin/<BRANCH-NAME>""error: pathspec 'foo' did not match any file(s) known to git.""This happenned to me when the full repo was not fetched.try:$ git fetchGit Windows users beware - without the --icase-pathspecs or GIT_ICASE_PATHSPECS = 1 env var setting, that git pathspecs will be case-sensitive, in which case git checkout origin/FooBranch ""Some/Path/To/File.txt""is not the same as git checkout origin/FooBranch ""some/path/to/file.Txt""I got this when I did the following:Used IntelliJ IDE, connected to gitCreated a new file, and added to gitRenamed the new fileWhen I tried to check in the directory, I got this error.To fix:I opened the repo in git extensions. I saw that the file (with the old name) was staged. But since it didnt exist anymore, it could not be committed.I simply unstaged this file. Then I re-added the file (this time correctly named) into git and committed without errors.If it happens on Windows, it is probably the filename case issue. I had this error today - I've created new file, added to GIT, then I changed one letter in filename from lower to upper and then I couldn't to anything - commit, revert, delete file from repo. The only solution I found was changing the filename again back to exact same case when I added this file to GIT, then doing GIT revert to remove this file from GIT, then changing filename again as I want. After those changes I could commit to repo and then push without any problem.None of these answers solved my issue:Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git log --format=onelineb9cc6a9078312865280fb5432a43e17eff03a5c6 Formatted README288772f36befe6bd60dd41b8185f1e24e0119668 Updated README documentationd2bdbe18f4169358d46fad50eacfb89786df3bf8 Version object v3.0.0-SNAPSHOTa46b1910a3f548b4fa254a6055d25f68d3f217dd VersionFactory is now Platform agnostic24179ae569ec7bd28311389c0a7a85ea7b4f9594 Added internal.Platform abstraction252b684417cf4edd71aed43a15da2c8a59c629a7 Added IPlugin implementation for Spongee3f8d21d6cf61ee4fc806791689c984c149b45e3 Added IPlugin implementation for Bukkitaeb403914310b4b10dee9e980cf64472e2bfda79 Refactored Version.javaef50efcff700c6438d57f70fac30846de2747a7e Refactored TesterFactorya20808065878d4d28657ae362235c837cfa8e625 Added IPlugin abstraction9712a3575a70060d7ecea8b62bb5e888fdc32d07 Heavily refactored Tester02d025788ae740dbfe3ef76a132cea8ca4e47467 Added generic Predicate<T> interface9c565777abea9be6767dfdab4ab94ed1173750dd Minor refactoring of testCompareTo()2ff2a28c221681e256dcff28770782736d3a796a Version object v2.0.1d4b2e2bd830f77cdbc2297112c2e46b6555d4393 Fix compareTo()05fe7e012b07d1a5b8de29804f96d9a6b24229a1 Make compareTo() fail6e85371414357a41c1fc0cec0e75adba92f96832 Fix VersionFactory passing nullc1fd1f032f87d860d5ed9d6f6679c9fa522cff8d Version object v2.062c3a92c008a2ed11f0a4d016080afc3541d0700 Version object v1.2c42e9e617128085e872c51b4d977a04e48d69e8f Deprecated, doc'd, future-proofed getNmNikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 3a796aerror: pathspec '3a796a' did not match any file(s) known to git.I was trying to go back and build the commit for Version object v2.0.1. Luckily, I got the idea to try the whole hash code and it worked ! Which means that I was using the wrong end of the hash code.Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 2ff2aNote: checking out '2ff2a'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example:  git checkout -b new_branch_nameHEAD is now at 2ff2a28... Version object v2.0.1Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version ((2ff2a28...))$As shown above, for partial hash codes, you must supply the front-end, not the back-end.If you deleted a folder and pulled/cloned again your repo, you may need to create your local branch again. Try: git checkout -b yourbranchnameIn my case I had renamed a file changing the case of the file, i.e.   SomeFile.js -> someFile.jsI think that was related to the problem.  Doing a git fetch didn't fix the issue.I moved the files out of my project, did a fetch, and did a push without them.  Then I did a fetch, added them back, and did a push, and it worked.  I don't know if all those steps were needed, but it did ultimately work.in my case I enter submodule directory without doing git submodule init git submodule updateSo git was linked to the parent folder that indeed missed that branch.On Windows OS by default git is instaled with core.ignorecase = trueThis means that git repo files will be case insensitive, to change this you need to execute:\yourLocalRepo> git config core.ignorecase falseyou can find this configuration on .git\config file$ cat .git/refs/heads/feature/user_controlled_site_layouts3af84fcf1508c44013844dcd0998a14e61455034Can you confirm that the following works:$ git show 3af84fcf1508c44013844dcd0998a14e61455034It could be the case that someone has rewritten the history and that this commit no longer exists (for whatever reason really).This can be caused when upstream rewrites history.When this happens, I toss all affected repos, clone them fresh from upstream, and use 'git format-patch' / 'git am' to ferry any work in progress from old world to new.When I have this issue I install a new version of git. If I can't do that from a binary package, I install it from source into my $HOME directory like this:mkdir $HOME/binexport version=1.7.10.3  wget http://git-core.googlecode.com/files/git-$version.tar.gz  tar zxf git-$version.tar.gz  cd git-$version  ./configure --prefix=$HOME  make && make install  echo ""export PATH=$HOME/bin:\$PATH"" >> ~/.bashrc  chmod +x ~/.bashrc      which git      git --versionthe last two lines are to verify.(updated with code from user FractalSpace - thanks!)I had this problem today i was trying to git checkout foo and got error: pathspec 'testing' did not match any file(s) known to git. turns out i was in the wrong repo.. So lesson learned check your repo before freaking out.Happened to me after renaming an uncommitted file in Android Studio.Git seemed to have the old version in its repository, even if it didnå«t exist anymore.fetch, pull, checkout, add all and so on did not help in my case!So I opened the Git GUI of TortoiseGit which showed me the exactly file which caused trouble.Afterwards I deleted the file from the repository withgit rm -r --cached /path/to/affected/fileand the problem was goneI faced a similar issue. What led me into this trouble was:I had multiple remote branches and I deleted the folder that had the code.I did a get pull. : git pull git@git.corp......Then I added remote repository : git remote add upstream git@git.corp.......Then I tried to change branch to some other branch say AAAA and I got errorerror: pathspec 'AAAA' did not match any file(s) known to git.After spending an hour I found a solution.I deleted the source folder again.Then I did a git pull :git pull git@git.corp......Then I changed branch before linking it to remote repository : git checkout AAAthen I added it to remote repositorygit remote add upstream git@git.corp......After this I can easily switch branches.Although this is not a standard way but it worked for me after I tried all of above options.I faced this problem last time, and the thing I have done is remove the folder (or source code) related to that branch.Ex: the branch origin/foo create folder foo at your local, so I just delete it and use git fetch $ checkout to get code back from remote.Or you can do it by create folder at local same as the branch you intended to checkout.Ex: create folder foo at local, after that, use Git command: git branch --set-upstream-to=origin/foo foo, that all. Use git pull to get code."
"Tryrm -f ./.git/index.lockIn your repository directory. The error message is rather explicit in what causes it.In windows:command prompt from repo directory:cd .gitdel index.lockTry quitting Xcode - since it's a git client, you have to quit Xcode to avoid problems with git on the command line.I was having the same problem. I triedrm -f ./.git/index.lock and the console gave me an error message. Then, I tried rm -Force ./.git/index.lockand that worked.Good Luck!It just happens that I created the git repository with the root user. I deleted the git repository and created it again without sudo and it works.If you are using one of #intelliJ IDEs and receiving this msg (i'm using #webtorm), please notice that this problem can occur because of hiding one of project folders (inside settings), and this can prevent GITfrom merging."
"tl;drFrom the folder in which you want the source to live, using a git-bash prompt NOT powershell (although see my edit below):git clone ‰ÛÒn <repo> <local-directory-name>cd <local-directory-name>git config core.sparsecheckout trueecho some/sub-folder/you/want >> .git/info/sparse-checkoutgit checkout <branch-name>Full explanationSparse checkouts enable you to work on a subset of the repository. It‰Ûªs worth the effort to set up sparse checkouts on large repositories, everything is much faster!I struggled with setting it up on windows getting a lot of ‰ÛÏerror: Sparse checkout leaves no entry on the working directory‰Ûù. After a bit of research, I found the following steps were minimal and had consistently good results for me ‰ÛÒ YMMV.The most important point is this ‰ÛÒ DO NOT USE POWERSHELL/CMD FOR THESE STEPS ‰ÛÒ use a git bash prompt. This is because otherwise the echo command produces a UNICODE file with a BOM marker. The file MUST be an ANSI formatted file with UNIX style line endings for git to parse it correctly. This is the most likely cause of ‰ÛÏerror: Sparse checkout leaves no entry on the working directory‰Ûù errors.From a parent of the directory you wish to be the root folder, assuming a folder name of ‰ÛÏsrc‰Ûù do the following, This grabs the whole repo (which is still required), but does importantly does not perform a checkout, and correctly sets up the origin remote and branch tracking.git clone ‰ÛÒn <your repository> srcYou should have a fairly empty looking src folder (it will have the .git hidden folder). Now run the following. This updates the local git config to turn on sparse checkouts, and creates a file in the .git/info hidden folder that will list all the folders you want to include when doing a sparse checkout. This can be edited later to add other folders. Important: Be sure to use a git bash prompt for the below, and use an editor supporting unix line-ending conventions and save as ANSI when editing the sparse-checkout file, or you may get ‰ÛÏerror: Sparse checkout leaves no entry on the working directory‰Ûù errors. The <path you want to checkout> might look like this: path/to/subfolder - note the lack of leading and trailing path separators.cd srcgit config core.sparsecheckout trueecho <path you want to checkout> >> .git/info/sparse-checkoutNow you are ready to checkout. This should leave just the sparse-checkout folders populated. If it doesn‰Ûªt, carefully check your spelling of everything above!git checkout <branch-name>Edit - Echo in PowershellI recently discovered that echo in powershell is a synomym for write-output. It's possible to get ASCII output by piping the echo to the out-file command which allows you to specify an encoding. So this will work from Powershell and give the correct file contents:echo some/sub/folder/you/want | out-file -encoding ascii .git/info/sparse-checkout"
"In my case, the problem is that I have a folder with the same name as the branch in the root of my project. Git seems to think the xyz in git checkout xyz is the folder, not the branch.I had to do the following to switch my working tree to branch xyz for the first time:git checkout -t origin/xyzApparently, this adds a few lines to .git/config (and maybe other configuration files). After that, I can switch between xyz and master just by calling git checkout xyz / git checkout master.When I'm in the root folder and call git checkout xyz right after I cloned the repo, git does nothing and doesn't give any response either. When I cd to a sub-folder so that the folder xyz is not in scope anymore and then call git checkout xyz, git complains: error: pathspec 'xyz' did not match any file(s) known to git.Clone gives you remotes for all the origin's branches, but it only gives you a local branch for the origin's HEAD branch (or any other branch on request).TLDR: If X exists as a remote branch, then git checkout X should create a local branch of it. In my case, for a single branch, it does not.I'll venture to disagree with that.  If you want checkout to create a branch, tell it to create a branch.git checkout -t origin/release     # create branch `release` tracking `origin/release`.git checkout -b foobar             # create branch `foobar` based on your HEAD commit[edit:]I think I understand the complaint now.git checkout name does:if it's local branch or explicit remote branch, switch to it.if it's a tracked path, reset itif it's a remote branch, create a tracking branch and switch to it.and because it prioritizes the reset it can choose to do something unsafe when it could have chosen to do something safe.You are missing the -b optionTry doinggit checkout -b branch_nameEdit Note: As discussed in comments below, this would be the case only if you were using git version 1.7.9 or lesser, which I had been at the time."
"Run the Git Bash or the console you are running, with Run As Administrator"
"This is the most common problem with submodules. The commit that you are on in the outer repository has a reference to a commit in the submodule that someone did not push up yet. It's a dependency problem. Always push from the inside-out. This is most likely not something you did wrong, but someone else that's working in the repository. They were sloppy and forgot to issue push on the submodule and just pushed the containing repository. Stuff works on their machine because they made the change and those commits exist there. Go slap them and tell them to push up their submodule changes :)Otherwise, it could be your fault if you were working on another machine and you forgot to push the submodule changes. Now you're at the other location and are thinking ""WTF! These are my changes and they should work here too!""Most times it will be the case described by Adam Dymitruk, but another case that can cause this is when switching branches that have submodules that changed remotes.  This is because the submodule update just tries to do a checkout of the commit, but it won't be able to before adding and fetching the new remote.You can verify this by looking at the .gitmodules file and comparing the submodules' URL with the one shown by cd'ing to the submodule and doing a git remote -v In this case you will need to run git submodule sync to notify the submodule about the remote change, followed by git submodule update --init --recursive to get rid of this error."
"You probably didn't do this part of the tutorial:First, the work tree (/var/www/www.example.org above) must be writable by the user who runs the hook (or the user needs sudo access to run git checkout -f, or something similar).I believe if you run sudo chown -R git:git /srv/git/ this is coming from Permission denied issue when performing git push"
"TL;DR: save and delete the tag, as Ashutosh Jindal comments (see ""Rename a tag in git?""):git tag tag-master mastergit tag -d masterOriginal answer:Most of the sources I see (like this FAQ) point to the same cause:When you try to checkout a local branch, you get awarning: refname 'branch-name' is ambiguousThis can happen if you've created a local branch with the same name as a remote tag.  Git should be checking out your local branch, but instead it's trying to checkout the tag, and it gets confused.The initial import of several trees were problematic, since they contained identically named branches and tags. We have since addressed a lot of these issues, by renaming away the tags. In your case, you don't have a remote, but local tags named like your branch could be enough.The ambiguity is specified in gitrevision<refname>, e.g. master, heads/master, refs/heads/masterA symbolic ref name. E.g. master typically means the commit object referenced by refs/heads/master.If you happen to have both heads/master and tags/master, you can explicitly say heads/master to tell git which one you mean.  When ambiguous, a <refname> is disambiguated by taking the first match in the following rules:If $GIT_DIR/<refname> exists, that is what you mean (this is usually useful only for HEAD, FETCH_HEAD, ORIG_HEAD, MERGE_HEAD and CHERRY_PICK_HEAD);otherwise, refs/<refname> if it exists;otherwise, refs/tags/<refname> if it exists;otherwise, refs/heads/<refname> if it exists;otherwise, refs/remotes/<refname> if it exists;otherwise, refs/remotes/<refname>/HEAD if it exists.So check where master can be found in your repo.And git checkout heads/master would always work.Warning: by default, this would checkout the branch in a DETACHED HEAD mode. See ""Why does git checkout with explicit 'refs/heads/branch' give detached HEAD?"".To avoid that, and still use an unambiguous ref, type:git checkout -B master heads/masterThis just happened to me.  I somehow had a file .git/master containing a sha.  Not sure how that got there, but when I deleted it, the error went away.  If you read the accepted answer carefully, this is ""expected behavior"" but you won't see that .git/master if you do e.g. git show-ref master because it follows slightly different rules.Although this doesn't apply to the OP's situation, I got myself a refname is ambiguous warning after accidentally doing a git branch origin/branch instead of a git checkout origin/branch. This created a local branch named origin/branch, which made it ambiguous with the remote branch. Solving the problem was as simple as git branch -D origin/branch (safe because -D operates on local branches)."
"The solution for me was to set the git path in the Manage Jenkins > Configure System settings. In the Git section, I changed the Path to Git executable to /usr/local/bin/git.Also you can set Git location in Jenkins server/node configuration:goto Configure, under section Node Properties mark checkbox Tools Location and set yours path to Git.I had the correct path to git in Jenkins, but I had not yet accepted the Xcode build tools EULA on a fresh install of OS X Yosemite, so git looked like it was failing in Jenkins. After trying ""git --version"" on the git at /usr/bin/git in a terminal, I was given a command-line interface to accept the EULA, and then Jenkins could then access the git URL I had given the build project."
"Your repository only has a master branch, it doesn't have a gh-pages branch. That's what the error says.If you want to create that branch locally, you should do the following:git checkout -b gh-pagesInstead of this:git checkout gh-pagesOr, as the documentation suggests:git checkout --orphan gh-pagesWhich will create the branch without any parents.UpdateNow that you've set up the gh-pages branch locally, you'll need to add content to it and push the branch to your remote repository. You can do that as follows (taken from the documentation):echo ""My Page"" > index.htmlgit add index.htmlgit commit -a -m ""First pages commit""git push origin gh-pagesIf you've done the above. You will have an index.html file with My Page as its content. Just edit that file (to what ever you want it to be) and push your changes:git add index.htmlgit commit -a -m ""Updated the index.html file.""git push origin gh-pagesThat should do it. Also, take note of one of the last lines of the documentation:After your push to the gh-pages branch, your Project Pages site will be available at http(s)://<username>.github.io/<projectname>Update, Part IIIf you're still having problems after all of this, there is an option to create Project Pages with the automatic generator.Update, Part IIIOk, so instead of creating gh-pages branch in your Github site, create that branch in the repository you want to show as a Project Page.So, let's say you want your Time Tracker project as a Project Page:Create a gh-pages branch in your TimeTracker project (as you've previously done in your *.github.io repository). Add your content.Push it to Github.Now visit: https://akulkarni9.github.io/TimeTracker"
"As soon as you changed the content of a fake-symlink-file without also changing its mode from symlink to regular file and committed the result, you made a blob that can't be extracted on an OS with real symlinks, because you have an object that is supposed to be a symlink but its content is too long to be a pathname. The web interface is not doing you any favors by hiding this problem.You're probably going to have to back up to that commit, fix it, and re-commit everything after it. git rebase -i will help, but it still might not be easy, especially if you've made more changes to the files while they were in this bogus symlink-but-not-really-a-symlink state.Supposing that the bad commit is abcdef123, you need to do this:git rebase -i 'abcdef123^'which will put you in an editor with a list of commits. abcdef123 should be on the first line. On that line, change pick to edit. If there is more than one bad commit, change all of them to edit. Save and exit the editor.Now you'll be back in the point in time where you committed the bad file. This is your chance to alter history, putting things right that once went wrong. Inspect the commit withgit showand undo the bad part by restoring the original symlink pathname into the file and git adding it. Or you could really get rid of the symlink properly with git rm, then create a new file and git add that. If you choose the first option, be aware that the content of a symlink is just a pathname. It's not a text file - it doesn't have a newline on the end. If you edit it with a text editor that adds a newline, you'll have a broken symlink (pointing to a file with a newline in its name).After you've done your git add, reinsert the fixed commit into its place in history:git commit --amendgit rebase --continueIf you changed multiple commits from pick to edit you'll have to repeat that procedure for each one. The final git rebase --continue will bring you back to the present.If you are at a past commit during the rebase and you discover that the whole commit is bad (it did nothing else besides replacing a symlink with the unmodified content of the file it points to), then you can git rebase --skip instead of amending and continuing. If you know ahead of time that this is going to happen, you can just delete the bad commit from the git rebase -i list instead of changing its pick to edit.If you have multiple branches affected by the bad commit(s), you will have to repeat the whole procedure for each branch. Check out a branch, run the git rebase -i to completion (which is when git rebase --continue says ""Successfully rebased""), then check out the next branch and do it again.In the future, when splitting your development work between Windows and a real OS, do your Windows work with cygwin. Inside cygwin, symlinks are symlinks and you can't mess them up like you did.Here's a solution that doesn't require you to go back and fix commits.After all it may not be feasible if the repo is remote or shared.It uses core.symlinks=false.  You said you tried this but did not say when.You must do it before a checkout, which a normal clone does by default.So you must clone with the --no-checkout option.git clone --no-checkout the-repo tmp-clone-dircd tmp-clone-dirgit config core.symlinks falsegit checkoutcp the-problem-file the-problem-file.bak # make a backupgit rm the-problem-filegit commit -m 'Removed problem file pretending to be a symlink' the-problem-filemv the-problem-file.bak the-problem-file # restore the backup; now it will be of type filegit commit -m 'Added back the problem file - now with the correct type' the-problem-filegit push origin mastercd ..\rm -rf tmp-clone-dir  # IMPORTANTThat last step is important because  you don't want to do more work in a repo with core.symlinks=false.  It's just asking for trouble.The above assumes that you want the file to be a file not a symlink.  If it was meant to be a symlink then you'd stop after the first commit, remove the tmp-clone-dir and go back to your normal repo checkout to make the symlink and commit it.The benefit in this method is that you don't break any related clones and branches as it preserves history. The downside to this is that the broken commit is still there and will cause problems for anyone if they attempt to use that particular bad commit.I had this problem, this resolved it for me:git config core.symlinks falsegit rm <problem-file>git commit <problem-file>git pushgit config core.symlinks trueThere is also an easier way if you are using bitbucket. Since now bitbucket supports online deleting of the files you can go to your repo on bitbucket, find the file that is problematic, press the dropdown button near ""Edit"" button and ""Delete"".That will delete the file with broken symlink and you have a working directory again. if this is a possibility it is much faster than rebasing and deleting manually."
"make a backup of your repo if you aren't sure about this one, because these commands are irreversible. first, go to your repos directory.cd myrepothen recursively search for the conflicted files and delete themfind . -type f -name ""* conflicted copy*"" -exec rm -f {} \;lastly, remove any ""conflicted"" references from git's packed-refs fileawk '!/conflicted/' .git/packed-refs > temp && mv temp .git/packed-refsThe conflicted file could be in multiple places, I would look into:.git/logs/refs/remotes/origin/.git/logs/refs/heads/.git/refs/remotes/origin/.git/refs/heads/Or you might look everywhere in the .git subdirectory: find . -name '*conflicted*'Or, otherwise, list the active branches with git branch -a and delete (git branch -d) anything suspicious.This also happen to our team when my colleague push his changes and shutdown the PC before Dropbox get updated.I solved it so simply.Just deleted the conflicted copy. (XXXX's conflicted copy yyyy-mm-dd)And pull it normally.Note that my colleague had the changes before messed up. And he push his changes again. This time no shutdown. :)I was able to delete all the conflicted files from my .git folder, but I continued to get errors about files that no longer existed.The fix for me was opening up .git/refs/packed_refs and deleting lines that contained the text ""conflicted""."
"The Starting Point parameter needs to be definedTry this instead:git checkout -f HEAD"
"I think the trouble is this file here in you repo: https://github.com/kennethreitz/httpbin/blob/master/httpbin/templates/...... is not a valid filename under windowsIn order to get the repo, clone without checking out files (with -n flag):git clone -n git://repoThen you could use a sparse-checkout to get all file but ..., or you could only git checkout file you actually need."
"Try adding teamcity.git.use.native.ssh=true as a config parameter into your build configuration.It is what helped me solve a similar problem. I learned this trick from here.What was not at all obvious to me is that the Default Private Key on the server is copied to the agent and used there. I tried first in vain to add the private key to the user the agent was running as (obviously on the agent machine). But then I added the private key to the user that was running TeamCity on the server machine, and then the Agent Side checkout started working.I also used the teamcity.git.use.native.ssh=true property, but I don't think it helped with this particular problem.The only trace of this information was in this comment."
"git clone --depth 1 implicitly carries a --single-branch option, which defaults to the primary branch, which is origin/master by default.If you want to clone a different branch, tell git which one you want to clone.git clone --depth 1  --branch <branch> urlYou can directly fetch anything you want:git fetch -depth 1 origin flaggedrevs:flaggedrevs  #  `origin` can be a URL tooThat will create a normal (albeit shallow) branch from what you fetched.  To get more conventional results, git fetch --depth 1 origin flaggedrevs:refs/remotes/origin/flaggedrevs. ""copy origin's flaggedrevs to my refs/remotes/origin/flaggedrevs"".Haul up .git/config and look at it, or say git config --get-regexp fetch.  If you don't explicitly tell it what to fetch, that's what it fetches."
"The checkout command distinguishes between two cases (well, actually ""many"", but let's start with just the two :-) ):""I want to ‰Û÷get on a branch‰Ûª; here's a branch name"": e.g., git checkout branch.""I want to look at some particular revision, and get off any branch; here's a branch-identifier that is not a branch name"": e.g., git checkout 6240c5c.(Personally, I think these should use different command names, but that's just me.  On the other hand, it would obviate all the weirdness described below.)Now, let's say that you want the former.  That's easiest to write by just writing out the branch name, without the refs/heads/ part.If you want the latter, you can specify a revision by any of the methods listed in gitrevisions, except for any method that results in ""getting on the branch"".For whatever reason, the algorithm chosen here‰ÛÓit is documented in the manual page, under <branch>‰ÛÓis this: If you've written a name that, when adding refs/heads/ to it, names a branch, git checkout will put you ""on that branch"".  If you specify @{-N} or -, it will look up the N-th older branch in the HEAD reflog (with - meaning @{-1}).  Otherwise it chooses the second method, giving you the ""detached HEAD"".  This is true even if the name is the one suggested in gitrevisions for avoiding ambiguity, i.e., heads/xyz when there's another xyz.  (But: you can add --detach to avoid the ""get on a branch"" case even if it would otherwise get on the branch.)This also contradicts the resolving rules listed in the gitrevisions document.  To demonstrate this (although it's hard to see), I made a tag and branch with the same name, derp2:$ git checkout derp2warning: refname 'derp2' is ambiguous.Previous HEAD position was ...Switched to branch 'derp2'This put me on the branch, rather than detaching and going to the tagged revision.$ git show derp2warning: refname 'derp2' is ambiguous....This showed me the tagged version, the way gitrevisions says it should.One side note: ""getting on a branch"" really means ""putting a symbolic reference to a branch name into the file named HEAD in the git directory"".  The symbolic reference is the literal text ref: (with trailing space) followed by the full branch name, e.g., refs/heads/derp2.  It seems kind of inconsistent that git checkout demands the name without the refs/heads/ part in order to add the ref: refs/heads/ part, but that's git for you. :-)  There may be some historic reason for this: originally, to be a symbolic reference, the HEAD file was actually a symbolic link to the branch file, which was always a file.  These days, in part because of Windows and in part just through code evolution, it has that literal ref: string, and references may become ""packed"" and hence not available as a separate file anyway.Contrariwise, a ""detached HEAD"" really means ""putting a raw SHA-1 into the HEAD file"".  Other than having a numeric value in this file, git continues to behave the same way as when ""on a branch"": adding a new commit still works, with the new commit's parent being the current commit.  Merges can still be done as well, with the merge commit's parents being the current and to-be-merged commits.  The HEAD file is updated with each new commit as it happens.1  At any point you can create a new branch or tag label pointing to the current commit, to cause the new chain of commits to be preserved against future garbage collection even after you switch off the ""detached HEAD""; or you can simply switch away and let the new commits, if any, get taken out with the usual garbage-collection.  (Note that the HEAD reflog will prevent this for some time, default 30 days I think.)[1 If you're ""on a branch"", the same auto-update happens, it just happens to the branch that HEAD refers to.  That is, if you're on branch B and you add a new commit, HEAD still says ref: refs/heads/B, but now the commit-ID that you get with git rev-parse B is the new commit you just added.  This is how branches ""grow"": new commits added while ""on the branch"" cause the branch reference to move forward automatically.  Likewise, when in this ""detached HEAD"" state, new commits added cause HEAD to move forward automatically.]For completeness, here's a list of other things git checkout can do, that I might have put in various separate commands if I had such powers:check out a specific version of some path(s), writing through the index: git checkout revspec -- path ...create a new branch: git checkout -b newbranch (plus options for git branch)create a new branch that, if and when you do a commit on it, will be a root commit: git checkout --orphan (this puts you ""on a branch"" that does not yet exist, i.e., writes ref: refs/heads/branch-name into HEAD but does not create the branch branch-name; this is also how master is an unborn branch in a new repository)create or re-create a merge or merge conflict: git checkout -m ...resolve a merge conflict by picking one or the other ""side"" of the merge: git checkout --ours, git checkout --theirsinteractively select patches between repository objects and work-tree files, similar to git add --patch: git checkout --patchYou're not checking out a branch; you're merely checking out a commit that happens to be the head of a branch. Branches are one-way pointers: given a branch, you can determine the exact commit which is the head of that branch, but you cannot take an arbitrary commit and determine which branch(es) it is the head of. Thus, if you were to make a new commit, Git would not know which, if any, branch to update."
"The reason for that error is because you haven't made an initial commit. But it also looks like you initialized the git repository in the wrong directory.It looks like you ran the git init command in the wrong directory. Navigate to the directory you originally ran that command in (Looks like it was your Home Directory).Run ls -la to see all the files in your current directory.  You should see a .git directory. This contains all of data git uses to keep track of your work for a repository. Remove that you'll be back just like you were before you ran git. Since you haven't committed any work to the repo, you can safely remove it.In the future you should run git init in a folder specifically for the project you are working on. All the files and subfiles in that folder should be for your project.If you are just getting started using git, I highly recommend the Pro Git book, available for free online.I'm not sure if this is what happened in your case, but you can get the error message from git logfatal: bad default revision 'HEAD'if you just made your repo, and you haven't made any commits in it yet. If this is your case, then simply add your files, commit them, and do the log again:$ git add ""*""$ git commit -m ""Your commit message""$ git log"
"This error message comes from this patch (in compat/mingw.c), and this one (also in compat/mingw.c).It usually means your directory is ""busy"", or isn't empty (but contains only private files, ie non-versioned files).So make sure that, when checking out a branch, you don't have a running process making your specific directory ""busy"".Ted M Young helpfully comments:Another definition of ""busy"" is that it's your current directory!  It seems safest to do a cd to the root directory and then change directories to avoid this error."
"Your project layout is slightly incorrect. Your project locale directory should be proj/locale and not proj/mysite/locale, really."
"Note Wording changed in response to the commments. Thanks @slekseThat is not an error, it is a warning. It means the branch you are about to delete contains commits that are not reachable from any of: its upstream branch, or HEAD (currently checked out revision). In other words, when you might lose commitså_.In practice it means that you probably amended, rebased or filtered commits and they don't seem identical. Therefore you could avoid the warning by checking out a branch that does contain the commits that you're about un-reference by deleting that other branch.å_ You will want to verify that you in fact aren't missing any vital commits:git log --graph --left-right --cherry-pick --oneline master...experimentThis will give you a list of any nonshared between the branches. In case you are curious, there might be a difference without --cherry-pick and this difference could well be the reason for the warning you get:--cherry-pick Omit any commit that introduces the same change as another commit on the ""other side"" when the set of commits are limited with symmetric difference. For example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with --left-right, like the example above in the description of that option. It however shows the commits that were cherry-picked from the other branch (for example, ""3rd on b"" may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output.å_ they're really only garbage collected after a while, by default. Also, the git-branch command does not check the revision tree of all branches. The warning is there to avoid obvious mistakes.å_ (My preference here is to just force the deletion instead, but you might want to have the extra reassurance).As Drew Taylor pointed out, branch deletion with -d only considers the current HEAD in determining if the branch is ""fully merged"".  It will complain even if the branch is merged with some other branch.  The error message could definitely be clearer in this regard...You can either checkout the merged branch before deleting, or just use git branch -D.  The capital -D will override the check entirely.I had this happen to me today, as I was merging my very first feature branch back into master. As some said in a thread elsewhere on SO, the trick was switching back to master before trying to delete the branch. Once in back in master, git was happy to delete the branch without any warnings.I tried sehe's answer and it did not work.To find the commits that have not been merged simply use:git log oldbranch ^newbranch --no-mergesGit is warning that you might lose history by deleting this branch. Even though it would not actually delete any commits right away, some or all of the commits on the branch would become unreachable if they are not part of some other branch as well.For the branch experiment to be ‰ÛÏfully merged‰Ûù into another branch, its tip commit must be an ancestor of the other branch‰Ûªs tip, making the commits in experiment a subset of the other branch. This makes it safe to delete experiment, since all its commits will remain part of the repository history via the other branch. It must be ‰ÛÏfully‰Ûù merged, because it may have been merged several times already, but now have commits added since the last merge that are not contained in the other branch.Git doesn‰Ûªt check every other branch in the repository, though; just two:The current branch (HEAD)The upstream branch, if there is oneThe ‰ÛÏupstream branch‰Ûù for experiment, as in your case, is probably origin/experiment. If experiment is fully merged in the current branch, then Git deletes it with no complaint. If it is not, but it is fully merged in its upstream branch, then Git proceeds with a warning seeming like:warning: deleting branch 'experiment' that has been mergedto 'refs/remotes/origin/experiment', but not yet merged toHEAD.Deleted branch experiment (was xxxxxxxx).Where xxxxxxxx indicates a commit id. Being fully merged in its upstream indicates that the commits in experiment have been pushed to the origin repository, so that even if you lose them here, they may at least be saved elsewhere.Since Git doesn‰Ûªt check other branches, it may be safe to delete a branch because you know it is fully merged into another one; you can do this with the -D option as indicated, or switch to that branch first and let Git confirm the fully merged status for you."
"This is only my second post on stackoverflow, I hope it is helpful.master branchesinside repo switch to master branchgit checkout masternow create a copy of the master branch sitting at tag 1.0git checkout 1.0git checkout -b master_1.0switch back to master branchgit checkout masternow create a copy of the master branch sitting at tag 1.1git checkout 1.1git checkout -b master_1.1dev branchesswitch back to master branchgit checkout masternow create a dev branch from master sitting at tag 1.0git checkout 1.0git checkout -b dev_1.0switch back to master branchgit checkout masternow create a dev branch from master sitting at tag 1.1git checkout 1.1git checkout -b dev_1.1if ok push changes to the remotegit pushAt this point you would have 6 branches total.Your original master and dev plus the new copies.Development can take place on the newly created branches without impacting master.It may not be conventional to have a tag number in the branch name but it will accomplish the task of communicating quickly the branches origin or purpose.Further you can remove, merge, or re-create the branches easily.To remove branchesremote - (don't forget the "":"")git push origin :BranchNamelocal - cannot be on the branch you are trying to delete, -D for un-merged branchgit branch -D BranchName"
"Try this:git checkout -b upgrade-free-premium origin/feature/upgrade-free-premiumIn your case, the branch is a remote one. You need to specify from which branch you want to checkout: so the correct branch name is origin/feature/upgrade-free-premium. This, because other origins can have the same branch name, so you need to specify the full name.The -b is necessary to create a local branch to track the remote branch.Your branch is named feature/upgrade-free-premium ('/' can be part of the branch name).Run git checkout feature/upgrade-free-premium instead."
"Do you have big files in your repository (like log files for example) ?Apparently, your repository is too big to be retrieved on your hard drive.There are two things you can do :Check for big files and remove them if they're not useful (not only by committing. But also by modifying your history. If you still have your big files in our repository, it won't be smaller.Do a ""git gc"". It'll automatically cleanup unused files and compress the repository.If git on the remote machine fails due to memory constraints you might also try rsync or scp to copy the repository to your local machine and continue with cloning from there."
"I'm not aware of such an option, but here's a script to simulate thisbehavior. Maybe IDE(or OS) can be configured to run this script insteadof git-checkout.#!/bin/shMODIFIED=$(git status -s | grep ^\ M)if [ ""$MODIFIED"" != """" ]; then  echo ""Current branch is dirty!""  exit 1else  git checkout $1fiYou can name this script git-cleancheckout, put to your $PATH and run like thisgit cleancheckout mybranch"
"The answer was simple but not obvious:Instead of:git clone https://github.com/org/project.gitdo:git clone https://username@github.com/org/project.gitor (insecure)git clone https://username:password@github.com/org/project.git(Note that in the later case, your password will may be visible by other users on your machine by running ps u -u $you and will appear cleartext in your shell's history by default)All 3 ways work on my Mac, but only the last 2 worked on the remote Linux box. (Thinking back on this, it's probably because I had a global git username set up on my Mac, whereas on the remote box I did not? That might have been the case, but the lack of prompt for a username tripped me up... ) Haven't seen this documented anywhere, so here it is.You can manual disable ssl verfiy, and try again. :)git config --global http.sslverify falseMake sure you have git 1.7.10 or later, it now prompts for user/password correctly. (You can download the latest version here)As JERC said, make sure you have an updated version of git. If you are only using the default settings, when you try to install git you will get version 1.7.1. Other than manually downloading and installing the latest version of get, you can also accomplish this by adding a new repository to yum.From tecadmin.net:Download and install the rpmforge repository:# use this for 64-bitrpm -i 'http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm'# use this for 32-bitrpm -i 'http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.i686.rpm'# then run this in either caserpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txtThen you need to enable the rpmforge-extras. Edit /etc/yum.repos.d/rpmforge.repo and change enabled = 0 to enabled = 1 under [rpmforge-extras]. The file looks like this:### Name: RPMforge RPM Repository for RHEL 6 - dag### URL: http://rpmforge.net/[rpmforge]name = RHEL $releasever - RPMforge.net - dagbaseurl = http://apt.sw.be/redhat/el6/en/$basearch/rpmforgemirrorlist = http://mirrorlist.repoforge.org/el6/mirrors-rpmforge#mirrorlist = file:///etc/yum.repos.d/mirrors-rpmforgeenabled = 1protect = 0gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmforge-daggpgcheck = 1[rpmforge-extras]name = RHEL $releasever - RPMforge.net - extrasbaseurl = http://apt.sw.be/redhat/el6/en/$basearch/extrasmirrorlist = http://mirrorlist.repoforge.org/el6/mirrors-rpmforge-extras#mirrorlist = file:///etc/yum.repos.d/mirrors-rpmforge-extrasenabled = 0 ####### CHANGE THIS LINE TO ""enabled = 1"" #############protect = 0gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmforge-daggpgcheck = 1[rpmforge-testing]name = RHEL $releasever - RPMforge.net - testingbaseurl = http://apt.sw.be/redhat/el6/en/$basearch/testingmirrorlist = http://mirrorlist.repoforge.org/el6/mirrors-rpmforge-testing#mirrorlist = file:///etc/yum.repos.d/mirrors-rpmforge-testingenabled = 0protect = 0gpgkey = file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmforge-daggpgcheck = 1Once you've done this, then you can update git withyum update gitI'm not sure why, but they then suggest disabling rpmforge-extras (change back to enabled = 0) and then running yum clean all.Most likely you'll need to use sudo for these commands.This is the dumbest answer to this question, but check the status of GitHub. This one got me :)I was able to get a git 1.7.1  to work after quite some time.First, I had to do disable SSL just so I could pull:git config --global http.sslverify falseThen I could clonegit clone https://github.com/USERNAME/PROJECTNAME.gitThen after adding and committing i was UNABLE to push back.So i didgit remote -vorigin  https://github.com/USERNAME/PROJECTNAME.git (fetch)origin  https://github.com/USERNAME/PROJECTNAME.git (push)to see the pull and push adresses:These must be modified with USERNAME@git remote set-url origin https://USERNAME@github.com/USERNAME/PROJECTNAME.gitIt will still prompt you for a password, which you could add with USERNAME:PASSWORD@github.....But dont do that, as you save your password in cleartext for easy theft. I had to do this combination since I could not get SSH to work due to firewall limitations.I had to specify user name to work on 1.7.1 git version:git remote set-url origin https://username@github.com/org/project.git"
"It might be the Windows Search Indexer, which tries do index files as they are created. I ran into this issue with svn checkout and had to exclude that directory from indexing before I could successfully checkout a full project.See my post https://connect.microsoft.com/VisualStudio/feedback/details/676699/cannot-open-linker-output-for-writing-or-cannot-close-fileNot git related!Sysinternals' process monitor reveals that Windows explorer interferes with newly created files, perhaps due to some plugin or what, but it happens.Disabling UAC Virtualization seems to have fixed the problem.  See http://code.google.com/p/msysgit/issues/detail?id=320You can begin with a: GIT_TRACE=1But it may not display much more than your original message regarding this file.The usual cause is some opened editor which wants to reload the files when changed, and that can conflict with git's file manipulations.That means: the usual strategy is to repeat your git command after having close as many other applications as you can.I haven't found anyone describing similar behaviorSee this thread for instance, ot this one, both on Cygwin.What version of Git are you using (Git on Cygwin, or MSysGit, in a Cygwin session or a Dos session?)"
"You must manually resolve the conflict by incorporating your partner's change into your code and committing the manually merged file.Alternatively, if your changes aren't too complex, you may revert (throw away) your changes to that file, update your code to pick up your partner's changes, and then redo your work. See:http://wiki.eclipse.org/EGit/User_Guide#Manual_conflict_resolution"
"None of above mentioned Jenkins configurations worked for me without having to create manual steps. What indeed works is plain simple:Repository URL: <repo>Branches to build: masterCheckout/merge to local branch (optional): masterUPDATE (November 2015): Please, note that this solution was given for specific version of Git plugin (1.1.26). In later versions the plugin was updated to make configuration easier.For Jenkins GIT plugin version 1.1.26 try this:Go to Job Configuration. Scroll down to Git section and click ""Advanced..."" button under ""Repositories"". Then set:Name: originRefspec: +refs/heads/branch-0.1:refs/remotes/origin/localbranchnameThen click another ""Advanced..."" button and set:Checkout/merge to local branch (optional): localbranchnameYou can name local branch as you like, but destination in Refspec must match local branch name in that optional field (in this case ""localbranchname""). This will attach HEAD to localbranchname like this:HEAD -> refs/heads/localbranchname -> 7a698457751bdc043cfda631b81e3812c5361790Maven Release should pass now in Jenkins.Btw, this works for me with Jenkins 1.492 and Jenkins GIT plugin version 1.1.26.The Checkout/merge to local branch (optional) field is gone in the current (2.2.1) version of the Git plugin.It seems to have moved to Additional Behaviours -> Check out to specific local branch:Setting that value to master got me a checked out branch instead of a detached head.in Git When you have a branch checked out, like master or dev or any other local branch your HEAD (file in .git folder) will contain a reference to the corresponding branch. Therefore it is ""attached"".When you perform some operations like rebase, merges or you checking out a particular commit. i.e. anytime you see ""no branch"" your HEAD doesn't have a reference to any local branch but points directly to the commit, i.e. it has the actual SHA-1 inside. That means it is detached - detached from any branch.There is no new reference ""no branch"" created.The command git symbolic-ref HEAD is checking if the HEAD content is a reference or a SHA-1 and prints it out.You can see that by doing:git checkout mastergit symbolic-ref HEADgit checkout HEAD~2 # going two commits backgit symbolic-ref HEADgit checkout master # coming backNow most of the time git plugin in Jenkins works with the code in detached HEAD state. I'm not sure how Maven release plugin works, but I'm 99% sure that it requires you to release from a specific branch. In order to fix that I would recommend to specify as a prebuild step or shell command something like that:git checkout master; git pull origin masterThat will solve the problem, i hope;)"
"Okay, so. We can see from the second error message that the corrupt object which you moved was a commit. (HEAD was pointing to it!) Unfortunately, this means that it's hard to manually repair it. (By ""hard"" I mean likely impossible unless you can remember exactly what the commit message was and what time you made the commit.) Fortunately, this does mean that it's easy to resurrect a new commit with the same file contents - you'll just have to write a new message for it.Before you start, have a look at the contents of .git/HEAD - if it's a branch name, remember that for later.First, we need to figure out what the parent of this commit should've been. You can use git reflog to look at the reflog of HEAD, and find the SHA1 of where HEAD was just before you made commit 016660b. It should look something like this:016660b HEAD@{n}: commit: <subject of commit>1234abc HEAD@{n-1}: ...You can copy the SHA1 of the previous position of HEAD, and check out that commit:git checkout 1234abcThen you can read in the tree that your corrupted commit had:git read-tree 2c1033501b82e301d47dbf53ba0a199003af25a8And then commit!git commitNow, there's some question here about what should've happened to your branches. If HEAD was pointing to a branch (say master) which in turn pointed to the corrupted commit, we definitely want to fix that up:git branch -d master       # remove the original master branchgit checkout -b master     # recreate it hereIf there are other branches which contained the corrupted commit, you'll have to do some restoration on them too - let me know if you need help with that.I had the same problem. However, my problem was resolved with changing permissions of the .git/objects folders and subfolders (recursively) on server. Something like:chmod -R 770 .git/objectsI think that isn't your problem, but in my case it was resolved."
"Start by following the steps suggested in Recovering broken git repository:check whether .git/refs still contains anything usefulcheck git reflog and failing that the contents of .git/logs/refs/heads/master or whatever branch you were on lastrun git fsck, potentially with --unreachable or --lost-foundThis will hopefully allow you to figure out what the master ref should be so you can restore it (i.e. cat the correct SHA1 into .git/refs/heads/master).In case any object contained in that commit is genuinely corrupted you can't restore your HEAD commit unfortunately. Assuming your working tree and/or index are intact you can try a git reset --soft (or failing that a git reset) to the previous commit and then re-do the commit. Avoid any operations that change your working tree s.a. git checkout -f or git reset --hard.I had a similar issue following a blue screen of death on windows 8.1I had a file in this location...C:\www\<project>\.git\refs\remotes\origin\<problem-branch>And it was empty whereas the other branch files in this folder has long strings inside of them.NB I didn't have any changes/commitsI backed up the <problem-branch> fileDeleted the filegit fetch --all to get the branch againThen the tab auto completion started working againIf there is not many modified files, I think the convient way to solve this problem is: backup the files you modified in the reporemove your existing repore-clone it from serverpaste the files from step 1 to the repo, and git commit -a"
"The answer should be:we can't create a file named aux.c in windows!See http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx Do not use the following reserved device names for the name of a file:CON, PRN, AUX, NUL, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9. Also avoid these names followed immediately by an extension; for example, NUL.txt is not recommended. For more information, see Namespaces.Was your directory plus your filenames too long for Windows? I came across this problem once, and it was fixed when I tried cloning into a lower directory.A common problem is two files whose names differ only by case ‰ÛÓ git assumes a case sensitive system. If the repository contains both FOO and foo, then attempting to create one after the other will fail.Maybe related to http://stackoverflow.com/questions/1209902/git-checkout-and-reset-on-windows-occasionally-shows-random-files-have-changed"
"If you remove the corrupted object manually, git will generally let you get at everything else.  I deliberately corrupted a git blob (just forced a few bad bytes in the front) and got the following:$ git fsckfatal: object bd1b260b0ef92d1a219e1183953fa1ac7cdb4cad is corrupted$ git gcCounting objects: 23, done.error: unable to unpack bd1b260b0ef92d1a219e1183953fa1ac7cdb4cad headererror: inflateEnd: failedDelta compression using up to 2 threads.Compressing objects: 100% (12/12), done.fatal: object bd1b260b0ef92d1a219e1183953fa1ac7cdb4cad is corruptederror: failed to run repack$ git fsck --fullfatal: object bd1b260b0ef92d1a219e1183953fa1ac7cdb4cad is corrupted$ rm -f .git/objects/bd/1b260b0ef92d1a219e1183953fa1ac7cdb4cad$ git fsck --fullbroken link from    tree a3070cb66fd169e1443867a8bb137a44103c9f24              to    blob bd1b260b0ef92d1a219e1183953fa1ac7cdb4cadmissing blob bd1b260b0ef92d1a219e1183953fa1ac7cdb4cad$ git cat-file -p 2418b6ba8fd0289933c9351260a272b8e410867ftree a3070cb66fd169e1443867a8bb137a44103c9f24parent 8d945134b0cead535d66af29c8eb4228b5dc3763author [redacted] 1333789753 -0600committer [redacted] 1333789753 -0600test corrupted object$ git checkout 2418b6ba8fd0289933c9351260a272b8e410867ferror: git checkout-index: unable to read sha1 file of morefile (bd1b260b0ef92d1a219e1183953fa1ac7cdb4cad)D   morefileNote: checking out '2418b6ba8fd0289933c9351260a272b8e410867f'.You are in 'detached HEAD' state. ...Note, somewhere along the way it re-pointed the branch master to a previous ""good"" commit (not the immediately-previous one, and I have no idea why) so you may then have to repair your commit history, etc.  But everything was there, except for the missing file ""morefile"" whose blob I corrupted.  (I restored it from a backup copy I made in advance and was even able to get the file back, with git checkout -- morefile.  You could mv the corrupted blob somewhere and see if you can recover some of your data from it.)I'd certainly back up the broken git repo first, Just In Case. :-)"
"cd $(brew --prefix)git reset --hard HEADbrew updateYou need to do the following:cd $(brew --prefix)rm Library/Formula/argp-standalone.rbrm Library/Formula/cocot.rbAnd then do thegit fetch origingit reset --hard origin/masterbrew updateBasically, to explain a bit more:cd $(brew --prefix)tells cd to change the directory to whatever brew --prefix will output. If you try executing brew --prefix command you should see something in lines of:brew --prefix/usr/localSo the command would be in this case an equivalent of cd /usr/local.Newer brew versions have formulae under its installation prefix and Library/Formula/, so that's where you need to look for those outdated/changed files.Note, that if you changed those formulae yourself for a particular reason (like pinning a version) this action will revert them back to default ones and may produce unwanted effects.@TedPennings noted in comments that this worked for him, but his sequence was:chown everything to my_username:admin, ie, sudo chown -R ted:admin $(brew --prefix)run the two git commands above,git fetch origin and git reset --hard origin/masterThis is caused by an old bug in the update code that has long since been fixed. However, the nature of the bug requires that you do the following:    cd $(brew --repository)git reset --hard FETCH_HEADIf brew doctor still complains about uncommitted modifications, also run this command:cd $(brew --repository)    git clean -fd$ cd $(brew --prefix)$ git clean -fd$ git reset --hard$ sudo chown -R `whoami` `brew --prefix`$ brew updateNote: steps 2&3 worked for me since I did step 5 before 4 before I got the error. The brew update before changing the owner of the folder caused the whole problem.I had a similar issue where my brew package library got downloaded as a root user and then I was not able to run brew update as git would complain about not able to merge the file.Solution was to do :-sudo chown -R <user> /usr/local/LibraryResetting the brew repository should be the most efficient way if you don't mind to discard potential modifications on formulas you might have been applied:$ cd `brew --prefix`$ git fetch origin$ git reset --hard origin/master$ brew cleanup --force$ brew updateI was able to fix this on my machine by adding admin group write (and setgid bit) permission at these paths:sudo chmod -R g+ws /usr/local /Library/Caches/HomebrewThe s sets the group id on execution so that the write permissions aren't lost the next time a different admin user updates or upgrades Homebrew.This answer is somewhat incomplete because when I try to do brew cleanup --force there is a permissions issue when Homebrew tries to remove content in /usr/local/Cellar/. (Unfortunately I'm not able to investigate this further at the moment.)Another option is to just use git stash.The brew update command performs a git pull, so if there are any changed files (or even file attributes, which happened to me when I changed permissions in the directory recursively) you have to somehow fix the conflicts. Using git stash is one way; it takes any changes and puts them aside so you effectively revert to the last updated repo version. The Homebrew 'location' is by default /usr/local and it installs as a git repository. You can look for a .git folder to see for yourself. I'm writing a homebrew uninstall script to be posted on my GitHub profile soon with more info."
"You should have created a local branch, and done the work on that, then when you get back, you update the master, rebase to the local branch, merge back to master then dcommit.So I'd try copying out the changes, to back them up.Create a local branch from the has svn sync point, merge your changes in there. Then back out the changes in the master branch, fetch, rebase to the branch, merge in from the local branch, fix any conflicts, then dcommit.$ git checkout -b backup    # create a local backup branch with all your work$ git checkout master   $ git checkout -b backup2   # 2nd copy just to be safe$ git checkout master$ git reset --hard <this is the revision of the last svn-id> # clean up master to make the svn merge easier$ git svn fetch    # this should update to the current version on the svn server$ git rebase master backup  # may get a conflict here, fix and commit... # after conflict is fixed and commited$ git checkout master $ git merge backup --ff  # merge in your local commits$ git svn dcommit        # push back to the svnYou can get additional info hereAnother answer you might be interested in.git-svn workflow articlesArticleWith much appreciation for VonC and sfassen's extraordinary patience with me, the solution sort of worked itself out. I don't know how or why, but maybe my initial rebase didn't work. To fix it I ended up rebasing again. From my local trunk branch:$ git co -b backup  # backup the commits to my local trunk$ git co trunk      # return to the local trunk$ git svn rebase    # rebase the trunk from the Svn server$ git br -d backup  # delete the backup branchThe key, of course, was that the rebase worked this time. I have no idea why it didn't work when I first did it, but I can't roll the clock back so I won't dwell on it.Thanks again for everyone's suggestions and patience with a newbie.To complete sfossen's excellent answer, here is some details:With git-svn, you get by default a local branch named master. You should not do any work on it, only keep it up-to-date with the svn trunk branch with:git svn fetch to get the history from the svn trunk branch on your local trunk branch: it will not apply those modifications on your working directory  git checkout master  to switch on trunk branch (only if you were on another branch)git rebase trunk to synchronize master with trunk.However, all your modifications should be done on another local branch (lets call it local-devel).  git branch local-devel git checkout local-develIf you have an urgent fix to do:git checkout master : swith on master(), git svn fetch && git rebase trunk to update it with svn trunkgit branch fastfix && git checkout fastfix, branch itfix the bug, compile, test, git commit -a: local commit, git svn dcommit update the modification to the distant svn repogit checkout master && git rebase trunk: update master againgit branch -D fastfix: remove hotfix branchgit checkout local-devel && git rebase master: get back to dev, with the updated history done on master replayed on your dev branchIt is a bit of an hassle at first, but way more comfortable than an svn diff in a file to be applied later.I had a similar situation. I was doing an git svn dcommit over a bad network connection and it failed at some point. I've discovered that the problem was caused by the fact that Subversion repository already had a new commit, but local git-svn counterpart considered that a commit was not in SVN yet. Solutions from other answers here did not help, however this did:git svn reset -r <last_svn_commit_git_was_aware_of>git svn fetchgit svn rebaseAfter this I was finally able to do git svn dcommit without any errors.I was going to comment, but thought this deserved more visibility...git svn rebase is supposed to re-write your commits. From the description and comments, I get the impression that after you rebased, you forced your old commits back on top. The commits have to be replaced with newer versions that don't conflict.To avoid having to dig through the reflog, you might want to get in the habit of making a quick tag before doing your git svn dcommit. After the dcommit succeeds, delete the tag. If the tag fails, you can do a git reset --hard followed by a git merge <tag>. Re-run your rebase to get your history back in order, re-tag and re-dcommit again.Several places I've read that it is bad practice when using git svn to use a separate branch. Something pertaining to git commits not showing up in svn the way you would expect.The following answer from http://progit.org/book/ch8-1.html appears to be the cleanest way:git svn rebasegit svn dcommitI also tried the most popular option above but it didn't always work for me, as the git rebase doens't roll back the to match the svn upstream but just back to last git commit."
"Rebase and merge don't mix!Never ever branch from something that might be rebased and/or never rebase anything that might be branched from!You have history like:base - b1 - b2 - b3 -   \               \   \              more_design' - m1' - m2' - m3' - m4' >?    \                                               ..    more_design - m1 - m2 - m3 - m4              ..                          \                      ..                        fixed_toolbar - f1 - f2Rebasing more_design above created completely new version of the history. Instead of m1..m4 you now have m1'..m4'. These are completely distinct revisions as far as git is concerned. So the most recent common ancestor is base! Therefore ""local"" changes is m1'+m2'+m3'+m4' and ""remote"" changes is m1+m2+f1+f2. And because m3' and m4' override changes in m1 and m2, you are getting conflict.The solution is to rebase the fixed_toolbar onto the rebased more_design branch. Either asgit checkout fixed_toolbargit rebase --onto more_design original_more_designor by using interactive merge and manually deleting the revisions m1 and m2 if git does not recognize them; it often does:git checkout fixed_toolbargit rebase -i more_designand only than merging. Or cherry-picking the changes in fixed_toolbar; Recent git should understandgit cherry-pick original_more_design..fixed_toolbar"
"Are you using any other tools while using TortoiseGit?For instance, this project mentions an interaction with Visual Studio:If you see errors about being unable to unlink old files when running git commands on Windows, it's quite likely that you have the chrome solution open in Visual Studio and it's updating IntelliSense, which will briefly lock files at random.  The workaround is either to disable IntelliSense entirely, or to be sure to close the solution temporarily while performing any git operations which could touch a large number of files. In other word, does the problem persists if you close as many currently running applications as you can?Would TortoiseGit allow you to checkout another branch then?I ran into this problem-Eclipse was locking the file even though it wasn't open in the editor. Once I closed eclipse I could checkout fine.If your problem is based on eclipse locking file,  you can start your eclipse with -Dosgi.locking=none.I ran into this problem with eclipse Luna 4.4.0The file is locked by another program and cannot be overwritten. See what application has the file locked, close that application, and try again."
"I had the same problem, simply cloned the homebrew repository in a temporary location usinggit clone https://github.com/Homebrew/homebrew.gitand moved the resulting .git directory to /usr/local, overwriting the one already there. After that, I had to checkout a few directories:cd /usr/localgit checkout Library/Formula/git checkout Library/Contributions/git checkout Library/ENV/git checkout Library/Homebrew/Indeed a correct answer but no need to go so far.As mentioned in the comments also, removing the top .git directory present in /usr/local is enough. Run your brew update after only having removed the top .git directory will rebuild the tree!Segmentation fault: 11 with your PHP installation is same issue it is still the pulled version from the Mavericks bottle so update and upgrade will correct this and also only needed for your main php55 or php56 and not for all your PHP dependencies installed using Homebrew.GL!!!"
"That usually means a process is still using that specific file (still has an handle on it)(on Windows, ProcessExplorer is good at tracking that kind of process)Try closing your other programs, and try again your git pull.Note that you have an alternative with the GIT_ASK_YESNO variable.Update January 2016That should be fixed in Git 2.8 (March 2016)See commit d562102, commit dcacb1b, commit df617b5, commit 0898c96 (13 Jan 2016) by Johannes Schindelin (dscho).(Merged by Junio C Hamano -- gitster -- in commit 3c80940, 26 Jan 2016) fetch: release pack files before garbage-collectingBefore auto-gc'ing, we need to make sure that the pack files are released in case they need to be repacked and garbage-collected.  Many codepaths that run ""gc --auto"" before exiting kept packfiles mapped and left the file descriptors to them open, which was not friendly to systems that cannot remove files that are open.  They now close the packs before doing so.That fixes git-for-widows issue 500.Looking at the test used to validate that new approach, a possible workaround (since Git 2.8 is not yet out) would be to raise artificially gc.autoPackLimit.git config gc.autoPackLimit 10000git fetchgit config gc.autoPackLimit 50 # default valueThis is a Windows specific answer, so I'm aware that it's not relevant to you... I'm just including it for the benefit of future searchers. In my case, it was because I was running Git from a non-elevated command line. ""Run as Administrator"" fixed it for me.For me, it was because Visual Studio was trying to reload all of the changed files from the pull. Have visual studio refresh, then run git gc.On Windows using GitHub for Windows, I got a similar error in the shell when running git gc:Unlink of file '.git/objects/pack/pack-0b40ae7eae9b83edac62e19c07ff7b4c175244f6.idx' failed. Should I try again? (y/n)I solved it by closing the GitHub GUI.This was caused in my case by SimpLESS, the LESS compiler. You have to close it in the systray.Closed Visual Studio and Rubymine and didn't get the error again. One of them was the culprit."
"In some previous backups, your bad objects may have been packed in different files or may be loose objects yet. So your objects may be recovered.It seems there are a few bad objects in your database. So you could do it the manual way.Because of git hash-object, git mktree and git commit-tree do not write the objects because they are found in the pack, then start doing this:mv .git/objects/pack/* <somewhere>for i in <somewhere>/*.pack; do  git unpack-objects -r < $idonerm <somewhere>/*(Your packs are moved out from the repository, and unpacked again in it; only the good objects are now in the database)You can do:git cat-file -t 6c8cae4994b5ec7891ccb1527d30634997a978eeand check the type of the object.If the type is blob: retrieve the contents of the file from previous backups (with git show or git cat-file or git unpack-file; then you may git hash-object -w to rewrite the object in your current repository.If the type is tree: you could use git ls-tree to recover the tree from previous backups; then git mktree to write it again in your current repository.If the type is commit: the same with git show, git cat-file and git commit-tree.Of course, I would backup your original working copy before starting this process.Also, take a look at How to Recover Corrupted Blob Object.Banengusk was putting me on the right track. For further reference, I want to post the steps I took to fix my repository corruption. I was lucky enough to find all needed objects either in older packs or in repository backups.# Unpack last non-corrupted pack$ mv .git/objects/pack .git/objects/pack.old$ git unpack-objects -r < .git/objects/pack.old/pack-012066c998b2d171913aeb5bf0719fd4655fa7d0.pack$ git logfatal: bad object HEAD$ cat .git/HEAD ref: refs/heads/master$ ls .git/refs/heads/$ cat .git/packed-refs # pack-refs with: peeled aa268a069add6d71e162c4e2455c1b690079c8c1 refs/heads/master$ git fsck --full error: HEAD: invalid sha1 pointer aa268a069add6d71e162c4e2455c1b690079c8c1error: refs/heads/master does not point to a valid object!missing blob 75405ef0e6f66e48c1ff836786ff110efa33a919missing blob 27c4611ffbc3c32712a395910a96052a3de67c9bdangling tree 30473f109d87f4bcde612a2b9a204c3e322cb0dc# Copy HEAD object from backup of repository$ cp repobackup/.git/objects/aa/268a069add6d71e162c4e2455c1b690079c8c1 .git/objects/aa# Now copy all missing objects from backup of repository and run ""git fsck --full"" afterwards# Repeat until git fsck --full only reports dangling objects# Now garbage collect repo$ git gcwarning: reflog of 'HEAD' references pruned commitswarning: reflog of 'refs/heads/master' references pruned commitsCounting objects: 3992, done.Delta compression using 2 threads.fatal: object bf1c4953c0ea4a045bf0975a916b53d247e7ca94 inconsistent object length (6093 vs 415232)error: failed to run repack# Check reflogs...$ git reflog# ...then clean$ git reflog expire --expire=0 --all# Now garbage collect again$ git gc       Counting objects: 3992, done.Delta compression using 2 threads.Compressing objects: 100% (3970/3970), done.Writing objects: 100% (3992/3992), done.Total 3992 (delta 2060), reused 0 (delta 0)Removing duplicate objects: 100% (256/256), done.# Done!Try the following commands at first (re-run again if needed):$ git fsck --full$ git gc$ git gc --prune=today$ git fetch --all$ git pull --rebaseAnd then you you still have the problems, try can:remove all the corrupt objects, e.g.fatal: loose object 91c5...51e5 (stored in .git/objects/06/91c5...51e5) is corrupt$ rm -v .git/objects/06/91c5...51e5remove all the empty objects, e.g.error: object file .git/objects/06/91c5...51e5 is empty$ find .git/objects/ -size 0 -exec rm -vf ""{}"" \;check a ""broken link"" message by:git ls-tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8This will tells you what file the corrupt blob came from!to recover file, you might be really lucky, and it may be the version that you already have checked out in your working tree:git hash-object -w my-magic-fileagain, and if it outputs the missing SHA1 (4b945..) you're now all done!assuming that it was some older version that was broken, the easiest way to do it is to do:git log --raw --all --full-history -- subdirectory/my-magic-fileand that will show you the whole log for that file (please realize that the tree you had may not be the top-level tree, so you need to figure out which subdirectory it was in on your own), then you can now recreate the missing object with hash-object again.to get a list of all refs with missing commits, trees or blobs:$ git for-each-ref --format='%(refname)' | while read ref; do git rev-list --objects $ref >/dev/null || echo ""in $ref""; doneIt may not be possible to remove some of those refs using the regular branch -d or tag -d commands, since they will die if git notices the corruption. So use the plumbing command git update-ref -d $ref instead. Note that in case of local branches, this command may leave stale branch configuration behind in .git/config. It can be deleted manually (look for the [branch ""$ref""] section).After all refs are clean, there may still be broken commits in the reflog. You can clear all reflogs using git reflog expire --expire=now --all. If you do not want to lose all of your reflogs, you can search the individual refs for broken reflogs:$ (echo HEAD; git for-each-ref --format='%(refname)') | while read ref; do git rev-list -g --objects $ref >/dev/null || echo ""in $ref""; done(Note the added -g option to git rev-list.) Then, use git reflog expire --expire=now $ref on each of those.When all broken refs and reflogs are gone, run git fsck --full in order to check that the repository is clean. Dangling objects are Ok.Below you can find advanced usage of commands which potentially can cause lost of your data in your git repository if not used wisely, so make a backup before you accidentally do further damages to your git. Try on your own risk if you know what you're doing.To pull the current branch on top of the upstream branch after fetching:$ git pull --rebaseYou also may try to checkout new branch and delete the old one:$ git checkout -b new_master origin/masterTo find the corrupted object in git for removal, try the following command:while [ true ]; do f=`git fsck --full 2>&1|awk '{print $3}'|sed -r 's/(^..)(.*)/objects\/\1\/\2/'`; if [ ! -f ""$f"" ]; then break; fi; echo delete $f; rm -f ""$f""; doneFor OSX, use sed -E instead of sed -r.Other idea is to unpack all objects from pack files to regenerate all objects inside .git/objects, so try to run the following commands within your repository:$ cp -fr .git/objects/pack .git/objects/pack.bak$ for i in .git/objects/pack.bak/*.pack; do git unpack-objects -r < $i; done$ rm -frv .git/objects/pack.bakIf above doesn't help, you may try to rsync or copy the git objects from another repo, e.g.$ rsync -varu git_server:/path/to/git/.git local_git_repo/$ rsync -varu /local/path/to/other-working/git/.git local_git_repo/$ cp -frv ../other_repo/.git/objects .git/objectsTo fix the broken branch when trying to checkout as follows:$ git checkout -f masterfatal: unable to read tree 5ace24d474a9535ddd5e6a6c6a1ef480aecf2625Try to remove it and checkout from upstream again:$ git branch -D master$ git checkout -b master github/masterIn case if git get you into detached state, checkout the master and merge into it the detached branch.Another idea is to rebase the existing master recursively:$ git reset HEAD --hard$ git rebase -s recursive -X theirs origin/masterSee also:Some tricks to reconstruct blob objects in order to fix a corrupted repository.How to fix a broken repository?How to remove all broken refs from a repository?How to fix corrupted git repository? (seeques)How to fix corrupted git repository? (qnundrum)Error when using SourceTree with Git: 'Summary' failed with code 128: fatal: unable to read treeRecover A Corrupt Git Bare RepositoryRecovering a damaged git repositoryHow to fix git error: object is empy / corruptHow to diagnose and fix git fatal: unable to read treeHow to deal with this git errorHow to fix corrupted git repository?GIT: How to 'overwrite', rather than 'merge', a branch on another branchHow to replace master branch in git, entirely, from another branch?Git: ""Corrupt loose object""Git reset = fatal: unable to read treeGit checkout can actually pick out individual files from a revision. Just give it the commit hash and the file name. More detailed info here.I guess the easiest way to fix this safely is to revert to the newest uncommited backup and then selectively pick out uncorrupted files from newer commits. Good luck!Here are the steps I followed to recover from a corrupt blob object.1) Identify corrupt blobgit fsck --full  error: inflate: data stream error (incorrect data check)  error: sha1 mismatch 241091723c324aed77b2d35f97a05e856b319efd  error: 241091723c324aed77b2d35f97a05e856b319efd: object corrupt or missing  ...Corrupt blob is 241091723c324aed77b2d35f97a05e856b319efd2) Move corrupt blob to a safe place (just in case)mv .git/objects/24/1091723c324aed77b2d35f97a05e856b319efd ../24/3) Get parent of corrupt blobgit fsck --full  Checking object directories: 100% (256/256), done.  Checking objects: 100% (70321/70321), done.  broken link from    tree 0716831e1a6c8d3e6b2b541d21c4748cc0ce7180              to    blob 241091723c324aed77b2d35f97a05e856b319efdParent hash is 0716831e1a6c8d3e6b2b541d21c4748cc0ce7180.4) Get file name corresponding to corrupt blobgit ls-tree 0716831e1a6c8d3e6b2b541d21c4748cc0ce7180  ...  100644 blob 241091723c324aed77b2d35f97a05e856b319efd    dump.tar.gz  ...Find this particular file in a backup or in the upstream git repository (in my case it is dump.tar.gz). Then copy it somewhere inside your local repository. 5) Add previously corrupted file in the git object databasegit hash-object -w dump.tar.gz6) Celebrate!git gc  Counting objects: 75197, done.  Compressing objects: 100% (21805/21805), done.  Writing objects: 100% (75197/75197), done.  Total 75197 (delta 52999), reused 69857 (delta 49296)"
"First, make sure the git account is in the same group than the apache account.(Or you need to go back to my previous answer that you want to avoid)You report this works: sudo GIT_WORK_TREE=..... git checkout -fBut with a bare repo, you could also see get: fatal: You are on a branch yet to be born(I wouldn't recommend trying to make your gitolite-managed bare repo a non-bare one as in this blog postgit config core.worktree /home/user/myprojectgit config core.bare falsegit config receive.denycurrentbranch ignore)I prefer making sure /var/www/www.example.com directory is a git repo, in which you can pull, instead of trying to checkout.So the hook I like is more:cd /var/www/www.example.comgit --git-dir=/var/www/www.example.com/.git --git-work-tree=/var/www/www.example.com pull(with origin, the remote name which is used by default by git pull, refering to the gitolite bare repo)"
"You need to download and install git from http://git-scm.com/downloadsThen you need to track the git.exe on AndroidStudio:Go to Settings > Project Settings > Version Control > VCSs > Git > Path to Git executableSelect (or type) executable path, eg: D:\Program Files (x86)\Git\cmd\git.exeIf you installed GitHub Desktop for WindowsIn case you have GitHub Desktop for Windows, git.exe will be found at C:\Users\YOUR_USER_NAME\AppData\Local\GitHub\PortableGit_c7e0cbde92ba565zz218z5214zzz0e854zzza28\cmd.If you Installed git from http://git-scm.com/downloads and also sett the correct path and still get an error maybe you sit behind a Proxy, in this case you have to add the Proxy to the git. This is Possible in the gitconfig. Wich should be avaiable in :\Program Files (x86)\Git\etc  if you used the standard path for installation.Just to add to Sree's answer, I was getting this error even after installing Git, but the problem is that I didn't install it to the default installation folder.After choosing the right path and folder in the VCS settings tab, it worked beautifully."
"I ran into this problem when I had identically-named subdirectories within branches or tags.For example, I had tags candidates/1.0.0 and releases/1.0.0, and this caused the documented error because subdirectory 1.0.0 appears within both candidates and releases.Per git-svn docs:When using multiple --branches or --tags, git svn does not automatically handle name collisions (for example, if two branches from different paths have the same name, or if a branch and a tag have the same name). In these cases, use init to set up your Git repository then, before your first fetch, edit the $GIT_DIR/config file so that the branches and tags are associated with different name spaces.So while the following command failed due to similarly named candidates and releases tags:git svn clone --authors-file=../authors.txt --no-metadata \    --trunk=/trunk --branches=/branches --tags=/candidates \    --tags=/releases --tags=/tags -r 100:HEAD \    --prefix=origin/ \    svn://example.com:3692/my-repos/path/to/project/the following sequence of commands did work:git svn init --no-metadata \    --trunk=/trunk --branches=/branches --tags=/tags \    --prefix=origin/ \    'svn://example.com:3692/my-repos/path/to/project/'git config --add svn-remote.svn.tags \    'path/to/project/candidates/*:refs/remotes/origin/tags/Candidates/*'git config --add svn-remote.svn.tags \    'path/to/project/releases/*:refs/remotes/origin/tags/Releases/*'git svn fetch --authors-file=../authors.txt -r100:HEADNote that this only worked because there were no other conflicts within branches and tags.  If there were, I would have had to resolve them similarly.After successfully cloning the SVN repository, I then executed the following steps in order to: turn SVN tags into GIT tags; turn trunk into master; turn other references into branches; and relocate remote paths:# Make tags into true tagscp -Rf .git/refs/remotes/origin/tags/* .git/refs/tags/rm -Rf .git/refs/remotes/origin/tags# Make other references into branchescp -Rf .git/refs/remotes/origin/* .git/refs/heads/rm -Rf .git/refs/remotes/origincp -Rf .git/refs/remotes/* .git/refs/heads/ # May be missing; that's okayrm -Rf .git/refs/remotes# Change 'trunk' to 'master'git checkout trunkgit branch -d mastergit branch -m trunk masterNot a full answer, but perhaps the snippet you are missing (I am interested in migrating as well, so I have found that part of the puzzle).When you look at the documentation of git-svn, you will find the following option:--no-minimize-url When tracking multiple directories (using --stdlayout, --branches, or --tags options), git svn will attempt to connect to the root (or highest allowed level) of the Subversion repository. This default allows better tracking of history if entire projects are moved within a repository, but may cause issues on repositories where read access restrictions are in place. Passing --no-minimize-url will allow git svn to accept URLs as-is without attempting to connect to a higher level directory. This option is off by default when only one URL/branch is tracked (it would do little good).This fits to the situation you have, so that git svn does not try to read a higher level of the directory tree (which will be blocked).At least you could give it a try ...I recently migrated a long list of SVN repositories into Git and towards the end ran into this problem. Our SVN structure was pretty sloppy, so I had to use --no-minimize-url quite a bit. Typically, I'd run a command like:$ git svn clone http://[url]/svn/[repo]/[path-to-code] \            -s --no-minimize-url \            -A authors.txtThe last few migrations I ran had a space in the URL. I don't know if it was the space or something else, but I was getting the same error you were seeing. I didn't want to get into modifying config files if I didn't have to, and luckily I ended up finding a solution. I ended up skipping the -s --no-minimize-url options in favor of explicitly declaring the paths differently.$ git svn clone http://[url]/svn/[repo]/ \            --trunk=""/[path-to-code]/trunk"" \            --branches=""/[path-to-code]/branches"" \            --tags=""/[path-to-code]/tags"" \            -A authors.txt \            --follow-parentNote that I added --follow-parent from your example, but I'm also not sure that it made any difference.Remember that these repos had spaces in them, hence the """" around the trunk/branches/tags paths.[I realize this should be a comment on Jeff Fairley's answer but I don't have the reputation to post it as such.  Since the original poster did ask for confirmation the approach worked I'm providing it as an answer.]I can confirm that his solution works for the problem he (and I) ran into caused by spaces in the path.  I had the same requirements (clone a single module from an SVN repo with history) except that I had no branches or tags to worry about whatsoever.I tried several permutations of providing the full path to the module in the URL (e.g. using --no-minimise-url, specifying --trunk or --stdlayout) with no success.  For me the result was usually a git repo with a full history log but no files whatsoever.  This may or may not be the same problem FooF encountered (no read access in SVN) but it was certainly caused by having a space in the path to my module.Trying again with only the SVN repo base as the URL and the path to my module in --trunk worked flawlessly.  Afterwards my .git/config looks like this:[core]        repositoryformatversion = 0        filemode = false        bare = false        loggallrefupdates = true        symlinks = false        ignorecase = true        hideDotFiles = dotGitOnly[svn-remote ""svn""]        url = https://[url]/svn/[repo]        fetch = trunk/[path-to-code]:refs/remotes/trunk[svn]        authorsfile = ~/working/authors-transform.txtand subsequent git and git svn commands are throwing no errors at all.  Thanks Jeff![This is the original poster speaking writing. The below used to be update to the question, but as it solved the case - albeit unsatisfactorily to my taste - I will post it as an answer lacking a better solution.]I do not like this, but I ended up doing clone  splitted into init and fetch with some editing of .git/config between (repopath=apps/module, gitreponame=module):$ git svn init--username=mysvnusername \            --branches=/src/branches/ \            --trunk=/src/trunk/${repopath} \            --tags=/src/tags/ \            http://svnserver/svn/src ${gitreponame}$ cd ${gitreponame}$ sed -i.bak ""s|*:|*/${repopath}:|"" .git/config$ git svn fetch --authors-file=../authors.txt --follow-parentI could not find how to specify the branches for subdirectory migration with git svn - hence the editing of the .git/config file. The following unified diff illustrates the effect of the editing with sed: [svn-remote ""svn""]        url = http://svnserver/svn/src        fetch = trunk/apps/module:refs/remotes/trunk-       branches = branches/*:refs/remotes/*-       tags = tags/*:refs/remotes/tags/*+       branches = branches/*/apps/module:refs/remotes/*+       tags = tags/*/apps/module:refs/remotes/tags/*As the actual desired HEAD was in an another URL, I ended just adding another [svn-remote] section to .git/config:+ [svn-remote ""svn-newest""]+       url = http://svnserver/svn/src+       fetch = branches/x/y/apps/module:refs/remotes/trunk+       branches = branches/*/apps/module:refs/remotes/*+       tags = tags/*/apps/module:refs/remotes/tags/*(in real life experiment I also added here some branches that were not picked up by the first fetch), and fetching again:$ git svn fetch --authors-file=../authors.txt --follow-parent svn-newestThis way I ended having the full Subversion history migrated to the newly generated git repository.Note-1 : I probably could have just told my ""trunk"" to be branches/x/y/apps/module as the meaning of ""trunk"" for git-svn seems to basically have the meaning of git HEAD (Subversion concepts of trunk, branches, tags have no deep technical basis, they are matter of socially agreed convention).Note-2 : probably --follow-parent is not required for git svn fetch, but I have no way of knowing or experimenting now.Note-3 : While earlier reading of svn2git which seems to be a wrapper over git-svn I failed to see the motivation, but seeing the messy presentation of tags I kind of get it now. I would try svn2git next time if I had to try doing this again.P.S. This is rather awkward way of doing the operation. Secondary problem here (why the editing of the .git/config by external was required) seems to be thatSubversion branches do not have any essential technical meaning (branches and tags in Subversion are just a socially agreed labels for a versioned file system copy together with ""standard"" or otherwise socially agreed convention where the copies are done - trunk also has no technical meaning), and git svn implementation strictly assumes the social Subversion conventions to be followed to a degree (which is not possible if you just want to migrate a subdirectory and not the whole Subversion repository).TODO: It would be helpful to have the format of the .git/config file explained here as it relates to git svn - for example I have now (after one and half year of writing the original answer) no idea what the [svn-remote ""svn-newest""] means above. Also the approach could be automated by writing a script, but this is beyond my current interest in the problem and I do not have access to the original Subversion repository or replication of the issue."
"Detached head means you are no longer on a branch, you have checked out a single commit in the history (in this case the commit previous to HEAD, i.e. HEAD^).You only need to checkout the branch you were on, e.g. git checkout masterNext time you have changed a file and want to restore it to the state it is in the index, don't delete the file first, just dogit checkout -- path/to/fooThis will restore the file foo to the state it is in the index.If you have changed files you don't want to lose, you can push them. I have committed them in the detached mode and after that you can move to a temporary branch to integrate later in master.git commit -m "".....""git branch my-temporary-workgit checkout mastergit merge my-temporary-workExtracted from: What to do with commit made in a detached headWhen you check out a specific commit in git, you end up in a detached head state...that is, your working copy no longer reflects the state of a named reference (like ""master"").  This is useful for examining the past state of the repository, but not what you want if you're actually trying to revert changes.If you have made changes to a particular file and you simply want to discard them, you can use the checkout command like this:git checkout myfileThis will discard any uncommitted changes and revert the file to whatever state it has in the head of your current branch.  If you want to discard changes that you have already committed, you may want to use the reset command.  For example, this will reset the repository to the state of the previous commit, discarding any subsequent changes:git reset --hard HEAD^However, if you are sharing the repository with other people, a git reset can be disruptive (because it erases a portion of the repository history).  If you have already shared changes with other people, you generally want to look at git revert instead, which generates an ""anticommit"" -- that is, it creates a new commit that ""undoes"" the changes in question.The Git Book has more details.How to exit (‰ÛÏfix‰Ûù) detached HEAD state when you already changed something in this mode and want to save your changes. (That part is optional though.)Commit changes you want to keep. If you want to take over any of the changes you made in detached HEAD state, commit them. Like:git commit -a -m ""your commit message""Discard changes you do not want to keep. The hard reset will discard any uncommitted changes that you made in detached HEAD state:git reset --hard(Without this, step 3 would fail, complaining about modified uncommitted files in the detached HEAD.)Check out your branch. Exit detached HEAD state by checking out the branch you worked on before, for example:git checkout masterTake over your commits. You can now take over the commits you made in detached HEAD state by cherry-picking, as shown in my answer to another question.git refloggit cherry-pick <hash1> <hash2> <hash3> ‰Û_Here's what I just did after I realized I was on a detached head and had already made some changes.I committed the changes.$ git commit -m ""...""[detached HEAD 1fe56ad] ...I remembered the hash (1fe56ad) of the commit. Then I checked out the branch I should have been on.$ git checkout masterSwitched to branch 'master'Finally I applied the changes of the commit to the branch.$ git cherry-pick 1fe56ad[master 0b05f1e] ...I think this is a bit easier than creating a temporary branch.If you have made some changes and then realized that you are on a detached head, there is a simple solution for that: stash -> checkout master -> stash pop:git stashgit checkout master   # Fix the detached head stategit stash pop         # ... or for extra safety use 'stash apply' then later                       # after fixing everything do 'stash drop'You will have your uncommited changes and normal ""attached"" HEAD, like nothing happened."
"I had this same issue, and the fetch/rebase answer didn't work for me. Here's how I solved it:I deleted the file that was causing the issue, checked it out, and then pulled successfully.rm file/name/path/some/more/filenamepathgit checkout file/name/path/some/more/filenamepathgit pullYou should:fetch (updating all remote tracking branches, like origin/master)rebase your current branch on top of origin/master in order to replay your 2 commits on top of the 7 updated commits that you just fetched.That would be:git checkout mastergit fetchgit rebase origin/masterA shorter version of the above set of commands would be the following single command:git pull --rebase"
"Did you init a local Git repository, into which this remote is supposed to be added?Does your local directory have a .git folder?Try git init.You'll get this error if you try to use a Git command when your current working directory is not within a Git repository. That is because, by default, Git will look for a .git repository directory (inside of the project root?), as pointed out by my answer to ""Git won't show log unless I am in the project directory"":According to the official Linux Kernel Git documentation,  GIT_DIR is [an environment variable] set to look for a .git directory (in the current  working directory?) by default:If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the base of the    repository.You'll either need to cd into the repository/working copy, or you didn't initialize or clone a repository in the first place, in which case you need to initialize a repo in the directory where you want to place the repo:git initor clone a repositorygit clone <remote-url>cd <repository>In command line/CLI, you will get this error if your current directory is NOT the repository. So, you have to first CD into the repo.NOTE: this does not answer to the common problem, which was OP‰Ûªs problem, but to different problem where this error message may come up. I didn‰Ûªt feel like doing new question just to write this answer down, tell me if I should do that instead :PI got to situation, most likely due to some corruption of certain crash I had, that I got this error even when .git did exist.smar@aaeru ~/P/Nominatim> git statusfatal: Not a git repository (or any of the parent directories): .gitsmar@aaeru ~/P/Nominatim [128]> ls .gitCOMMIT_EDITMSG  config*  FETCH_HEAD  HEAD  index  logs/  modules/  objects/  ORIG_HEAD packed-refsSince I didn‰Ûªt have anything that really needed preserving, I just went with dummy way, and did...smar@aaeru ~/P/Nominatim [128]> git initReinitialized existing Git repository in /home/smar/Projektit/Nominatim/.git/Still not working though, as for example git log returns fatal: bad default revision 'HEAD'. Remotes were there though, so I did git fetch --all and then just git reset --hard origin/master to get myself to the state the repo was previously.Note that if there is some uncommitted changes, you can see them with git status, git diff and so on. Then just git diff yourfile > patch before running the reset.At least for me reflog (git reflog) disappeared completely. Hence, if you do the reset, and there was some changes you wanted to prevent, I‰Ûªm not sure you can get them back after reset anymore. So, make sure that you have all changes you can‰Ûªt lose backed up, ultimately by just copying the clone before trying this.This issue occurred to me after I moved the location of a git project on the filesystem. When I ran some git commands the error occurred, e.g.:$ git statusfatal: Not a git repository: /home/rospasta/path_old/gitprojecta/.git/modules/.travisI found in /home/rospasta/path_old/gitprojecta/.travis/.git the absolute path of the old location of the project was written. Manually updating this path of the new location resolved the problem for me.So my issue may or may not be a git problem, but HTH."
"Add .idea directory to the list of ignored filesFirst, add it to .gitignore, so it is not accidentally committed by you (or someone else) again:.ideaRemove it from repositorySecond, remove the directory only from the repository, but do not delete it locally. To achieve that, do what is listed here:Git: Remove a file from the repository without deleting it from the local filesystemSend the change to othersThird, commit the .gitignore file and the removal of .idea from the repository. After that push it to the remote(s).SummaryThe full process would look like this:$ echo '.idea' >> .gitignore$ git rm -r --cached .idea$ git add .gitignore$ git commit -m '(some message stating you added .idea to ignored entries)'$ git push(optionally you can replace last line with git push some_remote, where some_remote is the name of the remote you want to push to)You can remove it from the repo and commit the change.git rm .idea/ -r --cachedgit add -u .idea/git commit -m ""Removed the .idea folder""After that, you can push it to the remote and every checkout/clone after that will be ok.You can rewrite git history:$ git reset --soft HEADNow you have your local repo like before the commit. You can $ git reset --soft HEAD~Nwhere N is the number of commit you want to ""reset""."
"Answering my own question due to the weirdness of the solution. The first step is as @Don Branson, @VonC and @robinst suggested. I did a clean clone into a new folder on my Windows machine.This did not seem to work, and git returned the exact same error.  However git status showed the offending folder as ""deleted"", even though a folder with the same name did exist and contained the proper files.I then staged and committed the ""deleted"" folder, pushed to the remote repo. and pulled the commit from my original repo. Lo-and-behold the branch was updated properly.When you git pull git will apply the commits in order.  So, even though the directories are consolidated by the final commit, they won't be in the commits it's applying to reach the HEAD.  I'd try a new git clone on the Windows machine.The problem could be that Git first tries to create the new files (under the new name name) before the old directory Name has been deleted. So when it tries to create the new directory name it doesn't notice that Name already exists, because it compares them case-sensitive.You could try the following (with a clean working directory of course):Recursively delete my/folder/Name (the old location).Do git reset --hard origin/branchname (the branch you are pulling).Alternatively, just do a fresh clone."
"find a *.pack.temp in .git/objects/pack in your local repository. Then find an .idx file with same basename, and move both of them away (or remove them, but it is better to be safe than sorry). Rerun git fetch and it should work (well, it did for me). For example:% git fetcherror: Unable to find a4fb0b54b2609df8a1ee4b97c268d205fc5bf9f1 under https://www.example.com/~someuser/something.gitCannot obtain needed object a4fb0b54b2609df8a1ee4b97c268d205fc5bf9f1error: fetch failed.% ls -l .git/objects/packtotal 65872-rw-r--r-- 1 someuser someuser    64072 Feb 12  2014 pack-2e31e66e67d8596f1193bbbc06c87293900c6e45.idx-rw-r--r-- 1 someuser someuser    16920 Jul 21  2013 pack-3d76e0bf6c67d71913efc0711d56f04c7f79b95d.idx-rw-r--r-- 1 someuser someuser    62224 Feb 11  2014 pack-74107fa80989df6619479874d94b5f8ed010fd2f.idx-rw-r--r-- 1 someuser someuser    96552 Oct 30 22:55 pack-bb75633331ea0e74d4d3cb29f7660e1ba00fb899.idx-rw-r--r-- 1 someuser someuser    73228 Mar  6  2014 pack-de0c1bcf3550cd7a2fd0c5a981bc17d15f1144c0.idx-r--r--r-- 1 someuser someuser   129144 Feb  2 18:57 pack-ffb25d036dea040923468e2de07023f9b497aeb7.idx-r--r--r-- 1 someuser someuser 46413554 Feb  2 18:57 pack-ffb25d036dea040923468e2de07023f9b497aeb7.pack-r--r--r-- 1 someuser someuser   129312 Feb  2 19:10 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.idx-rw-r--r-- 1 someuser someuser 20450545 Feb  2 19:09 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.pack-rw-r--r-- 1 someuser someuser   129312 Feb  2 18:36 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.idx-rw-r--r-- 1 someuser someuser  9863168 Feb  2 18:37 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.pack.temp% mv .git/objects/pack/pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.idx /tmp/% mv .git/objects/pack/pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.pack.temp /tmp/% git fetchFrom https://www.example.com/~someuser/something   3288ab9..a4fb0b5  master     -> origin/masterTry these commands:git fsckgit gcman git-fscksays to use rsync :Any corrupt objects you will have to find in backups or other archives  (i.e., you can just remove them and         do an rsync with some other site in the hopes that somebody else has the object you have corrupted).rsync -av user@host:repo/.git ./.gitworked for me"
"The error message would be (Git Faq):fatal: Entry 'frotz' not uptodate. Cannot merge.It means that you have local modifications to 'frotz', which would be lost on checkout. You can give '-m' option to git checkout, which would try three-way merge.Sometimes the solution is to commit. also illustrated in git checkout.-m--mergeWhen switching branches, if you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in contextSo the merge process would be:git checkout -m mytopicAuto-merging frotzAfter this three-way merge, the local modifications are not registered in your index file, so git diff would show you what changes you made since the tip of the new branch.When a merge conflict happens during switching branches with the -m option, you would see something like this:$ git checkout -m mytopicAuto-merging frotzERROR: Merge conflict in frotzfatal: merge program failedAt this point, git diff shows the changes cleanly merged as in the previous example, as well as the changes in the conflicted files.  Edit and resolve the conflict and mark it resolved with git add as usual:$ edit frotz$ git add frotzTo merge files in git:Analyse the output of the merge attempt: you should see a line telling you there was a CONFLICT when merging file x and that you should fix this conflict before continuing with the merge.Locate and open the relevant file in a text editor (assuming it is not a binary file, that's another story).Look for conflict markers in the file (search for <<<).For each conflicting section, delete the code that no-longer makes sense, or manually edit things until you have a file that does make sense.Back on the command line: git add filewithconfictFinish the merge with a commit: git commit -m ""Merged master branch""Here's an example merge session:Last login: Mon Nov 30 17:51:55 on ttys002KidA% cd Desktop KidA% mkdir merge.gitKidA% cd merge.git KidA% git initInitialized empty Git repository in /Users/jkp/Desktop/merge.git/.git/KidA% echo ""foo"" > test.fileKidA% git add *KidA% git commit -m ""Initial commit""[master (root-commit) 55f61fc] Initial commit 1 files changed, 1 insertions(+), 0 deletions(-) create mode 100644 test.fileKidA% git branch* masterKidA% git checkout -b topicSwitched to a new branch 'topic'KidA% echo ""bar"" > test.file  KidA% git commit -a -m ""Topic commit""[topic 6c524f3] Topic commit 1 files changed, 1 insertions(+), 1 deletions(-)KidA% git checkout masterSwitched to branch 'master'KidA% echo ""foobar"" > test.file      KidA% git commit -a -m ""Conflicting commit""  [master a660160] Conflicting commit 1 files changed, 1 insertions(+), 1 deletions(-)KidA% git checkout topicSwitched to branch 'topic'KidA% git merge masterAuto-merging test.fileCONFLICT (content): Merge conflict in test.fileAutomatic merge failed; fix conflicts and then commit the result.KidA% vim test.filetest.file before resolve:<<<<<<< HEADbar=======foobar>>>>>>> mastertest.file after resolve:foobarKidA% git add test.file  KidA% git commit -m ""Merged master branch""[topic 44c0cb6] Merged master branch"
"I think the problem is caused by your cydrive path is wrong.Try to change in c:\cygwin\etc\fstabnone /cydrive cygdrive binary,posix=0,user 0 0tonone / cygdrive binary,posix=0,user 0 0refs: https://cygwin.com/cygwin-ug-net/using.html#cygdriveUPDATE:From CMD Type 'bash' and then copy/paste the contents of the scriptIf you get the same result try:Open .gitconfig (with Notepad++ or similar) and add this section if it is not yet existing[alias]add-symlink = ""!__git_add_symlink(){\n    dst=$(echo \""$2\"")/../$(echo \""$1\""); \n    if [ -e \""$dst\"" ]; then \n        hash=$(echo -n \""$1\"" | git hash-object -w --stdin); \n        git update-index --add --cacheinfo 120000 \""$hash\"" \""$2\""; \n        git checkout -- \""$2\""; \n    else \n        echo \""ERROR: Target $dst does not exist!\""; \n        echo \""       Not creating invalid symlink.\""; \n    fi; \n    }; __git_add_symlink \""$1\"" \""$2\""""rm-symlink = ""!__git_rm_symlink(){\n    git checkout -- \""$1\""; link=$(echo \""$1\""); \n    POS=$'/'; DOS=$'\\\\\\\\'; \n    doslink=${link//$POS/$DOS}; \n    dest=$(dirname \""$link\"")/$(cat \""$link\""); \n    dosdest=${dest//$POS/$DOS}; \n    if [ -f \""$dest\"" ]; then \n        rm -f \""$link\""; \n        cmd //C mklink //H \""$doslink\"" \""$dosdest\""; \n    elif [ -d \""$dest\"" ]; then \n        rm -f \""$link\""; \n        cmd //C mklink //J \""$doslink\"" \""$dosdest\""; \n    else \n        echo \""ERROR: Something went wrong when processing $1 . . .\""; \n        echo \""       $dest may not actually exist as a valid target.\""; \n    fi; \n    }; __git_rm_symlink \""$1\""""rm-symlinks = ""!__git_rm_symlinks(){\n    for symlink in `git ls-files -s | grep -E \""^120000\"" | cut -f2`; \n    do \n        git rm-symlink \""$symlink\""; \n        git update-index --assume-unchanged \""$symlink\""; \n    done; \n    }; __git_rm_symlinks""checkout-symlinks = ""!__git_checkout_symlinks(){\n    POS=$'/'; DOS=$'\\\\\\\\'; \n    for symlink in `git ls-files -s | grep -E \""^120000\"" | cut -f2`; \n    do \n        git update-index --no-assume-unchanged \""$symlink\""; \n        if [ -d \""$symlink\"" ]; then \n            dossymlink=${symlink//$POS/$DOS}; \n            cmd //C rmdir //S //Q \""$dossymlink\""; \n        fi; \n        git  checkout -- \""$symlink\""; \n        echo \""Restored git symlink $symlink <<===>> `cat $symlink`\""; \n    done; \n    }; __git_checkout_symlinks""This will create some git commands for symlinksNote: File uses Unix line endings, don't edit with windows Notepad!Then execute the commandsgit rm --cached -r .git reset --hardgit rm-symlinksI tested it in my env and it works"
"As the message says:no changes added to commit (use ""git add"" and/or ""git commit -a"")Git has a ""staging area"" where files need to be added before being committed, you can read an explanation of it here.For your specific example, you can use:git commit -am ""save arezzo files""(note the extra a in the flags, can also be written as git commit -a -m ""message"" - both do the same thing)Alternatively, if you want to be more selective about what you add to the commit, you use the git add command to add the appropriate files to the staging area, and git status to preview what is about to be added (remembering to pay attention to the wording used).You can also find general documentation and tutorials for how to use git on the git documentation page which will give more detail about the concept of staging/adding files.One other thing worth knowing about is interactive adding - this allows you to add parts of a file to the staging area, so if you've made three distinct code changes (for related but different functionality), you can use interactive mode to split the changes and add/commit each part in turn. Having smaller specific commits like this can be helpful.You didn't add the changes. Either specifically add them viagit add filename1 filename2or add all changes (from root path of the project)git add .or use the shorthand -a while commiting:git commit -a -m ""message"".you should dogit commit . -m ""save arezzo files""You could have done a:git add -u -nTo check which files you modified and are going to be added (dry run: -n option), and thengit add -uTo add just modified filesI copied a small sub project I had that was under git source into another project and forgot to delete the .git folder. When I went to commit got the same message as above and couldn't clear it until I deleted the .git folder. Bit silly, but worth checking you don't have a .git folder under the folder that doesn't commit.Maybe an obvious thing but... If you have problem with the index, use thegit guiYou get a very good view how the index (staging area) actually works.Another source of info that helped me understand the index was Scott Chacons ""Getting Git"" page 259 and forward.I started off using the command line because most documentation only shown that...I think the git gui and gitk actually make me work faster and I got rid of bad habits like ""git pull"" for example... Now I always fetch first... see what the new changes really are before I merge.I find this problem appearing when I've done a git add . in a subdirectory below where my .gitignore file lives (the home directory of my repository, so to speak).  Try changing directories to your uppermost directory and running git add . followed by git commit -m ""my commit message""."
"This is a bug in the Jenkins Git Plugin.You can workaround the credential issue by creating credentials using the credential plugin and then use these credentials in the SCM/Git section of your Job. However, this will expose your user/password in plaintext in the build log if the checkout fails.Also, this will not work if you are using a HTTP proxy with git. The best way (for now) is to use JGit (to be configured in the Jenkins configuration). However, JGit is experimental and very limited as well when it comes to proxies.(answer posted due to popular request ;) )In case you're using a self-signed certificate for your Git repository and Git works from command line but not from Jenkins Git Client plugin, you need to add the certificate to the Jenkins Java Keystore (as described by tijs in the comment above).This is because Git Client plugin tries to connect directly using Java's Apache HttpClient (bypassing git.exe), so all Git settings normally used to create the connection are ignored (including GIT_SSL_NO_VERIFY and certificates in curl-ca-bundle.crt). The HttpClient throwsSunCertPathBuilderException: unable to find valid certification path to requested target which is unfortunately wrapped in a GitException without stack trace, so all we can see is 'Failed to connect' message.In order to fix it you can follow the link provided by tijs:http://www.mkyong.com/webservices/jax-ws/suncertpathbuilderexception-unable-to-find-valid-certification-path-to-requested-target/You would need to copy the resulting jssecacerts file to C:\Program Files (x86)\Jenkins\jre\lib\security if you're using default Jenkins installation.You can find a link to InstallCert.java in the original Andreas Sterbenz post (thanks to web.archive.org), or a slightly modified version at code.google.I checked the above approach works for Git Client plugin version 1.4.6.Main page of git plugin has this to say:If you are seeing output indicating Git could not clone, something  like the output below, go to to the Jenkins configuration settings  (not the project settings, the global ones) and change the Git path to  a fully qualified path (eg. not ""git"" but ""/usr/bin/git"" or wherever  your Git binary is installed). You should also verify that the  permissions are correct if you are doing a file system based clone.Started by user anonymousCheckout:workspace / C:\Documents and Settings\Administrator\.hudson\jobs\watir\workspace - hudson.remoting.LocalChannel@1a1f370Last Build : #4Checkout:workspace / C:\Documents and Settings\Administrator\.hudson\jobs\watir\workspace - hudson.remoting.LocalChannel@1a1f370Cloning the remote Git repositoryCloning repository origin$ git clone -o origin git://github.com/bret/watir.git ""C:\Documents and Settings\Administrator\.hudson\jobs\watir\workspace""Trying next repositoryERROR: Could not clone from a repositoryFATAL: Could not clonehudson.plugins.git.GitException: Could not clone    at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:400)    at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:358)    at hudson.FilePath.act(FilePath.java:676)    at hudson.FilePath.act(FilePath.java:660)    at hudson.plugins.git.GitSCM.checkout(GitSCM.java:358)    at hudson.model.AbstractProject.checkout(AbstractProject.java:833)    at hudson.model.AbstractBuild$AbstractRunner.checkout(AbstractBuild.java:314)    at hudson.model.AbstractBuild$AbstractRunner.run(AbstractBuild.java:266)    at hudson.model.Run.run(Run.java:948)    at hudson.model.Build.run(Build.java:112)    at hudson.model.ResourceController.execute(ResourceController.java:93)    at hudson.model.Executor.run(Executor.java:118)This might be an issue for you too.The same page also suggests testing with JGit if there's an issue with default plugin behaviour(-Dorg.jenkinsci.plugins.gitclient.Git.useCLI=false)."
"As I mention in the comment, cloning the repo in a different location is the simplest way to ""reset"", and see if the issue persists.Apparently, setting up custom icon on some folders on the repo has the side effect of preventing checkout between branches, because Windows would keep handle opened on some of the directories that need to be deleted."
"I just ran into the same situation, it turned out that my filesystem was full.Do you have write access to .git (=can you create new files there and edit existing ones)? If not then adjust the file permissions.If you have write permissions it seems you found a bug. You can try to recover bycreate a clone from your current working copyremove all files from the working copy of the clonecopy all wc files from your current working copy to the clone (and don't copy .git)try to commit something in the clone.When the last step works you need setup the remote branches from your current repo to the clone, and then you can use the cloned repo as your new working copy.I was using Parallels running Ubuntu on my Mac. I could git init, but not git add. I believe the issue is that git add requires an atomic synch to the underlying git database. And since the filesystem I was using was actually on my Mac and Parallels was exporting from my Mac via a network share. I believe this means that git couldn't do what it wanted. Moving the files locally fixed the problem (In my case this was easy since I was using DropBox on my Mac, so I just installed DropBox on my Ubuntu running Parallels)I've had a simular problem with SFTP Network Drive (free). The solution is: fill chekcbox ""Delete existing target before moving"" found in the Profile Settings of SFTP Network Drive.I was able to fix this by going into the .git folder in the git initiated app and deleting the index.lock/index file.  I had to reindex the entire app, but it resolved the problem.If you are using sshfs, add the option -o workaround=rename, as described here: http://alan.lamielle.net/2009/07/08/git-over-sshfsI'd like to point out one more cause of this errorIf you are cloning a git repository that contains another git repository in it (not submodule), you will get this behaviour.Hope it'll help somebody.I had same problem. I still dunno the cause, but my workaround is delete index.lock sudo rm -f index.lock, and then i gave write permission to index sudo chmod 777 index. After this I am able to stage and commit. The problem is I have to do this almost all the times I have something to stage."
"You repository is bare, i.e. it does not have a working tree attached to it. You can clone it locally to create a working tree for it, or you could use one of several other options to tell Git where the working tree is, e.g. the --work-tree option for single commands, the GIT_WORK_TREE environment variable, or the core.worktree configuration option."
"Update: You can use git apply -v to see more detailed info about what's going on, git apply --check to just verify the operation, or git apply --index to rebuild the local index file.Based on your comment, it seems your local index was corrupted, and so index solved it.I will leave my original answer and the comments mostly to give people context on what was going on, as I suspect other people would jump to the same initial conclusions I had based on the problem description.------Most likely nothing's wrong with the diff. Instead look at the target git repository. While you are doing git reset --hard HEAD, nothing guarantees you that the HEAD on that other repository is the same as the HEAD on your.Do git log on the target repo and look at the commit at the top. Is it the same as the one you produced the diff from? Most likely it is not. Look down the history and check if the commit you need is there. If it is, then the target repo is ahead of yours, and you have to go back, do git pull (or git rebase) and produce a new diff. If it isn't, then the target repo is behind yours, and you need to do git pull (or git rebase) on the target repo to bring it up to speed.Keep in mind that if you have other people committing to your ""master"" repo (the one where bot yours and the target repositories are pulling from), you might have to git pull both repositories, to get them to a reasonably recent common commit."
"git checkout master   will do that if you haven't committed any files to it.    $ mkdir project ; cd $_ ; git init .     Initialized empty Git repository in /Users/doon/Desktop/project/.git/   $ git checkout master                                                                                  error: pathspec 'master' did not match any file(s) known to git.if you've changed to another branch git checkout -b branchname  you can switch back to master the same way  git checkout -b master.  once you stage and commit files you will no longer get that error (Assuming you stage/commit to the master branch."
"When you ask to push tags, git push --tags sends (along with any commits and other objects needed and any other ref updates from the push settings) to the remote an update request of the form new-sha1 refs/tags/name.  (Well, it sends however many: one of those for each tag.)The update request is modified by the remote to add an old-sha1 (or again, one for each tag), then delivered to the pre-receive and/or update hooks (whichever hooks exist on the remote).  Those hooks can decide whether to allow or reject the tag create/delete/update.The old-sha1 value is the all-zeros ""null"" SHA-1 if the tag is being created.  The new-sha1 is the null SHA-1 if the tag is being deleted.  Otherwise both SHA-1 values are real, valid values.Even with no hooks, there's a sort of ""built-in hook"" that is also run: the remote will refuse to move a tag unless you use the ""force"" flag (though the ""built-in hook"" is always OK with both ""add"" and ""delete"").  The rejection message you're seeing is coming from this built-in hook.  (Incidentally, this same built-in hook also rejects branch updates that are not fast-forwards.)1But‰ÛÓhere's one of the keys to understanding what's going on‰ÛÓthe git push step has no idea whether the remote has that tag now, and if so, what SHA-1 value it has.  It only says ""here's my complete list of tags, along with their SHA-1 values"".  The remote compares the values and if there are additions and/or changes, runs the hooks on those.  (For tags that are the same, it does nothing at all.  For tags you don't have that they do, it also does nothing!)If you delete the tag locally, then push, your push simply does not transfer the tag.  The remote assumes no change should be made.If you delete the tag locally, then create it pointing to a new place, then push, your push transfers the tag, and the remote sees this as a tag-change and rejects the change, unless it's a force-push.Thus, you have two options:do a force-push, ordelete the tag on the remote.The latter is possible via git push2 even though deleting the tag locally and pushing has no effect.  Assuming the name of the remote is origin, and the tag you want it to delete is dev:git push origin :refs/tags/devThis asks the remote to delete the tag.  The presence or absence of the tag dev in your local repository is irrelevant; this kind of push, with :remoteref as a refspec, is a pure-delete push.The remote may or may not allow tag deletion (depending on any extra hooks added).  If it allows the deletion, then the tag will be gone, and a second git push --tags, when you have a local dev tag pointing to some commit or annotated tag repo object, send your new dev tag.  On the remote, dev will now be a newly created tag, so the remote will probably allow the push (again this depends on any extra hooks added).The force-push is simpler.  If you want to be sure not to update anything other than the tag, just tell git push to push only that one refspec:git push --force origin refs/tags/dev:refs/tags/dev(note: you don't need --tags if you're explicitly pushing just one tag ref-spec).1Of course, the reason for this built-in hook is to help enforce the behavior that other users of that same remote-repo expect: that branches are not rewound, and tags do not move.  If you force-push, you should let the other users know you are doing this, so that they can correct for it.  Note that ""tags don't move at all"" is newly enforced by git 1.8.2; previous versions would allow the tag to ""move forward"" in the commit graph, much like branch names.  See the git 1.8.2 release notes.2It's trivial if you can log in on the remote.  Just go to the git repository there and run git tag -d dev.  Note that either way‰ÛÓdeleting the tag on the remote, or using git push to delete it‰ÛÓthere's a period of time when anyone who accesses the remote will find that the dev tag is missing.In Mac SourceTree only deselect the Push all tags checkbox:The reason you are getting rejected is that your tag lost sync with the remote version. This is the same behaviour with branches.sync with the tag from the remote via git pull --rebase <repo_url> +refs/tags/<TAG> and after you sync, you need to manage conflicts.If you have a diftool installed (ex. meld) git mergetool meld use it to sync remote and keep your changes.The reason you're pulling with --rebase flag is that you want to put your work on top of the remote one so you could avoid other conflicts.Also, what I don't understand is why would you delete the dev tag and re-create it??? Tags are used for specifying software versions or milestones. Example of git tags v0.1dev, v0.0.1alpha, v2.3-cr(cr - candidate release) and so on..Another way you can solve this is issue a git reflog and go to the moment you pushed the dev tag on remote. Copy the commit id and git reset --mixed <commmit_id_from_reflog> this way you know your tag was in sync with the remote at the moment you pushed it and no conflicts will arise."
"It looks like this is a known issue.  See JENKINS-20445, JENKINS-20387, and several other issues, which seem to be popping up.According to these bug reports, this is only happening in the newer version of the Git plugin, so you could downgrade, or try some workarounds:Workaround #1 - create a local bare reference clone to reduce the time, as stated here.If you have only 30 kb/second throughput from Jenkins to your git repository, you should probably consider cloning a bare copy of the  repository to central location on the Jenkins server, then perform the  clone with the ""Advanced clone behaviour"" to use a reference  repository. That will significantly reduce the amount of data  transferred from the git server to Jenkins.On my Debian Jenkins machine, I do that with:$ sudo mkdir -p /var/cache/git/mwaite$ sudo chown mwaite.mwaite /var/cache/git/mwaite$ cd /var/cache/git/mwaite$ git clone --bare https://github.com/jenkinsci/jenkins.gitAfter that bare clone is available on the Jenkins machine, add that  advanced behavior to the job and it should perform much better.Workaround #2 - increase the timeout to allow for the long initial clone process to complete, using the Git.timeOut property:java -Dorg.jenkinsci.plugins.gitclient.Git.timeOut=60 -jar jenkins.warThis SO question is a good example of how to set properties for the Jenkins service.  Also, note that this value is in minutes and not seconds.  This workaround is courtesy of David.The latter workaround worked for me.  Although, I must admit that I'd prefer to use the reference repo, but I don't believe that it works with a multiconfiguration job, such as mine.  And, be forewarned that it was surprisingly painful to set a property for every slave node and then internally document that we have to set this on all nodes, using large Git repos, going forward.I was about to use Workaround #2 but it seems as of git plugin 2.0.3 this can now be configured in the UI, although it is a bit hidden away and is per project.Go to the configure screen for a project, Source Code Management section, Git, Additional Behaviors, Add, Advanced clone behaviors, Timeout (in minutes) for clone and fetch operation.I would use workaround #2 as suggested by DevHopeful_2012 if you want a global setting.WINDOWS ONLYThere is a possibility that your ssh connection is not configured properly. If the ssh connection to your git repository is not estabilished, Jenkins build may appear as if it hung and eventually timeout. By default, the Jenkins installer sets up Jenkins to run as a service,  which runs as the ‰ÛÏLocal System account‰Ûù, NOT your user account. Since  the ‰ÛÏLocal System account‰Ûù does not have SSH keys or known_hosts set  up, ‰ÛÏgit clone‰Ûù will fail.You can just copy C:\Program Files (x86)\Git\.ssh to  C:\Windows\SysWOW64\config\systemprofile\.ssh (the ‰ÛÏLocal System  account‰Ûù home)Also,IMPORTANT: make sure your ssh keys do NOT have a password! Jenkins  will appear to hang when cloning the repository, but really it‰Ûªs ssh  blocking in the background waiting for you to input your password.Detailed steps in http://computercamp-cdwilson-us.tumblr.com/post/48589650930/jenkins-git-clone-via-ssh-on-windows-7-x64I just found the solution for jenkins timout #10 min errors. This error was coming because of low Internet connection or may be the size of you project in github is large, so jenkins not able load that project from git server.For resolve the problem we have to edit ""Additional Behaviours"" in Git in jenkins project configuration and increase ""Timeout (in minutes) for clone and fetch operations"" to ""60"" or ""120"" minutes. So now whenever jenkins clone the git project from git server, its enough time to load/clone a project from git server."
"In my case, the git repository was duplicated somehow in the config file:cat .git/configgave me:[remote ""origin""]    url = git@bitbucket.org:myUserName/myRepositoryName.git/myRepositoryName.git    fetch = +refs/heads/*:refs/remotes/origin/*As you can see, myRepositoryName is duplicated, so I removed that, and now the config file looks like this:[remote ""origin""]    url = git@bitbucket.org:myUserName/myRepositoryName.git    fetch = +refs/heads/*:refs/remotes/origin/*Doing this, my problem is solved. Now the push is correctly done. Hope this help someone.This error also occur when you rename your repo:Edit .git/config and change from:git remote add origin git@bitbucket.org:myname/myproject.gitto:git remote add origin git@bitbucket.org:myname/my_new_project_name.gitI managed to do this in the end by removing the origin and re-adding it.  Everything seemed ok after I did this.git remote rm origingit remote add origin git@github_or_bitbucket_or_whatever_linkYou get this error if the remote repository hasn't been created. Bitbucket is running a service called conq that handles pushes and you see the error message from it. Simply create a new (empty) repository and the push should succeed.Here I'm pushing to a non-existing repository:$ git push git@bitbucket.org:mg/testt.git masterconq: repository does not exist.fatal: The remote end hung up unexpectedlyand here I push to the correct path:$ git push git@bitbucket.org:mg/test.git masterCounting objects: 3, done.Writing objects: 100% (3/3), 203 bytes, done.Total 3 (delta 0), reused 0 (delta 0)remote: bb/acl: mg is allowed. accepted payload.To git@bitbucket.org:mg/gtest.git * [new branch]      master -> masterThe test repository was newly created on Bitbucket. If the problem persists, then I suggest deleting the empty repo from Bitbucket and re-creating it.I had a similar problem, and this thread helped me solve the issue, but my solution is slightly different:I was on a remote server, so first I had to change into the public_html (www) directory, then initialize the repo. (note you have to first add your .ssh key in bitbucket)$ git initwhich initialized an empty Git repositorythen add the remote$ git remote add origin git@bitbucket.org:myname/myproject.gitthen I was able to pull and checkout my branch$ git pull$ git checkout <branch-name>in my case, i mixed up usernames:in my scenario there are 2 accounts: i need to connect using my-account to the repository's owner-account:owner-acc   - created, maintaining the accountmy-acc           - me, a participantthe syntax in this case should beurl = git@bitbucket.org:owner-acc/repo-name.gitand NOT my username, nor my account-name.I assume bitbucket's instructions I followed previously took care of identifying me somehow (it's probably relating my-account with the public key i uploaded earlier).I had this error when trying to deploy with Capistrano. I was missing the deploy key for that Bitbucket repo. Here's how to solve the issue:Generate an SSH Key on your server: https://confluence.atlassian.com/display/STASH/Creating+SSH+keysFollow these instructions to get ssh-agent running, and load in the identity you just created: https://confluence.atlassian.com/display/BITBUCKET/Troubleshoot+SSH+IssuesOnce that's finished just go to the Bitbucket repo > Settings > Deploy Keys and copy and paste your newly created key.Did you encounter this error doing the Rails Tutorial?I did. And I'm very new to this so I was only doing was the tutorial explicitly told me to do. That got me into trouble because in chapter 3 it says it‰Ûªs a good idea to create a new repository at Bitbucket and push it up but it doesn't hold your hand through the process like it does in Chapter 2.Don't forget to create the new repository at BitBucket before pushing to that repository. From Chapter 2: You should also create a new repository by clicking on the ‰ÛÏCreate‰Ûù button at Bitbucket.I did that and it fixed the problem."
"I think you might've forgotten the step$ git add .gitignorebefore trying to commit, or then you mistyped, when you shoud've given$ git commit -m ""Add credentials.yml to .gitignore""Process advised is highly dangerous [for the repo contents], so one must be really careful to follow all the steps in detail."
"This is actually a case of wrong error reporting from TeamCity side. Human-readable error is concealed and this ‰ÛÏLow-level patch stream is closed‰Ûù is shown instead. This reporting issue will be fixed in the next TeamCity 8.0.6 bugfix update.For the time being you can try to use agent-side checkout for git (Set ""VCS checkout mode"" under Version Control Settings to ""Automatically on agent"" and make sure you have git installed on the agent computer)."
"You have to actually cd into the directory first:$ git clone git://cfdem.git.sourceforge.net/gitroot/cfdem/liggghtsCloning into 'liggghts'...remote: Counting objects: 3005, done.remote: Compressing objects: 100% (2141/2141), done.remote: Total 3005 (delta 1052), reused 2714 (delta 827)Receiving objects: 100% (3005/3005), 23.80 MiB | 2.22 MiB/s, done.Resolving deltas: 100% (1052/1052), done.$ git statusfatal: Not a git repository (or any of the parent directories): .git$ cd liggghts/$ git status# On branch masternothing to commit (working directory clean)in my case, i had the same problem while i try any git -- commands (eg git status) using windows  cmd. so what i do is after installing  git for window https://windows.github.com/in the environmental variables, add the class path of the git on the ""PATH"" varaiable. usually the git will installed on C:/user/""username""/appdata/local/git/bin add this on the PATH in the environmental variableand one more thing on the cmd go to your git repository or cd to where your clone are on your window usually they  will be stored on the documents under github cd Document/Github/yourprojectafter that you can have any git commands"
"The correct answer to this was actually different. Before git runs the aliases it checks the $PATH. In case the directory does not exist, or lacks permissions, git produces the ""fatal: cannot exec 'git-co': Permission denied"". It does not ever comes to check the aliases so git foobar will produce the same error.Good people from the git mailing list also reminded me of an strace tool, that can help finding the entry that is returning EACCES, as in: strace -f -e execve git foobarThe credit goes to Jeff King from the git mailing list. :)Is it possible you have inadvertently created a non-executable git-co file somewhere? I can recreate your situation if I do just that, as demonstrated below.$ git --versiongit version 1.7.7.1.475.g997a1$ git config --get-regexp '^alias\.co$'alias.co checkout$ git co b1Switched to branch 'b1'$ touch $HOME/bin/git-co$ ls -al $HOME/bin/git-co-rw-r--r-- 1 user user 0 2011-11-03 12:59 /home/user/bin/git-co$ git co masterfatal: cannot exec 'git-co': Permission denied$ for p in $(echo ""$PATH"" | sed -e 's/:/ /g'); do if [ -f ""${p}/git-co"" ]; then echo ""Found git-co in ${p}""; fi; doneFound git-co in /home/user/bin$ rm $HOME/bin/git-corm: remove regular empty file `/home/user/bin/git-co'? y$ git co masterSwitched to branch 'master'Another thing you might want to try is enabling trace logging to get more information about what Git is doing. Following is an example:GIT_TRACE=$HOME/trace.log git co masterYou must use absolute paths if you want to send output to a file. Otherwise, use true or 1 to send output to standard error; e.g. GIT_TRACE=1. The trace.log file contains:trace: exec: 'git-co' 'master'trace: run_command: 'git-co' 'master'trace: alias expansion: co => 'checkout'trace: built-in: git 'checkout' 'master'If you do not see the trace: alias expansion: co=> 'checkout' trace log output, Git is finding a git-co file in the PATH environment variable. Git uses a PATH as follows:Start with an empty PATH, saving any ""old"" PATH for reference.If the --exec-path=<my git commands path> Git option is found, append <my git commands path> to the PATH.If --exec-path=<my git commands path> was not found and the GIT_EXEC_PATH environment variable is set, append this to the PATH.If you called git using a relative or absolute path, append the absolute path of the git executable to the PATH.If PATH was previously defined, append it to the PATH.If PATH was not previously defined, append /usr/local/bin:/usr/bin:/bin to the PATH.You can use another alias to get Git to tell you what it is setting the PATH environment variable to.$ git config --global alias.whatpath '!echo $PATH'$ git whatpath/usr/local/libexec/git-core:/home/user/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binThen check each directory listed for the existence of a git-co file. It's not sufficient to do which git-co and assume that if nothing is found that you do not have a git-co file located in one of the directories in Git's PATH; a file may exist that is not executable and which will not display it.Check to see if you have execute permissions on the git aliases.Providing the execute permissions solved this issue for me.I downloaded ""git-credential-osxkeychain"" and added it to /usr/local/bin and provided the exec rights and could run the command without any issue."
"Basically you can't create the structure as you are proposing.Why? Because when you have a branch with slashes in it, it gets stored as a directory hierarchy under .git/refs/headsHow to verifySay you don't have any branches in an empty directory.So you create a dummy repository usingtouch testfile && git init && git add . && git commit -m ""initializing""`.Next, run the git branch command to create some branches as you suggested.git branch origin/mastergit branch origin/develop/user1git branch origin/develop/user2/issue4Now, cd into the .git/refs/heads directory using cd .git/refs/heads and do a ls -laYou will find that git has created the following directory structure.master (file)origin (directory)|_master (file)|_develop (directory)   |_user1 (file)   |_user2(directory)     |_issue4 (file)If now you try creating a branch using git branch origin/develop/user1/issue1, it will throw the error because a file named user1 already exists while your command needs it to be a directory."
"simply put a dot next to itgit clone git@github.com:user/my-project.git .From git help clone:Cloning into an existing directory is only allowed if the directory is empty.So make sure the directory is empty (check with ls -a), otherwise the command will fail.The following is probably not fully equivalent to a clone in all cases but did the trick for me:git init .git remote add -t \* -f origin <repository-url>git checkout masterIn my case, this produces a .git/config file which is equivalent to the one I get when doing a clone.To be sure that you could clone the repo, go to any temporary directory and clone the project there:git clone ssh://user@host.com/home/user/private/repos/project_hub.gitThis will clone your stuff into a project_hub directory.Once the cloning has finished, you could move this directory wherever you want:mv project_hub /path/to/new/locationThis is safe and doesn't require any magical stuff around.git clone your-repo tmp && mv tmp/.git . && rm -rf tmp && git reset --hardSolution:On this case, the solution was using the dot,so: rm -rf .* && git clone ssh://user@host.com/home/user/private/repos/project_hub.git .rm -rf .* && may be omitted if we are absolutely sure that the directory is empty.Credits go to:@James McLaughlin on comments below.@Andrew has answered it clearly here. But as simple as this also works even if the directory is not empty:git init .git remote add origin <repository-url>git pull origin masterIn addition to @StephaneDelcroix's answer, before using:git clone git@github.com.user/my-project.git .make sure that your current dir is empty by usingls -aIf the current directory is empty, then this will work:git clone <repository> foo; mv foo/* foo/.git* .; rmdir fooImproving on @GoZoner's answer:git clone <repository> foo; shopt -s dotglob nullglob; mv foo/* .; rmdir fooThe shopt command is taken from this SO answer and changes the behavior of the 'mv' command on Bash to include dotfiles, which you'll need to include the .git directory and any other hidden files.Also note that this is only guaranteed to work as-is if the current directory (.) is empty, but it will work as long as none of the files in the cloned repo have the same name as files in the current directory. If you don't care what's in the current directory, you can add the -f (force) option to the 'mv' command.I have seen this question so many times - and I just want to point out that git pull from within your directory will do the trick. Unless I'm missing something here - that worked for me."
"Try:git clone git@bitbucket.org:project/project.git -b develop_one --single-branchFor already cloned repos use:git fetchgit checkout develop_one# Or more specific:git checkout --track -b develop_oneThis will track the develop_one branch from the remote.Also, to add to @tomrbrujin 's answer, you can specify the name of the local destination directory in the clone command like this:git clone https://github.com/example/example1.git -b branch_name --single-branch local_nameThe final arg passed, local_name would create and name the local copy of the cloned remote directory ""local_name.""Otherwise, the local directory name will only reflect the repo name, which here would be: example"
"It looks like I got a diverged master.Strangely, this command did not shows any error logs.$ git fetch && git checkout threads    # threads is the name of the branchBut,    $ git fetch && git checkout master    Switched to branch 'master'    Your branch and 'origin/master' have diverged,    and have 7 and 3 different commits each, respectively.    (use ""git pull"" to merge the remote branch into yours)and,    $ git pull origin master    From <git_repo>        # <git_repo> is the URL of the repo    * branch            master     -> FETCH_HEAD    Auto-merging <file>    # <file> is the filename in question     CONFLICT (add/add): Merge conflict in <file>    Automatic merge failed; fix conflicts and then commit the result.After I manually resolved the conflicts on master, now the git fetch && git checkout threads works ok, and I can switch to the branch threads.As to why I got a diverged master in the first, I'm not sure - perhaps as a result of some git rebase command I didn't do properly."
"Okay, I had the same issue myself as rwkiii - this is a bug in Visual studio and is not an easy one to fix. Here are the symptoms:Visual Studio states that you cannot merge/switch braches/etc. because you have uncommitted changes - which is fine, except all your changes have been committed.Cannot switch to master because there are uncommitted changes. Commit or undo your changes before you switch branches. See the Output window for details.Here's a screenshot to be clearer.If you look at the output window, it may appear empty but you have to change ""Show output from"" to ""Source Control - Git"". This will list the file that Visual Studio thinks has changes.Now, things that I tried that didn't fix it (so you don't have to):Restarting Visual StudioRestarting the machineSwitching ProjectsUsing external git tools (All of which said ""no changes"")git resetMaking arbitrary changes to the file and committing that. Commits ok, VS still thinks there's more changesIn the end, I had to go and delete the file from the disk, then ""undo"" that change from the Team Explorer window:Not the most ideal solution, but it does seem to fix it.I used the git command prompt to resolve the issue. I can't guarantee that it's the best way or the only way, but it worked for me in Visual Studio 2013.Under Changes in the Team Explorer, choose Open Command Prompt.In the command prompt type: git statusIt will list the files that are open for change.Copy off those files (just in case), then you can then discard the changes in the working directory in the command prompt. git checkout -- mysubdir\myfile.extDon't attempt to change branches in Visual Studio, it still won't work!Instead at the command prompt switch to the branch in question.git checkout branchnameWhen you go back to Visual Studio it will prompt you to reload the project. After that the branch will be updated correctly to the branch you chose from the command line.hthUncommited changes means that you have modified one or more files which have already been added to git and those changes have not been ""saved"" in a commit or in your git stash.When you switch between branches you are not allowed to have uncommited changes (new files that have not been added to git are fine though) as changes in other branches might overwrite your uncommited changes.I'm unfamiliar with how Visual Studio integrates with git as I myself use PoshGit with PowershellThe way to proceed is to:Undo your changesCommit your changesOr stash your changes (see the Interrupted workflow section)."
"I'm in charge of handling all patching at my work. I've had this happen many times. A patch cannot be merged. The reason this is happening is because the master branch has changes that the patch did not take into account, which prevents it from patching correctly. From all my experience, this could be caused by several things:The person who made the patch failed to pull the master branch and rebase master onto their development branch.Between the time that the person pulled and the patch was applied enough changes were made to the master branch to stop the patch from applying due to too many conflicts.The person patched incorrectly.Here is the flow I've had the most success with. (This is assuming the person is developing on a branch other than master)Make sure you've added all files and commited all changes.git checkout mastergit pullgit checkout {development branch}git rebase master (this will bring the development branch up to speed with master)git checkout -b {submission branch} mastergit merge --squash --no-commit {development branch}git commit -am ""Commit Comment Here"" (NOTE: This commit comment will be the name of the patch)git format-patch origin..HEADThat makes sure your patch is up to date with the origin master branch. Send that patch and hopefully the patch is applied before too many changes are made on the master.For more info on Git and all the steps I went through, see this wiki."
"Edit your job configuration, and under git plugin section:Click ""Add""Click ""Advanced clone behaviours""Set the number of minutes you want in ""Timeout (in minutes) for clone and fetch operation""I recommend checking also the ""shallow clone"" option. It fetches only the last state of the repository (without the history), so it's much faster.I have also face the same error while click on Build Now Button in Jenkins.Why this error comes ?Ans: This error was coming because of low Internet connection or may be the size of you project in github is large, so jenkins not able load/cone that project from git server. Solution steps:For resolve the problem we have to edit in Jenkins project configuration and find the ""git"".Then click on ""Add"" button and select ""Advanced clone behaviours"".Then in Timeout (in minutes) for clone and fetch operations box put any number which is more then 10, (I put 60 here).Apply and the save the configuration.Build Now again , It took some more time to build , but it will fixed this error.Cheers :)"
"Deleting a file is changing it.  You want those two files to be ""unchanged"".  If you want to keep any changes you've done (including deletion), you should either stash or commit.  Stashing would require unstashing (git stash pop or git stash apply), while committing will probably result in a conflict which you must resolve.  If you just want to revert any changes (throw them away, not interested in keeping them), you can git checkout -- buf.cpp buf.h to restore them, then try the pull."
"Branches are just commit pointers. You get into some weird territory when there's nothing at which to point. Honestly if you're just looking to get a ""clean"" workflow history, so the first commit of any significance is a merge from develop into master, add an insignificant commit to master first:git branch --move master developgit checkout --orphan mastergit rm -rf . ;# abandon the staged, orphaned changesecho README > README ;# put something in this working directorygit add README && git commit -m ""Initial commit of <my_project>""Why commit something? Because once you run the --orphan checkout, you won't be able to do anything meaningful with the master branch. Try it yourself:$ git checkout --orphan masterSwitched to a new branch 'master'$ git checkout develop && git checkout mastererror: pathspec 'master' did not match any file(s) known to git.How about a merge?$ git checkout --orphan masterSwitched to a new branch 'master'$ git merge developfatal: Non-fast-forward commit does not make sense into an empty headNo dice. The only real way around this is to commit something, anything, to that empty branch.  The moment you do, you can merge develop any way you'd like:$ git merge developMerge made by the 'recursive' strategy. README | 1 + 1 file changed, 1 insertion(+) create mode 100644 READMEAnd the log:$ git log --graph --oneline*   867a1f9 Merge branch 'develop'|\  | * 22df145 README* 15ba82a Initial commit of test project"
"It's not the commits you've made that touch the file, but the commits that you're pulling. Inspect the remote branch you're tracking to see what's happened. For example, git log master..origin/master will show all the commits that have happened on origin/master since you last pulled. According to your output above, there are 26 of these. Using the --name-status option will show which commit added the file.You will need to rename the offending file, do the pull, and then move it back (overwriting the copy from the repo). git diff filename will then tell you how your copy differs from the one that someone else has committed to master. You can then commit the differences, or throw them away with git checkout filename.You will need to use git pull --rebase to rebase your recent commits on top of the ones in origin. Once git status says master is ahead rather than diverged from origin/master, you can push."
"This tag points to a tree object, not a commit object:NOTE! There's no commit for this, since it happened before I started with git.  Eventually we'll import some sort of history, and that should tie this tree  object up to a real commit. In the meantime, this acts as an anchor point for  doing diffs etc under git.I'm not sure if the ""import some sort of history"" step is something that you can do as an end user. If it is, I don't know how to do it.The link to the tagged tree doesn't seem to be valid, either:Invalid commit reference: c39ae07f393806ccf406ef966e9a15afc43cc36aThat's not a good sign. Unfortunately, the answer might be that you won't be able to track this version of the Linux source code down."
"During clonning i got this error message and found that a tag was created with this name (like a 40-hex ref).When you get this error, you can look for branch or tag names with the ambiguous value and remove it if the ref is not required$ git tag | grep 4e810d87701e09df2949cb33e731052aa05d2c764e810d87701e09df2949cb33e731052aa05d2c76$ git tag -d 4e810d87701e09df2949cb33e731052aa05d2c76In my case it was a branch and not a tag.To find if the ref is a tag or branch:$ git branch -a | grep 4e810d87701e09df2949cb33e731052aa05d2c76$ git tag | grep 4e810d87701e09df2949cb33e731052aa05d2c76Be aware you might want to save the branch or tag before you delete it. (Using a different name, of course.)Here's how I got rid of it:$ git branch -d 4e810d87701e09df2949cb33e731052aa05d2c76$ git push origin :4e810d87701e09df2949cb33e731052aa05d2c76In my case the error only came up during a git clone --mirror--it wasn't a problem normally."
"Try:git ""/home/ubuntu/brukva"" do  repository ""git://github.com/kmerenkov/brukva.git""  revision ""master""  action :sync  user ""ubuntu""endIt does nothing if your target directory exists when using :checkout because it assumes your checkout is done already, you can see chef tells ""up to date"".Refer to the source of git provider"
"If the problem is with the index as the staging area for commits (i.e. .git/index), you can simply remove the index (make a backup copy if you want), and then restore index to version in the last commit:On OSX/Linux:rm -f .git/indexgit resetOn Windows:del .git\indexgit reset(The reset command above is the same as  git reset --mixed HEAD)You can alternatively use lower level plumbing git read-tree instead of git reset.If the problem is with index for packfile, you can recover it using git index-pack.You may have accidentally corrupted the .git/index file with a sed on your project root (refactoring perhaps?) with something like:sed -ri -e ""s/$SEACHPATTERN/$REPLACEMENTTEXT/g"" $(grep -Elr ""$SEARCHPATERN"" ""$PROJECTROOT"")to avoid this in the future, just ignore binary files with your grep/sed:sed -ri -e ""s/$SEACHPATTERN/$REPLACEMENTTEXT/g"" $(grep -Elr --binary-files=without-match ""$SEARCHPATERN"" ""$PROJECTROOT"")This sounds like a bad clone. You could try the following to get (possibly?) more information:git fsck --fullIn my case it was nested .git folder in web/ckeditor/kcfindergit status  error: bad index file sha1 signature  fatal: index file corrupt  fatal: 'git status --porcelain' failed in submodule web/ckeditor/kcfinder"
"Just to add to Tobb's excellent original answer..I noticed that this has been fixed but had issues getting the new version to work.. You have to add it as a plugin (not project) dependency, eg.<!-- Appengine deploy at end of mvn release:perform --><plugin>    <groupId>org.apache.maven.plugins</groupId>    <artifactId>maven-release-plugin</artifactId>    <version>2.2.2</version>    <dependencies>        <dependency>            <groupId>org.apache.maven.plugins</groupId>            <artifactId>maven-scm-plugin</artifactId>            <version>1.8.1</version>        </dependency>    </dependencies></plugin>Turned out that this was an error that had been encountered before. This is due to a bug in  maven-scm-provider-git, which causes the file-reference to a local repository for checkout to lose its ':' in ""C:..."". (The bug is described here: http://jira.codehaus.org/browse/SCM-662)We fixed this by copying a fixed version of the jar into the local maven repository, but I had recently cleared my local repository in order to see if our Nexus repo was behaving correctly, and thus got an unfixed version of the jar in my local repo (doh!)So, added the fixed version of the jar to my local maven repo, the git clone-command contained a ':' again, and things started working :)Edit: This bug is fixed in version 2.4 of the maven release plugin."
"The following command should work.git push origin refs/heads/product-0.2:refs/heads/product-0.2Change the names. Whether you do it locally or remotely, just change the names. A tag and a branch are fundamentally the same thing in git: they represent a pointer to a commit. The difference is that a branch pointer advances as you make commits, while a tag remains static. However, you can perform a git checkout on either a branch or a tag. Why would you fight with all these doubled up names? Change them.Verify what tags are associated with your branch:git tagIn my case, I had a tag with the same name of the branch. Deleting it worked:git tag -d [tag-name]"
"Yes, the problem is that there are no commits in ""bare"".  This is a problem with the first commit only, if you create the repos in the order (bare,alice).  Try doing git push --set-upstream origin master.  This would only be required the first time.  Afterwards it should work normally.As Chris Johnsen pointed out, you would not have this problem if your push.default was customized.  I like upstream/tracking.If you: git push origin masterit will push to the bare repo.It sounds like your alice repo isn't tracking correctly.cat .git/configThis will show the default remote and branch.If you git push -u origin masterYou should start tracking that remote and branch. I'm not sure if that option has always been in git.git push --allis the canonical way to push everything to a new bare repository.Another way to do the same thing is to create your new, non-bare repository and then make a bare clone withgit clone --barethen usegit remote add origin <new-remote-repo>in the original (non-bare) repository.This related question's answer provided the solution for me... it was just a dumb mistake: Remember to commit first!http://stackoverflow.com/a/7572252If you have not yet committed to your local repo, there is nothing to push, but the Git error message you get back doesn't help you too much.Try this in your alice repository (before pushing):git config push.default trackingOr, configure it as the default for your user with git config --global ‰Û_.git push does default to the origin repository (which is normally the repository from which you cloned the current repository), but it does not default to pushing the current branch‰ÛÓit defaults to pushing only branches that exist in both the source repository and the destination repository.The push.default configuration variable (see git-config(1)) controls what git push will push when it is not given any ‰ÛÏrefspec‰Ûù arguments (i.e. something after a repository name). The default value gives the behavior described above.Here are possible values for push.default:nothingThis forces you to supply a ‰ÛÏrefspec‰Ûù.matching (the default)This pushes all branches that exist in both the source repository and the destination repository.This is completely independent of the branch that is currently checked out.upstream or tracking(Both values mean the same thing. The later was deprecated to avoid confusion with ‰ÛÏremote-tracking‰Ûù branches. The former was introduced in 1.7.4.2, so you will have to use the latter if you are using Git 1.7.3.1.)These push the current branch to the branch specified by its ‰ÛÏupstream‰Ûù configuration.  currentThis pushes the current branch to the branch of the same name at the destination repository.  These last two end up being the same for common cases (e.g. working on local master which uses origin/master as its upstream), but they are different when the local branch has a different name from its ‰ÛÏupstream‰Ûù branch:git checkout master# hack, commit, hack, commit# bug report comes in, we want a fix on master without the above commitsgit checkout -b quickfix origin/master  # ""upstream"" is master on origin# fix, commitgit pushWith push.default equal to upstream (or tracking), the push would go to origin‰Ûªs master branch. When it is equal to current, the push would go to origin‰Ûªs quickfix branch.The matching setting will update bare‰Ûªs master in your scenario once it has been established. To establish it, you could use git push origin master once.However, the upstream setting (or maybe current) seems like it might be a better match for what you expect to happen, so you might want to try it:# try it once (in Git 1.7.2 and later)git -c push.default=upstream push# configure it for only this repositorygit config push.default upstream# configure it for all repositories that do not override it themselvesgit config --global push.default upstream(Again, if you are still using a Git before 1.7.4.2, you will need to use tracking instead of upstream)."
"The problem is that you are not tracking the files locally but identical files are tracked remotely so in order to ""pull"" your system would be forced to overwrite the local files which are not version controlled. Try runninggit add * git stashgit pullThis will track all files, remove all of your local changes to those files, and then get the files from the server.If this is a one-time operation, you could just remove all untracked files from the working directory before doing the pull. Read How do I remove local (untracked) files from my current Git branch? for information on how to remove all untracked files.Be sure to not accidentally remove untracked file that you still need ;)You can try command to clear the untracked files from the localgit clean  -d  -fx """"where -d can be replace with following:-x means ignored files are also removed as well as files unknown to git.-d means remove untracked directories in addition to untracked files.-f is required to force it to run.here is the link that can be helpful as well.You can try that command git clean -df"
"I removed .xcdatamodel file, committed, added it and committed again. Not clean, but worked.The chosen answer is too specific to his own question and gives zero insight on the actual cause. The problem is indeed, as mentioned before the changing of a filename's case. For me personally this is because of my Macbook/OSX. Apparently Windows has the same 'thing'. Cause: git isn't able to recognise a change from 'filename' to 'FileName'.Here's a list of solutions for anyone stumbling upon this. All should be run at the project root:The Permanent fix that will work on current and future projectsChange the git case setting. The file should be committed afterwardsgit config core.ignorecase false --globalThe Project only fixgit config core.ignorecase falseThe just give me a line of code so I can move on fix - credit to Brucegit commit -a -m ""pathspec did not match any file(s) known to git fix""The I get paid by the hour fixDelete the file. Commit. Push. Add the file again. Commit. Push.This probably wasn't your problem, but this page has a high Google rank for the error:Git doesn't like renames where the source and destination differ only by case. (Windows-specific) SeeHow do I commit case-sensitive only filename changes in Git?for solutions.This is not a proper way to solve the problem, but it's a workaround that may help others...Do this in your terminal:git commit -m ""<message>"" <project dir>Replace  with your message, and  with the directory of your project.This is similar to tf.alves answer, but normally I do agit commit -a -m ""comment""I've found that if I forget the -a and -m parameters that I get the error: pathspec message mentioned above."
"Use a shell function for the alias:[alias]catchup = ""!f() { CURRENTBRANCH=$(git symbolic-ref --short HEAD) && .... ;}; f""There the handling of $n works as expected.The OP mwotton confirms in the comments that the following works:catchup = ""!_(){ CURRENTBRANCH=$(git symbolic-ref --short HEAD) ; echo \""Currently on \""$CURRENTBRANCH\"" - switching to \""$@ ; git checkout $@ ; git merge origin/$@ ; echo \""Going back to \""$CURRENTBRANCH ; git checkout $CURRENTBRANCH; }; _""In multi-line, for more visibility:catchup = ""!_(){   CURRENTBRANCH=$(git symbolic-ref --short HEAD) ;   echo \""Currently on \""$CURRENTBRANCH\"" - switching to \""$@ ;   git checkout $@ ;   git merge origin/$@ ;   echo \""Going back to \""$CURRENTBRANCH ;   git checkout $CURRENTBRANCH; }; _"""
"cd `brew --repository`git reset --hard HEADbrew updateSometimes the above doesn't work. In that case, docd `brew --repository`git reset --hard origin/masterbrew update"
"The solution is very simple. git checkout <filename> tries to check out file from the index, and therefore fails on merge. What you need to do is (i.e. checkout a commit):To checkout your own version you can use one of: git checkout HEAD -- <filename>git checkout --ours -- <filename>git show :2:<filename> > <filename> # (stage 2 is ours)To checkout the other version you can use one of: git checkout test-branch -- <filename>git checkout --theirs -- <filename>git show :3:<filename> > <filename> # (stage 3 is theirs)You would also need to run 'add' to mark it as resolved:git add <filename>Based on Jakub's answer you can configure the following git aliases for convenience:accept-ours = ""!f() { git checkout --ours -- \""${@:-.}\""; git add -u \""${@:-.}\""; }; f""accept-theirs = ""!f() { git checkout --theirs -- \""${@:-.}\""; git add -u \""${@:-.}\""; }; f""They optionally take one or several paths of files to resolve and default to resolving everything under the current directory if none are given.Add them to the [alias] section of your ~/.gitconfig or rungit config --global alias.accept-ours '!f() { git checkout --ours -- ""${@:-.}""; git add -u ""${@:-.}""; }; f'git config --global alias.accept-theirs '!f() { git checkout --theirs -- ""${@:-.}""; git add -u ""${@:-.}""; }; f'Try this:git merge --strategy-option theirs -- To accept theirs changes git merge --strategy-option ours -- To accept yoursBased on kynan's answer, here are the same aliases, modified so they can handle spaces and initial dashes in filenames:accept-ours = ""!f() { [ -z \""$@\"" ] && set - '.'; git checkout --ours -- \""$@\""; git add -u -- \""$@\""; }; f""accept-theirs = ""!f() { [ -z \""$@\"" ] && set - '.'; git checkout --theirs -- \""$@\""; git add -u -- \""$@\""; }; f"""
"You need to copy your private ssh key into the .ssh folder beneath Jenkins.  Something like (on Ubuntu Lucid):/var/lib/jenkins/.sshHost key verification failed. - make sure your SSH keys are setup properly.http://help.github.com/linux-set-up-git/After you are done with that,ssh git@github.comshould give you a welcome message ( which also says no shell access ) from GitHubHad the same problem, even though the ssh-keys were correctly set up.The issue was that on the first connection attempt, the git-server needed to be added to the known hosts file /.ssh/known_hosts. Git prompts you for this on first connect-attempt: Are you sure you want to continue connecting (yes/no)?, but Jenkins did not nor can it pass on the prompt, so it failed silently.We solved it by walking to our ops-guy, bringing him a nice cup of espresso, and had him do a random git-checkout, where he answered yes to said prompt :) After that, checkouts through Jenkins worked as expected.Found the clue here: http://www.ipsure.com/blog/2010/ssh-public-key-w-rsa-authentication-and-ssh-tunneling-part-1/If you still have the Host key verification failed problem I answered a similar problem with a step by step solution here : Jenkins & Github not using SSH Key"
"Can you please checkout top level module without --recurse.Is there a possibility that .submoudule file is committed on some other branch ?"
"First, turn off compression: git config --global core.compression 0Next, let's do a partial clone to truncate the amount of info coming down: git clone --depth 1 <repo_URI>When that works, go into the new directory and retrieve the rest of the clone: git fetch --unshallow or, alternately, git fetch --depth=2147483647Now, do a regular pull: git pull --allI think there is a glitch with msysgit in the 1.8.x versions that exacerbates these symptoms, so another option is to try with an earlier version of git (<= 1.8.3, I think).This error may occur for memory needs of git. You can add these lines to your global git configuration file, which is .gitconfig in $USER_HOME, in order to fix that problem.[core] packedGitLimit = 512m packedGitWindowSize = 512m [pack] deltaCacheSize = 2047m packSizeLimit = 2047m windowMemory = 2047mI got this error when git ran out of memory.Freeing up some memory (in this case: letting a compile job finish) and trying again worked for me.In my case it was a connection problem. I was connected to an internal wifi network, in which I had limited access to ressources. That was letting git do the fetch but at a certain time it crashed.This means it can be a network-connection problem. Check if everything is running properly: Antivirus, Firewall, etc.The answer of elin3t is therefore important because ssh improves the performance of the downloading so that network problems can be avoided"
"While git needs a place to do its work, you could point it off to a different work-tree location for the duration of the ""merge one file"" op.I have no idea if/how this works ""out of the box"" for merge-one-file, but the env variable to set is GIT_WORK_TREE:env GIT_WORK_TREE=/some/where/else git ...(you can leave out env with most, but not all, shells).A more or less equivalent method that might ""feel safer"" :-) or be more convenient for some purposes is to work in the other directory, and use GIT_DIR to the location of the repo:cd /some/where/elseenv GIT_DIR=/place/with/repo/.git git ...You can even combine them, setting both GIT_DIR and GIT_WORK_TREE.No, but the simplest way to do it is to stash, merge, stage, and unstash:git stash savegit merge-file foo.txt base-foo.txt their-foo.txtgit add foo.txtgit stash popIf you don't want to stash, then you're left with the diff and patch option: save working tree changes to a patch, remove working-tree changes, make necessary changes, and re-apply patchgit diff -p --raw foo.txt > foo.txt.diffgit checkout -- foo.txtgit merge-file foo.txt base-foo.txt their-foo.txtpatch -p1 < foo.txt.diffTo merge the changes in two different files you nave to examine their content: merging changes is working on file contents.  Work on contents is done in work trees. Doing the work somewhere else and pretending it isn't a work tree is just wordplay.If you want to leave your current worktree untouched while doing a merge, then use another worktree.git clone is cheap, it's built for stuff like this:# merge into branch m2 from branch m1 but leave your (non-m2) worktree untouched:git clone --no-checkout -b m2 . ../m2-workcd ../m2-workgit reset    # this will warn about the empty worktree, you could instead do#              git read-tree HEAD to get the same effect without the chattergit merge origin/m1git push origin m2notice the --no-checkout on the clone.  Merge does have to have a worktree to do its work, but it doesn't care about any actual file contents other than the ones that need comparison.A merge in git is a three-way merge between: the source ('remote' or 'theirs', what you want to merge)the destination ('local' or 'ours', which is always the working tree, where HEAD is checked out)the common ancestor (or 'base')See the 'local', 'base', 'remote', 'merged' illustrated in ""git rebase, keeping track of 'local' and 'remote'"".You can see an example in ""git revert does not work as expected"".git read-tree mentioned in ""Subtree Merging"" and ""Git Objects"" (and that you are using in your gist) is about merging trees (for subtree merging), not file content (blob).git write-tree can be use to create tree object, but its documentation does mention ""The index must be in a fully merged state."" (a bit hard when you want to use the index for merging files).The git index (documented here) is there to record what you have staged (the 'merged' result), as part of the merge resolution, from your working tree.It doesn't have all the information about the file content, only pointers (""index entry"") to said content. It is simply not the right structure to do a merge.Even the git-merge-one-file.sh script itself does mention:require_work_treeThe function comes from the git-sh-setup.sh script (see its documentation):test ""$(git rev-parse --is-inside-work-tree 2>/dev/null)"" = true ||die ""fatal: $0 cannot be used without a working tree.""That requirement comes from commit 6aaeca90 (peff Jeff King):The merge-one-file tool predates the invention of GIT_WORK_TREE.For the most part, merge-one-file just works with GIT_WORK_TREE; most of its heavy lifting is done by plumbing commands which do respect GIT_WORK_TREE properly.If you really need to not use the working tree, you can try and go the route chosen for Merging notes:notes-merge.c does creates its own working tree to merge git notes.Jeff King helped me solve the problem and I updated the script to work:https://gist.github.com/cool-RR/6575042#!bashif [ -n ""$2"" ]; then  export SOURCE=$1 ;  export DESTINATION=$2 ;else  export SOURCE=HEAD ;  export DESTINATION=$1 ;fiexport GIT_INDEX_FILE=`git rev-parse --show-toplevel`/.git/aux-merge-index ;export GIT_WORK_TREE=`create_temporary_folder gm_`;echo $GIT_INDEX_FILEtrap 'rm -f '""'$GIT_INDEX_FILE'""'; rm -rf '""'$GIT_WORK_TREE'"" 0 1 2 3 15 ;mkdir $GIT_WORK_TREE/.gitset -e ;git read-tree -im `git merge-base $DESTINATION $SOURCE` $DESTINATION $SOURCE ;#echo Finished read-tree#sleep 1000git merge-index git-merge-one-file -a#echo Finished merge-indexgit write-tree \| xargs -i@ git commit-tree @ -p $DESTINATION -p $SOURCE -m ""Merge $SOURCE into $DESTINATION"" \| xargs git update-ref -m""Merge $SOURCE into $DESTINATION"" refs/heads/$DESTINATION ;exit 0"
"You edited the .gitignore in both branches.  Now, git is unsure of which lines in each copy are the correct ones so it is asking you to resolve them.The lines:<<<<<<< HEADpublic/img/ignore=======Are what appears in the copy of the file in master.And=======public/img/profilespublic/blogpublic/recommendation>>>>>>> newfeaturein the branch newfeatureYou should just have to edit the file as you would like it to appear finally.  Then...git add .gitignoregit commitSimply edit .gitignore file to resolve conflict:Before<<<<<<< HEADpublic/img/ignore=======public/img/profilespublic/blogpublic/recommendation>>>>>>> newfeatureAfterpublic/img/ignorepublic/img/profilespublic/blogpublic/recommendationThen:git add .gitignoregit commitAutogenerated commit message should apear, accept it (save & close) and it's done.What happened is that there was a merge conflict: two branches changed the file ""at the same time"", in distinct streams. You can see the changes other branch has done in ""newfeature"" section and the other in the HEAD section.What you need to do is to edit that file so that it will contain the contents that you want, add that to be followed and then commit that. This is known as a merge commit.Now, what I told above is doing a merge by hand, ""manually"". It is possibly the easiest to understand. You can also use git mergetool command to do that with a visual tool, if configured, or use ""git merge"" with some strategy that will tell it how to handle the conflict.Use git mergetool to resolve the conflict (or just fix it yourself manually; this isn't a particularly hard case to resolve), then re-commit.Fix the conflicts in the .gitignore file, add the updated version and then commit:vim .gitignore# assuming you want all 4 lines: simply remove the conflict markers (<<<<<<, ======, and >>>>>)git add .gitignoregit commitYou should merge your .gitignore by hand, then add it to index by $ git add .gitignoreYou can get the basics of merging here:http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-MergingGit's automatic merge failed. This usually happens when changes occur to the same file at the same time in different branches/repositories when trying to merge branches/push content.The modifications made to .gitignore on the branch newfeature conflits with the one made on master.The line: <<<<<<< HEAD indicates the modifications made on master, which follow this line, while the line >>>>>>> newfeature indicates the modifications made on newfeature, which precede this line. The two modifications are separated by =======.You should edit manually the file and keep/merge what is useful in each of the two parts. Then you should commit (after removing the <<<<HEAD , ===== and >>>newfeature lines)."
"All you should need to do is:# if the file in the right place isn't already checked ingit add <path to desired file># remove the ""both deleted"" file from the indexgit rm --cached ../public/images/originals/dog.aigit commit         # commit the mergeAnother way of dealing with this situation if your files ARE already checked in, and your files have been merged (but not committed, so the merge conflicts are inserted into the file) is to run:git resetThis will switch to HEAD, and tell git to forget any merge conflicts, and leave the working directory as is. Then you can edit the files in question (search for the ""Updated upstream"" notices). Once you've dealt with the conflicts, you can run git add -pwhich will allow you to interactively select which changes you want to add to the index. Once the index looks good (git diff --cached), you can commit, and then git reset --hardto destroy all the unwanted changes in your working directory."
"So the problem here is, that on your current branch (lets call it current), the vendor directory is in .gitignore and is not a part of the repo.However, it is committed in your master branch and thus, your master branch is throwing the error The following untracked working tree files would be overwritten by checkoutThe solution is simple.1) In your branch current, rename your vendor directory to some other directory (say vendor.temp, you can use mv vendor vendor.temp)2) Now do a git checkout master. This won't throw any conflicts this time, since there is no common vendor directory already existing on the branch you are trying to checkout from.3) Now run a git rm -r --cached vendor on your master branch. This will remove the vendor directory from being tracked in your master branch.4) Update the .gitignore file in your master branch to start ignoring vendor directory. Commit corresponding changes5) Decide which vendor directory you need, the vendor directory in branch master, or vendor directory that was there in branch current, and rename/remove files accordingly."
"Looks like hudson git plugin remote windows slave clone post was right. When I go to Manage Hudson > Configure System, in Git > Git executable section, there is error There's no such executable git in PATH. (If takes a few seconds for Hudson to display the error after the page is displayed.) Adding C:\Program Files\Git\bin to path and restarting Hudson solved the problem.It's worth noting that if the cloning process itself has an issue you will also see this problem. I have had issues with one of my boxes failing 4 out of 5 times on the initial clone of a large repository, and hudson kept throwing this error. A good way to verify this is the problem, and it's not Hudson being unable to find the git executable, is to clone the repository into the Hudson workspace manually, and then run a Hudson build: if Hudson is configured properly the build will succeed and report that there are no changes."
"rm .DS_Storegit add -Agit commit -m ""Added .gitignore file""You'll also want to expressly add .DS_Store to your .gitignore so that when .DS_Storeis inevitably created in the future, it won't get in the way of your commits.You probably don't care about .DS_Store.So, try to move it to .DS_Store.bak and pull again"
"The error occurs because there's no branch named master, so git checkout tries to re-interpret it as a path-name instead, and there's no file named master either.You might wonder where branch master went, since git init creates it.  The answer to that is that git init doesn't really create it‰ÛÓat least, not quite.  What git init does with it is the same as what your git checkout -b feat-a does with feat-a: set it up as an ""unborn branch"", so that you're on a branch that doesn't actually exist.It's the first git commit that creates the otherwise-unborn branch.  You were on feat-a when you made that first git commit, so master, which had never really been created, stopped even potentially existing at that point.  (Oops, you didn't make a first commit yet, I somehow conjured one out of thin air.  So feat-a was also unborn, and still is.  Let's pretend, for the rest of the answer, that you did do a git commit to create a first commit.)You can still git checkout -b master, which will create it pointing to the current commit, or git checkout --orphan -b master, which will ""half create"" it as unborn, waiting for a first commit.  The difference between these is that without --orphan, since there's now an existing commit, git can and will fully-create the branch at the current commit.  With --orphan, or in the special case of an empty repository, git won't or can't create a new branch name pointing to an existing commit."
"If master doesn't exist, then after this linegit checkout -b master origin/mastermaster will be a branch pointing to the same commit as origin/master.If you already have a master branch, it might be out of date with origin/master, so simply writinggit checkout masterisn't quite enough. You'll also want to rungit merge origin/masterafterward to bring master up to date (typically this will just be a fast forward)."
"See man git merge (HOW TO RESOLVE CONFLICTS):After seeing a conflict, you can do two things:Decide not to merge. The only clean-ups you need are to reset the index file to the HEAD commit to reverse 2. and to clean up working tree changes made by 2. and 3.; git-reset --hard can be used for this. Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and git add them to the index. Use git commit to seal the deal.And under TRUE MERGE (to see what 2. and 3. refers to):When it is not obvious how to reconcile the changes, the following happens:The HEAD pointer stays the same. The MERGE_HEAD ref is set to point to the other branch head. Paths that merged cleanly are updated both in the index file and in your working tree....So: use git reset --hard if you want to remove the stash changes from your working tree, or git reset if you want to just clean up the index and leave the conflicts in your working tree to merge by hand.Under man git stash (OPTIONS, pop) you can read in addition:Applying the state can fail with conflicts; in this case, it is not removed from the stash list. You need to resolve the conflicts by hand and call git stash drop manually afterwards.I had a similar thing happen to me. I didn't want to stage the files just yet so I added them with git add and then just did git reset. This basically just added and then unstaged my changes but cleared the unmerged paths.Note that Git 2.5 (Q2 2015) a future Git might try to make that scenario impossible.  See commit ed178ef by Jeff King (peff), 22 Apr 2015.(Merged by Junio C Hamano -- gitster -- in commit 05c3967, 19 May 2015)Note: This has been reverted. See below.stash: require a clean index to apply/popProblemIf you have staged contents in your index and run ""stash apply/pop"", we may hit a conflict and put new entries into the index.Recovering to your original state is difficult at that point, because tools like ""git reset --keep"" will blow away anything staged.  In other words:""git stash pop/apply"" forgot to make sure that not just the working tree is clean but also the index is clean.  The latter is important as a stash application can conflict and the index will be used for conflict resolution.SolutionWe can make this safer by refusing to apply when there are staged changes.That means if there were merges before because of applying a stash on modified files (added but not committed), now they would not be any merges because the stash apply/pop would stop immediately with:Cannot apply stash: Your index contains uncommitted changes.Forcing you to commit the changes means that, in case of merges, you can easily restore the initial state( before git stash apply/pop) with a git reset --hard.See commit 1937610 (15 Jun 2015), and commit ed178ef (22 Apr 2015) by Jeff King (peff).(Merged by Junio C Hamano -- gitster -- in commit bfb539b, 24 Jun 2015) That commit was an attempt to improve the safety of applying  a stash, because the application process may create  conflicted index entries, after which it is hard to restore  the original index state.Unfortunately, this hurts some common workflows around ""git stash -k"", like:git add -p       ;# (1) stage set of proposed changesgit stash -k     ;# (2) get rid of everything elsemake test        ;# (3) make sure proposal is reasonablegit stash apply  ;# (4) restore original working treeIf you ""git commit"" between steps (3) and (4), then this  just works. However, if these steps are part of a pre-commit  hook, you don't have that opportunity (you have to restore  the original state regardless of whether the tests passed or  failed).If, like me, what you usually want is to overwrite the contents of the working directory with that of the stashed files, and you still get a conflict, then what you want is to resolve the conflict using git checkout --theirs -- . from the root.After that, you can git reset to bring all the changes from the index to the working directory, since apparently in case of conflict the changes to non-conflicted files stay in the index."
"Don't forget to fetch the origin!!!$ cd /usr/local$ git fetch origin$ git reset --hard origin/masterExplanation, for those interested:What happens is that you are trying to update brew, but brew itself is either not up to date (likely), there is a permissions change via some OS update (also likely), or brew is slightly corrupt (unlikely).  Since brew itself is a git repo, you have to update or reset brew to the master branch version.   brew [by default] is located in the /usr/local folder, so you  Go to that folder [first command] which also should update permissions (if not see below)Fetch the origin [second command] which means to update your LOCAL version of the remote branch of brew  Hard reset [3rd command] based on the REMOTE master branch (which also uses your current permissions).You can also chown the first command if you are in a non sudo or admin profile$ sudo chown -R whoami /usr/local$ cd /usr/local$ git reset --hard origin/master To understand git reset, take a look at this article.I had a similar issue a couple weeks ago trying to update an old homebrew install. Doing this:git reset --hard origin/masterin /usr/local fixed it for me.It seems like other folks have had this issue too.  Have you looked over any of the proposed workarounds here?I'm adding my personal experience, since it seems a little safer than what proposed in 2012:Run brew doctor. If you get the following warning:Warning: The /usr/local directory is not writable.run:sudo chown -R `whoami` /usr/localto fix the permissions problems (as suggested also by Chris Frisina). Eventually run brew doctor again to ensure yourself that the warning is gone.Now, you should have aWarning: You have uncommitted modifications to Homebrewthat may bey solved bycd /usr/local/Library && git stash && git clean -d -fas suggested by Dr.Brew itself. The command stashes the uncommitted modifications so you could go back and recover them if needed. It seemed safer than git reset --hard origin/master to me.If you wish, check the official troubleshooting guide if the steps suggested here and by other SO users does not solve your problem."
"git stash is perfectly legitimate, though as Greg said, for some reason fixing the conflicts can get strange. But they are still fixable, you won't actually fubar anything. The command as I know to re-apply the stash is git stash apply, though pop may be an alternative that I'm not aware of (or it could do something different, I don't know, so you probably want to use apply.) Is there a reason you don't want to commit those changes before merging? Generally that's the right thing to do. Another option is:git stashgit checkout -b newworkgit stash applygit commit ...This creates a new branch, which will allow you to get your master up to date without conflicts, (checkout master again, then pull or fetch + merge).  Then you can merge your branch back with (while still on master)  git merge newwork. You can resolve the conflicts on master, while still retaining the work on newwork without any conflicts.  This is a bit safer if you are worried about conflicts really screwing things up, but generally, conflicts are just part of the process, so don't worry too much about them.It's good practice to always commit any local changes before pulling (merging) new code. If you don't commit, then Git doesn't know how you want to manage your local changes. Merge only with a clean working tree.There may be conflicts in the merge, due to the same files being changed locally and by somebody else. In my experience, resolving conflicts from an actual merge operation is slightly simpler than resolving the same conflict from a stash pop operation.First you should: git checkout -- public_html/sites/filegit checkout -- public_html/sites/file1.txtgit checkout -- public_html/sites/file2.txtNext step: git pull origin masterI have another solution:git reset --hard FETCH_HEADIt works in almost cases."
"Part 1: Getting your push done without worrying about master(Note: actually, it's already done.  See note towards the bottom of part 1.)You're running git push with no additional arguments.If you run git push with two more arguments, they specify exactly what to push where.  The git documents call these the <repository> and the <refspec>.In your case, the repository is always origin (which is the usual standard one git sets up when you clone something).  So the refspec is the more interesting part.Here's the long1 form:git push origin feature/mybranch:feature/mybranchThis limits git to only attempting to push your branch feature/mybranch, telling the remote, origin, that it should update the branch feature/mybranch on its side too.If you leave out the :<same-name> part, the default is to use the branch name on the left of the colon, so:git push origin feature/mybranchdoes exactly the same thing, with a bit less command-typing.Now, what happens when you leave out the <refspec>?  The answer is in the git push and git config documentation, although in my 1.8.4.3 text version it's really hard to read, and the on-line version I linked to above is, if anything, worse: :-)When the command line does not specify what to push with <refspec>...         arguments or --all, --mirror, --tags options, the command finds the         default  by consulting remote.*.push configuration, and if it         is not found, honors push.default configuration to decide what to push         (See gitlink:git-config[1] for the meaning of push.default).To simplify this a lot, I can tell2 that you have not set either remote.origin.push or push.default, so you're getting the ""default default"", which is called matching, which means your git push calls up origin on the metaphorical Internet-phone and saysHey, what branches do ya got?and it says:I have master and feature/mybranch.So your git then says:OK, well, here's what I think master should be, and here's what I think feature/mybranch should be.To which he says:Whoa there buddy, that would set master back a couple of revs!... and that's when you got the ! [rejected]        master -> master (non-fast-forward) thing.So, there's a couple of really simple solutions.Solution #0: do nothingIf you still have the original push output available, you should be able to see something like this:   a430f6d..676699a  feature/mybranch -> feature/mybranch ! [rejected]        master -> master (non-fast-forward)This means that even though the change for master -> master was rejected, the change for feature/mybranch -> feature/mybranch was accepted.  The branch you wanted to push, you did!  You just got this annoying error message to go with the success (and now you're wondering what to do with branch master).Solution #1: be explicit in the pushIf you run:git push origin feature/mybranchyour git and origin's git will have a shorter conversation.  Instead of your git asking him ""hey, whaddaya got there?"" and then trying to push all ""matching"" branches, yours will just say: ""I have some updates for feature/mybranch"".  The fact that you're behind on master will be irrelevant; neither you, nor your git, nor the remote git will look there.Solution #2: change your push.defaultThis only works if your git is new enough, although by now, most are:git config --global push.default simpleThe git folks are planning to change the ""default default"", because matching turns out to be more annoying than helpful, a lot of the time.  The new ""default default"" will be simple.  (For details on what this means, the git config documentation.)(Setting the --global version will change the default default for you, but not for other people.  If any repositories‰ÛÓyour own, or others‰ÛÓhave a local push.default setting, that will override your personal global setting, but for those that don't, your global setting is the one git will use.  You can choose instead to set the local setting in each repo, which will affect you and anyone else who uses your own repos, but then you need to remember to set it in all your repos.)1Actually this is only the semi-long form: you can add refs/heads/ in front of each branch name to make it even longer.  That's just for showing off though. :-)2I'm just guessing, really, but it's a pretty safe bet.  Someone who configures remote.origin.push and push.default probably already knows all of this stuff.Part 2: Why won't master update?I'm much less sure about this, but it looks as though someone had accidentally committed a bunch of (17) .java binaries into the master branch, probably from not having a correct .gitignore.At some point they noticed, oops, didn't want all these binaries!  So they updated .gitignore and committed that, but probably didn't actually git rm --cached all of them, so some are still being tracked.  If a file that is now listed as ignored was previously committed, git ""obeys the commit"" rather than the ignore directive, and you get a lot of this:# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   bin/b1Depending on how you git add and what's in the .gitignore it's possible to add the in-repository tracked files (that are overriding the ignore entry), and make them ""staged for commit"" and commit them.In any case, your master is two revs behind, and definitely has some binaries in it‰ÛÓand it's possible that your feature/mybranch branch has a ""bad"" .gitignore (some variation on it) that also does not ignore the ""right set"" of binaries.Git notices that 7 of your binaries (perhaps re-built with your feature branch features) don't match what's checked in on the master branch.  These would be ""unsafely"" clobbered (at least, as far as git can tell).  If/when you do git checkout -f master (or something equivalent), git clobbers them after all, but you are still left with ""untracked"" files, implying a bad .gitignore.Once you're quite certain that it's safe to clobber anything in your work-tree‰ÛÓthat you have all your work saved away‰ÛÓyou can do this to resync your master to origin/master:git checkout -f mastergit fetch   # resync with origin in case they've fixed more stuffgit reset --hard origin/masterAssuming you don't want binaries in the branches, check over the various .gitignore files and make sure they're correct‰ÛÓyou'll probably need to fix some.  Then, use git ls-files and/or git ls-tree to see what's in the index and repo (git ls-tree requires that you specify a particular tree object, e.g., git ls-files HEAD:bin to see what's in the bin tree, if it exists).To remove committed (even though ignored) files, e.g., to remove everything in bin:git rm --cached -r bin(the --cached says only remove things in the index), or you can allow git to remove the binaries.  Once you have the right stuff ""git rm""-ed and any updated .gitignore files added, git commit the changes:$ cat bin/.gitignore*!.gitignore$ git status# On branch master# Changes to be committed:#   (use ""git reset HEAD <file>..."" to unstage)##   new file:   bin/.gitignore#   deleted:    bin/b1#   deleted:    bin/b2#$ git commit -m 'remove binaries, ignore them in the future'[master ac60888] remove binaries, ignore them in the future 3 files changed, 1 insertion(+) create mode 100644 bin/.gitignore delete mode 100644 bin/b1 delete mode 100644 bin/b2(Finally, rebuild any removed binaries as needed, run tests, do a push if appropriate, etc.)(It's possible that you do want the .java binaries in the branches, or that you don't and yet no one has fixed up any .gitignore entries, etc.; so that's why I'm much less sure about this.)check your master git diffif there no changes, still you get a same problem check for un tracked files  add files and stash taht files after that pull your original master and try to push againYour first git push failed because your master is behind origin/master, so it cannot be pushed safely. The error message explained this.Then after git checkout master the git pull didn't work because you had pending changes that would conflict with the incoming changes from origin/master. You must have had these pending changes before you switched the branch with git checkout master. As the error message suggests, you should either commit these changes, or stash them. A third option is to discard them, which you did with git checkout -fSince you did git checkout -f, there should be no more pending changes and git pull would work, unless you have staged changes. If you have staged changes, and you're sure you don't need them, you should get rid of them too, with git reset or git reset --hard. But be careful, those changes will be completely lost."
"From your description, it looks like you're pushing into a remote repository that is set up to check out the files to a local working directory and the permissions in that directory don't allow the checkout. If that is the case, a well-placed chmod command should do the trick (something like chmod -R u+w * run with the user credentials)"
"You should setup a ssh trust relationship between your repo and the git server.You only need to do this once.In short it goes qs follows :Log in as the user running hudsonssh-keygenuse an empty passwordThis creates 2 files in .ssh : id_dsa and id_dsa.pub.cat .ssh/id_dsa.pubNow copy the gibberish representing the public key.ssh repo-serverConfirm you want to add the host key to known_hosts. Log in using the account accessing the repo.cat - >>.ssh/authorized_keys(double check you have 2 >'s or risk the wrath of your colleagues)Then paste the gibberish you just copied.Log out and verify you can now ssh without having to provide a password.This works for Unix based hosts. For github, gitosis, windows the process is similar, but of course different.Hudson should now be able to connect."
"Looks like you have a corrupt tree object. You will need to get that object from someone else. Hopefully they will have an uncorrupted version.You could actually reconstruct it if you can't find a valid version from someone else by guessing at what files should be there. You may want to see if the dates & times of the objects match up to it. Those could be the related blobs. You could infer the structure of the tree object from those objects.Take a look at Scott Chacon's Git Screencasts regarding git internals. This will show you how git works under the hood and how to go about doing this detective work if you are really stuck and can't get that object from someone else.I had the same problem (don't know why).This fix requires access to an uncorrupted remote copy of the repository, and will keep your locally working copy intact, but you will lose the record of any commits that were not pushed, and will have to recommit them.  You will also lose any stashes.Execute these commands from the parent directory above your repo (replace 'foo' with the name of your project folder):Create a backup of the corrupt directory:cp -R foo foo-backupMake a new clone of the remote repository to a new directory:git clone git@www.mydomain.de:foo foo-newcloneDelete the corrupt .git subdirectory:rm -rf foo/.gitMove the newly cloned .git subdirectory into foo:mv foo-newclone/.git fooDelete the rest of the temporary new clone:rm -rf foo-newcloneOn Windows you will need to use:copy instead of cp -R rmdir /S instead of rm -rfmove instead of mvNow foo has its original .git subdirectory back, but all the local changes are still there. git status, commit, pull, push, etc. work again as they should.Your best bet is probably to simply re-clone from the remote repo (ie. Github or other).  Unfortunately you will lose any unpushed commits and stashed changes, however your working copy should remain intact.First make a backup copy of your local files.  Then do this from the root of your working tree:rm -fr .gitgit initgit remote add origin [your-git-remote-url]git fetchgit reset --mixed origin/mastergit branch --set-upstream-to=origin/master master  Then commit any changed files as necessary.Trygit stashThis worked for me.  It stashes anything you haven't committed and that got around the problem.I ran into this problem after my computer crashed while I was writing a commit message. After rebooting, the working tree was as I had left it and I was able to successfully commit my changes.However, when I tried to run git status I got thiserror: object file .git/objects/xx/12345 is emptyfatal: loose object xx12345 (stored in .git/objects/xx/12345 is corruptIn my case, unlike most of the other answers, I wasn't trying to recover any data. I just needed Git to stop complaining about the empty object file.tl;drThe ""object file"" is git's hashed representation of a real file that you care about. Git thinks it should have a hashed version of some/file.whatever stored in .git/object/xx/12345, and fixing the error turned out to be mostly a matter of figuring out which file the ""loose object"" was supposed to represent.DetailsPossible options seemed to beDelete the empty fileGet the file into a state acceptable to GitRestore the entire computer from a backup and redo the work. This would have taken about 90 minutes. In the end, I spent over 2 hours trying out solutions 1 and 2, so maybe that's what I should have done.Approach 1: Remove the object fileThe first thing I tried was just moving the object filemv .git/objects/xx/12345 ..That didn't work - git began complaining about a broken link. On to Approach 2Approach 2: Fix the fileLinus Torvalds has a great writeup of how to recover an object file that solved the problem for me. Key steps are summarized here.$> # Find out which file the blob object refers to$> git fsckbroken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8           to    blob xx12345missing blob xx12345$> git ls-tree 2d926...10064 blob xx12345  your_file.whateverThis tells you what file the empty object is supposed to be a hash of. Now you can repair it.$> git hash-object -w path/to/your_file.whateverAfter doing this I checked .git/objects/xx/12345, it was no longer empty, and git stopped complaining.I got this error after my (windows) machine decided to reboot itself.Thankfully my remote repo was up to date so I just did a fresh git-clone..In answer of @user1055643 missing the last step:$ rm -fr .git$ git init$ git remote add origin your-git-remote-url$ git fetch$ git reset --hard origin/master$ git branch --set-upstream-to=origin/master masterI just experienced this - my machine crashed whilst writing to the Git repo, and it became corrupted. I fixed it as follows.I started with looking at how many commits I had not pushed to the remote repo, thus:gitk &If you don't use this tool it is very handy - available on all operating systems as far as I know. This indicated that my remote was missing two commits. I therefore clicked on the label indicating the latest remote commit (usually this will be /remotes/origin/master) to get the hash (the hash is 40 chars long, but for brevity I am using 10 here - this usually works anyway).Here it is:14c0fcc9b3I then click on the following commit (i.e. the first one that the remote does not have) and get the hash there:04d44c3298I then use both of these to make a patch for this commit:git diff 14c0fcc9b3 04d44c3298 > 1.patchI then did likewise with the other missing commit, i.e. I used the hash of the commit before and the hash of the commit itself:git diff 04d44c3298 fc1d4b0df7 > 2.patchI then moved to a new directory, cloned the repo from the remote:git clone git@github.com:username/repo.gitI then moved the patch files into the new folder, and applied them and committed them with their exact commit messages (these can be pasted from git log or the gitk window):patch -p1 < 1.patchgit commitpatch -p1 < 2.patchgit commitThis restored things for me (and note there's probably a faster way to do it for a large number of commits). However I was keen to see if the tree in the corrupted repo can be repaired, and the answer is it can. With a repaired repo available as above, run this command in the broken folder:git fsck You will get something like this:error: object file .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390d is emptyerror: unable to find ca539ed815fefdbbbfae6e8d0c0b3dbbe093390derror: sha1 mismatch ca539ed815fefdbbbfae6e8d0c0b3dbbe093390dTo do the repair, I would do this in the broken folder:rm .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390dcp ../good-repo/.git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390d .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390di.e. remove the corrupted file and replace it with a good one. You may have to do this several times. Finally there will be a point where you can run fsck without errors. You will probably have ""dangling commit"" and ""dangling blob"" lines in the report, these are a consequence of your rebases and amends in this folder, and are OK. The garbage collector will remove them in due course.Thus (at least in my case) a corrupted tree does not mean unpushed commits are lost.I had this same problem in my bare remote git repo. After much troubleshooting, I figured out one of my coworkers had made a commit in which some files in .git/objects had permissions of 440 (r--r-----) instead of 444 (r--r--r--). After asking the coworker to change the permissions with ""chmod 444 -R objects"" inside the bare git repo, the problem was fixed.Runnning git stash; git stash pop fixed my problemI followed many of the other steps here; Linus' description of how to look at the git tree/objects and find what's missing was especially helpful. git-git recover corrupted blobBut in the end, for me, I had loose/corrupt tree objects caused by a partial disk failure, and tree objects are not so easily recovered/not covered by that doc.In the end, I moved the conflicting objects/<ha>/<hash> out of the way, and used git unpack-objects with a pack file from a reasonably up to date clone. It was able to restore the missing tree objects.Still left me with a lot of dangling blobs, which can be a side effect of unpacking previously archived stuff, and addressed in other questions hereI was getting a corrupt loose object error as well../objects/x/xI successfully fixed it by going into the directory of the corrupt object. I saw that the users assigned to that object was not my git user's. I don't know how it happened, but I ran a chown git:git on that file and then it worked again.This may be a potential fix for some peoples' issues but not necessary all of them."
"After some research i guess the following happened. Your workmate changed the lineendings which caused the first pull-conflict.That's why you stashed your work, pulled the stuff (now without problems) and started to apply the stash again.With invoking git stash apply git starts a recursive merge in of your stashed changes.The error-message just tells you ran into a merge-conflict. According to the developer's stash-documentation this may be resolved by a git stash drop after resolving the conflicts:""Applying the [stash] can fail with conflicts; in this case, it is not  removed from the stash list. You need to resolve the conflicts by hand  and call git stash drop manually afterwards.""Conclusion: If the configuration of the line-endings must be done in a existing project it seems to be best practise to do so by using a .gitattributes in your project-folder. Since it gets distributed with your line-ending-change-commit, it will avoid the headaches switching your current work to the new normalization-standard.Changing line endings within projects & .gitattributesAccording to the developers documentation of .gitattributes you can change the line-endings for all files (in the active branch) with the following steps:$ echo ""<<filepattern>> eol=lf"" >>.gitattributes$ rm .git/index     # Remove the index to force Git to$ git reset         # re-scan the working directory$ git status        # Show files that will be normalized$ git add -u$ git add .gitattributes$ git commit -m ""Introduce end-of-line normalization""Replace <<filepattern>> with a pattern that matches your source files - in your case *.py for python-files (a good pattern-explanation is given in this .gitignore-description).If you have more than one filepattern to add, you may add several line-ending-definitions to the .gitattributes.Attention: Since the second step requires to delete the .git/index (which is branch-specific) this must be done in every single branch you'd like to keep.If you have many branches to process, you might consider writing a short script iterating through your git branches.The best way to reset your local module is to use git clean -f -x -dThis effectively removes all untracked changes to your local module and puts it back in a 'vanilla' state.-f clean files.-x clean files normally ignored by .gitignore.-d clean directories.Now run git reset --hard origin/<BRANCH_NAME>. This will reset your branch to the state of the remote.git status at this point should tell you:# On branch masternothing to commit (working directory clean)If you have your actual changes stashed you should then be able to git stash apply to put them back correctly.If git stash show stash@{0} shows more changes than you expected you can just apply the ones you want to see with git checkout stash@{0} -- <filename>.Hope this helps"
"It appears you have created a local .gitignore file but have not commited it to the repository and the remote you are attempting to interact with (pull/push) now has a .gitignore. This would be the case for any file in your repo when this happensSince .gitignore is not just any file, it affects the way git behaves, I would compare the two manually, create a file that is a union of the two, commit it and then merge, fixing any formatting issues that might exist. These could be the exact same file, but git wouldn't know because you haven't added it locally. This isn't a file you want to be changing often because it can make checkouts behave differently.Github maintains a list of useful .gitignore templates for most languages."
"I had to open up the .git/config file and delete all the branches and tags entries under the svn-remote section and run the 'git svn clone' command for this error to go away. Apparently, if I run this command multiple times (usually stop and re-start from a revision), the branch/tag entries get added to the config file instead of being reused, which causes the error.Your subversion repository does not have a standard trunk/branches/tags structure. Specify the alternate places for where you branched by using the --branch, --tag, --trunk options.To fix your problems you have to convert the imported remote branches and tags to local ones.Section from Scott Chacone (PRO GIT):Original link: http://progit.org/book/ch8-2.html: To move the tags to be proper Git tags, run$ cp -Rf .git/refs/remotes/tags/* .git/refs/tags/$ rm -Rf .git/refs/remotes/tagsThis takes the references that were remote branches that started with tag/ and makes them real (lightweight) tags.Next, move the rest of the references under refs/remotes to be local branches:$ cp -Rf .git/refs/remotes/* .git/refs/heads/$ rm -Rf .git/refs/remotesThis worked for me perfectly.I was following some svn to git instructions when I ran into the same error message. The error occurred when I ran this command: git svn clone file:///pathto/repo /pathto/new-git-repo ‰ÛÒ-no-metadata -A authors.txt -t tags -b branches -T trunkAfter the error occurred, I edited the .git/config-file as follows:tags = tags/*:refs/remotes/svn/tags/*branches = branches/*:refs/remotes/svn/*->tags = tags/*:refs/remotes/svn/tags/*branches = branches/*:refs/remotes/svn/branches/*I.e., I just formatted the ""braches"" line to be similar to the ""tags"" line.Then I ran the command again. The process produced a valid git repo with remote branches.It seems svn2git doesn't pass the branch configuration correctly. I had the standard layout but the error occurred. I fixed it with passing the defaults for the layout again:$ svn2git http://repos --branches branches --tags tags --trunk trunkThen it worked as expected."
"It's because .gitignore isn't in your current branch (it's untracked), but it's in the branch you're trying to merge. Add the .gitignore file in question and commit, then try the merge again; or delete the .gitignore file if you don't need it and are happy with the one in the other branch.Note: mipadi (author of the accepted answer) also mentioned this error message in the context of case conflicts between filenames on different branches.If cleaning the untracked files is a valid option, then the extreme solution is mentioned in this answer (a git clean -f -d would remove all untracked files and directories).In your case, that could be overkill (or dangerous).Another original solution:git checkout -f admin_playground # will overwrite filesgit checkout yourBranch # get back where you where when trying the mergegit merge admin_playgroundThis forced git to go ahead and overwrite the files.  I assume you could have used the '-f' option with merge also, but switching to the other branch and then back fixed the issue and I was able to merge without any trouble the next time.Note: there is actually no '-f' option on git merge."
"I have not seen that exact error before. But I have a guess about the trouble you are encountering. It looks like because the master and one.one branches of supery contain different refs for the subby submodule, when you merge changes from master git does not know which ref - v1.0 or v1.1 - should be kept and tracked by the one.one branch of supery.If that is the case, then you need to select the ref that you want and commit that change to resolve the conflict. Which is exactly what you are doing with the reset command.This is a tricky aspect of tracking different versions of a submodule in different branches of your project. But the submodule ref is just like any other component of your project. If the two different branches continue to track the same respective submodule refs after successive merges, then git should be able to work out the pattern without raising merge conflicts in future merges. On the other hand you if switch submodule refs frequently you may have to put up with a lot of conflict resolving.Well, its not technically managing conflicts with submodules (ie: keep this but not that), but I found a way to continue working...and all I had to do was pay attention to my git status output and reset the submodules:git reset HEAD subbygit commitThat would reset the submodule to the pre-pull commit. Which in this case is exactly what I wanted. And in other cases where I need the changes applied to the submodule, I'll handle those with the standard submodule workflows (checkout master, pull down the desired tag, etc).First, find the hash you want to your submodule to reference.  then run~/supery/subby $ git co hashpointerhere~/supery/subby $ cd ../~/supery $ git add subby~/supery $ git commit -m 'updated subby reference'that has worked for me to get my submodule to the correct hash reference and continue on with my work without getting any further conflicts.I struggled a bit with the answers on this question and didn't have much luck with the answers in a similar SO post either. So this is what worked for me - bearing in mind that in my case, the submodule was maintained by a different team, so the conflict came from different submodule versions in master and my local branch of the project I was working on:Run git status - make a note of the submodule folder with conflictsReset the submodule to the version that was last committed in the current branch:git reset HEAD path/to/submoduleAt this point, you have a conflict-free version of your submodule which you can now update to the latest version in the submodule's repository:cd path/to/submodulegit submodule foreach git pull origin SUBMODULE-BRANCH-NAMEAnd now you can commit that and get back to work."
"This can cause the remote repository to lose commits; use it with care.If you do not wish to merge the remote branch into your local branch (see differences with git diff), and want to do a force push, use the push command with -fgit push -f origin <branch>where origin is the name of your remote repo.Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. This can cause the remote repository to lose commits; use it with care.As the message tells you,Merge the remote changes (e.g. 'git pull')Use git pull to pull the latest changes from the remote repository to your local repository. In this case, pulling changes will require a merge because you have made changes to your local repository. I'll provide an example and a picture to explain. Let's assume your last pull from origin/branch was at Commit B. You have completed and committed some work (Commit C). At the same time, someone else has completed their work and pushed it to origin/branch (Commit D). There will need to be a merge between these two branches.local branch:                         --- Commit C                                     /                                   /                                  /origin/branch: Commit A ------ Commit B ---- Commit DBecause you are the one that wants to push, Git forces you to perform the merge. To do so, you must first pull the changes from origin/branch.local branch:                         --- Commit C -- Commit E                                    /               /                                              /               /                                               /               /               origin/branch: Commit A ------ Commit B ---- Commit D After completing the merge, you will now be allowed to fast-forward origin/branch to Commit E by pushing your changes.         Git requires that you handle merges yourself, because a merge may lead to conflicts.Have you updated your code before pushing?Use git pull origin master before you push anything.I assume that you are using origin as a name for your remote.You need to pull before push, to make your local repository up-to-date before you push something (just in case someone else has already updated code on github.com). This helps in resolving conflicts locally.This normally happens when you git commit and try to git push changes before git pulling on that branch x.The normal flow would be as below, STEP 1: git stash your local changes on that branch.STEP 2: git pull origin branch_name -v to pull and merge to locally commited changes on that branch, give the merge some message, and fix conflicts if any.STEP 3: git stash pop the stashed changes.STEP 4: git push origin branch_name -v the merged changes.Replace branch_name with master (for master branch).Some of you may be getting this error because Git doesn't know which branch you're trying to push.If your error message also includeserror: failed to push some refs to 'git@github.com:jkubicek/my_proj.git'hint: Updates were rejected because a pushed branch tip is behind its remotehint: counterpart. If you did not intend to push that branch, you may want tohint: specify branches to push or set the 'push.default' configurationhint: variable to 'current' or 'upstream' to push only the current branch.then you may want to follow the handy tips from Jim Kubicek, Configure Git to Only Push Current Branch, to set the default branch to current.git config --global push.default currentSometimes we forgot the pulling and did lots of works in the local environment.If someone want to push without pull,git push --forceis working. This is not recommended when working with other people, but when your work is a simple thing or a personal toy project, it will be a quick solution.I mentioned this in my tutorial, How To Use GitHub: A tutorial for beginners.When you create a new repository on GitHub, GitHub may ask you to create a readme file. If you create a readme file directly on GitHub, then you will need to first make a ‰Û÷pull‰Ûª request before the ‰Û÷push‰Ûª request will be successful.These commands will ‰Û÷pull‰Ûª the remote repository, merge it with your current files, and then ‰Û÷push‰Ûª all the files back to GitHub:git pull https://github.com/thomas07vt/MyFirstRepo.git mastergit push https://github.com/thomas07vt/MyFirstRepo.git masterI was getting a similar error while pushing the latest changes to a bare Git repository which I use for gitweb. In my case I didn't make any changes in the bare repository, so I simply deleted my bare repository and cloned again:git clone --bare <source repo path> <target bare repo path>Just had the same issue but in my case I had typed the wrong branch on the remote.  So, it seems that is another source of this issue... double check you're pushing to the correct branch.I experienced the very same problem and it turned out I was on a different (local) branch than I thought I was AND the correct local branch was behind in commits from remote.My solution: checkout the correct branch, cherry-pick the commit from the other local branch, git pull and git pushIs your branch name the same as the remote branch name?If no, you should checkout a new branch with the same name as the remote branch and try push it again.Assume the remote branch you want to push is [testing] and your local branch is named as [test].If you`re not in test branch, first switch to it.git checkout testThen open a new branch and name it testing.git checkout -b testingNow, it`s time to push it:git push [remote repo] testingIn my case, I had ""mybranch"" checked out, and had done git pull, so I couldn't figure out why the push wasn't working. Eventually, I realized that I was pushing the wrong branch. I was typing git push origin master instead of git push origin mybranch.So if you've already done git pull and still getting this message, make sure you're pushing the correct branch.Another solution is to advance the head of the remote by making another commit if you can. After you pull this advanced head into the local subtree then you will be able to push from it again."
"There are some details missing from the question, but I'll attempt to answer anyways. First of all, if you both have your own copies of the repo, then you both should be able to commit changes to your own local copies.If your friend is trying to push his changes to your local repo, it sounds like it's not working because you currently have master checked out, which would make sense as a safety feature...you wouldn't want to have Git silently swap out your working copy from right under your nose without warning. You can allow Git to move your master branch/reference/label/pointer by checking out the commit it's on directly:$ git checkout headThen your friend would probably be able to push his changes to your repo.  After he's done, be sure to checkout the master branch again in your local repo (if you want to work on it):$ git checkout masterHowever, people don't usually push changes to other people's personal/private repos. They usually send each other pull requests instead, and fetch each other's changes. So you could add your friend's remote and fetch his changes and then merge them in (or pull to do both):$ git add <friend name> <url or path to friend remote>$ git fetch <friend remote>$ git merge <friend>/master# Or combine fetch and merge using pull$ git pull <friend> masterAlternatively, instead of fetching and merging (or pulling) your friend's changes into your local master branch, you can rebase your local changes on top of his changes:$ git fetch <friend remote>$ git rebase <friend>/master masterJust don't use push. Add each other as remote and use git fetch/merge, cherry-pick, rebase or whatever you find appropriate to pull in each others contributions.@cupcake's answer is fine, but there is nothing overkill about setting up a bare repo on your machine which acts as a central remote repository for both you and your friend. It's actually a lot simpler and makes life easier once its setup:Prepare your new bare repositorymkdir newrepocd newrepogit init --bareBack to your existing repo:git remote add new_repo_alias /path/to/newrepogit push new_repo_alias somethingYour friend does the same using ssh://..., but you have already figured out that part.easy!"
"git clone will not look at your pack.packSizeLimit setting, it'll anyway transfer everything in a single pack - unless it changed since the last time I looked.Using SCP or Rsync might be a way to work around your issue indeed. Removing the ""useless"" large files, then repacking the repository you try to clone could also help.Giving more RAM to the VM might also help - I don't think you'll need a 64-bits address space to allocate 900MB... You could also give it enough SWAP space to handle the 900MB package instead of increasing the RAM."
"I know your question was specific to merge, but I've had similar problems with merging git submodules. I think this solution will work with your problem, even if it's not directly addressing the merge question. I've found that by forcibly checking out the branch you want to merge, then going back to master, everything works out with submodules. To get things working in your example: $ git clone https://github.com/ghewgill/q14224966.git$ cd q14224966$ git submodule init$ git submodule update$ git checkout -f origin/branch$ git checkout master$ git merge origin/branchThis works because it's basically doing your rm -rf step for you. Granted, this is a bit roundabout, and maybe not worth doing if you only have the one submodule like your example does. But I've found it to be quite the timesaver when working in a project with many submodules. Also, as has been pointed out in the comments, if you want to avoid making changes to the work tree, you can use this: $ git clone https://github.com/ghewgill/q14224966.git$ cd q14224966$ git submodule init$ git submodule update$ git reset origin/branch$ git reset --hard masterThis works in roughly the same way, but avoids checking out other files in the process. I haven't had a chance to use this in the wild, but it seems like a sound method. There's also $ git merge -s subtree origin/branch. It works with your example, but I've had unexpected results with it when more than one submodule is involved. You might have better luck, though.You can't get git-merge (or any other command) to forcibly clobber files it doesn't think it knows about, no.  git tries pretty hard not to do anything totally irreversible.But with many submodules, you can make your deletion a bit easier and safer with git submodule foreach:$ git submodule foreach 'rm -rf $toplevel/$path'Entering 'sub'$ git merge origin/branchUpdating a231acd..6b4d2f4Fast-forward...(Caveat: I've never worked with subtrees and I don't know how complicated your actual repo is, so these solutions may not actually work for you.)From playing around with your sample repo, I've found two solutions that both seems to work, though they produce different commit trees:Use git merge -s resolve origin/branch~/q14224966[master]> git reset --hard origin/masterHEAD is now at a231acd add submodule~/q14224966[master]> touch other.c && git add . && git commit -m ""New commit.""[master bc771ac] New commit. 0 files changed create mode 100644 other.c~/q14224966[master]> git merge -s resolve origin/branch Trying really trivial in-index merge...error: Merge requires file-level mergingNope.Trying simple merge.Simple merge failed, trying Automatic merge.Adding sub/MakefileAdding sub/READMEAdding sub/src/main.cMerge made by the 'resolve' strategy. .gitmodules    | 3 --- sub            | 1 - sub/Makefile   | 1 + sub/README     | 1 + sub/src/main.c | 1 + 5 files changed, 3 insertions(+), 4 deletions(-) delete mode 160000 sub create mode 100644 sub/Makefile create mode 100644 sub/README create mode 100644 sub/src/main.c~/q14224966[master]> lsREADME   main.c   other.c  sub/~/q14224966[master]> cd sub/~/q14224966/sub[master]> lsMakefile  README    src/~/q14224966/sub[master]> git status# On branch master# Your branch is ahead of 'origin/master' by 5 commits.#nothing to commit (working directory clean)~/q14224966/sub[master]> cd ..~/q14224966[master]> git status# On branch master# Your branch is ahead of 'origin/master' by 5 commits.#nothing to commit (working directory clean)Here's the resulting commit tree: Use a rebase instead of a merge:~/q14224966[master]> git reset --hard origin/master HEAD is now at a231acd add submodule~/q14224966[master]> touch other.c && git add . && git commit -m ""New commit.""[master ae66060] New commit. 0 files changed create mode 100644 other.c~/q14224966[master]> git rebase origin/branch First, rewinding head to replay your work on top of it...Applying: New commit.~/q14224966[master]> lsREADME   main.c   other.c  sub/~/q14224966[master]> cd sub/~/q14224966/sub[master]> lsMakefile  README    src/~/q14224966/sub[master]> git status# On branch master# Your branch is ahead of 'origin/master' by 4 commits.#nothing to commit (working directory clean)~/q14224966/sub[master]> cd ..~/q14224966[master]> git status# On branch master# Your branch is ahead of 'origin/master' by 4 commits.#nothing to commit (working directory clean)Here's the resulting commit tree:"
"It's quite simple, if you have changes in a file which will be modified if you change to a specific branch.Example:$ git initInitialized empty Git repository in /tmp/asadfasd/.git/$ echo 1 > bar$ git commit -am ""commit 1 master""[master (root-commit) 55da003] commit 1 1 files changed, 1 insertions(+), 0 deletions(-) create mode 100644 bar$ git co -b testbranchSwitched to a new branch 'testbranch'$ git co masterSwitched to branch 'master'$ echo 2 >> bar$ git commit -am ""commit 2 master""[master c6dc6d9] commit 2 master 1 files changed, 1 insertions(+), 0 deletions(-)$ git co testbranchSwitched to branch 'testbranch'$ echo 3 >> bar$ git co mastererror: Your local changes to the following files would be overwritten by checkout:barPlease, commit your changes or stash them before you can switch branches.AbortingIf you would rebase testbranch on master before modifying the file it would work because the file wouldn't be modified.Another way to put it, if the branches are diverged and you modify the diverged files it won't work.When master and test HEAD are same, local changes in test are applied to master when you switch back.If however they are not, say you had an extra commit in master after you created test or an extra commit in test, you will get the warning.( just remembered that I had answered this before - pasting my old answer here and voting to close this question  as duplicate)When you are switching branch and the  files are only locally modified, Git  will not give you the warning /  message ( and will merge the changes  into the other branch). For example,  you have your repo on master, create a  branch temp, have a local modification  on the file. Now, when you switch to  master you won't get the message. If  on the other hand you makes changes in  temp and commit them ( that is temp  diverges from master ) and then you  have local modifications, it will give  you that message when you switch to  masterGit branches behaving strangely"
"Your file .idea/workspace.xml is not under git version control. You have either not added it yet (check git status/Untracked files) or ignored it (using .gitignore or .git/info/exclude files)You can verify it using following git command, that lists all ignored files:git ls-files --others -i --exclude-standard"
"The message basically means that the listed files are now untracked, but the branch you are checking out has them tracked. In result this would remove your local (untracked) version of those files, and replace them by whatever is stored in the branch you are checking out.The reason for this is that you removed the folder from the repository but the files are still there; git rm --cached will only remove the files from the index, but not delete the files physically. So when you check out a different version, which still tracks those files, you get the conflict.If you want to delete the files anyway, you can just remove them directly (rm <file>). Then after checking out the different branch, of course that one will still bring those files over, so you might want to remove them on that branch too (or later merge the removal into that branch)."
"git clone does provide a exit code you can read with $? like follows:git clone user@server:repoecho $?This will print 0 if everything worked just fine. If for example the folder is not a git repository you will get the exit code 128.you can check if the clone worked as follows:git clone user@server:repo localrepo --quietsuccess=$?if [[ $success -eq 0 ]];then    echo ""Repository successfully cloned.""else    echo ""Something went wrong!""fi--quietwill suppress any output from git, as long as there are no errors. So if you just remove the else-branch you will get you positive output or the error produced by git.git clone user@server:repo localrepo > git.log 2>&1if [[ $? eq 0 ]];then   echo Repository successfully cloned.else   cat git.log   echo Repository cloning failed.firm git.logExplanation:git clone user@server:repo localrepo > git.log 2>&1Redirects stdout and stderr streams to git.log.  > git.log redirects stdout to git.log  2>&1 redirects stderr to the same place as stdout(thus, git.log).$? eq 0   Checks the retcode of git which should be 0 if the clone was successful.cat git.log outputs the contents of the git.log file."
"Bus error indicates a memory problem; it could be as simple as a corrupted file on disk, a bug in the git program, or failing memory, memory controller, etc.If you can run a memory testing tool on your computer overnight, that would help rule out failing memory and controller. (You might also spot them with odd SIGBUS or SIGSEGV during large compiles, or random crashes of other programs...)Can you re-create the repository on the server from your laptop's clone, and see if it functions correctly? My guess is the repository is corrupted, and needs to be replaced with a good clone."
"Okay, first a few terms slightly oversimplified. In git, a tag (like many other things) is what's called a treeish. It's a way of referring to a point in in the history of the project. Treeishes can be a tag, a commit, a date specifier, an ordinal specifier or many other things. Now a branch is just like a tag but is movable. When you are ""on"" a branch and make a commit, the branch is moved to the new commit you made indicating it's current position. Your HEAD is pointer to a branch which is considered ""current"". Usually when you clone a repository, HEAD will point to master which in turn will point to a commit. When you then do something like git checkout experimental, you switch the HEAD to point to the experimental branch which might point to a different commit. Now the explanation.When you do a git checkout v2.0, you are switching to a commit that is not pointed to by a branch. The HEAD is now ""detached"" and not pointing to a branch. If you decide to make a commit now (as you may), there's no branch pointer to update to track this commit. Switching back to another commit will make you lose this new commit you've made. That's what the message is telling you. Usually, what you can do is to say git checkout -b v2.0-fixes v2.0. This will create a new branch pointer at the commit pointed to by the treeish v2.0 (a tag in this case) and then shift your HEAD to point to that. Now, if you make commits, it will be possible to track them (using the v2.0-fixes branch) and you can work like you usually would. There's nothing ""wrong"" with what you've done especially if you just want to take a look at the v2.0 code. If however, you want to make any alterations there which you want to track, you'll need a branch.You should spend some time understanding the whole DAG model of git. It's surprisingly simple and makes all the commands quite clear.Yes, it is normal. This is because you checkout a single commit, that doesnt have a head. Especially it is (sooner or later) not a head of any branch.But there is usually no problem with that state. You may create a new branch from the tag, if this makes you feel safer :)"
"I've gone through these pains recently. Especially frustrating is the lack of error logs in this scenario: probably because MSysgit prompts user on the console when trying to recover - which doesn't get through Jenkins console.Based on my experience here are a few key elements to watch for:a mix of both Msysgit and Cygwin installed: MSysgit worked better for me- but I assume you're using that toosome people have more luck with <MSYSGIT_ROOT>\cmd\git.cmd than <MSYSGIT_ROOT>\bin\git.exemaking sure your slave runs as the same user (which is not the default upon service-based installs).. - oh I see you got that toosetting HOME variable for windows slaves explicitybasically make sure the same .ssh keys are reached when under Jenkins.for debugging, I found it useful to create a test job with no SCM, but run git clone in an ""Execute shell/batch"" build step. That should reveal a bit more info. BTW, you can do an env in the same step and maybe ls %HOME%/.sshI think the above is what gave me a working a Windows 7 64bit Jenkins slave with git support - although I thought this had more to do with some other fine config detail than with 64 vs 32 bits. Good luck anyhow!In the latest version of git, had to use %GIT_HOME%/cmd/git.exe, rather than %GIT_HOME%/bin/git.exe and figuring out the home directory of the user running the jenkins service.Another issue i faced with was, ssh.exe was not looking at the %userprofile%/.ssh folder for the key files. Instead it was looking to the folder C:\Program Files (x86)\Git\.ssh which was empty and which causes a hang due to ssh authentication prompt on the machine where git repo located.We just copied the key files under %userprofile%/.ssh to C:\Program Files (x86)\Git\.ssh and the problem is resolved.Notes from a hard learned lesson.I had problems getting the ssh to work running Jenkins as a named user account for ssh+git.Here is what I had to do to solve the problem:Generate the key using ssh-keygen (note where they are located)Set ""HOME"" to this locationI tried with puttygen and GET_SSH=plink that all failed very bad but no clear errors."
"Find the diff with git fetch && git log Li..origin/Li. I would guess you've rebased or otherwise recut Li since last time you pushed, but that command should tell you exactly what's in the remote that isn't in the local. You can find what's in either (but not both) with the triple-dot syntax: git log Li...origin/Li.If the diff is expected, then just merge with git merge origin/Li and then git push. If the change is unwanted, overwrite the remote with git push -f origin Li. Only do this if you want to abandon the remote's changes.Updates were rejected because a pushed branch tip is behind its remote.git config --global push.default currentTry the command above to set the current branch as default and git push"
"You might need to disable home directory encryption or checkout outside like /tmpI think it limits the filename size to 144 characters.http://ubuntuforums.org/showthread.php?t=1173541http://ubuntuforums.org/showthread.php?t=1258294If you are using ubuntu's encrypted home directory feature, try checking out to a directory not under your home; ecryptfs can result in filenames becoming longer on the underlying filesystem. Otherwise, you can get the data with the following procedure:First, navigate to the containing directory, and type git ls-files --stage. You should see a bunch of output of the following form:100644 16890852350cb62bb9f9aec5e52eea8ba46f1192 0       somefileFind the hash corresponding to your file of interest. Now do:git cat-file blob 16890852350cb62bb9f9aec5e52eea8ba46f1192 > shortername.pdfWhere shortername.pdf is a new name for the file in question, replacing the hash with the one you found above. This will extract the content of the file in question.Now just do:git add shortername.pdfgit rm --cached $VERYLONGNAME.pdfgit commitThis will effectively rename the overly-long PDF to a more reasonable name."
"This would happen if the hooks/post-receive file exists, is marked executable, but cannot be executed. It cannot be executed, because the interpreter, /bin/bash2, either does not exist or is not executable.Replace the /bin/bash2 with name of bash that does exist and is executable on the server.(The reason the error looks like this is, that the operating system only returns the error status, ""No such file or directory"", but does not report which file does not exist. And the code that tried to execute it does not know that the system already read hooks/post-receive and was looking for /bin/bash2. All it knows is it tried to run hooks/post-receive, so that's what it prints).In addition (for future reference and documentation on this question) if you were to run echo $SHELL in your shell you should see an expected result, in this case (based on the approved answer) you would expect /bin/bash as your result. But another possible problem can be an unseen carriage return.Try running hooks/post-receive if you're still having issues, you may get a response like this:-bash: hooks/post-receive: /bin/bash^M: bad interpreter: No such file or directoryThe key here is the ^M that is proof that you are in fact getting an unexpected carriage return, otherwise if it had worked you would probably get a hanging response. Fix that and it should fix your problem. The way to do that, use dos2unix, for example:dos2unix .htaccess"
"Yes: git provides git bisect for automatic discovery of wrong commit.As the manual explains, it uses a binary search algorithm (i.e., bisection) to find which commit in your project‰Ûªs history introduced a bug. You use it by first telling it a ""bad"" commit that is known to contain the bug, and a ""good"" commit that is known to be before the bug was introduced. Then, it picks a commit between those two endpoints and asks you whether the selected commit is ""good"" or ""bad"". It continues narrowing down the range until it finds the exact commit that introduced the change.Usage:Initialize bisect: git bisect reset mastergit bisect startgit bisect good <commit>git bisect bad <commit>Mark a bisect as good/bad: git bisect (good|bad)End bisecting: git bisect reset"
"You've created a new repository and added some files to the index, but you haven't created your first commit yet.  After you've done: git add a_text_file.txt ... do: git commit -m ""Initial commit.""... and those errors should go away.The quick possible answer: When you first successfully clone an empty git repository, the origin has no master branch. So the first time you have a commit to push you must do:git push origin masterWhich will create this new master branch for you. Little things like this are very confusing with git.If this didn't fix your issue then it's probably a gitolite-related issue:Your conf file looks strange. There should have been an example conf file that came with your gitolite. Mine looks like this:repo    phonegap                                                                                                                                                                               RW+     =   myusername otherusername                                                                                                                                               repo    gitolite-admin                                                                                                                                                                             RW+     =   myusername                                                                                                                                                               Please make sure you're setting your conf file correctly.Gitolite actually replaces the gitolite user's account with a modified shell that doesn't accept interactive terminal sessions. You can see if gitolite is working by trying to ssh into your box using the gitolite user account. If it knows who you are it will say something like ""Hi XYZ, you have access to the following repositories: X, Y, Z"" and then close the connection. If it doesn't know you, it will just close the connection.Lastly, after your first git push failed on your local machine you should never resort to creating the repo manually on the server. We need to know why your git push failed initially. You can cause yourself and gitolite more confusion when you don't use gitolite exclusively once you've set it up."
"The command line arguments are separated by space. If you want provide an argument with a space in it, you should quote it. So use git commit -m ""initial commit"".I would just like to add-- In windows the commit message should be in double quotes, as I spent about an hour,just to figure out that single quote is not working in windows.Had this happen to me when committing from Xcode 6, after I had added a directory of files and subdirectories to the project folder.  The problem was that, in the Commit sheet, in the left sidebar, I had checkmarked not only the root directory that I had added, but all of its descendants too.  To solve the problem, I checkmarked only the root directory.  This also committed all of the descendants, as desired, with no error.In my case, this error was due to special characters what I was considering double quotes as I copied the command from a web page."
"The direct reason for the error is that yes, it's impossible to use git-add with a bare repository. A bare repository, by definition, has no work tree. git-add takes files from the work tree and adds them to the index, in preparation for committing.You may need to put a bit of thought into your setup here, though. GIT_DIR is the repository directory used for all git commands. Are you really trying to create a single repository for everything you track, maybe things all over your system? A git repository by nature tracks the contents of a single directory. You'll need to set GIT_WORK_TREE to a path containing everything you want to track, and then you'll need a .gitignore to block out everything you're not interested in tracking.Maybe you're trying to create a repository which will track just c:\www? Then you should put it in c:\www (don't set GIT_DIR). This is the normal usage of git, with the repository in the .git directory of the top-level directory of your ""module"".Unless you have a really good reason, I'd recommend sticking with the way git likes to work. If you have several things to track, you probably want several repositories!Also, you are probably inside the .git subfolder, move up one folder to your project root.Explicitly setting the GIT_DIR environment variable forces git to use the given directory as the git repository. It is never needed during normal use.In your example, because have specified a GIT_DIR and it isn't named .git (the leading dot is important) and you haven't provided a --work-tree option or set the GIT_WORK_TREE environment variable, that you want a bare repository when you said git init.Because a bare repository has no working tree a large selection of commands don't make sense with a bare repository. git add is just one.Is there a particular reason that you need to use a non-standard location for your git repository, rather than in a .git subfolder under the working tree root? While it's possible to arrange this it tends to be more work and more liable to user mistakes.Just clone the same project in another folder and copy the .git/ folder to your project.ExampleCreate temp folder: mkdir tempswitch to temp folder cd temp/clone the same project in the temp folder: git clone [-b branchName] git@path_to_your_git_repositorycopy .git folder to your projet: cp -R .git/  path/to/your/project/switch to your project and run git statusdelete the temp folder if your are finished.hope this will help someoneJust in case what happened to me is happening to somebody else, I need to say this:I was in my .git directory within my project when I was getting this error. I searched and scoured for answers, but nothing worked.  All I had to do was get back to the right directory. It was kind of a face-palm moment for me.In case there's anyone else out there as silly as me, I hope you found this answer helpful."
"This is occurring because some or all of the files that are not being tracked on your current branch are being tracked by the branch you want to change to.For example the branch may contain a CHANGES.txt.  Because git does not want to overwrite the file you have in your workspace if is giving your this error to allow you to backup the files you have locally.  You can either:Move these files somewhere safeIf you are sure you don't need these files, you can perform a checkout -f to switch to the branch (this will overwrite any files that conflict)Stashing does not work for files that are not tracked on the current branch. You can use git diff to work out which files are on the 0.20 but not on 0.21. For example:git diff --name-only branch-0.20That can happen if there is a filter in place, automatically changing the content of those files on checkout. As in:core.autocrlf=true(See Why should I use core.autocrlf=true in Git?)For instance, if the eol style is changed automatically, you would have modified files in your working tree.And that would be enough to prevent another checkout with common modified files.You can stash the changes, as Kit suggests, but I would recommend understanding first why those changes happen in the first place."
"Any checkout of a commit that is not the name of one of your branches will get you a detached HEAD. A SHA1 which represents the tip of a branch would still gives a detached HEAD. Only a checkout of a local branch name avoids that mode.See committing with a detached HEADWhen HEAD is detached, commits work like normal, except no named branch gets updated. (You can think of this as an anonymous branch.)For example, if you checkout a ""remote branch"" without tracking it first, you can end up with a detached HEAD.See git: switch branch without detaching headI reproduced this just now by accident:lists the remote branchesgit branch -r      origin/Feature/f1234      origin/masterI want to checkout one locally, so I cut paste:git checkout origin/Feature/f1234Presto! Detached HEAD stateYou are in 'detached HEAD' state. [...])Solution #1:Do not include origin/ at the front of my branch spec when checking it out: git checkout Feature/f1234Solution #2:Add -b parameter which creates a local branch from the remotegit checkout -b origin/Feature/f1234  orgit checkout -b Feature/f1234 it will fall back to origin automaticallyIt can easily happen if you try to undo changes you've made by re-checking-out files and not quite getting the syntax right.You can look at the output of git log - you could paste the tail of the log here since the last successful commit, and we could all see what you did.  Or you could paste-bin it and ask nicely in #git on freenode IRC.try git reflog this gives you a history of how your HEAD and branch pointerswhere moved in the past.e.g. :88ea06b HEAD@{0}: checkout: moving from DEVELOPMENT to remotes/origin/SomeNiceFeaturee47bf80 HEAD@{1}: pull origin DEVELOPMENT: Fast-forwardthe top of this list is one reasone one might encounter a DETACHED HEADstate ... checking out a remote tracking branch."
"To keep your current changesYou can keep your work stashed away, without commiting it, with git stash. Youwould than use git stash pop to get it back. Or you can (as carleeto said) git commit it to a separate branch.Checkout out by date using rev-parseYou can checkout a commit by a specific date using rev-parse like this:git checkout 'master@{1979-02-26 18:30:00}'More details on the available options can be found in the git-rev-parse.As noted in the comments this method uses the reflog to find the commit in your history. By default these entries expire after 90 days. Although the syntax for using the reflog is less verbose you can only go back 90 days.Checkout out by date using rev-listThe other option, which doesn't use the reflog, is to use rev-list to get the commit at a particular point in time with:git checkout `git rev-list -n 1 --before=""2009-07-27 13:37"" master`Andy's solution does not work for me. Here I found another way:git checkout `git rev-list -n 1 --before=""2009-07-27 13:37"" master`Git: checkout by dateLooks like you need something along the lines of this:Git checkout based on dateIn other words, you use rev-list to find the commit and then use checkout toactually get it.If you don't want to lose your staged changes, the easiest thing would be tocreate a new branch and commit them to that branch. You can always switch backand forth between branches.To those who prefer a pipe to command substitutiongit rev-list -n1 --before=2013-7-4 master | xargs git checkoutGoing further with the rev-list option, if you want to find the most recent merge commit from your master branch into your production branch (as a purely hypothetical example):git checkout `git rev-list -n 1 --merges --first-parent --before=""2012-01-01"" production`I needed to find the code that was on the production servers as of a given date. This found it for me."
"You cannot solve this problem using repo forall.Lets assume for certainty that your current Android tree is clean - no local changes or commits, i.e. repo status shows nothing.To properly switch Android version, all you need to change is branch for your manifest repository, like this:cd $ANDROID_ROOTcd .repo/manifestsgit branch -av   # see all available branches on origin# choose one you want, check out to it:git checkout origin/<my_selected_android_version>Note that command above will create detached HEAD in manifest repo. If you don't like that, add --track (or -t for short) to create local tracking branch:git checkout --track origin/<my_selected_android_version>UPDATE 2014/09/05:For most recent version of repo, git checkout ... above won't work as before because next repo sync will revert manifest repository to branch which was used at repo init.But that also means that there is now much simpler way to do what you want, namely:repo init -b <my_selected_android_version>Such selective repo init with -b (without -u) will only update manifest branch and will not otherwise touch your tree.Now, simply sync it:repo sync -j8and some time later, your Android tree will switch to another version.Speed of this operation is mostly determined by how much default.xml manifest file differs between old and new Android versions - because if some git repository was added in new manifest, it will spend time cloning it. And if some repository was removed, if will actually blow it away.But, by and large, this method is still much faster than initializing brand new Android tree from scratch."
"In a single repository:You should be able to explore the diff with git diff -- Vendor/JSONKit, but if you want to just reset the file (and abandon the changes), issue this command:git checkout HEAD -- Vendor/JSONKitThat'll checkout the most recent version of Vendor/JSONKit in your working directory and abandon the modifications.In a repository with submodules:Git submodules allow you to embed git repositories inside one another. Suppose ""JSONKit"" were a submodule inside ""MyApp"". The top-level git repository, MyApp, only tracks the HEAD commits of JSONKit, so you can perfectly reconstruct both MyApp's and JSONKit's states at any point in history. Suppose you committed changes inside the JSONKit repository. Inside JSONKit, this would look like a normal diff and have a normal history. Inside the parent repository, MyApp, it would register as a change to the HEAD commit. It might look something like this diff, taken from the git scm docs. The submodule in this example is a directory called ""rack"".$ git diff --cached rackdiff --git a/rack b/racknew file mode 160000index 0000000..08d709f--- /dev/null+++ b/rack@@ -0,0 +1 @@+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433How does MyApp know which directories are submodules? It's tracked inside the .gitmodules file. cat it, and you'll see every submodule registered in MyApp:$ cat .gitmodules [submodule ""rack""]    path = rack    url = git://github.com/chneukirchen/rack.gitWhen you issued git submodule update, you told git to checkout the most recent HEAD commit for JSONKit in your parent repo's index, thus abandoning the change in the submodule repository:update   Update the registered submodules, i.e. clone missing submodules and checkout the commit specified in the index of the containing repository. This will   make the submodules HEAD be detached unless --rebase or --merge is specified or the key submodule.$name.update is set to rebase, merge or none.  none   can be overridden by specifying --checkout."
"It sounds like Egit is looking for an ssl certificate and refusing to function without it. A good fix to make the problem go away and stay away:Window --> Preferences --> Team --> Git --> Configuration --> New Entry --> http.sslverify=false.That should take care of it.Adding .git to the repository url worked for me.I was getting this errorCannot list the available branches. Reason: Exception caught during execution of ls-remote command.when trying with SSH Key and maybe wrong URL for bitbucket: wrong? ssh://git@bitbucket.com/user/repository.gitIt worked (branches listed) with this URL:git@bitbucket.org:user/repository.gitNot helpful in your case, but maybe helpful for others: I've seen this error come up when copying URIs with scheme name git instead of something more common. If the URI starts with git://, try changing it to http:// or https://.I also found that the default SSH2 directory assigned in Preferences > General > Network Connections > SSH2 > General > SSH2Home was C:\Users\username\ssh instead of the default C:\Users\username\.ssh (with a leading dot for ""ssh"")Using the Browse button should help you to ensure that the proper directory is selected.If this is relevant to you then changing the specified directory is all you need to eliminate the error messages.I think this error message is in some kind generic. My guess is the plug-in just catches an exception by the underlying commands (probably ssh, since execution fails on ls, which is likely the first command after a successful connection) and show it's own message (""execution of the ls command""). Therefore it is hard to give a working answer. I tried Daniel's answer it it didn't worked for me.So I dug deeper and tried to manually clone the repository viagit clone username@host.path_to_repoand it worked charming.By doing so you test if your authentication method is what you expect and your .ssh/config is pretty as well.Knowing I could connect I assumed the error must be somewhere in Eclipse/EGit. For example I thought maybe the authentication method in the project import wizard was disturbing. (Putting an ssh:// in front of the path, might interfering with .ssh/config - anyway: nope.)Or maybe the SSH settings for Eclipse were wrong: Window --> Preferences --> General --> Network Connection --> SSH. OH, some of my keys were not listed.  Adding and restarting: same error -> frustration. All other settings looked fine. I couldn't find any good reason.Also my connection is not the best so every connection try takes a lot of time. Desperately I re-checked Window --> Preferences --> Team --> Git --> and KABAMM! I found the settings I actually was initially thinking it could be the troublemaker.Remote connection timeout (seconds): 30As I said instead of lightning fast I feel more like a snail and git-plugin gave up before the server response even could reach me. At least that's my assumption 'cause since I've set the value to 120 I have more time to drink my tea and when I return there are all the branches ready to clone :)My answer is for the same exception, but for cloning using SSH protocol.I had it working in one workspace, but not the other one. I could also clone repository from command line so it was clear Eclipse configuration issue.I did compare config files in two workspaces. The thing that fixed it was in .metadata.plugins\org.eclipse.core.runtime.settings\org.eclipse.jsch.core.prefsThere was a path to SSH directory:SSH2HOME=C\:\Users\username\sshThe correct path should have had a dot in front of ssh:SSH2HOME=C\:\Users\username\.sshNo idea how that got messed up, but make sure the path to ssh home is correct.If your using Debian based operating system you can try ssh service for cloning the Git repository. It working fine to me.Thanks,SengottuvelIn my case it was a two step solution on Windows Vista.I am using an id_rsa certificate, so I needed to change the location in Preferences > General > Network Connections > SSH2 > General > SSH2 to point to .ssh instead of ssh as was pointed out in an earlier solution. In addition to that, I had to give read access back to Everybody (right click the file in Windows Explorer). I had previously denied access to Everybody because my command line ssh client refused to work without doing so.Hope that helps."
"git init in your Subversion working directory will make it a git repository.git remote add origin <url>, where <url> is the HTTPS or SSH path from GitHub, will connect your local repository to GitHub.git fetch origin will update your local Git repository with all its history from GitHubgit reset origin/master will point your local master branch to the latest master from origin, without changing of your files.At this point git status will show you any differences between your local working directory and what's on GitHub.It sounds like your core issue is that you try to keep a Subversion and a Git repository in sync in such way, that Git should be only an additional view on to your Subversion repository. If this is the case SubGit might be a solution: It provides a Git mirror of a  Subversion repository so you could just stick to Subversion on your machine while having also the additional Git repository."
"I know this is not ""fixing"" the problem, but you can usegit config --global url.""https://"".insteadOf git://to tell git to use HTTPS instead of GIT which worked out for me to install npm dependencies.Instead to run this command: git ls-remote --tags --heads git://github.com/twbs/bootstrap.gityou should run this command: git ls-remote --tags --heads git@github.com:twbs/bootstrap.gitor  git ls-remote --tags --heads https://github.com/twbs/bootstrap.gitor you can run git ls-remote --tags --heads git://github.com/twbs/bootstrap.git but you need to make git always use https in this way: git config --global url.""https://"".insteadOf git://Reference: https://github.com/bower/bower/issues/50I came across this with my corporate network.It seemed strange because I've always been using ssh to connect with git and never had an issue.I tried https and didn't work so I added proxy settings to git's config and all was wellgit config --global http.proxy http://proxyuser:proxypwd@proxy.server.com:8080git config --global https.proxy https://proxyuser:proxypwd@proxy.server.com:8080And making sure it workedgit config --listPort 22 was being blocked on my computer. Once I found what was blocking it and opened the port, I was able to run the bower install cmd without any issues.It appears as though azsl1326 failed to use bower (git) over port 9418 (git://), then told git to use port 22 (https://) instead. This was still failing, but then opening port 22 got the desired result.The most direct solution is to open port 9418. This is the port that the git:// protocol uses.This error is related to a bad configuration of your firewall. You will notice that bower trying to contact git via the git:// protocol and not http://. You have to open port 9418. Add this two lines in your iptables configuration :iptables -t filter -A INPUT -p tcp --dport 9418 -j ACCEPTiptables -t filter -A OUTPUT -p tcp --dport 9418 -j ACCEPTThis should do the trick.Navigate to your Application Folder and run this commandgit config --global url.""https://"".insteadOf ""git://""This should fix your issuePerhaps you need to generate an ssh key so you are authenticated with github.Are you behind a firewall?Git doesn't pick up the proxy configuration when it's called, so set environment variables explicitly, e.g.:export HTTP_PROXY=http://username:password@proxyserver:port/export HTTPS_PROXY=http://username:password@proxyserver:port/If your corporate proxy doesn't need authentication just omit the username:password@ bit in the URLs.It worked for me!If your country block github, e.g. China mainland, then you can build a proxy, e.g. use goagent & gae, then set proxy address for git, e.g.git config --global http.proxy 127.0.0.1:8087"
"If git status reported the working directory clean, I'd bet you have an ignored file in your working directory that somebody else added to the remote repo. You could confirm that with git diff --stat your-branch remote-name/remote-branch and git ls-files -i --exclude-standard.The solution would be to remove the file from the ignore file (so git status shows it as an untracked file), stash it with the --include-untracked option, pull the changes from your remote, and apply the stash to merge your changes back in."
"Here is an example of how to use git and branches.$ git branch* master  organize$ git branch networking$ git checkout networking$ git branch  master* networking  organizeNow Master has been updated many times since anyone has done anything on networking$ git pull origin networkingFrom github.com:dlundquist/Asteroids * branch            networking -> FETCH_HEADCONFLICT (rename/delete): Rename src/ServerClientThread.java->src/ServerConnectionThread.java in 92d5b7c4e7c4110803eabf5d5152e7f2a337d722 and deleted in HEADAuto-merging src/Actor.javaAuto-merging src/Asteroids.javaCONFLICT (content): Merge conflict in src/Asteroids.javaAuto-merging src/BasicWeapon.javaCONFLICT (content): Merge conflict in src/BasicWeapon.javaCONFLICT (delete/modify): src/DedicatedServer.java deleted in HEAD and modified in 92d5b7c4e7c4110803eabf5d5152e7f2a337d722. Version 92d5b7c4e7c4110803eabf5d5152e7f2a337d722 of src/DedicatedServer.java left in tree.Auto-merging src/MainMenu.javaCONFLICT (content): Merge conflict in src/MainMenu.javaCONFLICT (delete/modify): src/NetworkClientThread.java deleted in HEAD and modified in 92d5b7c4e7c4110803eabf5d5152e7f2a337d722. Version 92d5b7c4e7c4110803eabf5d5152e7f2a337d722 of src/NetworkClientThread.java left in tree.CONFLICT (delete/modify): src/NetworkUpdate.java deleted in HEAD and modified in 92d5b7c4e7c4110803eabf5d5152e7f2a337d722. Version 92d5b7c4e7c4110803eabf5d5152e7f2a337d722 of src/NetworkUpdate.java left in tree.Auto-merging src/ScenePanel.javaCONFLICT (content): Merge conflict in src/ScenePanel.javaAuto-merging src/Shield.javaCONFLICT (content): Merge conflict in src/Shield.javaAuto-merging src/Sprite.javaAuto-merging src/TripleShotWeapon.javaAuto-merging src/Weapon.javaAutomatic merge failed; fix conflicts and then commit the result.mjolnir:Asteroids Durandal$ git status# On branch networking# Changes to be committed:##   modified:   src/Actor.java#   modified:   src/Sprite.java#   modified:   src/TripleShotWeapon.java#   modified:   src/Weapon.java## Unmerged paths:#   (use ""git add/rm <file>..."" as appropriate to mark resolution)##   both modified:      src/Asteroids.java#   both modified:      src/BasicWeapon.java#   deleted by us:      src/DedicatedServer.java#   both modified:      src/MainMenu.java#   deleted by us:      src/NetworkClientThread.java#   deleted by us:      src/NetworkUpdate.java#   both modified:      src/ScenePanel.java#   added by them:      src/ServerConnectionThread.java#   both modified:      src/Shield.javaWoah, git is really mad. It looks like Master is too far ahead of Networking for git to do all the work for me.$ git reset --hard networkingHEAD is now at 20d6ee8 done tweaking game on the main branch.  Fixed a few bugs with the TripleShotWeapon.  Rebalanced the gameMechanics() in Asteroids to increase the difficulty as the levels increase.mjolnir:Asteroids Durandal$ git status# On branch networkingnothing to commit (working directory clean)Ok, now I am ""back in time"" when networking last pushed to origin. But I really should go back and merge with Master now before I do any work. Other wise it will be even hard to merge.Time spent merging files$ git add (insert conflict resolved files here)$ git commit -a -m ""Merged networking with master""$ git checkout master$ git branch* master  networking  organizeNow lets apply our changes.$ git merge networkingAlready up-to-date.You might want to do this if you like the ""Yeah!""$ git merge origin networkingAlready up-to-date. Yeeah!Push our changes to the world$ git push origin master"
"Use git push --no-thin instead of git push. From Git docs: A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is --thin.Back it up... back it up right this second before you try anything.Now, that sounds unfortunate. It's also a shame that it doesn't sound like you have a regular backup to go to. There is good news to be had, though: I bet your developers have this file, though it may be in a pack file. Try the following in somebody else's .git directory. Note that git uses the first two characters of the hash for the directory name.find . -name d62f0ed4385e3f68f226ac133fa9932a9c65c9If that shows up, copy that file to the same relative path on your server, and life should move on nicely. If not, then try this:find . -name \*.idx -exec cat {} \; | git show-index | grep 14d62f0ed4385e3f68f226ac133fa9932a9c65c9That won't show you which pack file it is (you can quickly script this or do it manually), but it will tell you its there. Find the right pack file and expand it...git unpack-objects $FILEFrom there, copy the file to the same relative path on your server. If that doesn't solve it, further work is needed. Swapping a developer's up-to-date-enough repository might fix things. You may also want to explore https://git.wiki.kernel.org/index.php/GitFaq#How_to_fix_a_broken_repository.3F, or post update comments and wait for me to get back around to this.Try a git pull --rebase.I saved the diff (git show > ~/mychanges.txt, took out the commit msg at the top of the file). The checked out a new branch (git checkout -b newbranch) applied the changes (git apply ~/mychanges.txt), and then did a git pull --rebase. Then everything worked.I am getting this same error on my tortiuse git. I finally get the root cause of this error.The steps which causes this error;Create a new branch on head.Do some modifications on new branchsSomebody also make modifications on head branchTry to push your branchThis error will occur if a local branch is created and not pushed until some modifications ara made in head branch. This is a normal thing, since remote head branch do not now anything about your local branch until a push action.To solve this error, switch the head branch get a full pull action. Then switch your branch and try a push.If not on master branch, you can simply delete the remote branch by:git push --delete origin <branch_name>And then push your branch back to the remote:git push -u origin <branch_name>"
"I had a similar problem checking out a project from git on Hudson (v 2.2.1). I was earlier using subversion and it had existing workspace there. so when I configured Git, I checked the option, ""Wipe out workspace before build"" and when running the build on hudson it cleaned that existing workspace and fails immediately. I tried to run this few times and results the same. When I unchecked ""Wipe out workspace before build"" the option, my next build and check out fine without any issues.Has anyone observed this behaviour on hudson with git."
"Well, if you're confident you won't loose any work, try the following:rm tests/unit/src/models/BrandTests.jsgit checkout -- tests/unit/src/models/BrandTests.jsThat should reset any mechanism that made it think it had changes. If it doesn't work, have others that might.I would guess this is your scenario:$ git checkout ProductsAndContentsSwitched to branch 'ProductsAndContents'Branch ProductsAndContents contains the file tests/unit/src/models/BrandTests.js, so the above checkout creates it and/or makes sure it's up to date with the specific commit requested.$ git status# On branch ProductsAndContentsnothing to commit (working directory clean)You haven't made any changes, and started with a clean working directory, so this is good.$ git checkout masterSwitched to branch 'master'This makes sure all files contained in the latest commit on master are up to date in the working directory. However, it does not remove or update files that are not contained in master, or that are ignored. Here I assume master for whatever reason does not currently include the file in question.$ git status# On branch masternothing to commit (working directory clean)Again, you've made no modifications. The fact that the file in question is not mentioned here as an untracked file probably means it's ignored (either in .gitignore or in .git/info/exclude). master doesn't contain the file so it's not concerned that it exists.$ git merge ProductsAndContentserror: Your local changes to the following files would be overwritten by merge:    tests/unit/src/models/BrandTests.jsPlease, commit your changes or stash them before you can merge.AbortingHere, your attempt to merge in the other branch wants to introduce a file that master currently doesn't have, which is normally fine. However, that file exists in your working directory, and git doesn't want to trash something that it's not sure is preserved in the repository. As suggested elsewhere, you could (assuming you know it's safe) simply remove that file and re-try the merge.With the information you have given, I'm not 100% sure that's what you have here; you could run these two commands to check for that condition, though:git ls-files master -- tests/unit/src/models/BrandTests.jsgit ls-files ProductsAndContents -- tests/unit/src/models/BrandTests.jsIf my guess is right, the first command will not show that the file exists, while the second will. Then check .gitignore and .git/info/exclude to see if it's being ignored (for .gitignore, you may need to check the version that exists on each of the two branches)."
"You should not remove that file from the index, but reset it or stash it (meaning remove the local changes: the file is still needed in the index):git stash# orgit checkout -- your/file # overwrite any local change# or, nuclear optiongit reset --hardIf stashed, the normal workflow is to git stash pop after the merge.(I actually prefer pull.rebase + rebase.autostash, that way git does stash for me on git pull)Uncommited changes that are stored in the stash can be taken out and applied to the original branch and other branches as well.(source: ""Git Beginners Guide: Switching branches"")This is where the git stash command comes into play. Like git reset --hard, it gives you a clean working directory, but it also records your incomplete changes internally.  After fixing the critical bug, you can re-apply these changes and pick up where you left off. You can think of git stash as a ""pause button"" for your in-progress work.(source: ""Quick Tip: Leveraging the Power of Git Stash"")"
"The ""master"" in git checkout master is supposed to be a branch, which you do not have.  You can checkout the remote's master and make it your own with git checkout origin/master -b master, which should also set it up as a ""tracking branch"".You can see your list of remote branches with git branch -r."
"You can usegit merge --abortto abort your current merge action and revert to the situation before your started the merge. See git merge documentation for more details.Note that it will throw away any changes your made, but I suppose this is not a problem in your current situation...To blow away all the changes and set to prior to mergegit reset --hard commitshaHere commitsha is the sha id of git commits. You can use gitk or git log to check state of your branch and figure out commit_shaUpdateor on branch git reset --hard production_branch"
"One fix is to:revert to command line.clone your current repotry and create new branch/new commit on that clone.If you had previously pushed your repo, try cloning the remote repo instead of the local one.Or try cloning the repo as save by Time machine.If that doesn't work, you have a broken repo, and you can try some of the methods exposed in ""Tree contains duplicate file entries"".Have you changed git version? Do you only use the one that came with Xcode, or have you got an obsolete version installed in Terminal? One that might be corrupting the repo. (Try 'git --version' - the current version is 2.0.4, and it's easily installed using homebrew).Are there any strange permissions in the repo folder that are preventing git from working?"
"It seems to be fixed now running ""composer install --prefer-dist"" found here stackoverflow.com/a/17794382/995653 Now I dont get any errors. Very strange but the files must have been mixed-up somehow."
"Here's how I fixed a similar issue:Msysgit installs two git.exe. One under C:\Program Files (x86)\Git\bin and a second one under C:\Program Files (x86)\Git\cmd. The first one cannot be used with Jenkins. It will hang after completing it's job. The second one works perfectly.Update your Jenkins Git settings to point to the correct cmd\git.exe and enjoy!Just experience the freeze at 'Fetching upstream changes from origin' as well.Running Jenkins as a service on a Windows based machine seems to (from what I have experienced) to have issues when using SSL.Workaround Solution]Alter your Jenkins service to run under a local account.Ensure your local administrator account is configured to perform Git interaction with SSH.Restart Jenkins (details).If Jenkins does not start, it had issues trying to pull from Git. Manually kill git and ssh processes, kill your java.exe from Jenkins and manually start the Jenkins service.Details on Why I Choose this Solution]I have followed other steps before with setting up the authorized host to accept the server and registering the Jenkins' key on the server to permit the connection. I've made sure I could successfully perform Git actions under my Local System account (which the Jenkins service was run under). Still, the fetch would freeze. To check that my Git and SSL was configured correctly, I even went to the initially configured Git repository in my Jenkins jobs directory and performed a successfully pull request under the local system account. It worked; therefore the keys have been setup correctly.I forgot where I read this, but I heard issues arise when dealing with Git/SSH under a local system. With this knowledge, I played with my Git environment and altered the GIT_SSH environment variable to use plink  (with a combination of Putty to remember the server key, puttygen to convert an OpenSSL key to a Putty key and pageant to remember my keys) for plink. Once I got it working with plink, I did not find it to be a useable solution. I order to correctly use plink, I had to also run pageant under my local system account to have the Jenkins service correctly negotiate SSH calls. After thinking how I would correctly setup my initial state on reboot, I didn't want to put all this effort into just getting the SSH connection working.Instead, I decided it was easier to just run Jenkins under my local administrator account which was also configured to deal with the Git server. No having to deal with configured SSH keys for the local system account and my git actions worked fine.Note, David Gageot's answer can apply to some. I did not have to alter any of my Git settings as when I installed Git, I choose the option Run Git from the Windows Command Prompt which maps a path to the C:\Program Files (x86)\Git\bin\cmd\ directory.Another link that I found very helpful when configuring jenkins on windows, especially when using the MSI installer is this: http://opensourcetester.co.uk/2013/06/28/jenkins-windows-ssh/And one more thing that I didn't find obvious was: you have to use SSH url when connecting to Github instead of default https one. Hopefully that will save time to someone.I had this same issue on my laptop and I was able to figure out a solution, however this really only applies if you are running the Jenkins war in a Tomcat web container that is setup as a Windows service.I just had to set the Tomcat service to logon as my windows user instead of Local System.This is how I solved it: I ran the sysinternals tool psexec to spawn a CMD which is running under the LocalSystem account (same account like jenkins service is running) PSEXEC -i -s -d CMDIn this cmd prompt I executed the same git command from the workspace directory as the hanging GIT.exe processes do. E.g. d:\Programs\Jenkins\jobs\jobname\workspace>D:\Programs\Git\bin\git.exe fetch -t ssh+git://gitpub@my.server.com:9360/data/gitpub/myRepository.git +refs/heads/:refs/remotes/origin/Et voila: I was prompted to enter ""yes"" to add the SSH key to the known list of known hosts."
"As per your git status output, you've made those changes whilst you weren't on the master branch:macoss-MacBook-Pro-10:Marketing owner12$ git status# Not currently on any branch....The reason that your git checkout isn't moving you to the master branch is because doing so would involve overwriting the changes you've made (as per the error message).Your easiest way out of this is:$ git stash save      # Save the edits made whilst not on a branch$ git checkout master # Move to the master branch$ git stash pop       # Apply stashed-changes; delete from stash if successfulNote that applying your changes may cause conflicts - be sure to carefully read any git output.(EDIT: Note that git stash save will not deal with untracked files)"
"Remove it. It's just Xcode 4's workspace data file that will get recreated once you reopen the project in Xcode 4 again. Warning also says that that file was created on the other end from where you're doing the pull.So I'm suggest you to add this file to .gitignore list and do git rm on that file where it was added in the git repo."
"The issue is that git can't find the public key needed to download the repo from your server, the solution is to use the public url.In the file .gitmodule you will find the following entry:[submodule ""example""]    path = example    url = git@github.com:webhat/example.gitThe URL need to be changed to the public URL for the module:[submodule ""example""]    path = example    url = https://github.com/webhat/example.gitAs you can see the prefix git@ has been changed to https:// and the infix : becomes /EDIT:In your own repository you might need to use git:// rather than https://The previous answer was unclear to me, so I added this.EDIT 2:If you find you need to run git submodule sync or need to edit .git/config to get this to work, you have likely set up remotes for the submodules.If it can help some people:I update my .gitmodules[submodule ""example""]  path = example  url = https://github.com/webhat/example.gitThen I update my .git/config too[submodule ""example""]  url = https://github.com/webhat/example.gitLike some of you said it before (and I thank you).Then I update my .git/modules/example/config[remote ""origin""]  fetch = [...]  url = https://github.com/webhat/example.gitAnd to finish I dogit submodule syncgit submodule initgit submodule update"
"The files are untracked: git rm --cached cannot find them because there are not in the index. Just delete them, using your file manager or rm. Then checkout should work as expected. Note that git status will show you what git sees the files as (tracked, changed, untracked; with an additional option it will also display ignored files).they arent in git but there locally .. that means when you switch those would be lost and git doesnt allow thatremove them locally:rm RCAlpha.xcodeproj/project.xcworkspace/xcuserdata/andrewjl.xcuserdatad/UserInterfaceState.xcuserstate RCAlpha.xcodeproj/xcuserdata/andrewjl.xcuserdatad/xcschemes/RCAlpha.xcscheme RCAlpha.xcodeproj/xcuserdata/andrewjl.xcuserdatad/xcschemes/xcschememanagement.plistthey are recreated by xcode anyway. nothing important in there!"
"In general, fixing corrupt objects can be pretty difficult. However, in this case, we're confident that the problem is an aborted transfer, meaning that the object is in a remote repository, so we should be able to safely remove our copy and let git get it from the remote, correctly this time.The temporary object file, with zero size, can obviously just be removed. It's not going to do us any good. The corrupt object which refers to it, d4a0e75..., is our real problem. It can be found in .git/objects/d4/a0e75.... As I said above, it's going to be safe to remove, but just in case, back it up first.At this point, a fresh git pull should succeed....assuming it was going to succeed in the first place. In this case, it appears that some local modifications prevented the attempted merge, so a stash, pull, stash pop was in order. This could happen with any merge, though, and didn't have anything to do with the corrupted object. (Unless there was some index cleanup necessary, and the stash did that in the process... but I don't believe so.)Recovering from Repository Corruption is the official answer.the really short answer is: find uncorrupted objects and copy them.you can use ""find"" to remove all files in /objects folder with 0 size with command find .git/objects/ -size 0 -delete. Backup is recommended."
"I encountered and fixed the same problem :)There are two way to configure the path of git:On Jenkins Mastera. Enter Jenkins System Configure (Jenkins -> Manage Jenkins -> Configure System )b. Find the Git item and Configure the git installation (specify the git path on Jenkins Master)On Jenkins Slavea. Enter Jenkins Slave's Configureb. Check the ""Tool Locations"" Checkbox and specify the path of git on the Jenkins Slave.In my situation, I don't have the privilege to access the Jenkins Master. So I install the git on the Jenkins Slave and add it to Jenkins Slave's Configure.This seems to be a bug, see JENKINS-16523 where I posted a workaround."
"While your private-key file may be in the right place, my [limited] understanding is that the GIT_SSH variable must be the path to an executable script rather than a command itself. Thankfully, there is a much easier way to set-up Git to use a particular SSH key per repository that doesn't rely on setting environmental variables or creating new scripts. The general process is described in this SuperUser answer, which is to specify the custom SSH command as an ""external transport"" in the repository location. Here is how I use the method in a Chef recipe:# Add a deployment key to the node from chef-vault, e.g. at #    /path/to/some_repo_deployment_key#    /path/to/some_repo_deployment_key.pubgit ""/usr/share/my_repo"" do  # The following line ensures that our repo-specific deployment   # ssh-key will be used for all clone & fetch operations.  repository ""ext::ssh -i /path/to/some_repo_deployment_key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no git@github.com %S /my_name/some_repo.git""  checkout_branch ""master""  action :syncendAfter the repository has been cloned, git fetch and git push operations from within the working-directory will used the same key, making further automation more independent of environmental setup than some of the other techniques which rely on ssh's key-discovery mechanisms.It seems like you found the answer to this (too open of permissions) but here is the relevant info from my ssh man page: ... ~/.ssh/identity ~/.ssh/id_dsa ~/.ssh/id_ecdsa ~/.ssh/id_ed25519 ~/.ssh/id_rsa         Contains the private key for authentication.  These files contain sensitive data and should be readable by the user but not accessible by others (read/write/execute).         ssh will simply ignore a private key file if it is accessible by others.  It is possible to specify a passphrase when generating the key which will be used to encrypt the sensitive part of this file using 3DES."
"You shouldn't store .pyc files in Git. On your workstation, dofind . -name *.pyc -exec git rm {} \;Then add a line *.pyc to .gitignore, commit all the changes and push.On the other end (EC2), dogit checkout classes/ec2/ec2Auto.pyc classes/redis_ha.pyc \             classes/rtbUtilities.pyc rtb_redis_connections/redis_connections.pycthen pull."
"It sounds like your stash included an untracked file that was subsequently added to the repo.  When you try and check it out, git rightly refuses because it would be overwriting an existing file.To fix, you could do something like deleting that file (it's okay, it's still in the repo), applying your stash, and then replacing the stashed version of the file with the in-repo version as appropriate.The safest and easiest way would probably be stashing things again:git stash -u             # This will stash everything, including unstaged filesgit stash pop stash@{1}  # This will apply your original stashAfterwards if you're happy with the result you may callgit stash dropto remove your ""safe"" stash.As mentioned by @blahdiblah, you can manually delete the files its complaining about, switch branches, and then manually add them back. But I personally prefer to stay ""within git"".The best way to do this is to convert the stash to a branch. Once its a branch you can work normally in git using the normal branch-related techniques/tools you know and love. This is actually a useful general technique for working with stashes even when you don't have the listed error. Its works well because a stash really is a commit under the covers (see PS).Converting a stash to a branchThe following creates a branch based on the HEAD when the stash was created and then applies the stash (it does not commit it). git stash branch STASHBRANCHWorking with the ""stash branch""What you do next depends on the relationship between the stash and where your target branch (which I will call ORIGINALBRANCH) is now.Option 1 - Rebase stash branch normally (lots of changes since stash)If you have done a lot of changes  in your ORIGINALBRANCH, then you are probably best treating STASHBRANCH like any local branch. Commit your changes in STASHBRANCH, rebase it on ORIGINALBRANCH, then switch to ORIGINALBRANCH and rebase/merge the STASHBRANCH changes over. If there are conflicts then handle them normally (one of the advantages of this approach is you can see and resolve conflicts).Option 2 - Reset original branch to match stash (limited changes since stash)If you just stashed while keeping some staged changes, then committed, and all you want to do is get the additional changes that where not staged when you stashed you can do the following. It will switch back to your original branch and index without changing your working copy. The end result will be your additional stash changes in your working copy.git symbolic-ref HEAD refs/heads/ORIGINALBRANCHgit resetBackgroundStashes are commits likes branches/tags (not patches)PS, It tempting to think of a stash as a patch (just like its tempting to think of a commit as a patch), but a stash is actually a commit against the HEAD when it was created. When you apply/pop you are doing something similar to cherry-picking it into your current branch. Keep in mind that branches and tags are really just references to commits, so in many ways stashes, branches, and tags are just different ways of pointing at a commit (and its history). Sometimes needed even when you haven't made working directory changesPPS, You may need this technique after just using stash with --patch and/or --include-untracked. Even without changing working directories those options can sometimes create a stash you can't just apply back. I must admit don‰Ûªt fully understand why. See http://git.661346.n2.nabble.com/stash-refuses-to-pop-td7453780.html for some discussion.The solution: You need to delete the file in question, then try to stash pop/apply again and it should go through. Don't delete other files, just the ones mentioned by the error.  The problem: Git sucks sometimes. When running git stash -u it includes untracked files (cool !) but it does not remove those untracked files and does not know how to apply the stashed untracked files on top of the leftovers (not cool !), which really makes the -u option pretty useless."
"Unfortunately, I think this is just one of the drawbacks of using submodules.  These problems are described in a section called ""Issues with Submodules"" in Pro Git, but in short, the simplest workaround is to move the submodule directory out of the way before switching to the master branch:mv Vendor Vendor.movedgit checkout masterSimilarly, when you change to develop, you should do:git checkout developmv Vendor.moved Vendor"
"With this kind of error, I usually start by raising the postBuffer size:git config --global http.postBuffer 524288000# some comments below report having to double the value:git config --global http.postBuffer 1048576000From the git config man page:http.postBufferMaximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system.  For requests larger than this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a massive pack file locally. Default is 1 MiB, which is sufficient for most requests.Even for clone, that can have an effect, and in this instance, the OP Joe reports:[clone] works fine nowNote: if something went wrong on the server side, and if the server uses Git 2.5+ (Q2 2015), the error message might be more explicit.See ""Git cloning: remote end hung up unexpectedly, tried changing postBuffer but still failing"".Kulai (in the comments) points out to this Atlassian  Troubleshooting Git page, which adds:Error code 56 indicates a curl receive error of CURLE_RECV_ERROR which means there was some issue that prevented the data from being received during the clone process.  Typically this is caused by a network setting, firewall, VPN client, or anti-virus that is terminating the connection before all data has been transferred.It also mentions the following environment variable, order to help with the debugging process.# Linuxexport GIT_TRACE_PACKET=1export GIT_TRACE=1export GIT_CURL_VERBOSE=1#Windowsset GIT_TRACE_PACKET=1set GIT_TRACE=1set GIT_CURL_VERBOSE=1The http.postBuffer trick did not work for me. However:For others experiencing this problem, it may be an issue with GnuTLS. If you set Verbose mode, you may see the underlying error look something along the lines of the code below.Unfortunately, my only solution so far is to use SSH. I've seen a solution posted elsewhere to compile Git with OpenSSL instead of GnuTLS. There is an active bug report for the issue here.GIT_CURL_VERBOSE=1 git clone https://github.com/django/django.gitCloning into 'django'...* Couldn't find host github.com in the .netrc file; using defaults* About to connect() to github.com port 443 (#0)*   Trying 192.30.252.131... * Connected to github.com (192.30.252.131) port 443 (#0)* found 153 certificates in /etc/ssl/certs/ca-certificates.crt*    server certificate verification OK*    common name: github.com (matched)*    server certificate expiration date OK*    server certificate activation date OK*    certificate public key: RSA*    certificate version: #3*    subject: *    start date: Mon, 10 Jun 2013 00:00:00 GMT*    expire date: Wed, 02 Sep 2015 12:00:00 GMT*    issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance EV CA-1*    compression: NULL*    cipher: ARCFOUR-128*    MAC: SHA1> GET /django/django.git/info/refs?service=git-upload-pack HTTP/1.1User-Agent: git/1.8.4Host: github.comAccept: */*Accept-Encoding: gzipPragma: no-cache< HTTP/1.1 200 OK< Server: GitHub.com< Date: Thu, 10 Oct 2013 03:28:14 GMT< Content-Type: application/x-git-upload-pack-advertisement< Transfer-Encoding: chunked< Expires: Fri, 01 Jan 1980 00:00:00 GMT< Pragma: no-cache< Cache-Control: no-cache, max-age=0, must-revalidate< Vary: Accept-Encoding< * Connection #0 to host github.com left intact* Couldn't find host github.com in the .netrc file; using defaults* About to connect() to github.com port 443 (#0)*   Trying 192.30.252.131... * connected* found 153 certificates in /etc/ssl/certs/ca-certificates.crt* SSL re-using session ID*    server certificate verification OK*    common name: github.com (matched)*    server certificate expiration date OK*    server certificate activation date OK*    certificate public key: RSA*    certificate version: #3*    subject: *    start date: Mon, 10 Jun 2013 00:00:00 GMT*    expire date: Wed, 02 Sep 2015 12:00:00 GMT*    issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance EV CA-1*    compression: NULL*    cipher: ARCFOUR-128*    MAC: SHA1> POST /django/django.git/git-upload-pack HTTP/1.1User-Agent: git/1.8.4Host: github.comAccept-Encoding: gzipContent-Type: application/x-git-upload-pack-requestAccept: application/x-git-upload-pack-resultContent-Encoding: gzipContent-Length: 2299* upload completely sent off: 2299out of 2299 bytes< HTTP/1.1 200 OK< Server: GitHub.com< Date: Thu, 10 Oct 2013 03:28:15 GMT< Content-Type: application/x-git-upload-pack-result< Transfer-Encoding: chunked< Expires: Fri, 01 Jan 1980 00:00:00 GMT< Pragma: no-cache< Cache-Control: no-cache, max-age=0, must-revalidate< Vary: Accept-Encoding< remote: Counting objects: 232015, done.remote: Compressing objects: 100% (65437/65437), done.* GnuTLS recv error (-9): A TLS packet with unexpected length was received.* Closing connection #0error: RPC failed; result=56, HTTP code = 200fatal: The remote end hung up unexpectedlyfatal: early EOFfatal: index-pack failedObs.: Changing http.postBuffer might also require to set up the Nginx configuration file for gitlab to accept larger body sizes for the client, by tuning the value of client_max_body_size.However, there is a workaround if you have access to the Gitlab machine or to a machine in its network, and that is by making use of git bundle.go to your git repository on the source machinerun git bundle create my-repo.bundle --alltransfer (eg., with rsync) the my-repo.bundle file to the destination machineon the destination machine, run git clone my-repo.bundlegit remote set-url origin ""path/to/your/repo.git""git push All the best!None of the above worked for me, but here's what did: http://stackoverflow.com/a/22317479The complete error message I'd been receiving was:fatal: The remote end hung up unexpectedlyfatal: early EOFfatal: index-pack failedI got solution after using below cmd:git repack -a -f -d --window=250 --depth=250"
"""Not currently on any branch"" means you have a detached head, i.e. your HEAD pointer is directly referencing a commit instead of symbolically pointing at the name of a branch.You can get into this situation by checking out a commit by SHA1, or when you‰Ûªre in the middle of a rebase, or when a merge fails. It‰Ûªs hard to say what you may have done to get into this situation by accident.It‰Ûªs said that you may lose your changes when you switch from a detached HEAD to some branch, but the reflog will always keep track of where your HEAD moved. In fact, Git 1.7.5 will warn you when switching from a detached HEAD will lose commits. The only time you can really lose work is when you have uncommitted changes, which you may want to commit or stash.A simple way to see what happened is git reflog or git log -g --decorate for a more verbose listing. The --decorate option will label every SHA1 with the names of all the branches that point at it. If the SHA1 of your current HEAD is exactly the same as master, then you don‰Ûªt have to do anything but git checkout master to get back on track. Otherwise, see if the SHA1 is pointed to by some other branch. If not, you may wish to create a branch to hang on to it.Another good command is git branch -av, which will similarly list all branches and what they point to, so you can see what your (no branch) is really supposed to be.It is hard to tell without more details.git pull fetches changes from the remote repository and then does a merge. It can be configured to do a rebase instead of a merge (either with by doing git pull --rebase, or by configuring a true value for branch.<branch_name>.rebase for the branch into which you are pulling).If you started out on a branch, any merge-type pull will always leave you on that branch. On the other hand, the rebase command always works by using a temporarily detached HEAD (aka ‰ÛÏno branch‰Ûù). If you were left in this state during a rebase-type pull, then it is because the rebase portion of the pull encountered conflicts and it is waiting for you to resolve them and use rebase --continue (or --skip, or --abort).By default, the reflog stores every update that is made to HEAD (there can also be one for each branch). You can view the reflog with git reflog show (or git log -g for a more verbose view). It might help you determine how you got into this state.If you are in the middle of a rebase (you have a .git/rebase-apply directory), then it probably stopped to let you resolve some conflict(s). Use git status to check for ‰ÛÏunmerged‰Ûù entries. Any such entries should have conflict markers embedded in the files (assuming that they are plain text files). You should edit them to resolve the conflict(s) and them mark them as merged by running git add on them. Then run git rebase --continue to continue with the rebase. You may run into more conflicts that should be handled in a similar way (edit, add, continue). If you decide that you no longer need a particular commit, you can skip it with git rebase --skip. You can abort the whole rebase with git rebase --abort. All of these rebase commands are listed in the error message when a rebase stops due to any conflict. Once all the pending commits have been applied (or skipped), your original branch will be updated with the final new commit and your HEAD will be reattached to it (if you abort, your HEAD will be reattached without updating the branch).If your detached HEAD is not due to conflicts incurred in the middle of a rebase, then your HEAD was detached at some point prior to the pull. You will need to evaluate the current state of the tree to decide what you want to do. You might use git show-branch --current --all or git log --graph --oneline --decorate --all or a graphical tool like gitk to find out how your current (detached) HEAD relates to your other branches. If you decide that you want to keep the contents of your HEAD, then you can you can make a new branch for them with git branch new_branch_name. If you want to overwrite an existing branch, then use git branch --force existing_branch_name. Then use git checkout branch_name to reattach your repository's HEAD to a branch.Note that, in case of a ""git pull --rebase"" run while the HEAD is detached, Git tried to find the upstream branch of the detached HEAD (which by definition does not exist) and emitted unnecessary error messages.This is no longer the case with Git1.8.0.1 (26th November 2012)See this commit."
"A shortcut, which doesn't depend on remembering the syntax for git branch --set-upstream 1 is to do:git push -u origin my_branch... the first time that you push that branch.  You only need to do it once, and that sets up the association between your branch and the one at origin in the same way as git branch --set-upstream does.Personally, I think it's a good thing to have to set up that association between your branch and one on the remote explicitly.  It's just a shame that the rules are different for git push and git pull.1 It may sound silly, but I very frequently forget to specify the current branch, assuming that's the default - it's not, and the results are most confusing :)Update 2012-10-11: Apparently I'm not the only person who found it easy to get wrong! Thanks to VonC for pointing out that git 1.8.0 introduces the more obvious git branch --set-upstream-to, which can be used as follows, if you're on the branch my_branch:git branch --set-upstream-to origin/my_branch... or with the short option:git branch -u origin/my_branchThis change, and its reasoning, is described in the release notes for git 1.8.0, release candidate 1:It was tempting to say git branch --set-upstream origin/master, but that tells Git to arrange the local branch origin/master to integrate with the currently checked out branch, which is highly unlikely what the user meant.  The option is deprecated; use the new --set-upstream-to (with a short-and-sweet -u) option instead.You can make this happen with less typing. First, change the way your push works:git config --global push.default currentThis will infer the origin my_branch part, thus you can do:git push -uWhich will both create the remote branch with the same name and track it.You can simplygit checkout -b my-branch origin/whateverin the first place. If you set branch.autosetupmerge or branch.autosetuprebase (my favorite) to always (default is true), my-branch will automatically track origin/whatever.See git help config.You can use:git config --global branch.autosetupmerge alwayswhich will link the upstream branch each time you create or checkout a new branch.See https://felipec.wordpress.com/2013/09/01/advanced-git-concepts-the-upstream-tracking-branch/This also works with autosetuprebase, if you follow a more rebase focused workflow, but don't use this unless you know what you're doing, as it will default your pull behavior to rebase, which can cause odd results.You can also explicitly tell git pull what remote branch to pull (as it mentions in the error message):git pull <remote-name> <remote-branch>Be careful with this, however: if you are on a different branch and do an explicit pull, the refspec you pull will be merged into the branch you're on!For what it is worth, if you are trying to track a branch that already exists on the remote (eg. origin/somebranch) but haven't checked it out locally yet, you can do:$ git checkout --track origin/somebranchNote: '-t' is the shortened version of '--track' option.This sets up the same association right off the bat.You can set upstream simpler in two ways. First when you create the branch:git branch -u origin my_branchor after you have created a branch, you can use this command.git push -u origin my_branchYou can also branch, check out and set upstream in a single command:git checkout -b mybranch --track origin/mybranchMy personally preference is to do this in a two-step command:git checkout -b mybranchgit push -u origin mybranchI use this Git alias instead of copy/pasting the suggestion from Git every time: https://gist.github.com/ekilah/88a880c84a50b73bd306Source copied below (add this to your ~/.gitconfig file):[alias]  pushup = ""!gitbranchname() { git symbolic-ref --short HEAD; }; gitpushupstream() { git push --set-upstream origin `gitbranchname`; }; gitpushupstream""git branch --set-upstream-to=origin/master<branch_name>"
"You are just fetching upstream/develop, while you want to fetch origin to have origin/mac8 available.git fetchgit checkout ""new brach"" git pull ""new branch"" git merge ""new branch""This is worked for me"
"I had the same error, with a somewhat simar setup (sharing a central bare repo over a windows network amongst several computers). For some reason, on one of the computers that had cloned the central repo nothing was working all of a sudden. Pulling and fetching resulted in the error you described.The strange thing was that on another computer on the network, cloning the central repo worked fine.So the problem was only occurring on a specific computer used by one specific developer on the network. It turned out to be corrupted Windows sharing permissions. What fixed it was removing the affected user's access permissions for the central repo folder, applying the change, and then re-adding in the permissions back.I solved by myself looking through the web to fix the remote repository:http://rewoo.wordpress.com/2012/02/14/recover-a-corrupt-git-bare-repository/This fixed my problem, I run only the git fsck --full and the git gc --prune=todayNow cloning and pulling works again.Thanks anyway"
"This can be done by cloning to a new directory, then moving the .git directory into your existing directory.If your existing directory is named ""code"".git clone https://myrepo.com/git.git tempmv temp/.git code/.gitrm -rf tempThis can also be done without doing a checkout during the clone command; more information can be found here.Don't clone, fetch instead. In the repo:git initgit remote add origin $url_of_clone_sourcegit fetch origingit checkout -b master --track origin/master # origin/master is clone's defaultThen you can reset the tree to get the commit you want:git reset origin/master # or whatever commit you think is proper...and you are like you cloned.The interesting question here (and the one without answer): How to find out which commit your naked tree was based on, hence to which position to reset to.I'd git clone to a new directory and copy the content of the existing directory to the new clone.Using a temp directory is fine, but this will work if you want to avoid that step. From the root of your working directory:$ rm -fr .git$ git init$ git remote add origin your-git-url$ git fetch$ git reset --mixed origin/mastergit clone your_repo tmp && mv tmp/.git . && rm -rf tmp && git reset --mixedThere are two approaches to this. Where possible I would start with a clean folder for your new git working directory and then copy your version of things in later. This might look something like*:mv $dir $dir.origgit clone $url $dirrsync -av --delete --exclude '.git' $dir.orig/ $dir/rm -rf $dir.origAt this point you should have a pretty clean working copy with your previous working folder as the current working directory so any changes include file deletions will show up on the radar if you run git status.On the other hand if you really must do it the other way around, you can get the same result with something like this:cd $dirgit clone --no-checkout $url tempdirmv tempdir/.git .rmdir tempdirgit reset --mixed HEADEither way, the first thing I would do is run something like git stash to get a copy of all your local changes set aside, then you can re-apply them and work through which ones you want to get committed.* Both examples assume you start out on the shell in the parent directory of your project."
"This problem is related to the SILK package. The source URL of SILK is moved to a different one. You have to download it from the source and install manually to continue. Steps to be followed :-svn checkout http://csipsimple.googlecode.com/svn/trunk/ CSipSimple-trunk (when successful, don't make)Download  SILK_SDK_SRC_v1.0.9.zip: http://code.google.com/p/bkvoice/downloads/detail?name=SILK_SDK_SRC_v1.0.9.zip&can=2&q=Create folder sources in /jni/silk/Unzip and copy to sourcescd CSipSimple-trunk/CSipSimplemake"
"git stashgit checkout some-branchgit stash pop?the last helped me, but modified. git checkout -b newbranchgit checkout mastergit merge newbranchgit branch -d newbranchgit checkout masterThat's result something like this:Warning: you are leaving 2 commits behind, not connected toany of your branches:1e7822f readme0116b5b returned to clean djangoIf you want to keep them by creating a new branch, this may be a good time to do so with:git branch new_branch_name 1e7822f25e376d6a1182bb86a0adf3a774920e1eSo, let's do it:git merge 1e7822f25e376d6a1182bb86a0adf3a774920e1eLeaving another way heregit branch newbranchgit checkout master git merge newbranchAlternatively, you could setup your submodules so that rather than being in their default detached head state you check out a branch.Edited to add:One way is to checkout a particular branch of the submodule when you add it with the -b flag:git submodule add -b master <remote-repo> <path-to-add-it-to>Another way is to just go into the submodule directory and just check it outgit checkout masterI recently ran into this problem again. It's been a while since I last worked with submodules and having learned more about git I realized that simply checking out the branch you want to commit on is sufficient. Git will keep the working tree even if you don't stash it.git checkout existing_branch_nameI guess if you want to work on a new branch this should work for you.git checkout -b new_branch_nameI guess the merge will fail if you have conflicts in the working tree, but that should be quite unusual and if it happens you can just stash it, pop it and resolve the conflict.Compared to the accepted answer, this answer will save you the execution of two commands, that doesn't really take that long to execute anyway. Therefore I will not accept this answer, unless it miraculously gets more upvotes (or at least close) than the currently accepted answer."
"Change the credential of the free style project to default option - none -Because the ssh will use the API token of the Gitlab plugin value to access to the Gitlab server. Therefore if you specify another SSH key to access the Gitlab server in the project, they will stuck forever. This took my one week to find this out."
"Your alias doesn't need to be run through the shell, you should be able to do this:[alias]    back=checkout HEAD^ --Git will automatically append the alias' arguments, meaning this:$ git back afile bfile cfilewill turn into this:$ git checkout HEAD^ -- afile bfile cfileBonus: Note the use of the double hyphen ""--"", this tells checkout that the remaining arguments are all files, otherwise it may mistakenly interpret a file as an existing branch or other ref.To address the poster's requirement of using a shell command alias, the catch is that the subshell will have it's working directory set to the repository's root directory. Here's what git help config has to say:alias.*    [...] Note that shell commands will be executed from the    top-level directory of a repository, which may not necessarily be    the current directory.  GIT_PREFIX is set as returned by     running git rev-parse --show-prefix from the original current directory.The good news is the GIT_PREFIX variable that you can use in your command like so:back1=!sh -uc 'git checkout HEAD^ -- ""$GIT_PREFIX/$1""' -"
"My guess is that someone else has accidentally committed this file. How to resolve this:Remove your local .pyc filerm rtb_redis_connections/redis_connections.pycDo the pullgit pullRemove the file from git and push up the changesgit rm rtb_redis_connections/redis_connections.pycgit commit -m ""Remove pyc file""git push origin masterAssuming that you are working on the master branch that is.Why don't you put them to .gitignore?You either need to add te rtb_redis_connections directory to the repository so that it tracks to the remote, or add the files or directory to .gitignore."
"This error can occur when there is an underlying SSH authentication issue, like having the wrong public key on the git remote server or if the git remote server changed its SSH host key.Eclipse will use the .ssh directory you specify in Preferences -> General -> Network Connections -> SSH2 for its ssh configuration. Set it ""{your default user directory}.ssh\"" .To fix things, first you need to determine which ssh client you are using for Git. This is stored in the GIT_SSH environmental variable. Right-click on ""Computer"" (Windows 7), then choose Properties -> Advanced System Settings -> Environment Variables. If GIT_SSH contains a path to plink.exe, you are using the PuTTY stack.To get your public key, open PuTTYgen.exe and then load your private key file (*.ppk). The listed public key should match the public key on the git remote server.To get the new host key, open a new PuTTY.exe session, and then connect to git@{git repo host}.Click OK and say yes to store the new key.Once you get a login prompt, you can close the PuTTY window. The new key has been stored.Restart Eclipse.If GIT_SSH contains a path to ""ssh.exe"" in your ""Git for Windows"" tree, you are using Git for Windows's OpenSSH.Set %HOME% to your default user directory (as listed in Eclipse; see above).Set %HOMEDRIVE% to the drive letter of your default user directory.Set %HOMEPATH% to the path to your default user directory on %HOMEDRIVE%To get your public key, open the file %HOMEDRIVE%%HOMEPATH%/.ssh/id_rsa.pub (or id_dsa.pub) in a text editor. The listed public key should match the public key on the git remote server.To get the new host key, run: cmd.exeRun Git BashCtrl-CAt the bash prompt, run /c/path/to/git/for/windows/bin/ssh.exe git@{git remote host}.Type yes to accept the new key.Once you have a login prompt, type: ctrl-cClose the cmd.exe windowRestart Eclipse.Finally, if you are still having trouble with your external ssh client, delete the GIT_SSH environmental variable and set the HOME environmental variable to your default user directory on Windows. Without the GIT_SSH variable, EGit will use its internal ssh client (java). It will use the .ssh directory you specified above as its SSH configuration directory.Note: If you have Git for Windows, you can use its tools to create a SSH key pair your .ssh directory:Set %HOME% to your default user directory (as listed in Eclipse).Set %HOMEDRIVE% to the drive letter of your default user directory.Set %HOMEPATH% to the path to your default user directory on %HOMEDRIVE%Run Git BashCtrl -CRun: ssh-keygen.exe -t rsa -b 2048Save to the default filenamesChoose a passphrase or save without one. If you save with a passphrase, Eclipse will prompt you for it each time you push or pull from your git remote server.Close Git BashYou can also use the GUI in the SSH2 Preference pane in Eclipse to manage hosts and keys."
"The result says You have modified your project info plist and deleted those icon filesThere are some files that change automatically if you run the project and those are machine environment dependent. These xcuserdata could safely be ignored. No need to commit them.I think you have your Default-568h@2x.png. In that case no need to commit  Default-568h@2x copy.png ether.No need to commit untracked files here.What should Xcode 5 gitignore file include?How do I remove local (untracked) files from my current git branch?"
"First, make a backup of your existing repository.  cp -r or something.  That way if your attempts to repair your repository screw it up worse you can restore.Simplest thing to try is replacing that corrupt object file with a working one.  If you have a backup of your repository, use that.  Otherwise do a git clone from your remote repository to get a fresh copy and copy .git/objects/5c/deb9c3a1fe164cb4d2779d1e0d9d9f4ef18c6a into your existing broken one.  See if that fixes it.thanks for replying back. I ran that in the new cloned repo and returned that it unpacked 100% of the objects however they were not in .git/objects/pack of that repo. So, instead and tried something this morning which worked. 1. cloning my github repository into a separate, new directory. 2. copying the locally changed files (that I wanted to commit originally) into my new cloned repository and then pushed them to github. 3. nuked my old local repository and 4. cloned it again to the same file path that I had my old repository.A solution from http://vincesalvino.blogspot.ca/2013/08/git-empty-files-corrupt-objects-and.html allowed me to fix the problem:find .git/objects/ -size 0 -exec rm -f {} \;"
"If you are sure you didn't made any local modification to those files, you can try a git checkout -- .That would reset the working tree to HEAD, and should allows for the checkout to proceed."
"I just ran into this issue as well. I had been added to an existing project. I cloned it and committed a local change. I went to push and got the ERROR: Repository not found. error message. I realized that the person who added me only gave me read-only access to the repo. A quick email to him and I'm able to push. Check to see if you have read-write access.Good luck!I was getting the same errorERROR: Repository not found.   fatal: The remote end hung up unexpectedlyand I had created the repository on Github and cloned it locally.I was able to solve by opening .git/config and removing the [remote ""origin""] section.[remote ""origin""]      url = git@github.com:alexagui/my_project.git     fetch = +refs/heads/*:refs/remotes/origin/*then I ran the following (again)git remote add origin git@github.com:alexagui/my_project.git  git push -u origin masterand this time I was able to push to the repository.I ran into the same issue and I solved it by including my username and password in the repo url:git clone https://myusername:mypassword@github.com/path_to/myRepo.gitI got this error (but before was working). My problem was the missing ssh key binded with the Github account. You can check you current ssh keys with ssh-add -l.If your key is missing, you can add it with ssh-add ~/.ssh/your_keygit remote rm origingit remote add origin <remote url>Had similar issue. The root of the problem was that I followed some online tutorial about adding a new repository to Github. Just go to Github, create a new repo, it will ask you to add a README, don't add it. Create it, and you'll get instructions on how to push.It's similar to the next two lines:git remote add origin https://github.com/YOUR_USER/your-repo.gitgit push -u origin masterIf you belong to a group in Github check that you have Write Access.If you include your username and the repo name we can reasonably help you, at the moment we have no reason to think the repo does actually exist.Additionally, if the repo is private and you don't have access to it, github returns ""Does not exist"" to avoid disclosing the existance of private repos.EDIT: If you're not able to clone it because it's saying it doesn't exist and it's private, it's because you're not sending authentication. Ensure that your public key is added to your keyring, or use HTTP basic auth for the time being.Changing the content of the .git/config file helps as Alex said above. I experienced the same problem and I think it was because I changed my Github username. The local files could not be updated with the changes. So perhaps anytime you change your username you might consider running git remote add origin your_ssh_link_from_githubI hope this helps ;)I had the same problem. My issue was misunderstanding that I had to first create the empty repo on github before pushing to it. Doh! Including this here for anyone else who doesn't realize.You need to check your SSH access as the following: ssh -T git@github.comthis issue was because i don't add the person response on SSH in repository, read more about SSH link-1, link-2.Have experienced the same problem. Everything was working fine for years and then suddenly this error.The problem turns out was that I added a deploy key for another repo to my SSH agent before my user's github SSH key (which I always used to access the repo in question). SSH agent tried the deploy key for another repo first, and GitHub for some totally unexplainable reason was sayingERROR: Repository not found.Once I've removed the deploy key from SSH agent, everything was back to normal.I had this issue and realized I was using a different account from the one whose repo it was. Logging in as the original user resolved the issue.I had a similar problem.  The incorrect credentials were cached in OS X's key-chain.Check out: https://help.github.com/articles/updating-credentials-from-the-osx-keychain"
"The ""detached HEAD"" message is a warning, not an error.The reason for it is simple enough.  Git has two states you can be in with respect to branches:on a branch, ornot on a branch.When you are on a branch and make new commits, the branch automatically advances to include the new commits.When you are not on a branch and make new commits, the non-branch also advances, but‰ÛÓhere's the reason for the warning‰ÛÓif you then switch to some other branch (so that you are on it), git forgets where you were.1  When you are on a branch, the branch name remembers the new commits; when you are not, there is nothing to remember them.You can't be on a remote-tracking branchThe branch origin/branch2 is a remote-tracking branch: that is, a branch that remembers ""where branch2 was on origin the last time we (our git and origin's git) had a conversation about branches"".  Because the point of this is to track where they were, git won't let you get ""on"" that branch and make new commits (which would then remember where you are instead of where they were).Because you can't be on it, checking it out gives you that ""detached HEAD"" state instead.But you can be on a normal (local) branchThe branch branch2 is a normal, ordinary, local branch.  It is yours to do with as you wish.  You can get on it and make new commits.(Your local branch can also remember the remote-tracking branch, as its so-called upstream.  Git's confusing terminology for this is that your local branch is then ""tracking"" the remote-tracking branch.  The word ""tracking"" appears too many times here, as does the word ""branch"", all with different meanings.)1Actually it saves it for a while, in the reflog for HEAD, but this is only good for 30 days by default."
"because it finds less than oneNope: because it finds more than one matching remote branch, which means the function remote_find_tracking() returns more than one tracking branch for a given local branch ref.Is some_remote_branch not already tracked by one of your local branches?(a git config -l would allow you to check what you have currently have set up).(a git branch -r can also help to list your current remote-tracking branches. )remote branches, which I thought are something different that remote-tracking branches.Wrong, as illustrated by this thread: remote-branches are the ""real"" remote-tracking-branches. You don't commit to them locally, they are essentially read-only copies of exactly what is happening in a remote repository.  If you try to   'git-checkout' a remote-tracking branch, you will get a detached HEAD.Local branch:    A branch to which you may commit changes. Optionally, the branch can be   configured to ""follow"" one of your remote-tracking branches. This means that a 'git-pull' without arguments (when your local branch is checked out), will automatically 'git-fetch' and then 'git-merge' the remote-tracking branch.Now:it's the job of git-fetch to update remote-tracking branches with any changes found in the remote repository.Git-pull runs git-fetch and then runs a git-merge to update the currently-checked-out branch.The problem is, for git-merge:When this happens, git-merge must decide which remote-tracking-branch to merge into the currently checked out local branch.  You can set which remote-tracking-branch will be selected in this situation with the --track option.--track sets up a local following branch to refer to a remote's branch, not to the tracking branchConsider that remote_find_tracking() takes a single remote and a refspec with src filled, and returns the given refspec after filling its dst, if an appropriate tracking was configured for the remote, meaning git./* * For the given remote, reads the refspec's src and sets the other fields. */int remote_find_tracking(struct remote *remote, struct refspec *refspec);May be it considers it already has a local following branch matching some_remote_branch. Do you have any local branch with that exact same name?Or, the other way around: your current branch has a remote branch with a similar name, which makes it a natural candidate for any git-merge: trying to make it track another remote branch would make the git-merge unable to choose which local branch to update/merge with changes of a remote.Got it! The problem was that I have previously set up a remote with --mirror, for the purpose of having a backup / public copy of my repository.If you rungit remote add --mirror <name> <url>it does not only flag the remote as mirror (which is what I wanted for pushes), but also configures remote.<mirror>.fetch option for the mirror to +refs/*:refs/*, which means that all of your branches suddenly ""track"" your mirror repository and any attempt to create a tracking branch is going to fail.(As an added bonus, running git fetch <mirror> is going to overwrite all your refs with old ones from your backup repo.)The solution that seems to fix this issue is setting remote.<mirror>.fetch to : (which, I hope, means ""never fetch anything""). This apparently fixes the tracking issue and eliminates the deadly fetch.I saw this also when I had two remote repo's with the same (default) fetch pattern (fetch = +refs/heads/*:refs/remotes/origin/*) and the same branches.I still haven't worked out how to fix it properly, since I want to continue to push/pull to both repo's, but manually adding the info to the project's .git/config works, e.g.:[branch ""mybranch""]  remote = origin  merge = refs/heads/mybranchI got in a situation like this, but I do not know how. The listing from git branch -av showed me only a single remote tracking branch for the branch I cared about (origin/dev).What I did to fix it was to use the hexadecimal commit hash instead of origin/dev:git checkout -b dev abc123git push -u origin devWhen I did the push with -u Git said Branch dev set up to track remote branch dev from origin. Subsequent pulls and pushes worked as I expected."
"Update November 2013:Following rajibchowdhury's answer (upvoted), the git rm which is advised is for removing the special entry in the index indicating a submodule (a 'folder' with a special mode '160000').  If that special entry path isn't referenced in the .gitmodule (like 'Classes/Support/Three20' in the original question), then you need to remove it, in order to avoid the ""No submodule mapping found in .gitmodules for path"" error message.You can check all the entries in the index which reference a submodule:git ls-files --stage | grep 160000Original answer (November 2010)Did you declare your initial submodule correctly? (i.e. without any tail '/' at the end, as described in my old answer, even though your .gitmodule has paths which looks ok in it).This thread mentions:do you get the same error when running 'git submodule init' from a fresh clone?  If so, you have something wrong.  If you have no submodules, delete .gitmodules, and any references to submodules in  .git/config, and ensure the Pikimal dir does not have a .git dir in it.  If that fixes the problem, check in and do the same on your cruise working copy. Obviously, don't delete your main .gitmodules file, but look after other extra .gitmodules files in your working tree.Still in the topic of ""incorrect submodule initialization"", Jefromi mentions submodules which actually are gitlinks.See ""Git - how to track untracked content?"" to see how to convert such a directory to a real submodule.No submodule mapping found in .gitmodules for path 'OtherLibrary/MKStore'when$ git submodule update --initI didn't know why the error occur. After spending a minute and found the answer in stackoverflow.$ git rm --cached OtherLibrary/MKStoreand then update the submodule again. It's working fine.http://en.saturngod.net/no-submodule-mapping-found-in-gitmodulesI resolved this issue for me. Initially I tried to do this:git submodule add --branch master [URL] [PATH_TO_SUBMODULE]As it turns out the specification of the --branch option should not be used if you want to clone the master branch. It throws this error:fatal: Cannot force update the current branch.Unable to checkout submodule '[PATH_TO_SUBMODULE]'Every time you try to do agit submodule syncThis error will be thrown:No submodule mapping found in .gitmodules for path '[PATH_TO_SUBMODULE]'And the lines needed in .gitmodules are never added.So the solution for me was this:git submodule add [URL] [PATH_TO_SUBMODULE]I just hit this error after trying to ""git submodule init"" on a new checkout of my repo. Turns out I had specified the module sub-folder with the wrong case initially. Since I'm on a Mac with a case-sensitive filesystem (hurr) it was failing. For example:git submodule add git@github.com:user/project.git MyApp/Resources/ProjectCloning into 'MyApp/Resources/Project'succeeds but the trouble is that on disk the path is Myapp/Resources/ProjectWhat I don't understand is why git is init'ing the module to wrong folder (ignoring the incorrect case in my command) but then operating correctly (by failing) with subsequent commands.Just had this problem.  For a while I tried the advice about removing the path, git removing the path, removing .gitmodules, removing the entry from .git/config, adding the submodule back, then committing and pushing the change.  It was puzzling because it looked like no change when I did ""git commit -a"" so I tried pushing just the removal, then pushing the readdition to make it look like a change.After a while I noticed by accident that after removing everything, if I ran ""git submodule update --init"", it had a message about a specific name that git should no longer have had any reference to: the name of the repository the submodule was linking to, not the path name it was checking it out to.  Grepping revealed that this reference was in .git/index.  So I ran ""git rm --cached repo-name"" and then readded the module.  When I committed this time, the commit message included a change that it was deleting this unexpected object.  After that it works fine.Not sure what happened, I'm guessing someone misused the git submodule command, maybe reversing the arguments.  Could have been me even...  Hope this helps someone!When I use SourceTree to do the stuff, it will spit out this message.The message that I encountered:git -c diff.mnemonicprefix=false -c core.quotepath=false -c credential.helper=sourcetree submodule update --init --recursiveNo submodule mapping found in .gitmodules for path 'SampleProject/SampleProject'Completed with errors, see aboveMy scenario is I misapplied the project directory the contains .git folder.SourceTree regarded this folder as git submodule, but actually not.  My solution is use command line to remove it.  $ git rm -r SampleProject --cached$ git commit -m ""clean up folders""remove the garbage in git and keep it clean.Scenario: changing the submodule from directory dirA-xxx to another directory dirB-xxxmove the dirA-xxx to dirB-xxxmodify entry in .gitmodules to use dirB-xxxmodify entry in .git/config to use dirB-xxxmodify .git/modules/dirA-xxx/config to reflect the correct directorymodify dirA-xxx/.git to reflect the correct directoryrun  git submodule statusif return error: No submodule mapping found in .gitmodules for path dirA-xxx. This is due to dirA-xxx is not existing, yet it is still tracked by git. Update the git index by: git rm --cached dirA-xxxTry with git submodule foreach git pull.I didn't go through the actual study of git submodule structure, so above steps may break something. Nonetheless going through above steps, things look good at the moment. If you have any insight or proper steps to get thing done, do share it here. :)in the file .gitmodules, I replaced string ""path = thirdsrc\boost"" with ""path = thirdsrc/boost"", and it solved! - -Usually, git creates a hidden directory in project's root directory (.git/)When you're working on a CMS, its possible you install modules/plugins carrying .git/ directory with git's metadata for the specific module/pluginQuickest solution is to find all .git directories and keep only your root git metadata directory. If you do so, git will not consider those modules as project submodules.After looking at my .gitsubmodules, turned out I did have a capital where I should have.  So keep in mind, the .gitsubmodules directories are CAP SENSITIVEThe folder mapping can be found in .git/modules folder (each has config file with reference to its worktree), so make sure these folders correspond to the configuration in .gitmodules and .git/config.So .gitmodules has the correct path:[submodule ""<path>""]  path = <path>  url = git@github.com:foo/bar.gitand in .git/modules/<path>/config in [core] section you've the right path to your <path>, e.g.[core]  repositoryformatversion = 0  filemode = true  bare = false  logallrefupdates = true  worktree = ../../../<path>If the right folder in .git/modules is missing, then you've to go to your submodule dir and try git reset HEAD --hard or git checkout master -f. If this won't help, you probably want to remove all the references to the broken submodule and add it again, then see: Rename a git submodule."
"Easy answer: move the old repo away and reclone.  If you have stuff in the old repo you want to preserve, there are ways of getting them, but first get a good repo.First, you can check the file system for errors: fsck -yThen, check the git repository: git fsck"
"This is why you are getting the error message that you are.git checkout can do one of two things. If you just specify a branch and don't specify any paths then it will switch your current branch to the branch that you specified.git checkout mybranch   # switch to branch 'my branch'If you supply some paths, then git will checkout those paths either from the index or, if you specify a branch, from a given branch.git checkout myfile   # checkout 'myfile' from indexAs you can see, there is a potential ambiguity. What should happen if you had a branch called myfile or a file called mybranch?The way that git resolves this ambiguity is that it tests the parameter to see whether it matches a branch first, and if not it assumes that the parameter refers to a file. If you had a branch and file with the same name you can force git to treat the parameter as a file with this syntax.git checkout -- myfile  # treat 'myfile' as a fileThe -b option, which creates a new branch, is only valid when you are using the branch switching form of checkout and not when you are checking out specified files from the index.git checkout -b newbranch myfile  # Illegal. I can't use `-b` when                                  # I'm checking out files.If you try git checkout -b newbranch origin/BRANCH and you get this error it means that origin/BRANCH didn't match the name of any branch that you have so git assumed that you must be referring to a file.To show what remote branch references you have you can do git branch -r. If you don't have a reference to a branch that you think should exist you may have to perform a git fetch to retrieve it from the remote.If you supply -b but no branch name to base the new branch off, git defaults to using HEAD, i.e. the commit that your current checked out branch is on.git checkout -b origin/BRANCHThis creates a new local branch called origin/BRANCH based on your current commit. This is, at best, likely to cause you some confusion and doesn't sound like it's what you want at all.git checkout switches to some branch, it does not fetch it from remote repository. git checkout -b also creates the branch. To retrieve a branch from remote repository, use git fetch."
"From my comment:Why don't you create two branches and add the two other versions to them and then work on the branches?Which I think would agree with ctcherry's answer as well.But if you really do want to create a completely different ""branch"" that is unrelated to master, then you can do it with git checkout --orphan. The manual for git checkout describes to work of the option --orphan:Create a new orphan branch, named <new_branch>, started from <start_point> and switch to it. The first commit made on this new branch will have no parents and it will be the root of a new history totally disconnected from all the other branches and commits.You might use it like this:git checkout --orphan version2git rm -rf .<add version2 script>git add your filesgit commit -m 'Initial commit for version 2'If your Git is older than 1.7.2 (when git checkout --orphan was introduced), then you can use the alternate command sequence from ‰ÛÏCreating New Empty Branches‰Ûù in the Git Community Book:Ocasionally, you may want to keep branches in your repository that do not share an ancestor with your normal code. Some examples of this might be generated documentation or something along those lines. If you want to create a new branch head that does not use your current codebase as a parent, you can create an empty branch like this:git symbolic-ref HEAD refs/heads/newbranch rm .git/index git clean -fdx <do work> git add your files git commit -m 'Initial commit'You can create a branch for each version of the script, and commit them to those individual branches. Then merge them one at a time back into master. That should have the effect you are looking for.Why not start with an 'Empty' repo (e.g. a single readme of your problem statement above). Then you can branch the three times and add the different script versions into each of the branches, and commit them separately. You can then branch/edit/commit/merge and try out all you options in a well managed way."
"Check if your commits have Change-Id: ... in their descriptions. Every commit should have them.If no, use git rebase -i to reword the commit messages and add proper Change-Ids (usually this is a SHA1 of the first version of the reviewed commit).For the future, you should install commit hook, which automatically adds the required Change-Id.Execute scp -p -P 29418 username@your_gerrit_address:hooks/commit-msg .git/hooks/ in the repository directoryor download them from http://your_gerrit_address/tools/hooks/commit-msg and copy to .git/hookstry this:git commit --amendand copy paste the Change-Id: I55862204ef71f69bc88c79fe2259f7cb8365699a at the end of the file.save it and push it again!If you need to add Change-Id to multiple commits, you can download the hook from your Gerrit server and run these commands to add the Change-Ids to all commits that need them at once.  The example below fixes all commits on your current branch that have not yet been pushed to the upstream branch.tmp=$(mktemp)hook=$(readlink -f $(git rev-parse --git-dir))/hooks/commit-msggit filter-branch -f --msg-filter ""cat > $tmp; \""$hook\"" $tmp; cat $tmp"" @{u}..HEADIt is because Gerrit is configured to require Change-Id in the commit messages.http://gerrit.googlecode.com/svn-history/r6114/documentation/2.1.7/error-missing-changeid.htmlYou have  to change the messages of every commit that you are pushing to include the change id ( using git filter-branch ) and only then push."
"You're doing it backwards.  You need to be in the scope of the gh-pages branch and then do your checkout operations:$ git checkout gh-pages$ git checkout master dir/file1I believe the only way you could copy from a branch to another branch and change directory (without of course doing the manual work after the copy) would be the following:$ git show master:dir/file1 > new_location/file1"
"If something can be found in both refs/heads/ and refs/remotes/ then this is ambiguous. You have local branch origin/release_2.6 and remote tracking branch release_2.6 for remote origin. Don't think you are supposed to have a refs/heads/origin/release_2.6 branch though. Anyway, you can specify full reference name to resolve ambiguity:git co -b release_2.6 refs/remotes/origin/release_2.6I had a similar error when I cloned an SVN repository with git-svn, but I had no ""origin"" in either path.  I ended up with the following refs:   0e4b5116f69200ea0d7a2ff9f0fa15630d02b153 refs/heads/development 0ef5969f7ee44b16817053bfe146c499be5f77b7 refs/remotes/development  and I was unable to branch; when I tried I would get the ""ambiguous object name"" error.  My error was that when I did the original git svn clone, I did not specify a --prefix; the correct form was  git svn clone --prefix origin/ --stdlayout xxxxand then I ended up with refs/remotes/origin/development, etc. and there was no problem branching.  According to the man page, you must have the trailing slash on the prefix.LiamI had similar error when I created a remote branch using git-svn. I had the remote branch and the local branch with same name. You can rename the local branch usinggit branch -m old_branch new_nameThis will just rename the local branch without changing the remote branch. Shravan"
"When you have to unlink file, you have to have permission 'w' for directory, in which file is, not for the file...FWIW - I had a similar problem and I'm not sure if this alleviated it (beyond the permission mod):  Closing Eclipse that was using the branch with this problem.If you are using any IDE most likely the problem is that file was used by some process. Like your tomcat might be using the file. Try to identify that particular process and close it. That should solve your problem."
"The complaint is actually that the remote didn't reply with a proper git response - ie, there's a problem on the server running .  (The first four bytes should be the line length - instead, they were the characters Unab...  probably an error message of some kind.)What happens when you run ssh <host> git-receive-pack <path-to-git-repository>?  You should see the error message that your git client is barfing on.Maybe you have a statement in the server's .bashrc that produces output. I, for example had this:[[ -s ""$HOME/.rvm/scripts/rvm"" ]] && source ""$HOME/.rvm/scripts/rvm""rvm use ruby-1.9.3-p194@rails32In this case the output from the rvm use will be (wrongly) interpreted as coming from git. So replace it by:rvm use ruby-1.9.3-p194@rails32 > /dev/nullYou can redirect any output from .bashrc to stderr:# inside .bashrcecho 'some error/warning/remind message' 1>&2git will ignore this symbolsCheck your startup files on the account used to connect to the remote machine for ""echo"" statements. For the Bash shell these would be your .bashrc and .bash_profile etc. Edward Thomson is correct in his answer but a specific issue that I have experienced is when there is some boiler-plate printout upon login to a server via ssh. Git will get the first four bytes of that boiler-plate and raise this error. Now in this specific case I'm going to guess that ""Unab"" is actually the work ""Unable..."" which probably indicates that there is something else wrong on the Git host.I had a similar problem on Windows using Git Bash. I kept getting this error when trying to do a git clone. The repository was on a Linux box with GitLab installed.git clone git@servername:path/to/repofatal: protocol error: bad line length character: git@I made sure the ssh key was generated. The public key was added on GitLab. The ssh-agent was running and the generated key was added (github link).I ran out of options and then finally tried closing Git Bash and opening it again by right clicking 'Run as Administrator'. Worked after that.The error transformed in:fatal: protocol error: bad line length character: fataafter adding the location of git-upload-pack to the system path.The problem seem to be an apostrophe added around the repository name: Looking with a tool like Process Monitor (from sys internals), that were added by the git client. It seems to be a git specific windows problem.I tried the same command line in the prompt of the server: the full error was ""fatal: not a given repository (or any of the parent directories): .git""In conclusion, to me it seems like a software bug. Be advised that I am not a git expert, it is first time I use git, i come from subversion and perforce.I had the same problem as Christer Fernstrom. In my case it was a message I had put in my .bashrc that reminds me do do a backup when I haven't done one in a couple of days.i also encounter that error once in a while, but when it does, it means that my branch is not up-to-date so i have to do git pull origin <current_branch>FYI I got this same error message after I upgraded a CentOS6 container to CentOS7 -- some git operations started failing when building the container, e.g.# git remote show originfatal: protocol error: bad line length character: InvaRunning ssh gave me an error I could search on:# ssh git@bitbucket.orgInvalid clock_id for clock_gettime: 7That led me to https://github.com/wolfcw/libfaketime/issues/63 where I realized I had forgotten I had a LD_PRELOAD=/usr/local/lib/faketime/libfaketime.so.1 in a parent Dockerfile. Commenting that out fixed the error.After loading the SSH private key in Git Extensions, this issue gets resolved."
"First, you and those you're working with need to agree whether a topic/devel branch is for shared development or just your own. Other developers know not to merge on my development branches because they'll be rebased at any time. Usually the workflow is as follows:o-----o-----o-----o-----o-----o       master \   o-----o-----o                      devel0                \                  o-----o-----o       devel1Then to stay up-to-date with remote I'll do the following: git fetch origin git checkout master git merge --ff origin/masterI do this for two reasons. First because it allows me to see if there are remote changes without needing to switch from my devel branch. Second it's a safety mechanism to make sure I don't overwrite any un-stashed/committed changes. Also, if I can't fast-forward merge to the master branch that means either someone has rebased the remote master (for which they need to be flogged severely) or I accidentally committed to master and need to clean up my end.Then when remote has changes and I've fast forwarded to the latest I'll rebase:git checkout devel0git rebase mastergit push -f origin devel0Other developers then know they'll need to rebase their devel branches off my latest:git fetch <remote>git checkout devel1git rebase <remote>/devel0Which results in much cleaner history:o-----o                                 master       \         o-----o-----o                  devel0                      \                        o-----o-----o   devel1Don't merge commits back and forth at your whim. Not only does it create duplicate commits and make history impossible to follow, finding regressions from a specific change becomes near impossible (which is why you're using version control in the first place, right?). The problem you're having is the result of doing just this.Also it sounds like other developers may be making commits to your devel branches. Can you confirm this?The only time to merge is when your topic branch is ready to be accepted into master.On a side note. If multiple developers are committing to the same repository you should all consider having named branches to distinguish between developers devel branches. For example:git branch 'my-name/devel-branch'So all developers topic branches reside within their own nested set.You need to force the push as you have moved the commits further down the line git is expecting you to add commits to the tip of the branch. git push -f origin myNewFeature will fix your problem.Tip: Above is a legitimate usage of force pushing. Never ever rewrite the history on a publicly accessible repository or a lot of people will hate you.The main thing to keep in mind here is what pull and rebase are doing behind the scenes.A pull will basically do two things: fetch and merge.  When you include --rebase it will do a rebase instead of the merge.A rebase is pretty much like stashing all of your local changes since you branched, fast forwarding your branch to the latest commit on the target, and unstashing your changes in order on top.You never want to push rebased changes to remote branches as this is rewritting history.  Ofcoarse, never is a bit strong as there are almost always exceptions.  The case that you need to maintain a remote version of your local repository to work on a specific environment for example.This will require you to push rebased changes at times either using force:git push -f origin newfeatureOr in some cases your administrator may have removed the ability to force so you must delete and recreate:git push origin :newfeaturegit push origin newfeatureIn either case you must be absolutely sure you know what you are doing if someone else is collaborating with you on your remote branch.  This may mean that you work together initially with merges and rebase those into a more manageable commit format just before going to master and removing your working branch.Remember you can almost always fallback on git's GC by taking advantage of:git reflogThis is a HUGE life saver as you can reset back to a more stable state if you get lost in all of your rebase/conflict management.You need to perform a forced push, i.e. git push -f origin myNewFeatureOh, and you better make damn sure that people don't base anything on your dev branch - usually you aren't supposed to publish branches where you are rewriting history at all (or rather do not rewrite history once published). One way would be using a branch name like wip/myNewFeature and then mentioning that wip branches will be rebased to master from time to time."
"This may be an old reply but I'm hoping this is more useful on next who need this solution.On linux/unix/gitbash/cygwin, tryrm -f .git/index.lockOn Windows Command Prompt, try:del .git\index.lockHope that helps, I found this solution here: Fatal: Unable to create ‰Û÷‰Û_git/index.lock‰Ûª File existscheck if the git still running (ps -ef  | grep git)if not, remove the locked fileif yes, kill the git process at first.On a Windows platform running Visual Studio 2015 RC (v4.6.00057) in combination with SourceTree (v1.6.14.0) will give this error as well. Solution:Assuming you want to use source tree as source code manager, simply disable the source control provider inside Visual Studio like this:Go to: Tools > Options > Source ControlSelect Current source control plug-in as: NoneJust had this issue... Gitbox was at fault. So maybe you had a GUI running that was causing problems.Sometimes Git creates a lock file associated with your repo while you are making any changes or most probably when you are using sub modules. The error message will show you the path of the lock file.Fix: Just manually go to the path in terminal and delete the lock file by $ rm index.lockIt should help.Probably (it has happened to me), ls command is saying it doesn't exist because current user doesn't have permissions to reach that directory or file.Remove the lock and make sure you are executing git with the right user in order to avoid permission problems.If you are in a GNU/Linux box with sudo command: sudo rm project_path/.git/index.lockI had this exact same error, but the issue was not the lock file. Instead the issue was that I had copied the contents of another git repo into this repo, including the .git invisible folder. So, SourceTree was confused about which repo I wanted to stage files to (there being a mismatch between the repo SourceTree thought I was in, and the one that the contents of my embedded .git dir said I should be in).I had this problem with TortoiseGit with Cygwin on Windows. I wasn't able to delete remove ./.git/index.lock even with administrative privileges, I tried both Cygwin and command prompt, it said the file was in use by another process. I found that I had 2 instances of TortoiseProc.exe running. I killed one of them, and closed all of my windows explorer windows, and then was able to delete the file. I don't know if killing an instance of TortoiseProc.exe was the solution or closing windows explorer windows.The solution for me was to delete the .index file and allow Git to rebuild another.I created an empty index.lock file, deleted it using windows command"
"Perhaps try:git push git@github.com:{username}/{projectname}.git HEAD:testThe format of the last parameter on that command line is a refspec which is a source ref followed by a colon and then the destination ref. You can also use your local branch name (my_test) instead of HEAD to be certain you're pushing the correct branch.The documentation for git push has more detail on this parameter.Also, you don't need to type out the whole url each time you want to push.  When you ran the clone, git saved that URL as 'origin', that's why you can run something like 'merge origin/test' - it means the 'test' branch on your 'origin' server.  So, the simplest way to push to your server in that case would be:git push origin my_test:testThat will push your local 'my_test' branch to the 'test' branch on your 'origin' server.  If you had named your local branch the same as the branch on the server, then the colon is not neccesary, you can simply do:git push origin testI think here you will need to set up branch tracking. Please run the following to enable trackinggit branch --track my_test origin/my_testTo test git push -u origin my_testgit pull origin my_testThis error also comes up if you try to push to a new repository without having committed anything first. Try:git add -Agit commit -am 'Initial commit'And then try your push again."
"Rather than leave this open I think I'll give an answer to my own question. Using git reflog --all is a good way to browse orphaned commits - and using the SHA1 hashes from that you can reconstruct history.In my case though, the repository was corrupted so this didn't help; git fsck can help you find and sometimes fix errors in the repository itself.One good feature of git is that it detects corruption. However, it does not include error correction to protect from corruption.I hope that you have pushed the contents of this repository to another machine or that you have backups to recover the corrupted parts.I do not have any experience with git on windows but have never seen this sort of behavior with git on Linux or OS X."
"I was able to finally solve this issue. Here is what I did to solve it:In article https://help.github.com/articles/remove-sensitive-data there is a heading for Purge the file from your repo. I following their example for removing the Rakefile but used the problematic folder instead:git filter-branch --index-filter 'git rm -r --cached --ignore-unmatch modules/sudo'  --prune-empty --tag-name-filter cat -- --allSince the problematic tree was a folder I added -r to the command. The result was a cleanup of all the commits for the sudo modiles and thus, object 15abe3addde5ad5f7d25e8f0f220d2e9faf3cb22 disappeared! After a commit of the changes, the push was successful. I was able to later re-add the broken module without issue."
"You can just delete and re-checkout the offending files from the index like this:rm <files>git checkout -- <files>Or, if they are the only modified files (be careful with this command), you can script it like this:git diff --name-only --diff-filter=M | xargs rm --git checkout -- .On a GNU system you can use a slightly safer pipe, but you don't appear to have spaces or other delimiting characters in your filenames in any case.git diff -z --name-only --diff-filter=M | xargs -0 rm --This might happen if you change core.autocrlf config variable (if I understand your problem correctly).If you are at clean state, i.e. just after commit, and you don't have uncomitted changes, forced re-checkout and removing index should do the trick:$ rm .git/index$ git reset --hard HEADThat, I think, would sync both working area files, and the index (staging area) to follow crlf settings.I had this problem when creating new Xcode project. My solution for this problem:In terminal write$: git config --global --editThen in git config file change safecrlf to false. My settings:[core]    autocrlf = input    safecrlf = falseI know git have cmd line tools for this but they don't work for me.And then Xcode create git repos without any problem.Only thing I can think of is to check if core.safecrlf is set to warn.git config --get core.safecrlfI think possible values are true, false, and warn. I believe that setting to false will resolve the warning, though it may not be a good idea.Try this, it worked for me:cd src/au/policy/daodos2unixIf there are other files in that folder, then you'll want to break it up into the following (otherwise it will try to do it on every file in any subdirectories, which may take a while):cd src/au/policy/daodos2unix EmailQueue.javados2unix EmailQueueFactory.javados2unix PolicyPublisher.javaIt ran really quick on my machine and fixed all of the line endings, and it's a little simpler and easier than some of these other fixes."
"You cannot provide options in the GIT_SSH environment variable; from the git man page:   GIT_SSH       If this environment variable is set then git fetch and git push will use this command instead of ssh when they need to connect       to a remote system. The $GIT_SSH command will be given exactly two arguments: the username@host (or just host) from the URL       and the shell command to execute on that remote system.       To pass options to the program that you want to list in GIT_SSH you will need to wrap the program and options into a shell       script, then set GIT_SSH to refer to the shell script.One option is to add a stanza to your .ssh/config file with the appropriate configuration:Host bitbucket.org  StrictHostKeyChecking no  IdentityFile /home/me/my_private_keyAnother option is to point GIT_SSH to a shell script that does what you want.  E.g., in /home/me/bin/bitbucket_ssh, put:#!/bin/shexec /usr/bin/ssh -o StrictHostKeyChecking=no -i /home/me/my_private_key ""$@""And then point GIT_SSH at /home/me/bin/bitbucket_ssh.I prefer using .ssh/config when possible, because this avoids the need to create a per-destination script for each remote.Note that starting with git 2.3+ (Q1 2015), what you initially tried would work, with the new environment variable GIT_SSH_COMMAND.See commit 3994276 from Thomas Quinot (quinot):git_connect: set ssh shell command in GIT_SSH_COMMANDIt may be impractical to install a wrapper script for GIT_SSH when additional parameters need to be passed.  Provide an alternative way of specifying a shell command to be run, including command line arguments, by means of the GIT_SSH_COMMAND environment variable, which behaves like GIT_SSH but is passed to the shell.The special circuitry to modify parameters in the case of using PuTTY's plink/tortoiseplink is activated only when using GIT_SSH; in the case of using GIT_SSH_COMMAND, it is deliberately left up to the user to make any required parameters adaptation before calling the underlying ssh implementation.GIT_SSH_COMMAND:If either of these environment variables is set then 'git fetch' and 'git push' will use the specified command instead of 'ssh' when they need to connect to a remote system.  The command will be given exactly two or four arguments: the 'username@host' (or just 'host') from the URL and the shell command to execute on that remote system, optionally preceded by '-p' (literally) and the 'port' from the URL when it specifies something other than the default SSH port.$GIT_SSH_COMMAND takes precedence over $GIT_SSH, and is interpreted by the shell, which allows additional arguments to be included.$GIT_SSH on the other hand must be just the path to a program (which can be a wrapper shell script, if additional arguments are needed).You can supply any keyfile you wish to use with the Git command like this:$ PKEY=~/.ssh/keyfile.pem git clone git@github.com:me/repo.gitor this:$ git.sh -i ~/.ssh/keyfile.pem clone git@github.com:me/repo.gitI answered the same question here:http://stackoverflow.com/a/15596980See link for details.Use ssh-agentssh-agent bash -c 'ssh-add /home/me/my_private_key; git clone git@bitbucket.org:uname/test-git-repo.git'"
"git checkout accepts a --ours or --theirs option for cases like this. So if you have a merge conflict, and you know you just want the file from the branch you are merging in, you can do:$ git checkout --theirs -- path/to/conflicted-file.txtto use that version of the file. Likewise, if you know you want your version (not the one being merged in) you can use$ git checkout --ours -- path/to/conflicted-file.txtYou have to resolve the conflict manually (copying the file over) and then commit the file (no matter if you copied it over or used the local version) like thisgit commit -a -m ""Fix merge conflict in test.foo""Git normally autocommits after merging, but when it detects conflicts it cannot solve by itself, it applies all patches it figured out and leaves the rest for you to resolve and commit manually. The Git Merge Man Page, the Git-SVN Crash Course or this blog entry might shed some light on how it's supposed to work.Edit: See the post below, you don't actually have to copy the files yourself, but can use git checkout --ours -- path/to/file.txtgit checkout --theirs -- path/to/file.txtto select the version of the file you want. Copying / editing the file will only be necessary if you want a mix of both versions.Please mark mipadis answer as the correct one.You can also overcame this problem withgit mergetoolwhich causes git to create local copies of the conflicted binary and spawn your default editor on them:{conflicted}.HEAD{conflicted}{conflicted}.REMOTEObviously you can't usefully edit binaries files in a text editor. Instead you copy the new {conflicted}.REMOTE file over {conflicted} without closing the editor. Then when you do close the editor git will see that the undecorated working-copy has been changed and your merge conflict is resolved in the usual way.To resolve by keeping the version in your current branch (ignore the version from the branch you are merging in), just add and commit the file:git commit -aTo resolve by overwriting the version in your current branch with the version from the branch you are merging in, you need to retrieve that version into your working directory first, and then add/commit it:git checkout otherbranch theconflictedfilegit commit -aExplained in more detailFrom the git checkout docsgit checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <paths>... --ours--theirs  When checking out paths from the index, check out stage #2 (ours) or #3 (theirs) for unmerged paths.The index may contain unmerged entries because of a previous failed merge. By default, if you try to check out such an entry from the index, the checkout operation will fail and nothing will be checked out. Using -f will ignore these unmerged entries. The contents from a specific side of the merge can be checked out of the index by using --ours or --theirs. With -m, changes made to the working tree file can be discarded to re-create the original conflicted merge result.I came across a similar problem (wanting to pull a commit that included some binary files which caused conflicts when merged), but came across a different solution that can be done entirely using git (i.e. not having to manually copy files over).  I figured I'd include it here so at the very least I can remember it the next time I need it. :)  The steps look like this:% git fetchThis fetches the latest commit(s) from the remote repository (you may need to specify a remote branch name, depending on your setup), but doesn't try to merge them.  It records the the commit in FETCH_HEAD% git checkout FETCH_HEAD stuff/to/updateThis takes the copy of the binary files I want and overwrites what's in the working tree with the version fetched from the remote branch.  git doesn't try to do any merging, so you just end up with an exact copy of the binary file from the remote branch.  Once that's done, you can add/commit the new copy just like normal.mipadi's answer didn't quite work for me, I needed to do this :git checkout --ours path/to/file.binor, to keep the version being merged in:git checkout --theirs path/to/file.binthengit add path/to/file.binAnd then I was able to do ""git mergetool"" again and continue onto the next conflict.I've come across two strategies for managing diff/merge of binary files with Git on windows.Tortoise git lets you configure diff/merge tools for different file types based on their file extensions. See 2.35.4.3. Diff/Merge Advanced Settings http://tortoisegit.org/docs/tortoisegit/tgit-dug-settings.html. This strategy of course relys on suitable diff/merge tools being available.Using git attributes you can specify a tool/command to convert your binary file to text and then let your default diff/merge tool do it's thing. See http://git-scm.com/book/it/v2/Customizing-Git-Git-Attributes. The article even gives an example of using meta data to diff images.I got both strategies to work with binary files of software models, but we went with tortoise git as the configuration was easy."
"Sudo the command:sudo rm -f ./.git/index.lockBoth errors suggest index.lock is owned by another user. Run the rm as a superuser, then try your commands again. You might also consider setting core.sharedRepository to true if that is, in fact, the case with your repo:core.sharedRepositoryWhen group (or true), the repository is made shareable between several users in a group (making sure all the files and objects are group-writable).When all (or world or everybody), the repository will be readable by all users, additionally to being group-shareable. When umask (or false), git will use permissions reported by umask(2). When 0xxx, where 0xxx is an octal number, files in the repository will have this mode value.  0xxx will override user's umask value (whereas the other options will only override requested parts of the user's umask value). Examples: 0660 will make the repo read/write-able for the owner and group, but inaccessible to others (equivalent to group unless umask is e.g.  0022).  0640 is a repository that is group-readable but not group-writable. See git-init(1). False by default.The issue ended up being Aptana, everytime I ran this it would cause this error when I tried to commit in git.I stopped using aptana studio and I don't have this issue anymore.Do this:rm index.lockfollowed by git reset"
"The above solution is out-dated. Running with the SVN repository results in:Error: The chromium code repository has migrated completely to git.Your SVN-based checkout is now obsolete; you need to create a brand-newgit checkout by following these instructions:http://www.chromium.org/developers/how-tos/get-the-codeNow you need to create a .gclient file like thissolutions = [  {    ""managed"": False,    ""name"": ""src"",    ""url"": ""https://chromium.googlesource.com/chromium/src.git"",    ""custom_deps"": {},    ""deps_file"": "".DEPS.git"",    ""safesync_url"": """",  },]and do:gclient syncgclient config http://src.chromium.org/svn/trunk/srcgclient runhooksOr make a .gclient file with the following content, which skips the huge amount of webkit layout testssolutions = [  { ""name""        : ""src"",    ""url""         : ""http://src.chromium.org/svn/trunk/src"",    ""deps_file""   : ""DEPS"",    ""managed""     : True,    ""custom_deps"" : {      ""src/third_party/WebKit/LayoutTests"": None,      ""src/chrome_frame/tools/test/reference_build/chrome"": None,      ""src/chrome/tools/test/reference_build/chrome_mac"": None,      ""src/chrome/tools/test/reference_build/chrome_win"": None,      ""src/chrome/tools/test/reference_build/chrome_linux"": None,    },    ""safesync_url"": """",  },]"
"It seems those files aren't tracked in your current branch, but are on origin/canc.The simplest thing to do is just rm them and then checkout. If you want to be more cautious, add and stash them, or backup them in any way.Please correct me if I'm wrong. git status --short should list them as untracked, or git clean -ndX should list them as ignored, and git diff --name-status origin/canc HEAD should list them too."
"You can use git checkout <file> to check out the committed version of the file (thus discarding your changes), or git reset --hard HEAD to throw away any uncommitted changes for all files.git fetch origingit reset --hard origin/mastergit pullExplanation:Fetch will download everything from another repository, in this case, the one marked as ""origin"". Reset will discard changes and revert to the mentioned branch, ""master"" in repository ""origin"". Pull will just get everything from a remote repository and integrate. See documentation at http://git-scm.com/docs.I've tried both these and still get failure due to conflicts. At the end of my patience, I cloned master in another location, copied everything into the other branch and committed it. which let me continue.The ""-X theirs"" option should have done this for me, but it did not.git merge -s recursive -X theirs mastererror: 'merge' is not possible  because you have unmerged files. hint: Fix them up in the work tree,  hint: and then use 'git add/rm ' as hint: appropriate to mark  resolution and make a commit,  hint: or use 'git commit -a'. fatal:  Exiting because of an unresolved conflict."
"You would not be working with a detached head by any chance ?As in: indicating that your latest commit is not a branch head.$ git log -1# note the SHA-1 of latest commit$ git checkout master# reset your branch head to your previously detached commit$ git reset --hard <commit-id>As mentioned in the git checkout man page (emphasis mine):It is sometimes useful to be able to checkout a commit that is not at the tip of one of your branches.  The most obvious example is to check out the commit at a tagged official release point, like this:$ git checkout v2.6.18Earlier versions of git did not allow this and asked you to create a temporary branch using the -b option, but starting from version 1.5.0, the above command detaches your HEAD from the current branch and directly points at the commit named by the tag (v2.6.18 in the example above).You can use all git commands while in this state.  You can use git reset --hard $othercommit to further move around, for example.You can make changes and create a new commit on top of a detached HEAD.  You can even create a merge by using git merge $othercommit.The state you are in while your HEAD is detached is not recorded by any branch (which is natural --- you are not on any branch).  What this means is that you can discard your temporary commits and merges by switching back to an existing branch (e.g. git checkout master), and a later git prune or git gc would garbage-collect them.  If you did this by mistake, you can ask the reflog for HEAD where you were, e.g.$ git log -g -2 HEADErr.. If you are a git noob are you sure you have git commit before git push? I made this mistake the first time!Another situation that is important to be aware of: The sort of default state for git is that you are working in the ""master"" branch. And for a lot of situations, you'll just hang out in that as your main working branch (although some people get fancy and do other things).Anyway, that's just one branch. So a situation I might get into is:My active branch is actually NOT the master branch. ... But I habitually do the command: git push (and I had previously done git push origin master, so it's a shortcut for THAT).So I'm habitually pushing the master branch to the shared repo ... which is probably a good clean thing, in my case ...But I have forgotten that the changes I have been working on are not yet IN the master branch !!! So therefore everytime I try git push, and I see ""Everything up to date"", I want to scream, but of course, it is not git's fault! It's mine.So instead, I merge my branch into master, and then do push, and everything is happy again.Maybe you're pushing a new local branch?A new local branch must be pushed explicitly:git push origin your-new-branch-nameJust one of those things about git... You clone a repo, make a branch, commit some changes, push... ""Everything is up to date"". I understand why it happens, but this workflow is extremely unfriendly to newcomers.See VonC's answer above - I needed an extra step:$ git log -1- note the SHA-1 of latest commit$ git checkout master- reset your branch head to your previously detached commit$ git reset --hard <commit-id>I did this, but when I then tried to git push remoterepo master, it said ""error: failed to push some refs. To prevent you from losing history, non-fast-forward updates were rejected, Merge the remote changes (e.g. 'git pull') before pushing again.""So I did 'git pull remoterepo master', and it found a conflict. I did git reset --hard <commit-id> again, copied the conflicted files to a backup folder, did git pull remoterepo master again, copied the conflicted files back into my project, did git commit, then git push remoterepo master, and this time it worked.Git stopped saying 'everything is up to date' - and it stopped complaining about 'fast forwards'.From your git status, you probably has a different situation from mine.But anyway, here is what happened to me.. I encountered the following error:fatal: The remote end hung up unexpectedlyEverything up-to-dateThe more informative message here is that the remote hung up. Turned out it is due to exceeding the http post buffer size. The solution is to increase it withgit config http.postBuffer 524288000I have faced a similar situation; when I made the changes and tried to git push origin master, it was saying everything was up to date.I had to git add the changed file and then git push origin master.  It started working from then on."
"It's worth understanding what those error messages mean - needs merge and error: you need to resolve your current index first indicate that a merge failed, and that there are conflicts in those files.  If you've decided that whatever merge you were trying to do was a bad idea after all, you can put things back to normal with:git reset --mergeHowever, otherwise you should resolve those merge conflicts, as described in the git manual.Once you've dealt with that by either technique you should be able to checkout the 9-sign-in-out branch.  The problem with just renaming your 9-sign-in-out to master, as suggested in wRAR's answer is that if you've shared your previous master branch with anyone, this will create problems for them, since if the history of the two branches diverged, you'll be publishing rewritten history.Essentially what you want to do is to merge your topic branch 9-sign-in-out into master but exactly keep the versions of the files in the topic branch.  You could do this with the following steps:# Switch to the topic branch:git checkout 9-sign-in-out# Create a merge commit, which looks as if it's merging in from master, but is# actually discarding everything from the master branch and keeping everything# from 9-sign-in-out:git merge -s ours master# Switch back to the master branch:git checkout master# Merge the topic branch into master - this should now be a fast-forward# that leaves you with master exactly as 9-sign-in-out was:git merge 9-sign-in-outgit checkout -f 9-sign-in-out # change branch, discarding all local modificationsgit branch -M master # rename the current branch to master, discarding current master"
"It seems like you want the files ignored but they have already been commited. .gitignore has no effect on files that are already in the repo so they need to be removed with git rm --cached. The --cached will prevent it from having any effect on your working copy and it will just mark as removed the next time you commit. After the files are removed from the repo then the .gitignore will prevent them from being added again.But you have another problem with your .gitignore, you are excessively using wildcards and its causing it to match less than you expect it to. Instead lets change the .gitignore and try this..bundle.DS_Storedb/*.sqlite3log/*.logtmp/public/system/images/public/system/avatars/WARNING: it will delete untracked files, so it's not a great answer to the question being posed. I hit this message as well. In my case, I didn't want to keep the files, so this worked for me:git clean  -d  -fx """"http://www.kernel.org/pub/software/scm/git/docs/git-clean.html-x means ignored files are also removed as well as files unknown to git.-d means remove untracked directories in addition to untracked files. -f is required to force it to run.Just force it : git checkout -f another-branchIf you're on OS X, it may be because a file's name has had certain characters change case. Try setting the following config option:git config core.ignorecase trueGit is telling you that it wants to create files (named public/system/images/9/... etc), but you already have existing files in that directory that aren't tracked by Git. Perhaps somebody else added those files to the Git repository, and this is the first time you have switched to that branch?There's probably a reason why those files in your develop branch but not in your current branch. You may have to ask your collaborators why that is.how do I get this working so I can switch branches without deleting those files?You can't do it without making the files disappear somehow. You could rename public to my_public or something for now.if I came back to this branch afterwards would everything be perfect as up to my latest commit?If you commit your changes, Git won't lose them. If you don't commit your changes, then Git will try really hard not to overwrite work that you have done. That's what Git is warning you about in the first instance here (when you tried to switch branches).Unfortunately neither git rm --cached or git clean  -d  -fx """" did it for me.My solution ended up being pushing my branch to remote, cloning a new repo, then doing my merge in the new repo. Other people accessing the repo had to do the same.Moral of the story: use a .gitignore file from inception.This happened to me on a Windows 8 system, using Git from the command prompt.  The rest of my team uses TFS, and I use Microsoft's git-tf to push/pull between TFS and my local Git repository.The problem arose due to some files that had been renamed only to change their case.  What appears to have happened was this:The files were checked in with mixed casing in their names.In a later commit, the file names were changed to all lower-case.git-tf initially got the files in mixed case.When the files were renamed to lower-case, git-tf didn't get the files because to Windows 8 those file names are equivalent.Since Git is case-sensitive, it complained that I had the mixed-case files that weren't in source control.  But using git status, I couldn't see any changes, since in the command prompt those file names are equivalent.The simplest solution for me was:git checkout a previous version of the project, well before those files were ever added.Then git checkout the latest version of the project, with the correct file casing.In my case git rm --cached didn't work.But i got it with a git rebaseI had the same problem when checking out to a branch based on an earlier commit. Git refused to checkout because of untracked files.I've found a solution and I hope it will help you too.Adding the affected directories to .gitignore and issuing $ git rm -r --cached on them is apparently not enough. Assume you want to make a branch based an earlier commit K to test some stuff and come back to the current version. I would do it in the following steps:Setup the untracked files: edit the .gitignore and apply $ git rm -r --cached on the files and directories you want the git to ignore. Add also the file .gitignore itself to .gitignoreand don't forget to issue $ git rm -r --cached .gitignore. This will ensure the the ignore behavior of git leaves the same in the earlier commits.Commit the changes you just made:$ git add -A$ git commitSave the current log, otherwise you may get problems coming back to the current version$ git log > ../git.logHard reset to the commit K $ git reset --hard version_kCreate a branch based on the commit K$ git branch commit_k_branchCheckout into that branch$ git checkout commit_k_branch Do your stuff and commit itCheckout back into master again$ git checkout masterReset to the current Version again$ git reset current_version or $ git reset ORIG_HEADNow you can reset hard to the HEADgit reset --hard HEADNOTE!Do not skip the next-to-last step (like e. g. $ git reset --hard ORIG_HEAD) otherwise the untracked files git complained above will get lost.I also made sure the files git complained about were not deleted. I copied them to a text-file and issued the command $ for i in $(cat ../test.txt); do ls -ahl $i; doneIf you checkout to the branch mentioned above again, do not forget to issue $ git status to ensure no unwanted changes appear.I was also facing a similar issue and i tried all the solutions posted above but it didn't workThe issue was caused when i renamed my onMusicUpdateListener.java to OnMusicUpdateListener.java in develop branch. Now master had onMusicUpdateListener.javaand develop had the same file as OnMusicUpdateListener.javaNow whenever i switched to master it gave me an errorThe following untracked working tree files would be overwritten by checkoutand then it aborted.In order to solve this, i forcefully checked out master branchand then renamed my onMusicUpdateListener.java to OnMusicUpdateListener.java, committed it and then merged it with develop branch.Then i updated my develop branch by merging it into master and now everything is back to normal and problem is solved.This could be a permission issue,change the ownership,sudo chown -v -R usr-name:group-name folder-name"
"As shown in How does ""not something we can merge"" arise?, this error can arise from a typo in the branch name because you are trying to pull a branch that doesn't exist.If that is not the problem (as in my case), it is likely that you don't have a local copy of the branch that you want to merge. Git requires local knowledge of both branches in order to merge those branches. You can resolve this by checking out the branch to merge and then going back to the branch you want to merge into.git checkout branch-namegit checkout mastergit merge branch-nameThis should work, but if you receive an error sayingerror: pathspec 'remote-name/branch-name' did not match any file(s) known to git.you need to fetch the remote (probably, but not necessarily, ""origin"") before checking out the branch:git fetch remote-nameIt's a silly suggestion, but make sure there is no typo in the branch name!I had this issue as well. The branch looked like 'username/master' which seemed to confuse git as it looked like a remote address I defined. For me using thisgit merge origin/username/masterworked perfectly fine.git fetch --all did the trick for me:git remote add upstream [url to the original repo]git checkout [branch to be updated]git fetch --allgit merge upstream/[branch to be updated]If the string containing the reference is produced by another Git command (or any other shell command for that matter), make sure that it doesn't contain a return carriage at the end. You will have to strip it before passing the string to ""git merge"".Note that it's pretty obvious when this happens, because the error message in on 2 lines:merge: 26d8e04b29925ea5b59cb50501ab5a14dd35f0f9 - not something we can mergeI got this error when I did a git merge BRANCH_NAME ""some commit message"" - I'd forgotten to add the -m flag for the commit message, so it thought that the branch name included the comment."
"It would appear that you have the file nbproject/private/rake-d.txt in your local repository, but not tracked by git.Meanwhile, it has been added to the remote repository since your last pull, so doing a pull would overwrite that file, and thus git is warning you that that would happen and aborting the pull.To resolve this, you'll need to go and either delete or rename the file.If you want to automate this, run a git clean to clean out the folder of untracked files (that is, delete them). It might be a good idea to run git clean -n first, though, which merely lists the files it's going to delete, letting you see if there's anything important it plans on deleting.Alternatively, you could add the file to the repository (remember to commit it), and then pull. git will then try to merge your local copy with the remote one.You could use first git clean -f -d(or git reset --hard HEAD ) to clean your untracked files then do a git pullKeep in mind this will delete any untracked filesWhat you need to do is remove the local untracked copy. What's happening is that a file exists remotely, but not locally. git will not allow you to overwrite a local untracked file.you have to use ctrl+shift+F10 its usefulif you are getting the pulling error due to untracked worked.... try it...go to your project location $ cd /usr/local    $ git fetch origin    $ git reset --hard origin/master"
"The problem is that you are not tracking the files locally but identical files are tracked remotely so in order to ""pull"" your system would be forced to overwrite the local files which are not version controlled. Try runninggit add * git stashgit pullThis will track all files, remove all of your local changes to those files, and then get the files from the server.If this is a one-time operation, you could just remove all untracked files from the working directory before doing the pull. Read How do I remove local (untracked) files from my current Git branch? for information on how to remove all untracked files.Be sure to not accidentally remove untracked file that you still need ;)You can try command to clear the untracked files from the localgit clean  -d  -fx """"where -d can be replace with following:-x means ignored files are also removed as well as files unknown to git.-d means remove untracked directories in addition to untracked files.-f is required to force it to run.here is the link that can be helpful as well.You can try that command git clean -df"
"If you have fixed the conflicts you need to add the files to the stage with git add [filename], then commit as normal.You can use git stash to save the current repository before doing the commit you want to make (after merging the changes from the upstream repo with git stash pop). I had to do this yesterday when I had the same problem.You need to do two things.First add the changes withgit add .git stash  git checkout <some branch>It should solve your issue as it solved to me."
"See the 'non-fast forward' section of 'git push --help' for details.You can perform ""git pull"", resolve potential conflicts, and ""git push"" the result. A ""git pull"" will create a merge commit C between commits A and B.Alternatively, you can rebase your change between X and B on top of A, with ""git pull --rebase"", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A.You can also force a push by adding the + symbol before your branch name.git push origin +some_branchYou probably have changes on github that you never merged. Try git pull to fetch and merge the changes, then you should be able to push. Sorry if I misunderstood your question.If you ""git pull"" and it says ""Already up-to-date."", and still get this error, it might be because one of your other branches isn't up to date.  Try switching to another branch and making sure that one is also up-to-date before trying to ""git push"" again:Switch to branch ""foo"" and update it:$ git checkout foo$ git pullYou can see the branches you've got by issuing command:$ git branchYou can force it to push, but please do this ONLY when you're quite sure what you are doing.The command is:git push -fThis problem can also occur when you have conflicting tags. If your local version and remote version use same tag name for different commits, you can end up here.You can solve it my deleting the local tag:$ git tag --delete foo_tagWhen I got this error, I backed up my entire project folder.  Then I did something like$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master...depending on your branch name (if it's not master).Then I did git pull --rebase.  After that, I replaced the pulled files with my backed-up project's files.  Now I am ready to commit my changes again and push."
"The error message from git say it all. You have un-merged changes between your two branches that need to be resolved before submitted the merge commit. Those merge conflicts happen because the file have been modified in the two branches.To resolve this, you need to edit the files in conflict. For each file, you'll have to resolve the merge. The conflicts will be surrounded by <<<<<<<<<<<, =========== and >>>>>>>>>> markers. How you resolve them will depends on the changes (you may want to keep your changes, the changes in the remote branch or a combination of the two).Once you've resolved all the conflicts, then you'll have to do git add for each file. And then git commit. The pre-filled commit message will indicate this is a merge commit and that there were some conflict resolved. You probably don't have to edit it unless your coding style mandate some particular formatting of your commit message.So, to summarise, you'll have to do:$ emacs GDCatalog/.classpath... resolve conflict ...$ git add GDCatalog/.classpath... do the same for all other files ...$ git commit"
"rm .DS_Storegit add -Agit commit -m ""Added .gitignore file""You'll also want to expressly add .DS_Store to your .gitignore so that when .DS_Storeis inevitably created in the future, it won't get in the way of your commits.You probably don't care about .DS_Store.So, try to move it to .DS_Store.bak and pull again"
"Finally solved the problem, based on solution used in following thread:How to handle/fix git add/add conflicts?# moved all files from the local workdir to another directory.mv /workdir/* /old_content# commit this changegit commit -m 'Resolve git Add/Add branch merge conflict by deleting conflicted folder and files in myconflictedfolder'# do merge from remotegit pull origin masterPull was executed successfully, no conflicts anymore.I could now overwrite the old_content directory, if I want, then commit.Best regards, Konrad"
"You are just fetching upstream/develop, while you want to fetch origin to have origin/mac8 available.git fetchgit checkout ""new brach"" git pull ""new branch"" git merge ""new branch""This is worked for me"
"You need to git commit the conflict fix first.The sequence of commands here would be:pull latest code from repo using command: git pull origin masterThis shows conflicts.resolve the conflicts using IDE of your choice.commit the changes on your local.Things should be fine next time you pull latest from master."
"Try run :git checkout spring/50c4ccb1d8f630979e84c03ba14676d1.pidAnd then try merge branches again.git merge filling-in-layoutYour local changes to file spring/50c4ccb1d8f630979e84c03ba14676d1.pid giving this error.There might be some issue with your .gitignore file. Because you already have /spring/*.pid in your gitignore file but it still checking this file. Might be your previous commit have this file.The spring process probably got too big. I had the same problem.you can use pkill -15 -f springand here is more info from https://www.railstutorial.org/book/static_pagesOn Unix-like systems such as Linux and OS X, user and system tasks  each take place within a well-defined container called a process. To  see all the processes on your system, you can use the ps command with  the aux options:$ ps aux To filter the processes by type, you can run the results of  ps through the grep pattern-matcher using a Unix pipe |:$ ps aux | grep spring   ubuntu 12241 0.3 0.5 589960 178416 ? Ssl  Sep20 1:46   spring app | sample_app | started 7 hours ago The result  shown gives some details about the process, but the most important  thing is the first number, which is the process id, or pid. To  eliminate an unwanted process, use the kill command to issue the Unix  kill code (which happens to be 9) to the pid:$ kill -15 12241 This is the technique I recommend for killing  individual processes, such as a rogue Rails server (with the pid found  via ps aux | grep server), but sometimes it‰Ûªs convenient to kill all  the processes matching a particular process name, such as when you  want to kill all the spring processes gunking up your system. In this  particular case, you should first try stopping the processes with the  spring command itself:$ spring stop Sometimes this doesn‰Ûªt work, though, and you can kill  all the processes with name spring using the pkill command as follows:$ pkill -15 -f spring Any time something isn‰Ûªt behaving as expected  or a process appears to be frozen, it‰Ûªs a good idea to run ps aux to  see what‰Ûªs going on, and then run kill -15  or pkill -15 -f   to clear things up."
"In my case I could not see the Resolve the conflicts option because I had local changes not committed yet and I was trying to sync with the remote changes. As soon as I committed my local changes and then tried a sync again, Resolve the conflicts link appeared.So the point here is: commit your changes first and then try to sync. A merge will start and Visual Studio will allow you to go through each of the conflicts.I have encountered the same issue where ""An error occurred. Detailed message: 1 conflict prevents checkout"" is shown where there's no option to resolve the conflict as shown in Leinel's answer.The reason was due to an untracked file that is the same file that is to be pulled. I just deleted the untracked file and retried the pull.I had the same issue. It turns out that I had an untracked file that needed to be included. Therefore, check in Changes tab for untracked files.I did not have any ""Changes"" (untracked or otherwise) listed on either branch, so the other answers did not work for me.I decided to go command line:Click Sync on both branches.Switch to the branch you want to ""merge into"" (master in my case).In Team Explorer under Manage Branches, do Action -> Open Command Line.In the command line type git merge BRANCH_NAME.  (my work branch / merge ""from"")Now the Resolve the conflicts button is available.If the conflicts during the pull are about end of line charaters:git config --global core.autocrlf falseThat should avoid any automatic eol conversion.You can see more in ""Why does git think each line of an untouched file has changed"" how to detect that situation in the working tree (git diff --word-diff-regex=.)."
"Your local changes will need to be stashed away while you perform the merge. To do that, git provides git stash to save your uncommitted changes to a temporary location, and git stash pop to apply them back to your local code.This should work:git stashgit pull origin mastergit stash popHere's a good website to learn more about git: http://gitready.com/beginner/2009/03/13/smartly-save-stashes.htmlBut after looking at your screenshot, a merge doesn't seem like the best option for you. Instead a rebase would make more sense.git stashgit pull --rebase origin mastergit stash popHere are some resources to understand the difference between a merge and a rebase:http://gitready.com/intermediate/2009/01/31/intro-to-rebase.htmlhttp://stackoverflow.com/a/3357174/2651774"
"Go to dev/gnome-term_+_bash+tmux.sh and fix the conflicts. Then run$ git add dev/gnome-term_+_bash+tmux.shThen run git commit -m ""your-message"""
"What you are seeing means that automatic merge could not resolve the conflicts in the files. You need to resolve these conflicts manually. Run git mergetool or git gui.The ""git merge"" command tries to incorporate changes from another branch onto the present branch. If the merge is clean, meaning no conflicts, it will commit. Since your merge did have conflicts, it didn't commit. You need to resolve the conflict.Pulling the copy from the upstream repo is one way to do that - by accepting the upstream repo's version. You can do that within git using ""git checkout --theirs conflicting_file.txt""Editing the file to get it into the shape you want is another way.Once it's fixed, you need to add using ""git add conflicting_file.txt"" then commit. Then your working copy is clean and ready for more hacking. Good luck.In Git  there are cases merge refuses to even start in order to protect your local changes.  This may happen in two cases:You have uncommitted changes in you repository that conflict with merge.  The git will refuse to do a merge with the following message:error: Your local changes to the following files would be overwritten by merge:åÊåÊåÊåÊåÊåÊåÊåÊfooPlease, commit your changes or stash them before you can merge.AbortingThen you have to either commit the changes first (git commit -a or git add + git commit), or stash them away with git stash save.You are in the middle of some unfinished merge-y operation. There was some conflict, for exampleAuto-merging fooCONFLICT (content): Merge conflict in fooAutomatic merge failed; fix conflicts and then commit the result.and you have not finished resolving conflicts (by editing files and marking them as resolved with git add, or using some graphical merge tool via git mergetool) and didn't create a final merge commit with git commit -a, or aborted the merge with git reset --hard (NOTE: this will discard all you changes, and you will loose work done on resolving conflicts!!!).Or you have just run second git merge too fast, or used git merge instead of git commit to create a merge commit.error: 'merge' is not possible because you have unmerged files.hint: Fix them up in the work tree,hint: and then use 'git add/rm ' ashint: appropriate to mark resolution and make a commit,hint: or use 'git commit -a'.fatal: Exiting because of an unresolved conflict.Resolve conflicts as described e.g. in old Fun with completing a merge article by Junio C Hamano and finalize a merge with git commit, or discard a merge, or stash it away.  Then if you meant to create this second merge, you can do it.Sidenote: by default git-aware shell prompt shows if you are in the middle of merge, rebase or applying patches (git am operation).  You can also configure it to show if the working directory is dirty (different from latest version, i.e. HEAD).After you've resolved a merge, you need to use git add to add the files you've changed to the index, and then commit (like the message says). This says to git ""Yes, I really do want to make these changes"".Remember, always use git add before committing (either normally or committing a merge), if you're using the command line interface. Frontends like magit can streamline this for you so you don't have to worry about typing ""git add"" every time."
"I found that adding ""-i"" to the commit command fixes this problem for me. The -i basically tells it to stage additional files before committing.That is:git commit -i myfile.phpgit commit -am 'Conflicts resolved'This worked for me. You can try this also.You can use git commit -i for most cases but in case  it doesn't work You need to do  `git commit -m ""your_merge_message"". During a merge conflict you cannot merge one single file so you need to Stage only the conflicted file git commit -m ""your_merge_message""You probably got a conflict in something that you haven't staged for commit.  git won't let you commit things independently (because it's all part of the merge, I guess), so you need to git add that file and then git commit -m ""Merge conflict resolution"".  The -i flag for git commit does the add for you.If you just want to ditch the whole cherry-picking and commit files in whatever sets you want, git reset --soft <ID-OF-THE-LAST-COMMIT>gets you there.I got this when I did forgot the -m in my git commit when resolving a git merge conflict.git commit ""commit message"" should be git commit -m ""commit message""Your merge stopped in the middle of the action.You should add your files, and then 'git commit':git add file_1.php file_2.php file_3.phpgit commitCheersDuring a merge Git wants to keep track of the parent branches for all sorts of reasons.  What you want to do is not a merge as git sees it.  You will likely want to do a rebase or cherry-pick manually.For myself this happened in SourceTree when I tried to commit a merge before resolving all of the files. I then marked the last file resolved and yet it still gave me this error when trying to commit. I closed SourceTree and reopened it, and then it committed fine."
"Git merges can occasionally produce non-working code without any conflicts arising. Imagine the following:Developer A adds a call to function foo in the code he's working on.Developer B modifies function foo's function signature, or renames/deletes the function.Developer A merges B's changes.Now A's function call is incompatible with B's change, but git doesn't know that because they are in separate modules.What A (you) should do in this case is review the changes that were merged in, and fix the code as appropriate. (This is also why you should keep feature branches short where possible, especially if you are trying to submit a patch upstream).Are you sure that the merge introduced the error? Checkout the version before the merge and check if it compiles. If it doesn't find a commit that worked and have a look at the bisect command to find the offending commit.If the merge introduced the error you can diff the merge and the last working commit with git diff and look at the changes made by the merge. Otherwise of course merging can sometimes introduce errors and bugs because it works on file content without unterstanding of the intention of the content. The only way around that is fixing it by hand.When you perform a merge, if you get conflicts, git will notify you about it. It's then up to the code maintainer to carefully resolve the conflicts.For now, what you can do is a hard reset to the commit before the merge (the HEAD before you tried to merge) and then perform the merge again making sure you resolve the conflicts correctly this time.Do a git log and get the last stable commit's id and then do a - git reset --hard <commit id>(You can also just revert the merge commit, but for now you can just reset the HEAD)Now do the merge and resolve the conflicts. If you are working in a team, and if you are not particularly aware of your teammates' changes, it's better to gather them around and resolve the conflicts.All the best."
"Note Wording changed in response to the commments. Thanks @slekseThat is not an error, it is a warning. It means the branch you are about to delete contains commits that are not reachable from any of: its upstream branch, or HEAD (currently checked out revision). In other words, when you might lose commitså_.In practice it means that you probably amended, rebased or filtered commits and they don't seem identical. Therefore you could avoid the warning by checking out a branch that does contain the commits that you're about un-reference by deleting that other branch.å_ You will want to verify that you in fact aren't missing any vital commits:git log --graph --left-right --cherry-pick --oneline master...experimentThis will give you a list of any nonshared between the branches. In case you are curious, there might be a difference without --cherry-pick and this difference could well be the reason for the warning you get:--cherry-pick Omit any commit that introduces the same change as another commit on the ""other side"" when the set of commits are limited with symmetric difference. For example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with --left-right, like the example above in the description of that option. It however shows the commits that were cherry-picked from the other branch (for example, ""3rd on b"" may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output.å_ they're really only garbage collected after a while, by default. Also, the git-branch command does not check the revision tree of all branches. The warning is there to avoid obvious mistakes.å_ (My preference here is to just force the deletion instead, but you might want to have the extra reassurance).As Drew Taylor pointed out, branch deletion with -d only considers the current HEAD in determining if the branch is ""fully merged"".  It will complain even if the branch is merged with some other branch.  The error message could definitely be clearer in this regard...You can either checkout the merged branch before deleting, or just use git branch -D.  The capital -D will override the check entirely.I had this happen to me today, as I was merging my very first feature branch back into master. As some said in a thread elsewhere on SO, the trick was switching back to master before trying to delete the branch. Once in back in master, git was happy to delete the branch without any warnings.I tried sehe's answer and it did not work.To find the commits that have not been merged simply use:git log oldbranch ^newbranch --no-mergesGit is warning that you might lose history by deleting this branch. Even though it would not actually delete any commits right away, some or all of the commits on the branch would become unreachable if they are not part of some other branch as well.For the branch experiment to be ‰ÛÏfully merged‰Ûù into another branch, its tip commit must be an ancestor of the other branch‰Ûªs tip, making the commits in experiment a subset of the other branch. This makes it safe to delete experiment, since all its commits will remain part of the repository history via the other branch. It must be ‰ÛÏfully‰Ûù merged, because it may have been merged several times already, but now have commits added since the last merge that are not contained in the other branch.Git doesn‰Ûªt check every other branch in the repository, though; just two:The current branch (HEAD)The upstream branch, if there is oneThe ‰ÛÏupstream branch‰Ûù for experiment, as in your case, is probably origin/experiment. If experiment is fully merged in the current branch, then Git deletes it with no complaint. If it is not, but it is fully merged in its upstream branch, then Git proceeds with a warning seeming like:warning: deleting branch 'experiment' that has been mergedto 'refs/remotes/origin/experiment', but not yet merged toHEAD.Deleted branch experiment (was xxxxxxxx).Where xxxxxxxx indicates a commit id. Being fully merged in its upstream indicates that the commits in experiment have been pushed to the origin repository, so that even if you lose them here, they may at least be saved elsewhere.Since Git doesn‰Ûªt check other branches, it may be safe to delete a branch because you know it is fully merged into another one; you can do this with the -D option as indicated, or switch to that branch first and let Git confirm the fully merged status for you."
"The first workaround, which seems to work with recent versions of Git (2.3+, Q2+ 2015) is mentioned in grant's more up-to-date answer:Delete the index$ rm .git/indexAdd all$ git add -ACommit$ git commit -aOriginal answer (late 2014)The usual workaround is to:clone again the remote repo into a new local repoadd the changes from the first repo to the second one:$ cd /patH/to/second/cloned/repo$ git --work-tree=/path/to/first/repo add .You can see this error message in read-cache.c, discussed in this patch (""read-cache.c: Ensure unmerged entries are removed ""), and introduced in the Git 2.2 commit.Since this is so recent, it is possible that downgrading Git to 2.1 would be enough to not be affected by that patch.The OP Daniel Toebe adds in the comments:The issue happened on my macbook, which decided to fail on me, and another computer mishap put me way behind on my projects.I believe I encountered this issue because I added and committed changes and then deleted a file that I had just committed. If this sounds similar to your case, I recommend following the below to save re-cloning and manually adding in your changes.I was able to fix this issue by deleting the .git/index file in my repository, similar to what @slider suggested (I believe he mistyped the path).rm .git/indexThen I had to add and commit my local changes againgit add -Agit commit -m ""...""I was then able to push remotely.What is the git index and how is it relevant?What‰Ûªs The Deal With The Git Index?The git ‰ÛÏindex‰Ûù is where you place files you want committed to the git repository.Before you ‰ÛÏcommit‰Ûù (checkin) files to the git repository, you need to first place the files in the git ‰ÛÏindex‰Ûù.I believe that by deleting this file, git will re-index the repo, create a new one and you're good to go. It solves this problem because the local repository is re-indexed without the file I deleted that caused all the fuss.Edit: It seems like this is Mac related (based on comments) so if it helps I'm on OSX 10.10 and git version 2.3.4 installed through brew.rm .git/indexgit resetafter deleting index you need to recreate it by git resetYou can remove Git index file from your project. In the root of your project, run the following command:rm .git/indexAfter that git it work.I try a different solution and it works for me. Below are my options#cd .git#rm index#cd ..#git add ."
"You have an untracked file AllDiagnostics.cs on your local machine, which is being fetched in the upstream code as well. Since git diff shows diff for tracked files only, hence it is not appearing in the output.Also, you seem to have an ignore rule for the file in your .gitignore, because of which it doesn't appear in the output of git status either.My suggestion would be to rename it to something else (mv AllDiagnostics.cs AllDiagnostics.cs.bkp), then do a git merge, and finally apply your changes from AllDiagnostics.cs.bkp to the freshly fetched file.If this file was not supposed to be committed, you can untrack it later usinggit rm AllDiagnostics.csgit commit -m ""removed AllDiagnostics.cs"""
"What is currently happening is, that you have a certain set of files, which you have tried merging earlier, but they threw up merge conflicts.Ideally, if one gets a merge conflict, he should resolve them manually, and commit the changes using git add file.name && git commit -m ""removed merge conflicts"".Now, another user has updated the files in question on his repository, and has pushed his changes to the common upstream repo.It so happens, that your merge conflicts from (probably) the last commit were not not resolved, so your files are not merged all right, and hence the U(unmerged) flag for the files.So now, when you do a git pull, git is throwing up the error, because you have some version of the file, which is not correctly resolved.To resolve this, you will have to resolve the merge conflicts in question, and add and commit the changes, before you can do a git pull.Sample reproduction and resolution of the issue:# Note: commands below in format `CUURENT_WORKING_DIRECTORY $ command params`Desktop $ cd testFirst, let us create the repository structuretest $ mkdir repo && cd repo && git init && touch file && git add file && git commit -m ""msg""repo $ cd .. && git clone repo repo_clone && cd repo_clonerepo_clone $ echo ""text2"" >> file && git add file && git commit -m ""msg"" && cd ../reporepo $ echo ""text1"" >> file && git add file && git commit -m ""msg"" && cd ../repo_cloneNow we are in repo_clone, and if you do a git pull, it will throw up conflictsrepo_clone $ git pull origin masterremote: Counting objects: 5, done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From /home/anshulgoyal/Desktop/test/test/repo * branch            master     -> FETCH_HEAD   24d5b2e..1a1aa70  master     -> origin/masterAuto-merging fileCONFLICT (content): Merge conflict in fileAutomatic merge failed; fix conflicts and then commit the result.If we ignore the conflicts in the clone, and make more commits in the original repo now,repo_clone $ cd ../reporepo $ echo ""text1"" >> file && git add file && git commit -m ""msg"" && cd ../repo_cloneAnd then we do a git pull, we getrepo_clone $ git pullU   filePull is not possible because you have unmerged files.Please, fix them up in the work tree, and then use 'git add/rm <file>'as appropriate to mark resolution, or use 'git commit -a'.Note that the file now is in an unmerged state and if we do a git status, we can clearly see the same:repo_clone $ git statusOn branch masterYour branch and 'origin/master' have diverged,and have 1 and 1 different commit each, respectively.  (use ""git pull"" to merge the remote branch into yours)You have unmerged paths.  (fix conflicts and run ""git commit"")Unmerged paths:  (use ""git add <file>..."" to mark resolution)        both modified:      fileSo, to resolve this, we first need to resolve the merge conflict we ignored earlierrepo_clone $ vi fileand set its contents totext2text1text1and then add it and commit the changesrepo_clone $ git add file && git commit -m ""resolved merge conflicts""[master 39c3ba1] resolved merge conflictsYou are attempting to add one more new commits into your local branch while your working directory is not clean.  As a result, Git is refusing to do the pull.  Consider the following diagrams to better visualize the scenario:remote: A <- B <- C <- D local:  A <- B*   (*indicates that you have several files which have been modified but not committed.)There are two options for dealing with this situation.  You can either discard the changes in your files, or retain them.Option one: Throw away the changes You can either use git checkout for each unmerged file, or you can use git reset --hard HEAD to reset all files in your branch to HEAD.  By the way, HEAD in your local branch is B, without an asterisk.  If you choose this option, the diagram becomes:remote: A <- B <- C <- D local: A <- BNow when you pull, you can fast-forward your branch with the changes from master.  After pulling, you branch would look like master:local: A <- B <- C <- DOption two: Retain the changes If you want to keep the changes, you will first want to resolve any merge conflicts in each of the files.  You can open each file in your IDE and look for the following symbols:<<<<<<< HEAD   // your version of the code   =======   // the remote's version of the code   >>>>>>>Git is presenting you with two versions of code.  The code contained within the HEAD markers is the version from your current local branch.  The other version is what is coming from the remote.  Once you have chosen a version of the code (and removed the other code along with the markers), you can add each file to your staging area by typing git add.  The final step is to commit your result by typing git commit -m  with an appropriate message.  At this point, our diagram looks like this:remote: A <- B <- C <- D local: A <- B <- C'Here I have labelled the commit we just made as C' because it is different from the commit C on the remote.  Now, if you try to pull you will get a non-fast forward error.  Git cannot play the changes in remote on your branch, because both your branch and the remote have diverged from the common ancestor commit B.  At this point, if you want to pull you can either do another git merge, or git rebase your branch on the remote.Getting a mastery of Git requires being able to understand and manipulate uni-directional linked lists.  I hope this explanation will get you thinking in the right direction about using Git.Theres a simple solution to it. But for that you will first need to learn the following vimdiffTo remove conficts, you can usegit mergetoolThe above command basically opens local file, mixed file, remote file (3 files in total), for each conflicted file. The local & remote files are just for your reference, and using them you can choose what to include (or not) in the mixed file. And just save and quit the file.You have some files locally that need to be merged before you can pull. You could checkout the files and then pull to overwrite your local files.git checkout app/config/app.php app/config/database.php app/routes.phpgit pull origin master"
"If you want remove all local changes from your working copy, simply stash them:git stash save --keep-indexIf you don't need them anymore, you now can drop that stash:git stash dropIf you want to overwrite only specific parts of your local changes, there are two possibilities:Commit everything you don't want to overwrite and use the method above for the rest.Use git checkout path/to/file/to/revert for the changes you wish to overwrite. Make sure that file is not staged via git reset HEAD path/to/file/to/revert.Alright with the help of the other two answers I've come up with a direct solution:git checkout HEAD^ file/to/overwritegit pullHere is a solution that throws away changes:git reset file/to/overwritegit checkout file/to/overwriteYou can either commit your changes before you do the merge, or you stash them:git stashgit merge origin/mastergit stash popMy solution to solve this issue was:git checkout -- <file>Then I could overwrite the file just using:git pullThis works for me to override all local changes and does not require an identity:git reset --hardgit pullIf your repo contains few files which is removed from master:git checkout mastergit fetch origingit reset --hard origin/mastergit checkout -b newbranchIf you want to overwrite specific changes, you need some way of telling it which ones you want to forget.You could try selectively stashing the changes you want to abandon using git stash --patch and then dropping that stash with git stash drop. You can then pull in the remote changes and merge them as normal.You can use this for overwrite filegit checkout file_to_overwriteSometimes, none of these work.  Annoyingly, due to the LF thing I think, what will work is deleting the files, then pulling.  Not that I recommend this solution, but if the file doesn't exist, git won't uselessly inform you that your changes (which may not even be changes) will get overridden, and will let you continue.Use at your own risk."
"the git diff-tree appeared to be the wrong diff to use in this case. The git diff --name-only a35f25470bc8219e3f2a45316963dde660091bcb 0dfc19850b2e31d72c1d2923321430e8fc1b53cbrevealed a lot of changes between the branches and one of them update of maven-compiler-plugin configuration which changed the java version from 7 to 8. And it looks like javac 8 treats encoding as errors whereas 7 as warning (although writes absolutely identical ""error: unmappable character for ..."" warning to the log."
"I had this same issue, and the fetch/rebase answer didn't work for me. Here's how I solved it:I deleted the file that was causing the issue, checked it out, and then pulled successfully.rm file/name/path/some/more/filenamepathgit checkout file/name/path/some/more/filenamepathgit pullYou should:fetch (updating all remote tracking branches, like origin/master)rebase your current branch on top of origin/master in order to replay your 2 commits on top of the 7 updated commits that you just fetched.That would be:git checkout mastergit fetchgit rebase origin/masterA shorter version of the above set of commands would be the following single command:git pull --rebase"
"Without a complete picture of the repo, what follows is more of a guess than anything else, but it might explain the situation. Let's say your history looks as follows:A -- C [origin/master]  \    B [HEAD, master]You write:This file has been coming up constantly and when I remove it from file system, git will say I removed this file, while in the other messages, it says it is untracked.I'm guessing you may have rungit rm --cached <file-in-question>and committed that deletion in commit B; therefore, the file is no longer tracked in your local repo and but it's still present in your working tree.In the meantime, the upstream branch received commit C from one of your collaborators, in which <file-in-question> was not removed from version control. What you're attempting to effect withgit pull --rebaseis something like this: A -- C [origin/master]       \         B' [HEAD, master]However, as the message says,The [...] untracked working tree [file] would be overwritten by checkoutIndeed, rewinding commit C (in order to replay B on top of it) would result in the revision of <file-in-question> (from commit C) to be checked out in your working tree, in which an untracked file of the same name already exists. The contents of that untracked file may be valuable; you may not want that file to be overwritten by a another version of it. Therefore, Git stops in its track and tells you what's wrong.Edit: Here is a baby example that reproduces the situation...cd ~/Desktopmkdir testcd testgit inittouch README.mdgit add README.mdgit commit -m ""add README""# simulate a remote branch moving ahead by one commit# (that doesn't remove the README)git checkout -b origin_masterprintf ""This is a README.\n"" > README.mdgit add README.mdgit commit -m ""add description in README""# remove the README and create a new commit on mastergit checkout mastergit rm --cached README.mdgit commit -m ""remove README""# simulate an attempt to rebase master to its ""upstream"" branch, origin_mastergit rebase --onto origin_master masterThat last command spews out the following:First, rewinding head to replay your work on top of it...error: The following untracked working tree files would be overwritten by checkout:    README.mdPlease move or remove them before you can switch branches.Abortingcould not detach HEADI suggest you rungit fetchgit log --stat origin/master..master -- <file-in-question>to check whether something like that happened.This could also happen due to a case change on the filename.  I had the same problem and this is what solved it for me.git config core.ignorecase trueTrue for Mac or PC.Alternative solutions at:  Git error: The following untracked working tree files would be overwritten by checkout"
"Since there isn't a --theirs strategy (even though there are ways to simulate it), couldn't you:merge first master to mk: git checkout mk && git merge -s ours masterthe merge mk to master (fast-forward): git checkout master && git merge mkThe -s ours strategy will make sure you keep mk version in case of conflicts.Be sure, you are on a clean working copy of MASTER.git merge -s recursive -X theirs Mk"
"git stash is perfectly legitimate, though as Greg said, for some reason fixing the conflicts can get strange. But they are still fixable, you won't actually fubar anything. The command as I know to re-apply the stash is git stash apply, though pop may be an alternative that I'm not aware of (or it could do something different, I don't know, so you probably want to use apply.) Is there a reason you don't want to commit those changes before merging? Generally that's the right thing to do. Another option is:git stashgit checkout -b newworkgit stash applygit commit ...This creates a new branch, which will allow you to get your master up to date without conflicts, (checkout master again, then pull or fetch + merge).  Then you can merge your branch back with (while still on master)  git merge newwork. You can resolve the conflicts on master, while still retaining the work on newwork without any conflicts.  This is a bit safer if you are worried about conflicts really screwing things up, but generally, conflicts are just part of the process, so don't worry too much about them.It's good practice to always commit any local changes before pulling (merging) new code. If you don't commit, then Git doesn't know how you want to manage your local changes. Merge only with a clean working tree.There may be conflicts in the merge, due to the same files being changed locally and by somebody else. In my experience, resolving conflicts from an actual merge operation is slightly simpler than resolving the same conflict from a stash pop operation.First you should: git checkout -- public_html/sites/filegit checkout -- public_html/sites/file1.txtgit checkout -- public_html/sites/file2.txtNext step: git pull origin masterI have another solution:git reset --hard FETCH_HEADIt works in almost cases."
"It appears you have created a local .gitignore file but have not commited it to the repository and the remote you are attempting to interact with (pull/push) now has a .gitignore. This would be the case for any file in your repo when this happensSince .gitignore is not just any file, it affects the way git behaves, I would compare the two manually, create a file that is a union of the two, commit it and then merge, fixing any formatting issues that might exist. These could be the exact same file, but git wouldn't know because you haven't added it locally. This isn't a file you want to be changing often because it can make checkouts behave differently.Github maintains a list of useful .gitignore templates for most languages."
"You can see a similar error message in ""Git stash pop- needs merge, unable to refresh index"".In your case, you would need to resolve the merge (fixing merge conflicts) in order for the stash to proceed.To reset a merged file, the OP used:git reset HEAD -- filename"
"Sounds like you're using RubyMine.  Make sure you include .idea in your git ignore files.add this: .idea/ to your .gitignore fileof course once the files are already tracked with git you need to untrack them.  git rm <file_name>"
"What is a patch?A patch is little more (see below) than a series of instructions: ""add this here"", ""remove that there"", ""change this third thing to a fourth"".  That's why git tells you:The copy of the patch that failed is found in:c:/.../project2/.git/rebase-apply/patchYou can open that patch in your favorite viewer or editor, open the files-to-be-changed in your favorite editor, and ""hand apply"" the patch, using what you know (and git does not) to figure out how ""add this here"" is to be done when the files-to-be-changed now look little or nothing like what they did when they were changed earlier, with those changes delivered to you as a patch.A little moreA three-way merge introduces that ""little more"" information than the plain ""series of instructions"": it tells you what the original version of the file was as well.  If your repository has the original version, your git can compare what you did to a file, to what the patch says to do to the file.As you saw above, if you request the three-way merge, git can't find the ""original version"" in the other repository, so it can't even attempt the three-way merge.  As a result you get no conflict markers, and you must do the patch-application by hand.Using --rejectWhen you have to apply the patch by hand, it's still possible that git can apply most of the patch for you automatically and leave only a few pieces to the entity with the ability to reason about the code (or whatever it is that needs patching).  Adding --reject tells git to do that, and leave the ""inapplicable"" parts of the patch in rejection files.  If you use this option, you must still hand-apply each failing patch, and figure out what to do with the rejected portions.Once you have made the required changes, you can git add the modified files and use git am --continue to tell git to commit the changes and move on to the next patch.What if there's nothing to do?Since we don't have your code, I can't tell if this is the case, but sometimes, you wind up with one of the patches saying things that amount to, e.g., ""fix the spelling of a word on line 42"" when the spelling there was already fixed.In this particular case, you, having looked at the patch and the current code, should say to yourself: ""aha, this patch should just be skipped entirely!""  That's when you use the other advice git already printed:If you prefer to skip this patch, run ""git am --skip"" instead.If you run git am --skip, git will skip over that patch, so that if there were five patches in the mailbox, it will end up adding just four commits, instead of five (or three instead of five if you skip twice, and so on)."
"It's because .gitignore isn't in your current branch (it's untracked), but it's in the branch you're trying to merge. Add the .gitignore file in question and commit, then try the merge again; or delete the .gitignore file if you don't need it and are happy with the one in the other branch.Note: mipadi (author of the accepted answer) also mentioned this error message in the context of case conflicts between filenames on different branches.If cleaning the untracked files is a valid option, then the extreme solution is mentioned in this answer (a git clean -f -d would remove all untracked files and directories).In your case, that could be overkill (or dangerous).Another original solution:git checkout -f admin_playground # will overwrite filesgit checkout yourBranch # get back where you where when trying the mergegit merge admin_playgroundThis forced git to go ahead and overwrite the files.  I assume you could have used the '-f' option with merge also, but switching to the other branch and then back fixed the issue and I was able to merge without any trouble the next time.Note: there is actually no '-f' option on git merge."
"Those are conflict markers. You're still in the process of merging, but there were some parts that Git couldn't merge automatically. You'll need to hand-edit those parts to what you want them to be and then commit the results.For instance, in your particular case, you'd probably want to resolve it like this (note - the arrows/text on the right are just my notes, not something you'd type into the file):integer = <<<<<<< HEAD                                  <-+ remove the bits here    digits:[0-9]+                               |        { return digits.join(""""); }             |=======                                       <-+    sign:""-""* digits:[0-9]+        { return sign + digits.join(""""); }>>>>>>> gh-pages                              <-- and thisand thus you'd save the file as...integer =     sign:""-""* digits:[0-9]+        { return sign + digits.join(""""); }Absolutely start with 'git status' to see what you've got.  If you aborted a merge (or had a merge aborted) and you've got conflicted files in the working directory then something went wrong.  The Git status will tell you where you are.  After that, you have a number of options.  You should resolve the merge commit either by-hand, which can be challenging, or using a tool as:git mergetoolThe merge tool will work if your files are listed as needing a merge.  You can also perform one of:git checkout --ours -- /path/to/conflicted-file       # this is probably the one you wantgit checkout --theirs -- /path/to/conflicted-fileYou can see the different versions using the :1:filename syntax.  See here for an explanation.  But all of the above assumes that 'git status' shows the files as needing a merge.Finally, you always have the option of:git reset --hard   # sounds like --hard is what you need but check other options"
"You can't merge with local modifications. Git protects you from losing potentially important changes.You have three options. One is to commit the change usinggit commit -m ""My message""The second is to stash it. stashing acts as a stack, where you can push changes, and you pop them in reverse order.To stash type:git stashDo the merge, and than pull the stash:git stash popThe third options is to discard the local changes using git reset --hard.$ git stash$ git pull <remote name> <remote branch name> (or) switch branch$ git stash apply --indexFirst command store your changes temporarily and discard those changes from working directory Second command you can pull / switch branches  Third command to restore the important changes which you have discarded temporarily. (--index option is useful for those files are not staged are being upstaged) Refer Git - StashingSo the situation that I ran into was the following:error: Your local changes to the following files would be overwritten by merge:  wp-content/w3tc-config/master.php  Please, commit your changes or stash them before you can merge.except, right before that, was remote:so actually this:remote: error: Your local changes to the following files would be overwritten by merge:  some/file.ext  Please, commit your changes or stash them before you can merge.What was happening was (I think, not 100% positive) the git post receive hook was starting to run and screwing up due to movement changes in the remote server repository, which in theory, shouldn't have been touched.So what I ended up doing by tracing through the post-receive hook and finding this, was having to go to the remote repository on the server, and there was the change (which wasn't on my local repository, which, in fact, said that it matched, no changes, nothing to commit, up to date, etc.) So while on the local, there were no changes, on the server, I then did a git checkout -- some/file.ext and then the local and remote repositories actually matched and I could continue to work, and deploy. Not entirely sure how this situation occurred, though a couple dozen developers plus IT changes may had something to do with it."
"If the GitHub repo has seen new commits pushed to it, while you were working locally, I would advice for:git pull --rebasegit pushThe full syntax is:git pull --rebase origin mastergit push origin masterThat way, you would replay (the --rebase part) your local commits on top of the newly updated origin/master (or origin/yourBranch: git pull origin yourBranch).See a more complete example in the chapter 6 Pull with rebase of the Git Pocket Book.I would recommend a:git push -u origin masterThat would establish a tracking relationship between your local master branch and its upstream branch.After that, any future push for that branch can be done with a simple:git pushSee ""Why do I need to explicitly push a new branch?"".Since the OP already reset and redone its commit on top of origin/master:git reset --mixed origin/mastergit add .git commit -m ""This is a new commit for what I originally planned to be amended""git push origin masterThere is no need to pull --rebase.Note: git reset --mixed origin/master can also be written git reset origin/master, since the --mixed option is the default one when using git reset.If you just used git init and have added your files with git add . or something similar and have added your remote branch it might be that you just haven't committed (git commit -m 'commit message') anything locally to push to the remote... I just had this error and that was my issue.I find the solution to this problem in github help.You can see it from:Dealing with non-fast-forward errorsIt says:You can fix this by fetching and merging the changes made on the remote branch with the changes that you have made locally:  $ git fetch origin# Fetches updates made to an online repository$ git merge origin branch# Merges updates made online with your local workOr, you can simply use git pull to perform both commands at once:$ git pull origin branch# Grabs online updates and merges them with your local work"
"Right now you are trying to essentially do a git merge with uncommited changes in your branch (pull is just fetch + merge).  Git is rightfully complaining that such an operation would overwrite the uncommited changes in the branch.  To proceed with the pull operation you need to remove this uncommited changes from the working directory.  There are a couple of ways to do this commit them to your local repository stash them, run the pull operation, and then unstash them on top of the pull commit, fetch, rebase and then merge If you are new to git I would probably start with option #1.When using the Visual Studio Git Provider (VS 2013, VS2015), this situation can also arise in scenarios where a local Commit has been performed, but, when attempting to Pull from the server and merge, the error message:""uncommitted changes would be overwritten by merge""is still displayed, and the Pull action is cancelled.This can occur because locally, there are Untracked Files that were not part of the local Commit, but are part of the remote Pull; the merge resolution cannot deal with this scenario. Typically this occurs when some files such as T4 template outputs are included in a Commit on one workstation, but not on others. Additionally, this can occur in Visual Studio 2015, when working with MVC6 projects (at time of writing), when files in the wwwroot folder have been included in a Commit on one workstation, but not on another (one possible cause of this is that the .gitignore files are different on the workstations attempting to work with the same server repository). To resolve:a) View the Team Explorer > Changes dialogue.b) Verify that any Untracked Files that actually reside in the server branch are to be included in your Commits; to do this, right-click and select Add. Alternatively, if you intend them to be overwritten, you can select Delete. Please observe caution.c) Perform a Commit, and then a Pull, and perform any merge conflict resolution that is required.Visual Studio 2013 seems to be lacking maturity as a GIT UI.  I ran across similar issue even after having committed all my changes locally.  For errors arising from Push & Pull in Visual Studio 2013, I would recommend using Git Bash to do a git pull command.  The command-line pull command is much more powerful than VS UI and will overcome some issues.In response to Walter Schultz, you are getting the error because you seem to be trying to keep binary & assembly files (dll and exe's) in version control.  Binary files are not editable & not mergeable, thus they should not be included in version control.  In order to exclude these files from the GIT repository, you can create a .gitignore file and include following items:--- begin .gitignore file ----------------## Ignore Visual Studio temporary files, build results, and## files generated by popular Visual Studio add-ons.# User-specific files*.suo*.user*.sln.docstates*.cache# Build results[Dd]ebug/[Dd]ebugPublic/[Rr]elease/x64/build/bld/[Bb]in/[Oo]bj/Dev/bin/--- end gitignore file ----------------Once you create the .gitignore file, go into your local repository and delete all files in your /Bin/ folder and other files that you do not wish to keep track of.Then push to local & sync your code to server repository.Hope this helps.Same thing was happening to me, I committed all my changes and get the same error when I try to switch branches. I realized there was one file I chose to ""ignore"" which I left under the ""Excluded Changes"".  Apparently, VS2013 is not properly handling this exclusions well.  So after many tries I came up with a simple solution:I moved the file to ignore from ""Excluded Changes"" to the""Included Changes""; I made a local commit; Switched branch without problem;"
"From man git-branch:-d, --delete   Delete a branch. The branch must be fully merged in its upstream   branch, or in HEAD if no upstream was set with --track or   --set-upstream.Your branch is not fully merged to the upstream branch that was set (and now it cannot be so merged because that upstream branch has beendeleted).This is a reasonable safety check: you want to think twice about deleting abranch that has commits not pushed to its origin. If you happen to know that everything is hunky dory, then follow the advice in the diagnostic:If you are sure you want to delete it, run 'git branch -D startapp'."
"I've only ever seen this error on Windows and what it seems to mean is that something blocked git from modifying a file at the moment when it tried to a apply a patch.Windows tends to give processes exclusive access to files when it shouldn't really be necessary, in the past virus checkers have been one source of suspicion but I've never proved this conclusively.Probably the easiest thing to do is to abort and try again, hoping that it doesn't happen the next time.git rebase --abortYou can attempt to use git apply and knowledge of what commit git was actually trying to do before doing a git rebase --continue but in all honesty I wouldn't recommend this. Most of the times I've seen this tried there's been a better than evens chance that something gets accidentally missed or messed up.Try closing any programs that have the folder open, such as editors, explorer windows, command prompts, and FTP programs. This always fixes the issue for me on Windows.Just close VISUAL STUDIO. It might workWhen I see this on my machine, it's worse than just a ""some process has the file open"".  The actual ownership of the file gets jacked up to the point where I (running as administrator) can only access it after rebooting.Nearest I can tell, IIS is part of the problem.  If I switch between two major branches that require a lot of files to modify, git will delete a file or directory (usually DLLs) while IIS is trying to do something or another with it.  At this point, the IIS process automatically overwrites the file on disk with a version that's locked and appears to be owned by nobody.Stopping IIS at this point doesn't do it.  Best I've found out to do is to reboot, and remember to stop IIS before changing across major branches in the future.I know that doesn't really answer the question, but might be helpful to others.On Windows, it can be a TortoiseGIT process that blocks those files. Open task manager and end process TGitCache.exe.This can also happen when you're using SublimeText and the popup window asking you to buy the program is not closed.I had a similar problem. But it was very simple to resolve. On a Windows machine, my file explorer had a folder open that existed in one branch but not in the other I checked out. Closing the File explorer resolved the problem.If the IDE you use(in case you use one) might have been getting in the way as well. That's what happened to me when using QtCreator.My encounter with this problem was caused by my editor, Intellij.  As part of its internal version controls, it had gone through and locked all hidden git files.  (For various reasons, I was not using the git plugin that comes with Intellij...)  So I opened a normal dos window as Administrator, changed to the directory, and executedattrib -R /SThat removed the lock on the files and everything worked after that and I could sync my changes using the GitHub windows client.I agree with the above ""Close Visual Studio"" answers. However, an additional step I had to do even after I'd closed Visual Studio was to manually kill the ""devenv.exe"" Visual Studio process in Task Explorer.After I had done this I was able to again run in gitbash:git pulland the ""cannot stat filename"" error disappeared. It is perhaps due to a Visual Studio extension keeping the process open for longer even after closing."
"I know your question was specific to merge, but I've had similar problems with merging git submodules. I think this solution will work with your problem, even if it's not directly addressing the merge question. I've found that by forcibly checking out the branch you want to merge, then going back to master, everything works out with submodules. To get things working in your example: $ git clone https://github.com/ghewgill/q14224966.git$ cd q14224966$ git submodule init$ git submodule update$ git checkout -f origin/branch$ git checkout master$ git merge origin/branchThis works because it's basically doing your rm -rf step for you. Granted, this is a bit roundabout, and maybe not worth doing if you only have the one submodule like your example does. But I've found it to be quite the timesaver when working in a project with many submodules. Also, as has been pointed out in the comments, if you want to avoid making changes to the work tree, you can use this: $ git clone https://github.com/ghewgill/q14224966.git$ cd q14224966$ git submodule init$ git submodule update$ git reset origin/branch$ git reset --hard masterThis works in roughly the same way, but avoids checking out other files in the process. I haven't had a chance to use this in the wild, but it seems like a sound method. There's also $ git merge -s subtree origin/branch. It works with your example, but I've had unexpected results with it when more than one submodule is involved. You might have better luck, though.You can't get git-merge (or any other command) to forcibly clobber files it doesn't think it knows about, no.  git tries pretty hard not to do anything totally irreversible.But with many submodules, you can make your deletion a bit easier and safer with git submodule foreach:$ git submodule foreach 'rm -rf $toplevel/$path'Entering 'sub'$ git merge origin/branchUpdating a231acd..6b4d2f4Fast-forward...(Caveat: I've never worked with subtrees and I don't know how complicated your actual repo is, so these solutions may not actually work for you.)From playing around with your sample repo, I've found two solutions that both seems to work, though they produce different commit trees:Use git merge -s resolve origin/branch~/q14224966[master]> git reset --hard origin/masterHEAD is now at a231acd add submodule~/q14224966[master]> touch other.c && git add . && git commit -m ""New commit.""[master bc771ac] New commit. 0 files changed create mode 100644 other.c~/q14224966[master]> git merge -s resolve origin/branch Trying really trivial in-index merge...error: Merge requires file-level mergingNope.Trying simple merge.Simple merge failed, trying Automatic merge.Adding sub/MakefileAdding sub/READMEAdding sub/src/main.cMerge made by the 'resolve' strategy. .gitmodules    | 3 --- sub            | 1 - sub/Makefile   | 1 + sub/README     | 1 + sub/src/main.c | 1 + 5 files changed, 3 insertions(+), 4 deletions(-) delete mode 160000 sub create mode 100644 sub/Makefile create mode 100644 sub/README create mode 100644 sub/src/main.c~/q14224966[master]> lsREADME   main.c   other.c  sub/~/q14224966[master]> cd sub/~/q14224966/sub[master]> lsMakefile  README    src/~/q14224966/sub[master]> git status# On branch master# Your branch is ahead of 'origin/master' by 5 commits.#nothing to commit (working directory clean)~/q14224966/sub[master]> cd ..~/q14224966[master]> git status# On branch master# Your branch is ahead of 'origin/master' by 5 commits.#nothing to commit (working directory clean)Here's the resulting commit tree: Use a rebase instead of a merge:~/q14224966[master]> git reset --hard origin/master HEAD is now at a231acd add submodule~/q14224966[master]> touch other.c && git add . && git commit -m ""New commit.""[master ae66060] New commit. 0 files changed create mode 100644 other.c~/q14224966[master]> git rebase origin/branch First, rewinding head to replay your work on top of it...Applying: New commit.~/q14224966[master]> lsREADME   main.c   other.c  sub/~/q14224966[master]> cd sub/~/q14224966/sub[master]> lsMakefile  README    src/~/q14224966/sub[master]> git status# On branch master# Your branch is ahead of 'origin/master' by 4 commits.#nothing to commit (working directory clean)~/q14224966/sub[master]> cd ..~/q14224966[master]> git status# On branch master# Your branch is ahead of 'origin/master' by 4 commits.#nothing to commit (working directory clean)Here's the resulting commit tree:"
"Deleting a file is changing it.  You want those two files to be ""unchanged"".  If you want to keep any changes you've done (including deletion), you should either stash or commit.  Stashing would require unstashing (git stash pop or git stash apply), while committing will probably result in a conflict which you must resolve.  If you just want to revert any changes (throw them away, not interested in keeping them), you can git checkout -- buf.cpp buf.h to restore them, then try the pull."
"As mentioned in ""git rebase: error: cannot stat 'file': Permission denied"", this should be an error seen mainly on Windows.It is usually related to files locked by a Windows process, either an anti-Virus or an IDE (Visual Studio, Eclipse, ...).Make sure no other processes are running when trying to make your checkout or merge, and see if the issue persists.TortoiseGIT process that blocks those files. Open task manager and end process TGitCache.exe. The OP virtuesplea reports:Killing the TGitCache.exe process (from the other topic) ended up being the solution"
"Well, if you're confident you won't loose any work, try the following:rm tests/unit/src/models/BrandTests.jsgit checkout -- tests/unit/src/models/BrandTests.jsThat should reset any mechanism that made it think it had changes. If it doesn't work, have others that might.I would guess this is your scenario:$ git checkout ProductsAndContentsSwitched to branch 'ProductsAndContents'Branch ProductsAndContents contains the file tests/unit/src/models/BrandTests.js, so the above checkout creates it and/or makes sure it's up to date with the specific commit requested.$ git status# On branch ProductsAndContentsnothing to commit (working directory clean)You haven't made any changes, and started with a clean working directory, so this is good.$ git checkout masterSwitched to branch 'master'This makes sure all files contained in the latest commit on master are up to date in the working directory. However, it does not remove or update files that are not contained in master, or that are ignored. Here I assume master for whatever reason does not currently include the file in question.$ git status# On branch masternothing to commit (working directory clean)Again, you've made no modifications. The fact that the file in question is not mentioned here as an untracked file probably means it's ignored (either in .gitignore or in .git/info/exclude). master doesn't contain the file so it's not concerned that it exists.$ git merge ProductsAndContentserror: Your local changes to the following files would be overwritten by merge:    tests/unit/src/models/BrandTests.jsPlease, commit your changes or stash them before you can merge.AbortingHere, your attempt to merge in the other branch wants to introduce a file that master currently doesn't have, which is normally fine. However, that file exists in your working directory, and git doesn't want to trash something that it's not sure is preserved in the repository. As suggested elsewhere, you could (assuming you know it's safe) simply remove that file and re-try the merge.With the information you have given, I'm not 100% sure that's what you have here; you could run these two commands to check for that condition, though:git ls-files master -- tests/unit/src/models/BrandTests.jsgit ls-files ProductsAndContents -- tests/unit/src/models/BrandTests.jsIf my guess is right, the first command will not show that the file exists, while the second will. Then check .gitignore and .git/info/exclude to see if it's being ignored (for .gitignore, you may need to check the version that exists on each of the two branches)."
"From SourceTree, click on Tools->Options.  Then on the ""General"" tab, make sure to check the box to allow SourceTree to modify your Git config files.Then switch to the ""Diff"" tab.  On the lower half, use the drop down to select the external program you want to use to do the diffs and merging.  I've installed KDiff3 and like it well enough.  When you're done, click OK.Now when there is a merge, you can go under Actions->Resolve Conflicts->Launch External Merge Tool.I'm using SourceTree along with TortoiseMerge/Diff, which is very easy and convinient diff/merge tool.If you'd like to use it as well, then:Get standalone version of TortoiseMerge/Diff (quite old, since it doesn't ship standalone since version 1.6.7 of TortosieSVN, that is since July 2011). Links and details in this answer.Unzip TortoiseIDiff.exe and TortoiseMerge.exe to any folder (c:\Program Files (x86)\Atlassian\SourceTree\extras\ in my case).In SourceTree open Tools > Options > Diff > External Diff / Merge. Select TortoiseMerge in both dropdown lists.Hit OK and point SourceTree to your location of TortoiseIDiff.exe and TortoiseMerge.exe.After that, you can select Resolve Conflicts > Launch External Merge Tool from context menu on each conflicted file in your local repository. This will open up TortoiseMerge, where you can easily deal with all the conflicts, you have. Once finished, simply close TortoiseMerge (you don't even need to save changes, this will probably be done automatically) and after few seconds SourceTree should handle that gracefully.The only problem is, that it automatically creates backup copy, even though proper option is unchecked."
"Check if your commits have Change-Id: ... in their descriptions. Every commit should have them.If no, use git rebase -i to reword the commit messages and add proper Change-Ids (usually this is a SHA1 of the first version of the reviewed commit).For the future, you should install commit hook, which automatically adds the required Change-Id.Execute scp -p -P 29418 username@your_gerrit_address:hooks/commit-msg .git/hooks/ in the repository directoryor download them from http://your_gerrit_address/tools/hooks/commit-msg and copy to .git/hookstry this:git commit --amendand copy paste the Change-Id: I55862204ef71f69bc88c79fe2259f7cb8365699a at the end of the file.save it and push it again!If you need to add Change-Id to multiple commits, you can download the hook from your Gerrit server and run these commands to add the Change-Ids to all commits that need them at once.  The example below fixes all commits on your current branch that have not yet been pushed to the upstream branch.tmp=$(mktemp)hook=$(readlink -f $(git rev-parse --git-dir))/hooks/commit-msggit filter-branch -f --msg-filter ""cat > $tmp; \""$hook\"" $tmp; cat $tmp"" @{u}..HEADIt is because Gerrit is configured to require Change-Id in the commit messages.http://gerrit.googlecode.com/svn-history/r6114/documentation/2.1.7/error-missing-changeid.htmlYou have  to change the messages of every commit that you are pushing to include the change id ( using git filter-branch ) and only then push."
"Looks like running git pull from the command prompt allowed me to execute the pull. I was unfamiliar with the command prompt.Typically, you will see this message when you have modified a file, but not staged the changes, and the merge you are attempting would write to that file.  Visual Studio 2013, unfortunately, contains a bug where it determines that your file is modified even though it is not.  The bug manifests when you have a file in your repository that has line endings that disagree with what should have been produced, given your core.autocrlf settings.This bug is fixed in Visual Studio 2013 Update 2: http://support.microsoft.com/kb/2927432"
"You should not remove that file from the index, but reset it or stash it (meaning remove the local changes: the file is still needed in the index):git stash# orgit checkout -- your/file # overwrite any local change# or, nuclear optiongit reset --hardIf stashed, the normal workflow is to git stash pop after the merge.(I actually prefer pull.rebase + rebase.autostash, that way git does stash for me on git pull)Uncommited changes that are stored in the stash can be taken out and applied to the original branch and other branches as well.(source: ""Git Beginners Guide: Switching branches"")This is where the git stash command comes into play. Like git reset --hard, it gives you a clean working directory, but it also records your incomplete changes internally.  After fixing the critical bug, you can re-apply these changes and pick up where you left off. You can think of git stash as a ""pause button"" for your in-progress work.(source: ""Quick Tip: Leveraging the Power of Git Stash"")"
".pyc files probably should not be tracked since, as you're seeing, they will change constantly.  Typically build products are not stored in git for just this reason.  If you have the option I would untrack them in the upstream repository.If that's not an option your only choice is to move or delete your local .pyc files.  You can do this with the following command (note: this assumes you want to delete all .pyc file at or below the current directory. find . -iname '*.pyc' -exec rm {} \;After doing this you should be able to do the merge since there will be no local files to overwrite.This error is occurring because you're tracking .pyc files in your repository (which you shouldn't do). It was probably the result of a git add . What you should do is delete all the .pyc files with git rm, then merge again. Git won't complain, as it won't be copying repository .pyc files over the local versions.As Nick suggested, adding .pyc and other files that don't make sense to track to a global (or repository-level) .gitignore is probably a good idea. If you do so, git add . won't automatically add these files. Check out GitHub's official list of suggested .gitignore files.To remove these files from the index use: find . -name *.pyc | xargs rmThen you can ignore compiled python files with the following statement in you .gitgnore*.py[cod]Once you have told git to ignore these files, you will no longer get the warning message.I prefer to ignore compiled files in my ""global"" gitignore file (more about that here), but you can do this on a per repository basis as well."
"You end up with both modified in the output of git status if there were conflicts produced by a merge.  git isn't letting you change branch until you've resolved these conflicts.  If you edit that file, you should see some conflict markers in it - there's a guide to resolving those conflicts in the git manual.  (Since kernel.org is currently down,  you can find that guide here instead.)Alternatively, if you think the merge was a mistake, you could undo it with: git reset --mergeTry this if you don't want any of the merges listed in git status:git reset --mergeThis resets the index and updates the files in the working tree that are different between <commit> and HEAD, but keeps those which are different between the index and working tree (i.e. which have changes which have not been added).If a file that is different between <commit> and the index has unstaged changes -- reset is aborted.More about this - https://git-scm.com/docs/git-resetI got this message when updating new files from remote and index got out of whack. Tried to fix the index, but resolving via Xcode 4.5, GitHub.app (103), and GitX.app (0.7.1) failed.  So, I did this:git commit -a -m ""your commit message here""which worked in bypassing the git index.Two blog posts that helped me understand about Git and Xcode are:Ray Wenderlich on Xcode 4.5 and Oliver Steele from 2008you can reset your branch with HEADgit reset --hard branch_namethen fetch branches and delete branches which are not on remote from local,git fetch -p"
"This can cause the remote repository to lose commits; use it with care.If you do not wish to merge the remote branch into your local branch (see differences with git diff), and want to do a force push, use the push command with -fgit push -f origin <branch>where origin is the name of your remote repo.Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. This can cause the remote repository to lose commits; use it with care.As the message tells you,Merge the remote changes (e.g. 'git pull')Use git pull to pull the latest changes from the remote repository to your local repository. In this case, pulling changes will require a merge because you have made changes to your local repository. I'll provide an example and a picture to explain. Let's assume your last pull from origin/branch was at Commit B. You have completed and committed some work (Commit C). At the same time, someone else has completed their work and pushed it to origin/branch (Commit D). There will need to be a merge between these two branches.local branch:                         --- Commit C                                     /                                   /                                  /origin/branch: Commit A ------ Commit B ---- Commit DBecause you are the one that wants to push, Git forces you to perform the merge. To do so, you must first pull the changes from origin/branch.local branch:                         --- Commit C -- Commit E                                    /               /                                              /               /                                               /               /               origin/branch: Commit A ------ Commit B ---- Commit D After completing the merge, you will now be allowed to fast-forward origin/branch to Commit E by pushing your changes.         Git requires that you handle merges yourself, because a merge may lead to conflicts.Have you updated your code before pushing?Use git pull origin master before you push anything.I assume that you are using origin as a name for your remote.You need to pull before push, to make your local repository up-to-date before you push something (just in case someone else has already updated code on github.com). This helps in resolving conflicts locally.This normally happens when you git commit and try to git push changes before git pulling on that branch x.The normal flow would be as below, STEP 1: git stash your local changes on that branch.STEP 2: git pull origin branch_name -v to pull and merge to locally commited changes on that branch, give the merge some message, and fix conflicts if any.STEP 3: git stash pop the stashed changes.STEP 4: git push origin branch_name -v the merged changes.Replace branch_name with master (for master branch).Some of you may be getting this error because Git doesn't know which branch you're trying to push.If your error message also includeserror: failed to push some refs to 'git@github.com:jkubicek/my_proj.git'hint: Updates were rejected because a pushed branch tip is behind its remotehint: counterpart. If you did not intend to push that branch, you may want tohint: specify branches to push or set the 'push.default' configurationhint: variable to 'current' or 'upstream' to push only the current branch.then you may want to follow the handy tips from Jim Kubicek, Configure Git to Only Push Current Branch, to set the default branch to current.git config --global push.default currentSometimes we forgot the pulling and did lots of works in the local environment.If someone want to push without pull,git push --forceis working. This is not recommended when working with other people, but when your work is a simple thing or a personal toy project, it will be a quick solution.I mentioned this in my tutorial, How To Use GitHub: A tutorial for beginners.When you create a new repository on GitHub, GitHub may ask you to create a readme file. If you create a readme file directly on GitHub, then you will need to first make a ‰Û÷pull‰Ûª request before the ‰Û÷push‰Ûª request will be successful.These commands will ‰Û÷pull‰Ûª the remote repository, merge it with your current files, and then ‰Û÷push‰Ûª all the files back to GitHub:git pull https://github.com/thomas07vt/MyFirstRepo.git mastergit push https://github.com/thomas07vt/MyFirstRepo.git masterI was getting a similar error while pushing the latest changes to a bare Git repository which I use for gitweb. In my case I didn't make any changes in the bare repository, so I simply deleted my bare repository and cloned again:git clone --bare <source repo path> <target bare repo path>Just had the same issue but in my case I had typed the wrong branch on the remote.  So, it seems that is another source of this issue... double check you're pushing to the correct branch.I experienced the very same problem and it turned out I was on a different (local) branch than I thought I was AND the correct local branch was behind in commits from remote.My solution: checkout the correct branch, cherry-pick the commit from the other local branch, git pull and git pushIs your branch name the same as the remote branch name?If no, you should checkout a new branch with the same name as the remote branch and try push it again.Assume the remote branch you want to push is [testing] and your local branch is named as [test].If you`re not in test branch, first switch to it.git checkout testThen open a new branch and name it testing.git checkout -b testingNow, it`s time to push it:git push [remote repo] testingIn my case, I had ""mybranch"" checked out, and had done git pull, so I couldn't figure out why the push wasn't working. Eventually, I realized that I was pushing the wrong branch. I was typing git push origin master instead of git push origin mybranch.So if you've already done git pull and still getting this message, make sure you're pushing the correct branch.Another solution is to advance the head of the remote by making another commit if you can. After you pull this advanced head into the local subtree then you will be able to push from it again."
"It's quite simple: f6ff240dbf47234249a68b34c8a98bb11237aa7  doesn't exist.I just realize you mean 3f6ff240dbf47234249a68b34c8a98bb11237aa7 (Note the missing 3 at the beginning) Just go to the commit list and type Ctrl+f f6ff.If that is someone you know, you should tell them to always branch from master and commit their custom changes there (for every change), instead of committing directly into master. Then he doesn't need to rebase and force-push the changes from upstream (you) and you only have to merge the specific story-branches."
"You should be able to see an individual file's history with git log <filename>. This may help to identify your mystery files.For conflicts, the source of the conflict should be shown with the conflict markers:<<<<<<< HEAD:filename...=======...>>>>>>> abcd123:filenameIt may also help to switch from a git pull workflow to a git fetch workflow.fetch updates your remote branch pointer (e.g. origin/master) but does not automatically merge your local branch (e.g. master). You can then use gitk --all to visually compare the branches, git diff origin/master to view changes in the terminal, etc.Once you are satisfied and want to incorporate your upstream changes, all you need to do is merge (e.g. git merge origin/master from the master branch). Generally, git pull is git fetch followed by git merge."
"Your local changes will need to be stashed away while you perform the merge. To do that, git provides git stash to save your uncommitted changes to a temporary location, and git stash pop to apply them back to your local code.This should work:git stashgit pull origin mastergit stash popHere's a good website to learn more about git: http://gitready.com/beginner/2009/03/13/smartly-save-stashes.htmlBut after looking at your screenshot, a merge doesn't seem like the best option for you. Instead a rebase would make more sense.git stashgit pull --rebase origin mastergit stash popHere are some resources to understand the difference between a merge and a rebase:http://gitready.com/intermediate/2009/01/31/intro-to-rebase.htmlhttp://stackoverflow.com/a/3357174/2651774"
"You can usegit merge --abortto abort your current merge action and revert to the situation before your started the merge. See git merge documentation for more details.Note that it will throw away any changes your made, but I suppose this is not a problem in your current situation...To blow away all the changes and set to prior to mergegit reset --hard commitshaHere commitsha is the sha id of git commits. You can use gitk or git log to check state of your branch and figure out commit_shaUpdateor on branch git reset --hard production_branch"
"As shown in How does ""not something we can merge"" arise?, this error can arise from a typo in the branch name because you are trying to pull a branch that doesn't exist.If that is not the problem (as in my case), it is likely that you don't have a local copy of the branch that you want to merge. Git requires local knowledge of both branches in order to merge those branches. You can resolve this by checking out the branch to merge and then going back to the branch you want to merge into.git checkout branch-namegit checkout mastergit merge branch-nameThis should work, but if you receive an error sayingerror: pathspec 'remote-name/branch-name' did not match any file(s) known to git.you need to fetch the remote (probably, but not necessarily, ""origin"") before checking out the branch:git fetch remote-nameIt's a silly suggestion, but make sure there is no typo in the branch name!I had this issue as well. The branch looked like 'username/master' which seemed to confuse git as it looked like a remote address I defined. For me using thisgit merge origin/username/masterworked perfectly fine.git fetch --all did the trick for me:git remote add upstream [url to the original repo]git checkout [branch to be updated]git fetch --allgit merge upstream/[branch to be updated]If the string containing the reference is produced by another Git command (or any other shell command for that matter), make sure that it doesn't contain a return carriage at the end. You will have to strip it before passing the string to ""git merge"".Note that it's pretty obvious when this happens, because the error message in on 2 lines:merge: 26d8e04b29925ea5b59cb50501ab5a14dd35f0f9 - not something we can mergeI got this error when I did a git merge BRANCH_NAME ""some commit message"" - I'd forgotten to add the -m flag for the commit message, so it thought that the branch name included the comment."
"git checkout --ours . # checkout our local version of all filesgit add -u            # mark all conflicted files as merged/resolvedgit commit            # commit the mergeThere is a messy alternative that can break the repo for everyone else using the same remote origin. Only consider it if you're the only one using it:git reset --hard HEAD # undo that failed mergegit push --force      # replace everything remote with localExplanation (now that I understand git better)The reason this happened is because amending commits changes 'history'. Doing this locally is safe because it doesn't affect anyone else. However, amending commits that have already been pushed does affect other repos, and is not safe.Your GUI is probably just setting --strategy=ours (git merge -s ours <branch>). This will perform the merge, citing both commits as parents, but keep your entire directory state.Your other option is to use git merge -s recursive -X ours <branch>, which will try to bring in files from both branches but will prefer your version whenever there is a conflict.DocsYou can see the two different styles at work using the following demonstration shell script:#!/bin/shmkdir gittestcd gittestgit initgit checkout masterecho ""Line one"" > bargit add bargit commit -m ""Original commit""git checkout -b fork1echo ""Line one and something"" > barecho ""Line two"" > bamgit add bar bamgit commit -m ""Fork1 commit.""git checkout mastergit checkout -b fork2echo ""Line one and other stuff"" > barecho ""Line three"" > bazgit add bar bazgit commit -m ""Fork2 commit.""git checkout fork1if [ ""$1"" = ""ours"" ]; then  # `ls gittest` => bam bar  # `cat gittest/bar` => Line one and something  git merge -s ours fork2else  # `ls gittest` => bam bar baz  # `cat gittest/bar` => Line one and something  git merge -X ours fork2fi"
"The general idea behind ""Entry 'filename' not uptodate. Cannot merge."" is:You have changes to files in your working directory that will be overwritten, removed or otherwise lost if the checkout and change to the new branch were to proceed.It has been reported that this message could be ""spurious"" at time, (potentially because ""git pull"" did not refresh the index before trying to merge) but the fix was in Git1.6.1.However, it may still be in mSysGit 1.6.1, so do you see the same error with a more recent mSysGit version ? (like 1.6.3)"
"I set-up a test to fail. This is what I got:$ git merge newbranchAuto-merging test.txtCONFLICT (content): Merge conflict in test.txtAutomatic merge failed; fix conflicts and then commit the result.$ echo $?1Git returns 0 when it merges correctly, as expected.In short, no. You're going to see exit code 1 for errors, and 0 for success.From a quick grepping of the source, there are some of the expected 127 and 128 for their specific purposes (command not found, errors already reported), and a few unusual codes in a few places, but for run of the mill errors, it's all exit(1).Running git status on a non-git repo returns 128, not 1, which is helpful in quickly determining whether a git repo exists or not.Error 128, with no error message from git, could be a catch-all for ""unexpected problem"".I was getting this on operations that needed to modify files under .git (e.g. ""git checkout -- myfile"" to revert a modified file) by a different user. (In my case ""chmod -R og+w .git"" fixed it; naturally, don't do that unless you understand the security implications for your case!)"
"To throw away all your changes and go back to the latest commit, usegit reset --hard HEADA fast-forward is a kind of merge where there's no actual merging to do, you just have to hop along the commits. In this case, git isn't actually telling you what to do, but it's letting you know that you really ought to pull (because it would be trivial).The git checkout -- file operation operates strictly on the working directory, or the filesystem state of your repository (note that there is a space between the -- and the file argument, to distinguish the command from checking out a branch or tag named file).If anything has been git add-ed to the repository, in git terminology it is a part of the index, and a checkout won't fix that, you need to use the git reset command, which updates the state of the index.As a shortcut for doing both of the above, git reset --hard will reset the index and flush out the changes in the working directory (so that your working directory and index are in identical states (the state given by an option argument; without any argument the default is HEAD). Usual caveats apply with regards to making sure you don't nuke things you want saved if they haven't been committed, but from the sounds of it this is what you want.As for the fast-forward merge, git pull should take care of that automatically, but since in git terms a pull involves both fetching the changes from upstream and merging your local branches with the new upstream, the merge part of this will fail if you have a dirty working tree, so the above commands will need to be done (or other permutations of committing/stashing operations) before the merge can proceed. Git is in general very careful to keep you from losing work unless you specifically tell it not to care.As a recommendation, if you want to track upstream, do so in your master branch and make any additional changes (even if you're just playing around) in a topic branch, where you can feel free to commit away and not worry about being able to absorb changes back from upstream.UPDATE: If reset/checkout are not actually resetting your working directory, check the core.autocrlf property on your directory: git config --get core.autocrlfIf you are using a repository that makes the rounds between Windows/UNIX/whatever filesystems with different line-ending conventions, and attempts to prevent the madness that lies therein by reading files from the filesystem with a CRLF as if they had LF terminators, and then reversing that conversion when writing to the filesystem, the idea being that you can work on files normally without introducing a ton of whitespace changes into your diffs, but it often causes more issues than necessary. Try a git diff --ignore-all-space and, if it shows nothing, that's your issue, and you can try to update the config file to turn that off, and repeat."
"that will not side step the issue. You now have conflict markers in your file!The whitespace issue are warnings and you should not have as many legitimate conflicts. If the file is a nightmare to resolve, you may need to reconstruct it by hand. This depends on what you're doing though.Many times the two bases are so different that each commit you are rebasing make you deal with this monstrous conflict. I tend to steer clear of rebase workflows and subscribe to merge/reset. Here's what I do: http://dymitruk.com/blog/2012/02/05/branch-per-feature/If your issues are only whitespace problems like line endings, you can try and clean up your repository by doing a filter branch or an interactive rebase on each side first to get whitespace on each commit to be consistent.Also I use beyond compare 3 or Perforce Merge to do conflict resolutions. BC3 is syntax aware and should deal with whitespace the best. A lot of times, it won't even open up as it will resolve the conflicts for you and you can just continue.I think most diff viewers (specially those with a GUI) let you select how to handle whitespace changes.I'd suggest you to use something like meld as your git mergetool to auto-correct those conflicts. When meld is launched, set it's whitespace-handling policy (from the Text filters tab of Preferences panel), and it will auto-adjust those changes.I faced the same problem today: rebase fails due to conflicts caused by whitespace errors.After failed trials with different settings for the whitespace option (git rebase --whitespace=fix and git rebase --whitespace=nowarn), the solution that worked for me was to ignore trailing whitespace errors in the recursive merging strategy (git rebase --abort any running rebase first if needed):git rebase -Xignore-space-at-eol <newbase>Depenending on the kind of whitespace errors, options -Xignore-space-change and -Xignore-all-space might be more useful. I don't know if the option --ignore-whitespace would have also worked."
"Is there any way to do that?Simply leave your current repo as it is.Go elsewhere and try a different approach.First make sure your config user.name and user.email are properly set locally.Then clone the remote repo first:git clone https://<yourUserName>@github.com/<yourUserName>/<yourRepo>cd <yourRepo>Once that is done, you should be in the master branch (check with a git status, and a git branch -avvv)Finally, report the files you had created or modified from the old local repo to this one (simply copy), do a git add .; git commit -m ""First implementation""; git push."
"For git revert to ""back out"" a change, it needs to figure out what the change was.In the case of most ordinary commits, the change is easy to compute.  Consider for instance this git commit graph fragment:... - G - H ...    <-- HEAD=masterHere you're on branch master which has commits G, H, and then some more.If you ask git to revert commit H, it simply needs to see what changed between ""everything in revision G"" and ""everything in revision H"".  Git can do this the same way you can, by comparing G and H:$ git diff <sha1-of-G> <sha1-of-H>If this says that in commit H, you added one line to file readme.txt and removed file x.h entirely, then git can undo this by removing that one line from readme.txt and restoring file x.h from commit G.Merge commits are more complex, though.  Let's fill in some more of that commit graph:              I - J            /       \... - G - H           M - N - O  <-- HEAD=master            \       /              K - LIf you ask git to revert the merge commit M, what changes should it back out?There's one set of changes in going from J to M:$ git diff <sha1-of-J> <sha1-of-M>(these changes are, in fact, the changes brought in via commit L as compared to commit H, which will be the changes from commits K and L combined).There's another, likely quite different, set of changes going from L to M:$ git diff <sha1-of-L> <sha1-of-M>(these changes are actually those in I and J, by similar logic).You must tell git which set of changes to undo, and which to keep.  Git has you do this by specifying the ""main line"".  This also relies on the fact that the parent IDs stored in a merge commit are in a specific order.Let's say you were on commit J, which was master, when you made the merge:$ git checkout master   # i.e., commit J$ git merge branch      # i.e., commit LNow you are on commit O, which is still master.  The branch name branch may no longer exist (or might point to some commit other than L), but you want to discard the changes in both K and L‰ÛÓi.e., the ones that were on branch branch when you did the merge.The first parent of M is J, because you merged branch into master, which git records by making J the first parent and L the second parent.  Thus, to discard the changes from commits K and L, you could now use:$ git revert -m 1 HEAD~2(here HEAD~2 backs up two commits, from O to N and then to M).  Git can then diff M^1 (J) against M, which finds the changes introduced by merging in branch branch as noted above; and then reversing those changes results in backing out the changes introduced by the merge.Note that this makes a new commit, resulting in a graph that looks like this:              I - J            /       \... - G - H           M - N - O - P   <-- HEAD=master            \       /              K - Lwhere comparing commits O and P produces essentially the same thing as comparing M and J (in that order, i.e., the reverse of the ""normal"" compare from J to M).  As far as later operations in git are concerned, though, you might as well have done this by hand-editing the tree for O and making the new commit P: it does not record (except in the commit message text) that P is essentially a revert of both K and L.Incidentally, it's worth noting that in this particular case, you could simply revert L first, then revert K, to (probably) get the same effect (with two separate extra commits):$ L=$(git rev-parse HEAD~2^2)   # get sha-1 ID of commit L$ git revert $L                 # make new commit P that reverts L$ git revert $L^                # make new commit Q that reverts L^ = KWith a big merge, though, reverting each individual change is a lot of work; reverting the merge commit itself is much easier (both to do, and to understand later, if properly documented).  (Also, the ""probably"" above is because the merge handles identical changes made on ""both sides"" of the branch, and reverting the merge avoids undoing changes in K and L that were not brought forward into M because they also occurred in I and/or J.  However, this is somewhat rare, especially in tiny branching structures like this.)Just read the fine manpage :-):Usually you cannot revert a merge because you do not know which side  of the merge should be considered the mainline.  This option specifies the parent number   (starting from 1) of the mainline and allows revert to reverse the change relative to   the specified parent. [...]Reverting a merge commit declares that you will never want the tree  changes brought in by the merge. As a result, later merges will only  bring in tree changes introduced by commits that are not ancestors of  the previously reverted merge. This may or may not be what you want.The problem is that a merge commit is a more complicated thing than a regular commit - it does not only change files, it also links two branches together. When reverting it, you must decide (and tell git) whether you only want to roll back the file changes it introduces, or also the linking of the branches.If you want to roll back the changes, but keep the linking of the branches, use option -m to git merge as explained in the manpage.If you want to completely undo the merge, you must rewrite history (using a combination of git rebase, git reset and git cherry-pick), with all the complications that can bring.What you need depends on why you are reverting the commit."
"I'd guess that file wasn't tracked, and you created it at the same time another one created it and commited it to your remote.I'd suggest you to create a stash, pull changes, and then stash pop. It would probably create a conflict (as you're saying), but it can be addressed with Netbeans' merge editor.Just resolve the conflict and you're done.Alternatively, you can commit your file locally, and then fetch + rebase onto origin/master (or whichever your remote branch is). You'll get the conflict again, it's almost the same as the first option.I just recently had this same issue with not being able to merge pulls.  I'm doing everything in the proper sequence, but when pulling changes after a particular user made a change it would refuse.  I copied the command the Netbeans was sending and pasted it into a command line window.  Despite blowing up in Netbeans it performs perfectly at doing the merge from the command line.  Then I was able to push just fine.I've faced the same problem. I'm guessing you're running git in Netbeans.Please try to run the command in git shell.You'll see the difference."
You can manually delete .git/MERGE_HEAD and Git won't be able to tell that you were just doing a merge. It will let you amend the previous commit with the changes in your index just like normal.Do a git commit -a once you have resolved the conflicts. This is the last step when you are merging conflicts.
"If you know a line in a file that was modified by the git branch merge, you can do 'git blame file.txt' and determine the commit hash number and commit author of the line in the file.  Then you can go through the git log and pull up the exact commit associated with the bad branch merge.EDIT:In response to the author's comments, if you're looking for the disappearance of a certain line then 'git diff' combined with grep and binary search could be what you want.  let's say you have commit numbers 0,1,2,3,4,5,6.  You know that the line existed in revision 0, but disappeared in revision 6.  Use 'git diff' plus grep to search for the disappearance.git diff 0 6 | grep '- line I care about'The first iteration, you'll see the line you care about disappearing.  Then you cut the revision number in half and try againgit diff 0 3 | grep '- line I care about'If the grep still shows the line disappearing ( with the '-' sign), then you know that the line disappeared in revision 0 to 3.  If the grep doesn't show the line disappearing, then the line disappeared in revisions 4-6.  Keep cutting the revisions in half until you find the culprit.Can git-bisect help in your case?Without more details I can only hint at possible solutions. If you know the file or line affected, you can try either git-blame (git blame *file*, or git blame *revision* *file*), or you can try so called 'pickaxe search' with git-log, i.e. git log -S'*line* trying to find revision which introduced given line, or deleted given line. You can find and examine all merges, for example via git log -p -m --grep=Merge, and examine how they relate to their parents (-m show diffs to all parents; alternatively -c shows combined diff but doesn't show trivial merge changes, i.e. if one side was taken).Git log has powerful searching options. Since there's the indication you might know a chunk of code that disappeared, you can search for that string of codegit log <HERE>..<THERE> -S""line I care about"" --diff-filter=MWill search from HERE to THERE for the string after -S and only where the line was modified (added or removed)You can achieve even more precision in your search if you use -G instead of -S. -G provides regular expression searching instead of string literal searching with -S."
"You have to supply -m if the commit is a merge commit, i.e. a commit with more than one parent.Normally, what git cherry-pick REV does can be described as:Take the changes between rev and its parent.Apply these changes to the current HEAD and commit the result with rev's commit message.A merge commit joins two lines of development. For example, one line implements widget, and the other line removes clutter. The merge gives you the code with the widget, sans the clutter.Now consider step #1 of the cherry-pick process: git can't guess whether you want to remove the clutter or to implement the widget. Nor can you do both, because the information on how to do both is not contained inside a single merge commit, only the content of the resultant merged tree is.The -m option allows you to tell git how to proceed. For example, if clutter removal happened on master and the merge commit was created using git merge WIDGET, then git cherry-pick -m 1 merged-commit will cherry-pick the new widget because diff between the merged tree and parent 1 (the last of clutter-removing commits) will have been exactly the widget addition. On the other hand, git cherry-pick -m 2 merge-commit will delete the clutter, because the difference between parent 2 (the last of the widget-adding commits) and merge-commit is exactly the clutter-removal missing from the widget branch.The syntax from the man pages is as follows:git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff] <commit>...The parent-number refers to:-m parent-number, --mainline parent-number, Usually you cannot cherry-pick a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows cherry-pick to replay the change relative to the specified parent.So I would double check to make sure you have the correct commit hash. It might be that you want one that isn't from a merge but rather the commit before it. Otherwise, you need to use this flag and point to the correct side of the merge to disambiguate your request."
"This appears to be a bug.I had the same issue and then found this link:http://connect.microsoft.com/VisualStudio/feedbackdetail/view/955248/git-merge-fails-claiming-uncommited-change-would-be-overwritten-by-merge-ssh-mergeconflictThey say this will be fixed with Visual Studio 2013 Update 4.(I should note that I was getting this even though I had no local uncommitted files.)"
"There's a clue in the other (pretty much exact duplicate) question that Kaz noted in a comment, that the problem went away when pyenv was taken out of $PATH.Here's the bit from the pull script that takes the FETCH_HEAD trace and turns it into an argument to git merge (or to git rebase when doing a rebasing pull):merge_head=$(sed -e '/  not-for-merge   /d' \        -e 's/  .*//' ""$GIT_DIR""/FETCH_HEAD | \        tr '\012' ' ')(By the way, note that those are tabs before and after not-for-merge and in the second -e argument to sed.  Cut-and-paste generally turns tabs into spaces, and did here.)I imagine the sed part is working correctly and the failure occurs with the tr invocation.  In fact, it looks like whatever tr is being used, is simply spitting out the 012 string (for a total of 60 characters, or 20 instances of the three-character group‰ÛÓnot sure how that happens given that the sed output is, or should be, a 40-character SHA-1).If your shell is sh or bash, see what:$ type trprints.  If you use a csh variant, which tr will show you what it will run.  (I'm not sure off-hand what to use for dash and zsh.)  If you get something other than /usr/bin/tr, that may explain the problem.  (If you do get /usr/bin/tr see what type sed or which sed says: these should be /usr/bin/sed.)"
"cd $(brew --prefix)git reset --hard HEADbrew updateYou need to do the following:cd $(brew --prefix)rm Library/Formula/argp-standalone.rbrm Library/Formula/cocot.rbAnd then do thegit fetch origingit reset --hard origin/masterbrew updateBasically, to explain a bit more:cd $(brew --prefix)tells cd to change the directory to whatever brew --prefix will output. If you try executing brew --prefix command you should see something in lines of:brew --prefix/usr/localSo the command would be in this case an equivalent of cd /usr/local.Newer brew versions have formulae under its installation prefix and Library/Formula/, so that's where you need to look for those outdated/changed files.Note, that if you changed those formulae yourself for a particular reason (like pinning a version) this action will revert them back to default ones and may produce unwanted effects.@TedPennings noted in comments that this worked for him, but his sequence was:chown everything to my_username:admin, ie, sudo chown -R ted:admin $(brew --prefix)run the two git commands above,git fetch origin and git reset --hard origin/masterThis is caused by an old bug in the update code that has long since been fixed. However, the nature of the bug requires that you do the following:    cd $(brew --repository)git reset --hard FETCH_HEADIf brew doctor still complains about uncommitted modifications, also run this command:cd $(brew --repository)    git clean -fd$ cd $(brew --prefix)$ git clean -fd$ git reset --hard$ sudo chown -R `whoami` `brew --prefix`$ brew updateNote: steps 2&3 worked for me since I did step 5 before 4 before I got the error. The brew update before changing the owner of the folder caused the whole problem.I had a similar issue where my brew package library got downloaded as a root user and then I was not able to run brew update as git would complain about not able to merge the file.Solution was to do :-sudo chown -R <user> /usr/local/LibraryResetting the brew repository should be the most efficient way if you don't mind to discard potential modifications on formulas you might have been applied:$ cd `brew --prefix`$ git fetch origin$ git reset --hard origin/master$ brew cleanup --force$ brew updateI was able to fix this on my machine by adding admin group write (and setgid bit) permission at these paths:sudo chmod -R g+ws /usr/local /Library/Caches/HomebrewThe s sets the group id on execution so that the write permissions aren't lost the next time a different admin user updates or upgrades Homebrew.This answer is somewhat incomplete because when I try to do brew cleanup --force there is a permissions issue when Homebrew tries to remove content in /usr/local/Cellar/. (Unfortunately I'm not able to investigate this further at the moment.)Another option is to just use git stash.The brew update command performs a git pull, so if there are any changed files (or even file attributes, which happened to me when I changed permissions in the directory recursively) you have to somehow fix the conflicts. Using git stash is one way; it takes any changes and puts them aside so you effectively revert to the last updated repo version. The Homebrew 'location' is by default /usr/local and it installs as a git repository. You can look for a .git folder to see for yourself. I'm writing a homebrew uninstall script to be posted on my GitHub profile soon with more info."
"Usually you do not invoke git merge without arguments (at least I don't know anyone who does). If you want that merge defaults to the tracking branch, you need to set merge.defaultToUpstream to true: git config merge.defaultToUpstream true. Your master branch has to track origin/master in this case: git branch --set-upstream master origin/master. This is done automagically if origin/master was already present when you cloned.Personally, I do git fetch and then git merge origin/master or git pull if I have no local commits.Edit: As VonC mentioned merge.defaultToUpstream defaults to true since Git 2.0.Read Pro Git, it's a very good way to get to know Git.It will tell you that your merge, done with no branch created and with no branch set as merge source, makes no sense.It will also tell you the difference between git fetch and git pull which is important.Fetching changes does not move your branch, but pulling does.Note: if your master branch is already tracking origin/master (you can see that with git branch -avvv, or a longer alias), then a git merge will not display anymore:fatal: No commit specified and merge.defaultToUpstream not set.The next Git 2.ÌÊ.x (Q3 2014) will remove that error message:see commit a01f7f2 by Felipe Contreras (felipec):merge: enable defaulttoupstream by defaultThere's no point in this:% git mergefatal: No commit specified and merge.defaultToUpstream not set.We know the most likely scenario is that the user wants to merge the upstream, and if not, he can set merge.defaultToUpstream to false.That means you won't need anymore to do a:git config merge.defaultToUpstream true"
"When git encounters merge conflicts, it adds lines of text to the conflicting files.They're comments like: <<<<< HEAD  ... your code from HEAD...=========  ... your code from the merge branch...>>>>>> my_merged_branch_nameThese lines mark where Git needs help. When Xcode runs into one of these lines in a .pbxproj file, it is unable to open the file and it throws an Workspace Inconsistency error. If you look at the messages you got from git, they show which files had the merge conflicts. To fix the problem:Open each of those file with a simple text editor (I'm old school, so I use vi. Nano will also work. Just make sure you use a code editor and not word processor like TextEdit that will try to change your line endings, etc. )  Resolve the conflicts by removing the comment lines added by git, and deciding which lines of code to keep.Then tell git that you have resolved the conflicts:git add .and continue with the merge. Xcode should now be able to open your project."
"I spend on it lots hours when i call php script to init and commit git.And i Found the work flow should Be:1.git init2.git config user.name ""someone""3.git config user.email ""someone@someplace.com""4.git add *5.git commit -m ""some init msg""If you swap [23] and 1, the config will not work at all.Wish this will do some help.Instead of doing a git pull, you can do:git fetchgit reset --hard origin/masterNeither of those require you to configure your git user name / email.This will destroy any uncommitted local changes / commits, and will leave your HEAD pointing to a commit (not a branch). But neither of those should be a problem for an app server since you shouldn't be making local changes or committing to that repository.If you are using sourcetree: Repository -> Repository Settings --> Advanced --> uncheck ""Use global user settings"" boxworked great for me.Update your bootstrap process to create a ${HOME}/.gitconfig with the proper contents, or to copy an existing one from somewhere."
"This is the same answer as another one of my questions re git troubles.I'm on a mac, and this obscure config change seemed to fix all my woes regarding unstaged changes when there were none.git config --global core.trustctime falseI think it's to do with differences between windows file times, linux file times and mac file times. who knows, feel free to comment if you do.Update: This blog post explains what's going on, sort of.With regards to Joshua Hogendorn's answer: it seems to me that leaving Xcode open while working on the repository with git leads to these problems. It even led to a situation where git committed something that I thought to have stashed (and still had afterwards) but Xcode just wrote to the filesystem right during the rebase.So: Close your Xcode project before you work on the repo with git if you want to be safe, and then you probably don't need the core.trustctime false setting."
"You can use git checkout <file> to check out the committed version of the file (thus discarding your changes), or git reset --hard HEAD to throw away any uncommitted changes for all files.git fetch origingit reset --hard origin/mastergit pullExplanation:Fetch will download everything from another repository, in this case, the one marked as ""origin"". Reset will discard changes and revert to the mentioned branch, ""master"" in repository ""origin"". Pull will just get everything from a remote repository and integrate. See documentation at http://git-scm.com/docs.I've tried both these and still get failure due to conflicts. At the end of my patience, I cloned master in another location, copied everything into the other branch and committed it. which let me continue.The ""-X theirs"" option should have done this for me, but it did not.git merge -s recursive -X theirs mastererror: 'merge' is not possible  because you have unmerged files. hint: Fix them up in the work tree,  hint: and then use 'git add/rm ' as hint: appropriate to mark  resolution and make a commit,  hint: or use 'git commit -a'. fatal:  Exiting because of an unresolved conflict."
Delete the affected files and try to pull again. Thereafter push your changes to the git.
"All you should need to do is:# if the file in the right place isn't already checked ingit add <path to desired file># remove the ""both deleted"" file from the indexgit rm --cached ../public/images/originals/dog.aigit commit         # commit the mergeAnother way of dealing with this situation if your files ARE already checked in, and your files have been merged (but not committed, so the merge conflicts are inserted into the file) is to run:git resetThis will switch to HEAD, and tell git to forget any merge conflicts, and leave the working directory as is. Then you can edit the files in question (search for the ""Updated upstream"" notices). Once you've dealt with the conflicts, you can run git add -pwhich will allow you to interactively select which changes you want to add to the index. Once the index looks good (git diff --cached), you can commit, and then git reset --hardto destroy all the unwanted changes in your working directory."
"It works for me:[merge]    keepBackup = false;    tool = p4merge[mergetool ""p4merge""]    path = C:/Program Files/Perforce/p4merge.exe    cmd = \""C:/Program Files/Perforce/p4merge.exe\"" ""$BASE"" ""$LOCAL"" ""$REMOTE"" ""$MERGED""    keepTemporaries = false    trustExitCode = false    keepBackup = false[difftool]    prompt = false[mergetool]    prompt = falseYou may also need to restart your git console if you've just installed p4merge, for the updated environment variables to register.After I installaed P4Merge, I followed the instructions on this page and it works perfectly for me.https://gist.github.com/tony4d/3454372"
"Daniel Hilgarth's anti-virus suggestion in the question's comments reminded me that I had run (and prematurely canceled) file recovery scans shortly before the problem manifested. It's possible these scan processes were causing the problem if they didn't cancel properly.Regardless, rebooting my machine fixed the issue."
"You probably need to run git fetch (and you may need to tweak your fetch refspecs).What's happeningThe blob(s) that git needs are specific versions of the files (pathnames are irrelevant at this point).For instance, consider this bit of patch:diff --git a/fmt.py b/fmt.pyindex 2069319..0c8a68f 100755--- a/fmt.py+++ b/fmt.py@@ -207,7 +207,8 @@ def main():Let's take a look at commit 7124b135...'s version of fmt.py, and then its parent's version:$ git rev-parse 7124b135:fmt.py0c8a68f9dc05a7399d06693c0b2761fb43ed0b58$ git rev-parse 7124b135^:fmt.py2069319dae4bd87cb6e1b7c18d86ebededeb00c8Now look back at that index ... line:index 2069319..0c8a68f 100755There are those blob IDs.  Git is comparing blob 2069319... against blob 0c8a68f..., which are the versions in the parent of the commit being shown, and the commit itself.If I were to send this patch to you, and you asked your git to apply it and it did not apply cleanly, git's ""fall back to 3-way merge"" requires that it find or construct three versions of the file: your current one, the one identified by 2069319, and my version.Clearly git has your current version, so there's no problem there.  Clearly it does not have my version, so it must construct it.  The way it can construct it is to find version 2069319.The complaint you are seeing is because git cannot find, in your repository, anything identified by the SHA-1 ID on the left of the .. in the index <sha1>..<sha1> <mode> line.(If git could find that blob, it would extract it to a temporary file, apply the patch to that temporary file, and hence have my version; and then it would have the three versions it needs to do a 3-way merge.)Where will git get that blob?If the patch is against a commit that is currently in a repository that you can git fetch from, you should be able to run git fetch and obtain that commit, which will obtain all the trees and blobs associated with that commit.This git fetch needs to pick up that commit.  The commits that git fetch normally picks up are all the ones in refs/heads/* on the remote, as controlled by the fetch = line(s) associated with that particular remote.It's possible that the commit(s) in the remote that retain this blob there are not under refs/heads/* (e.g., if it's only in a stash now, or attached to an outdated tag or a branch that was rebased).  In this case, git fetch probably won't bring over the necessary blob.  There is a way to get it if you can log in on the remote: just make a branch or tag that points to a commit that leads to the blob in question.  (Finding such a commit can be hard, unless your patch has the commit ID right in it, then it's easy.)  Then direct your git to fetch that branch or tag, and you'll get the necessary blob."
"While looking around i tried the following that seemed to fix my issue at the time.While on the branch i wrote.   git reset --hardHad you ever previously done git update-index --assume-unchanged <file>? That could be a potential reason for your situation.To fix, you do git update-index --no-assume-unchanged <file>. Then you should be able to stash your changes and continue with the merge."
"If you are running git under a file system that is not case sensitive (Windows or OS X) this will occur if there are two branches with the same name but different capitalisation, e.g. user_model_changes and User_model_changes as both of the remote branches will match the same tracking ref.Delete the wrong remote branch (you shouldn't have branches that differ only by case) and then git remote prune origin and everything should workPermanent Fixgit update-ref -d resolved my instance of this error, e.g.git update-ref -d refs/remotes/origin/userNote that this doesn't impact remote.In my case, a subsequent git fetch fetched that branch again, and following git fetches/pulls no longer gave the error ""remote ref is at but expected"".If that doesn't work, a temporary fix:Note also that if you don't care about the branch in question (e.g. you just want to update master, not origin/user), a git pull workaround is to fetch then just merge the particular branch you care about, e.g.git fetch # may give an error for a particular branch, but other branches will still be successfully fetchedgit merge origin/master"
"Don't forget to fetch the origin!!!$ cd /usr/local$ git fetch origin$ git reset --hard origin/masterExplanation, for those interested:What happens is that you are trying to update brew, but brew itself is either not up to date (likely), there is a permissions change via some OS update (also likely), or brew is slightly corrupt (unlikely).  Since brew itself is a git repo, you have to update or reset brew to the master branch version.   brew [by default] is located in the /usr/local folder, so you  Go to that folder [first command] which also should update permissions (if not see below)Fetch the origin [second command] which means to update your LOCAL version of the remote branch of brew  Hard reset [3rd command] based on the REMOTE master branch (which also uses your current permissions).You can also chown the first command if you are in a non sudo or admin profile$ sudo chown -R whoami /usr/local$ cd /usr/local$ git reset --hard origin/master To understand git reset, take a look at this article.I had a similar issue a couple weeks ago trying to update an old homebrew install. Doing this:git reset --hard origin/masterin /usr/local fixed it for me.It seems like other folks have had this issue too.  Have you looked over any of the proposed workarounds here?I'm adding my personal experience, since it seems a little safer than what proposed in 2012:Run brew doctor. If you get the following warning:Warning: The /usr/local directory is not writable.run:sudo chown -R `whoami` /usr/localto fix the permissions problems (as suggested also by Chris Frisina). Eventually run brew doctor again to ensure yourself that the warning is gone.Now, you should have aWarning: You have uncommitted modifications to Homebrewthat may bey solved bycd /usr/local/Library && git stash && git clean -d -fas suggested by Dr.Brew itself. The command stashes the uncommitted modifications so you could go back and recover them if needed. It seemed safer than git reset --hard origin/master to me.If you wish, check the official troubleshooting guide if the steps suggested here and by other SO users does not solve your problem."
"I have solved the same problem by using the Git command prompt in Visual Studio, because it gives you more ability:http://msdn.microsoft.com/en-us/library/vstudio/dd286572.aspxYou also may install this extension to facilitate the work with it (it gives you ability do not enter passwords each time):http://gitcredentialstore.codeplex.com/Then I used this commands:git pull // I got an error on this stepgit stashgit pullmore information about commands here:http://git-scm.com/docs/git-pullhttp://git-scm.com/book/en/Git-Tools-Stashinghttp://git-scm.com/docs/git-commitAnd as CharlesB said it is due to ""conflict between your changes and the changes from another branch"".You have some uncommited changes, commit or undo it and git pull will workI experienced this issue during a pull via visual studio. There was a change to a hidden file: .ntvs_analysis.datSo I:Show hidden files via control panel => folder options => view => show hidden files and dirs just to see that is was thereIn the project dir use the git gui to undo the change to that fileAfter that the pull request was successful."
"I read the error message once again and thought that I should merge the local branch into remote branch. I looked around in the IDE to find these options. I got lucky when I tried:Project > right click > Git > repository browser. The following window opens up:Steps: Remote branch > right click > merge revision. Then you will see the hash of remote next to local.Project > Right click > Git > Remote > Push. This will push your local branch code to remote repo.Realize a pull. Then a window with the option 'merge' will appear. Do a merge and try to push it again.Sorry for my english levelDon‰Ûªt use git pull, use git fetch, then git merge, then git commit and then git push.FYI: http://longair.net/blog/2009/04/16/git-fetch-and-merge/"
"TL;DR:Also, running git pull while on one of these branches fetches all the remote references and then automatically merges in the corresponding remote branch.That should read as:The git pull will update a ""remote tracking branch"", and merge those updates in a local branch tracking said remote tracking branch.See the next section for an explanation of all those different ""tracking"" elements.Note that the term ""track"" has been part of the most confusing ones in git, from Mark Longair blog post ""The most confusing git terminology"".‰ÛÏtrack‰Ûù and ‰ÛÏtracking‰Ûù1/ ‰ÛÏtrack‰Ûù as in ‰ÛÏuntracked files‰ÛùTo say that a file is tracked in the repository appears to mean that it is either present in the index or exists in the commit pointed to by HEAD.  You see this usage most often in the output of ‰ÛÏgit status‰Ûù, where it will list ‰ÛÏuntracked files‰Ûù:# On branch master# Untracked files:‰ÛÏtrack‰Ûù as in ‰ÛÏremote-tracking branch‰ÛùAs a bit of background, you can think of a remote-tracking branch as a local cache of the state of a branch in a remote repository.The most commonly seen example is origin/master, or, to name that ref in full, refs/remotes/origin/master.Such branches are usually updated by git fetch.The sense of ‰ÛÏtrack‰Ûù in the phrase ‰ÛÏremote-tracking branch‰Ûù is indicating that the remote-tracking branch is tracking the state of the branch in the remote repository the last time that remote-tracking branch was updated.  So, you might say that refs/remotes/origin/master is tracking the state of the branch master in origin.The ‰ÛÏtracking‰Ûù here is defined by the refspec in the config variable remote.<remote-name>.fetch and the URL in the config variable remote.<remote-name>.url.‰ÛÏtrack‰Ûù as in ‰ÛÏgit branch ‰ÛÒtrack foo origin/bar‰Ûù or: ‰ÛÏBranch foo set up to track remote branch bar from origin‰ÛùAgain, if you want to do some work on a branch from a remote repository, but want to keep your work separate from everything else in your repository, you‰Ûªll typically use a command like the following (or one of its many ‰ÛÏDo What I Mean‰Ûù equivalents):git checkout --track -b foo origin/barThe sense of ‰ÛÏtrack‰Ûù both in the command and the output is distinct from the previous sense ‰ÛÒ it means that config options have been set that associate your new local branch with another branch in the remote repository.  The documentation sometimes refers to this relationship as making bar in origin ‰ÛÏupstream‰Ûù of foo.  This ‰ÛÏupstream‰Ûù association is very useful, in fact:  it enables nice features like being able to just type git pull while you‰Ûªre on branch foo in order to fetch from origin and then merge from origin/bar. It‰Ûªs also how you get helpful messages about the state of your branch relative to the remote-tracking branch, like ‰ÛÏYour branch foo is 24 commits ahead of origin/bar and can be fast-forwarded‰Ûù.The tracking here is defined by config variables branch.<branch-name>.remote and branch.<branch-name>.merge.You have mistaken the italics here. The verb is ""merges in"" with emphasis on in. You read it as ""merges into"". Instead, read it as ""merges in from the corresponding remote branch""."
"This is just a hunch, but was your remote a bare repo or a working directory? If it was a working directory rather than a bare repo, the file.php file on the remote had uncommitted changes. Your git push command was trying to advance the HEAD at the remote which was causing conflicts due to the uncommitted changes.This is why you usually git pull to update a working directory, and use git push on bare repos. FYI, to setup a bare repo for use as something similar to a central CVS/SVN/etc repo, do the following on the remote:$ mkdir my-git-repo$ cd my-git-repo$ git init --bareThen in your local repo:$ cd my-git-repo.git$ git remote add origin user@host:/path/to/my-git-repo/$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master$ git push origin masterNow you have a bare repo to push/pull into/from that contains your master branch. You can repeat the last three local steps with any additional local branches you want to put on the remote. Cloning is the same as before and you don't need to use git config as remotes are set automatically and remote merging refs are set when you use tracking branches. Hope that helps.Try doing a git checkout file.php then git push again.Update:git pull tells the branch is up-to-date?git status doesn't show any unmerged file?git commit works?If you answered yes to all above, and your git push keeps failing even after a clean copy of the remote repository (read git clone), it's very likely the remote repository has an index problem.I would cut and paste my file.php locally out of the working folder. To your desktop lets say.Then do a pull, then git should fetch the lastest file.php from the server. Then just paste in your copy of file.php and overwrite the pulled one or open up both versions and just paste in your changes.I hope that does the trick.Try to do a git status and check if you've got any non commited changes to 'file.php'. You need to commit all the changes on the same files, or git could change your non-commited file.Try to make another commit after the pull, and then try to pull again, review any possible merge and push the data.If you want just to overwrite your local copy, checkout the file file.php  (git checkout HEAD^ file.php to checked version previous to last one) to a previous version, and then pull from the repository."
"TL; DRThe --preserve-merges flag simply tells git-rebase to try to recreate merge commits instead of ignoring them. It does not give git rebase the ability to remember how merge conflicts were resolved, i.e. it does not record conflict resolutions for future use. What you want to use for that is rerere.In your toy example, the conflict arising during the rebase is exactly the same as the one you resolved during the preceding merge. If you had activated rerere before the merge, you wouldn't have had to resolve that conflict again during the rebase.If you anticipate that you will merge, then rebase a branch, you should activate rerere so that, in the future, you only need to resolve a given merge conflict once, not multiple times.Detailed explanationLet's break down your toy example.git initecho Hello > Hello.txtgit add Hello.txtgit commit -m ""Create Hello.txt (commit A)""git tag startecho World! >> Hello.txtgit commit -am ""Change to Hello World (commit B)""git checkout startgit checkout -b branchecho Dave >> Hello.txtgit commit -am ""Change to Hello Dave (commit C)""So far, so good. Right before your first git merge command, your repo looks like this:In commit A, Hello.text containsHelloIn commit B, Hello.text containsHelloWorld!And in commit C, Hello.text containsHelloDaveNow, when you try to merge master into branch by runninggit merge masterGit reports a merge conflict because it has no way of figuring out, on its own, whether the contents of Hello.txt after the merge should beHelloWorld!DaveorHelloDaveWorld!or something else...You resolve that conflict by overwriting the contents of Hello.txt with Hello World, Dave!, staging your changes, and completing the merge commit.echo ""Hello World, Dave!"" > Hello.txtgit add Hello.txtgit commit -m ""Merge branch master into branch (commit D)""Your repo now looks like this:Then you rungit checkout startgit checkout -b goodbye-branchecho Goodbye > Goodbye.txtgit add Goodbye.txtgit commit -m ""Add Goodbye.txt (commit E)""At that stage, your repo looks as follows:Now you rungit checkout branchgit rebase -p goodbye-branchbut experience a conflict. Before explaining why this conflict arises, let's look at what your repo would look like if that git-rebase operation were successful (i.e. conflict free):Now let's see why you run into the same conflict in Hello.txt as during your first merge; Goodbye.txt is not problematic in any way, here. A rebase can actually be decomposed in a sequence of more elementary operations (checkouts and cherry-picks); more on this at http://think-like-a-git.net/sections/rebase-from-the-ground-up.html.Long story short... In the middle of your git rebase operation, your repo will look as follows:The situation is very similar to that right before your first merge:in commit B', Hello.text containsHelloWorld!And in commit C', Hello.text containsHelloDaveThen Git attempts to create merge B' and C', but a merge conflict arises for the exact same reason as the first merge conflict you experienced: Git has no way of figuring out whether the Dave line should go before or after the World! line. Therefore, the rebase operation grinds to a halt, and Git asks you to resolve that merge conflict before it can complete the rebase.What you can do about it: use rerereGit's rerere is your friend, here.The name stands for ""reuse recorded resolution"" and as the name implies, it allows you to ask Git to remember how you've resolved a hunk conflict so that the next time it sees the same conflict, Git can automatically resolve it for you.[...] if you want to take a branch that you merged and fixed a bunch of conflicts and then decide to rebase it instead - you likely won't have to do all the same conflicts again.If rerere had been enabled,git config --global rerere.enabled truebefore the merge, then Git would have recorded how you resolved the merge conflict when creating commit D, and would have applied the same resolution when it encountered the same conflict during the subsequent rebase. The conflict would still have interrupted the rebase operation, but it would have been resolved automatically. All you would have had to do is git rebase --continue.However, it looks like rerere wasn't already activated before the merge, which means Git must have kept no record of how you resolved the conflict the first time. At this stage, you can either activate rerere now and resolve all those same conflicts manually again, or use the rerere-train.sh script (see also this blog post) to use the existing history to pre-seed the rerere cache."
"When there is a conflict during a merge, you have to finish the merge commit manually. It sounds like you've done the first two steps, to edit the files that conflicted and then run git add on them to mark them as resolved. Finally, you need to actually commit the merge with git commit. At that point you will be able to switch branches again.In case you ever get stuck during a merge/rebase you can alwaysgit reset --hardto restore your working to the state of the last commit. This will lose your changes from the working tree so if you had local modifications before the merge they will be gone after this‰ÛÓwhich is why it‰Ûªs advisable to not start a merge when you have local modifications. :)The next steps after resolving the conflicts manually are:-git add .git status (this will show you which commands are necessary to continue automatic merge procedure)[command git suggests, e.g. git merge --continue, git cherry-pick --continue, git rebase --continue]"
"You can either commit your changes before you do the merge, or you stash them:git stashgit merge origin/mastergit stash popIf you want to keep your changes, you can commit your changes to your local repository first and then merge the remote repository."
"I encountered a similar problem today. git status wasn't listing the files which checkout was complaining about. I did a:git checkout -- path/to/fileAnd that undoes any changes to the file.An even easier way to undo all unstaged changes:git checkout -- .As simple as this:git stashgit stash popThe ""errors"" you see when running git stash aren't anything to be concerned about. It's just git recognizing that the file doesn't have any uncommitted changes.Move the offending file to some other location.  Then delete the offending file from your tree.  Pull again.  then diff the changes from your offending file over the file you just pulled.  hack, but it works.I had a similar problem on a fresh clone. I just forced the checkout with the --force (-f) flaggit checkout --force some_branch Probably not the best way of resolving the issue on a repo that you are making changes to, but in my case I was sure I hadn't made any changes, and just wanted to switch branch.It seems that you have untracked files in your working copy, which are tracked on the other branch. Git refuses to checkout the other branch, since your currently untracked local files would be overwritten by the files on the other branch.You can nowAdd those files to your current branch, if those files are relevant for this branchremove those files if they are not needed"
"You edited the .gitignore in both branches.  Now, git is unsure of which lines in each copy are the correct ones so it is asking you to resolve them.The lines:<<<<<<< HEADpublic/img/ignore=======Are what appears in the copy of the file in master.And=======public/img/profilespublic/blogpublic/recommendation>>>>>>> newfeaturein the branch newfeatureYou should just have to edit the file as you would like it to appear finally.  Then...git add .gitignoregit commitSimply edit .gitignore file to resolve conflict:Before<<<<<<< HEADpublic/img/ignore=======public/img/profilespublic/blogpublic/recommendation>>>>>>> newfeatureAfterpublic/img/ignorepublic/img/profilespublic/blogpublic/recommendationThen:git add .gitignoregit commitAutogenerated commit message should apear, accept it (save & close) and it's done.What happened is that there was a merge conflict: two branches changed the file ""at the same time"", in distinct streams. You can see the changes other branch has done in ""newfeature"" section and the other in the HEAD section.What you need to do is to edit that file so that it will contain the contents that you want, add that to be followed and then commit that. This is known as a merge commit.Now, what I told above is doing a merge by hand, ""manually"". It is possibly the easiest to understand. You can also use git mergetool command to do that with a visual tool, if configured, or use ""git merge"" with some strategy that will tell it how to handle the conflict.Use git mergetool to resolve the conflict (or just fix it yourself manually; this isn't a particularly hard case to resolve), then re-commit.Fix the conflicts in the .gitignore file, add the updated version and then commit:vim .gitignore# assuming you want all 4 lines: simply remove the conflict markers (<<<<<<, ======, and >>>>>)git add .gitignoregit commitYou should merge your .gitignore by hand, then add it to index by $ git add .gitignoreYou can get the basics of merging here:http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-MergingGit's automatic merge failed. This usually happens when changes occur to the same file at the same time in different branches/repositories when trying to merge branches/push content.The modifications made to .gitignore on the branch newfeature conflits with the one made on master.The line: <<<<<<< HEAD indicates the modifications made on master, which follow this line, while the line >>>>>>> newfeature indicates the modifications made on newfeature, which precede this line. The two modifications are separated by =======.You should edit manually the file and keep/merge what is useful in each of the two parts. Then you should commit (after removing the <<<<HEAD , ===== and >>>newfeature lines)."
"You may want to check if there is no CR or similar invisible character behind the sh.This happens sometimes when a file passed through a windows system.I think in vi it will show up a ^MIf that is the case remove it and it should work."
"Another approach, if you don't have any work in progress, is to try and reset --hard your HEAD.With EGit: Resetting your current HEAD:Select Team -> Reset... on a project. This opens a dialog where you can select a branch or a tag.Reset HEAD on your current branch, in order to reset index and working tree to the last commit of said branch.Then try your pull.I was able to fix a similar issue by using the git command line client. While eclipse (egit) was only saying DIRTY_WORKTREE, in the command line I saw multiple conflicting files. Using git merge master from the command line, I could easily resolve the conflicts then in eclipse.So for me this seems to be an egit issue."
"I had the same issue. A very simple solution would be to force the push anyways:git push heroku master -fSince heroku is just being used to deploy your App(and not for source control like origin/master) this should be fine.For some reason your Heroku repo has diverged. You could do:git fetch herokugit merge heroku/mastergit push heroku masterwhich will ""Merge the remote changes before pushing again."" Before you merge, maybe do git diff heroku/master to find out what's actually different."
"Well, a merge (sans the recursive part of the strategy for dealing with criss-cross merge) is just patching the local tree with diff from most recent common ancestor to the remote one.There is a command to get the merge base, git merge-base, but git diff is even able to call it on it's own if you use the ... (3 instead of 2 dots) operator.So the merge is:git diff HEAD...MOODLE_23_STABLE_workshop -- mod/workshop/ | git apply -3and than you commit it.You probably shouldn't try recording MOODLE_23_STABLE_workshop as base, because it really isn't. If you did, next merge would assume you merged all changes and explicitly reverted the ones outside mod/workshop/. On the other hand if you don't record the parent, next merge will try to re-apply the changes, causing unnecessary conflicts if the same areas are modified again as git is smart enough to recognize already applied diff, but can't tell when the diff obsoletes other changes."
"Per twalberg's comment above, disabling shallow clone solved this issue.  All branches built and jobs completed."
"Those are merge markers:<<<<<<<Changes made on the branch that is being merged into. In most cases,this is the branch that I have currently checked out (i.e. HEAD).|||||||The common ancestor version.=======Changes made on the branch that is being merged in. This is often a feature/topic branch.>>>>>>>As explained in ""Fix merge conflicts in Git?"", you are supposed to:remove themkeep the lines you want to see in the final version of the fileadd and commitOr you can simply checkout those file to keep the original version, as in ""How can I discard remote changes and mark a file as ‰ÛÏresolved‰Ûù?"".As you can see, the name you have deleted from the Finance Team in marketing branch (Stacy and Alexander) are back.So when you are merging master into marketing, git is asking you: decide, should we keep those names or removes them?As Charles Bailey adds in the comments, it seems the (base) common ancestor section is missing:|||||||The common ancestor version.=======you should redo the exercice with the config:git config merge.conflictStyle  diff3That will help visualize the base section  of the 3-way merging.See also ""Why is a 3-way merge advantageous over a 2-way merge?"".The OP adds After you decide what to keep in the text file and remove the merge markers, <<<HEAD and >>>master, you need to add the files to the stage with git add [filename], then commit as normal.  You cannot just execute git merge master right away.When merging again, the OP reports the error message:error: 'merge' is not possible because you have unmerged files. hint: Fix them up in the work tree, hint: and then use 'git add/rm <file>' as hint: appropriate to mark resolution and make a commit, hint: or use 'git commit -a'. fatal: Exiting because of an unresolved conflict.Here is the solutiongit add .git commit - m ""success""git merge masterSee ""GIT merge error ‰ÛÏcommit is not possible because you have unmerged files‰Ûù""."
"The way a cherry-pick works is by taking the diff a changeset represents (the difference between the working tree at that point and the working tree of its parent), and applying it to your current branch.So, if a commit has two or more parents, it also represents two or more diffs - which one should be applied?You're trying to cherry pick fd9f578, which was a merge with two parents. So you need to tell the cherry-pick command which one against which the diff should be calculated, by using the -m option. For example, git cherry-pick -m 1 fd9f578 to use parent 1 as the base.I can't say for sure for your particular situation, but using git merge instead of git cherry-pick is generally advisable. When you cherry-pick a merge commit, it collapses all the changes made in the parent you didn't specify to -m into that one commit. You lose all their history, and glom together all their diffs. Your call."
"Check status (git status) of your repository. Every unmerged file (after you resolve conficts by yourself) should be added (git add), and if there is no unmerged file you should git commitNote and update:Since Git1.7.4 (January 2011), you have git merge --abort, synonymous to ""git reset --merge"" when a merge is in progress.But if you want to complete the merge, while somehow nothing remains to be added, then a crude rm -rf .git/MERGE* can be enough for Git to forget about the current merge."
"There are a couple of things going on here.  It helps to understand what happens when you issue various Git commands.The pull command (as in git pull) results in a fetch followed by a merge.  So when you did a pull kamal@kamal-Lenovo-G470:~/git/TryGit$ git pull origin productGit tried to pull in changes from the default remote repository From ssh://192.168.2.251/TryGit * branch            product    -> FETCH_HEADand merge them in.  Auto-merging TryGitResources/build/build.sqlIn so doing it encountered a conflictCONFLICT (content): Merge conflict in TryGitResources/build/build.sqlAutomatic merge failed; fix conflicts and then commit the result.Git maintains this 3 versions of the file pending a merge -- your changes, changes pulled in and the common ancestor.  The version pulled in is temporarily stored in MERGE_HEAD.  You can see the differences with a git diff invocation.  At this point you need to fix the conflicts that Git was unable to automatically resolve.   Once you have fixed it simply perform the usual git add followed by a git commit.  This process is also explained in the examples section of the man page for the commit command.Oh! And it appears you have a file called Adding.  Note that the git status command ends with# Untracked files:#   (use ""git add <file>..."" to include in what will be committed)##   AddingThis happens when you ask Git to track a directory (such as when you did git init .).  From then on Git monitors changes in the specified location.  The above is saying that ""I see that you have added a file called Adding.  I don't know much more about it (it is untracked).""   Once you add it, Git starts tracking changes (can tell you what has changed with it over time)."
"As mention ed in ""Fun with keeping local changes around"":Linus often performs patch applications and merges in a dirty work tree with a clean index.A dirty work tree is where you have changes that are not added to the index.  A work tree that is not dirty is a clean work tree.A dirty index is where you have changes already added to it (in other words, ""git diff --cached"" will report some changes).  A clean index matches the HEAD.Each time, git status can display what you need to do before being able to do a new merge.git stash, for instance, can save current work in progress in your working tree, and git stash pop will apply said work once the merge is done."
"One approach is to commit that file first then pull.git add filenamegit commit //enter your commit message and save git pull Another approach is stash your changes then pull. Then apply stash.git stashgit pullgit stash apply stash@{0}Do git commit and then git pull. It fetch your friend changes at first and then merge your changes, nothing will be lost.Conflicts between your changes will be represented such way:Here are lines that are either unchanged from the commonancestor, or cleanly resolved because only one side changed.<<<<<<< yours:sample.txtConflict resolution is hard;let's go shopping.=======Git makes conflict resolution easy.>>>>>>> theirs:sample.txtAnd here is another line that is cleanly resolved or unmodified.Or you could use some interactive merge tool."
"It looks like Git tried to remove the .git/rebase-merge directory but wasn't able to remove it completely. Have you tried copying that folder away? Also copy away the .git/rebase-apply folder if that is present.I had a similar problem due to a zombie vim.exe process. Killing it in Task Manager, followed by a git rebase --abort fixed it.Had same problem in Eclipse. Could not Rebase=>abort from Eclipse.Executing git rebase --abort from Git Bash Worked for me.On Windows, if you are unwilling or unable to restart the machine see below.Install Process Explorer: https://technet.microsoft.com/en-us/sysinternals/bb896653.aspxIn Process Explorer, Find > File Handle or DLL ...Type in the file name mentioned in the error (for my error it was 'git-rebase-todo' but in the question above, 'done').Process Explorer will highlight the process holding a lock on the file (for me it was 'grep').Kill the process and you will be able to abort the git action in the standard way.In my case it was because I had opened SmartGit's Log in the respective Git project and Total Commander in the respective project directory. When I closed both I was able to rebase without any problem.The more I think about it, the more I suspect Total Commander, i.e. Windows having a lock on opened directory the git rebase was trying to something with.Friendly advice: When you try to fix something, always do one change at a time. ;)"
"You are trying to revert a merge commit, and git doesn't know which parent to revert to. The -m allows us to choose which parent to choose. See the merge commit and note down which parent you want to go to. The parent information can be seen in git log, for example:commit d02ee0f2179def10277f30c71c5d6f59ded3c595 Merge: dd3a24c 2462a52and run:git revert <hash> -m 1where 1 indicates parent number 1.If you are trying to revert to that commit, do:git reset --hard <hash>Understand the difference between git revert and git reset from the docs and decide which one you want. git revert is the safer option, but doesn't really do what you want. It just reverts the changes of a (set of) commit. git reset makes you move to a particular commit in history, and will rewrite your history.I want to revert back to ...Then you don't want git revert, at least not like this. git revert is for reverting the specific changes made in that commit. What you're looking for is to revert or undo all the changes made after that commit.git reset is the command to use here.git reset --hard c14609d74eec3ccebafc73fa875ec58445471765 completely resets your branch, index and work tree to that specific commit.Note that the usual precautions apply: if anyone else has fetched later commits already, removing them from the history like this complicates matters for them. If you instead want to create a new commit, which simply restores the state to that of commit c14609d74eec3ccebafc73fa875ec58445471765, you can use git rm and git checkout:git rm -r .git checkout c14609d74eec3ccebafc73fa875ec58445471765 .(The rm is needed to make sure newly added files also get removed.)This lets you then create a new commit, on top of your local history, which undoes every change since c14609d74eec3ccebafc73fa875ec58445471765."
"It's very unfortunate that SourceTree doesn't make it easy for you to revertmerge commits (at least in Windows SourceTree 1.5.2.0). However, reverting themerge can easily be accomplished from the command line, but do you want torevert the merge by adding another commit that is the reverse of theresults of the merge commit, or do you want to just remove the merge commit fromhistory altogether?If you're not sharing your master branch with other people, the simplest thingto do would be to simply do a hard reset to remove the merge commit fromhistory. However, if other people already have a copy of that merge commit, thenyou'll create extra work for them as they try to re-sync their copies ofmaster with the rewritten version of yours.So you need to figure out which option you want to use. I will give the stepsfor both, using the command line:Remove Commit from Historygit checkout mastergit push origin master --forceThat will overwrite the merge commit on origin/master with the current stateof your local master branch, thus removing the merge commit.Revert Commit with another Reverse Commitgit checkout mastergit merge origin/mastergit revert -m 1 HEADThat will bring your local master branch in-sync with origin/master, andthen you can add a reverse commit by telling git revert that the1st parent is the one that should be considered the ""mainline""parent, and it will create the reverse commit relative to the changes brought infrom the other parent commit.If later on you decide that you want to bring in the changes from the otherparent again, then you'll need to add another reversion commit that reverts thereversion commit that you just made (a technique known as ""reverting therevert"").See also:Undo a Git merge?.How do I ‰ÛÏun-revert‰Ûù a reverted Git commit?.git-revert(1) Manual Page.How to revert a faulty merge.This method is based on history deletion so not the best if others are also working on the project:Check out the branch you  made the mistake onRight click on the commit you want to reset the branch toClick ""Reset current branch to this commit""Select ""Hard"" mode and click ""OK""Unfortunately you need terminal to do this bit. Type git push origin name_of_branch --force into terminal (you may need to enter your git repo username and password for it to accept the command)If a message pops up later down the line asking if you would like to abort the rebase or continue. Click ""continue"". If you abort, the merge will appear on your local copy again.This is probably the easiest way to do it so if others are working on the project, make sure to let them all know what you are doing and check you aren't going to screw anyone up."
"I have not seen that exact error before. But I have a guess about the trouble you are encountering. It looks like because the master and one.one branches of supery contain different refs for the subby submodule, when you merge changes from master git does not know which ref - v1.0 or v1.1 - should be kept and tracked by the one.one branch of supery.If that is the case, then you need to select the ref that you want and commit that change to resolve the conflict. Which is exactly what you are doing with the reset command.This is a tricky aspect of tracking different versions of a submodule in different branches of your project. But the submodule ref is just like any other component of your project. If the two different branches continue to track the same respective submodule refs after successive merges, then git should be able to work out the pattern without raising merge conflicts in future merges. On the other hand you if switch submodule refs frequently you may have to put up with a lot of conflict resolving.Well, its not technically managing conflicts with submodules (ie: keep this but not that), but I found a way to continue working...and all I had to do was pay attention to my git status output and reset the submodules:git reset HEAD subbygit commitThat would reset the submodule to the pre-pull commit. Which in this case is exactly what I wanted. And in other cases where I need the changes applied to the submodule, I'll handle those with the standard submodule workflows (checkout master, pull down the desired tag, etc).First, find the hash you want to your submodule to reference.  then run~/supery/subby $ git co hashpointerhere~/supery/subby $ cd ../~/supery $ git add subby~/supery $ git commit -m 'updated subby reference'that has worked for me to get my submodule to the correct hash reference and continue on with my work without getting any further conflicts.I struggled a bit with the answers on this question and didn't have much luck with the answers in a similar SO post either. So this is what worked for me - bearing in mind that in my case, the submodule was maintained by a different team, so the conflict came from different submodule versions in master and my local branch of the project I was working on:Run git status - make a note of the submodule folder with conflictsReset the submodule to the version that was last committed in the current branch:git reset HEAD path/to/submoduleAt this point, you have a conflict-free version of your submodule which you can now update to the latest version in the submodule's repository:cd path/to/submodulegit submodule foreach git pull origin SUBMODULE-BRANCH-NAMEAnd now you can commit that and get back to work."
"Git is warning you that forms/answers.php has changes in your working copy or index that have not been committed.You can use git-stash to save your changes then git-stash apply to restore them.The common use case of git-stash is that you are working on changes but then must temporarily checkout a different branch to make a bug fix.  So you can stash your changes in your index and working copy, checkout the other branch, make the bug fix, commit, checkout the original branch, and git-stash apply to restore your changes and pick-up where you left off.Git does a 2-way merge of uncomitted changes when switching branches (using git checkout <branch>), but ordinarily it does only trivial (tree-level) merge.Besides git-stash solution by Karl Voigtland, you can give additional options to git checkout, choosing one of the following options:Tell git to try harder to merge uncomitted changes into branch you switch to with -m / --merge option. With this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.Tell git to overwrite uncomitted changes, throwing away local changes with -f option.  Warning: uncomitted changes will be lost!"
"From git reset manpage:--hard    Matches the working tree and index to that of the tree being               switched  to. Any changes to tracked files in the working tree since               <commit> are lost.--merge              Resets the index to match the tree recorded by the named commit, and              updates the files that are different between the named commit and              the current commit in the working tree.The git reset --merge is meant to be a safer version of git reset --hard, when your changes and somebody else changes are mixed together, trying to carry our changes around.The article ""Git undo, reset or revert?"" summarizes the different usages, when used with ORIG_HEAD:# Reset the latest successful pull or merge$ git reset --hard ORIG_HEAD# Reset the latest pull or merge, into a dirty working tree$ git reset --merge ORIG_HEADAs mentioned by manojlds's answer, and illustrated by the blog post, the latter is especially useful when you see an error message like:fatal: You have not concluded your merge. (`MERGE_HEAD` exists)The thread ""[PATCH] refuse to merge during a merge"" also details that point:git reset --merge HEADIt fills the rather different case where you did a clean merge with some uncommitted  changes in the worktree, but then want to discard the merge again without losing the uncommitted changes.  In absence of the changes, you would just use --hard, but here you want to move the branch tip while merging them over, similar to what 'git checkout -m' does for  moving HEAD.This is helpful when you do a pull with changes in working tree, and find that the merge is not as expected ( you might have been expecting that the commits would not affect the files you were working on ). At this point, if you do git reset --hard ORIG_HEAD, you blow away everything, including your local changes. If you do git reset --merge ORIG_HEAD, you will keep your local changes.Apparently according to:http://www.kernel.org/pub/software/scm/git/docs/git-reset.html--hard - Matches the working tree and index to that of the tree being switched to. Any changes to tracked files in the working tree  since <commit> are lost.--merge - Resets the index to match the tree recorded by the named commit, and updates the files that are different between the named  commit and the current commit in the working tree."
"There's a couple of ways to fix this but I've found git stash works good for me. It temporary puts your local changes into another place. Then you can pull, to grab the latest changes. And then you can get your local changes back.Just like this:$ git pull......file your_file.rb not up to date, cannot merge.$ git stash$ git pull$ git stash popThis sort of problem is frequently caused by trying to pull from a repository that has two filenames that differ only in case. If you are on FAT, NTFS in case-insensitive mode (essentially, any time it's being used under Windows), or HFS+ in case-insensitive mode, and have two files ""foobar"" and ""FOOBAR"", then Git will see two distinct files, but the filesystem will only see one, which will cause all kinds of problems. Git will checkout, say, ""FOOBAR"", and then checkout ""foobar"", which the filesystem sees as simply replacing the contents of ""FOOBAR"" but leaving it in place. Now to Git, it appears that ""FOOBAR"" has been replaced with the contents of ""foobar"", and ""foobar"" is gone.There are two different manifestations of this basic problem. One is when your repository actually contains two files that differ only on case. In this case, you need to work on a case-sensitive file system, or you will need to edit the repository to ensure that no collisions of this sort occur; a case-insensitive file system simply cannot store the contents of this repository.A different case that you can workaround is when a rename happens that changes the case of the file. Say, for example, that the Git repository contains a rename from ""EXAMPLE"" to ""example"". Before Git checks out the new version, it will try and check to make sure it's not overwriting some existing file that you have on your disk. Since it thinks that ""example"" is a new filename, it will ask the filesystem if it exists, and the filesystem will see ""EXAMPLE"" and say yes, so Git will refuse to check out the new version since it thinks it will be overwriting untracked files. In this case, if you have no local changes that you care about, a simple git reset --hard <revision-to-checkout> will generally be sufficient to get you past the problem and to the new revision. Just try and remember not to rename files to other names that differ only in case if you're on a case-insensitive file system, as it will cause problems like this.Generally speaking, this means you have changes in your local files that haven't been committed to your local repository.  You can also see this stackoverflow question for a bit more detail.It might a problem also with file permissions. Git is versioning them too, unless config says otherwise. Just adding this answer for people who has almost but not the like problem.Worth a try:Could you set, just for this update, set the config parameter core.trustctime to false?core.trustctimeIf false, the ctime differences between the index and the working copy are ignored; useful when the inode change time is regularly modified by something outside Git (file system crawlers and some backup systems)."
"Yes you will have to resolve the conflicts, mark them as so with git add or git rm and git commitThe commit is not done yet, after the git revert - if you see .git/MERGE_MSG, you will see something like:Revert ""adding revert""This reverts commit  c1366607f15a8384434948cb0bcbf8ece48bb460.Conflicts:revertSo once you resolved the merge and do a git commit you will be presented with the message from the MERGE_MSG file and you can commit and that completes the revert.Below is an alternative to revertIt's a bit fuzzy, so ignore me if I'm at the wrong track here!To reset to previousgit reset --hard HEAD^Discard changes of a certain filegit checkout path/to/file/to/revertIf this isn't what you are looking for you always have the option of doing a new checkout of an older revision."
"As far as I can tell, the best you can do is what you already have with git stash.  I too find it strange that merge wants to deal only with clean trees.Forget everything you ever learned from subversion.Always commit before introducing external changes.Imagine you had a mostly-working tree -- maybe not perfect, but you're making some progress.  Then you go to do a merge and the code you're bringing in just wreaked havoc (was buggy itself, too many conflicts to deal with, etc...).   Wouldn't it be nice if you could just undo that?If you commit, you can.  If you don't, you're just going to suffer.Remember:  What you commit doesn't have to be what you push, but what you don't commit you can easily lose.Just do the safe and easy thing and commit early and commit often.You cannot tell git merge to merge changes on files that have changes with respect to your local repository. This protects you from losing your changes on those times when a merge goes badly. With the CVS and SVN approach to merging, if you did not manually copy your files before the update and it scrambled them on merge, you have to manually re-edit to get back to a good state.If you either commit your changes or stash them before doing a merge, everything is reversible. If the merge does not go well you can try several ways of making it work out and go with the one that works best.If you do commit experimental or debug changes, you might use git rebase to move them after the commits you get via git merge to make it easier to get rid of them or to avoid pushing them to a repository accidentally.Note that using git rebase on a branch you have pushed to a shared repository will cause grief for everyone who is pulling from that repository.I prefer to use git stash in these cases, but I only use it if the merge changes files that I have edited and not committed."
"You need to find the commit of the merge, git merge-base tells you the commit where you can do the merge. It basically is the last commit that exists in those two branches. The merge commit exists in your master branch only, unless you created a new branch after the merge, but that's not relevant here. :)To find the merge commit try:git log master ^beta --ancestry-path --mergesThe needed commit is the very last commit.But please read up on Linus' write up: http://www.kernel.org/pub/software/scm/git/docs/howto/revert-a-faulty-merge.txtAlso look at http://sethrobertson.github.com/GitFixUm/ which walks you through almost any git problem, including pushed merges.  However...pushed merges have no easy solution."
"No you should not add a, the merge is not supposed to change it. What you should run isgit reset aSo you ignore the ""chage"" for a.PS: apparently git merely checks existense of a directory, so if yougit submodule deinit armdir abefore merging, it will succeed. Not sure if this is what you want."
"It looks like you're trying to check in the Eclipse metadata files and python binary files. You should probably leave them out of version control. One way to do this is by making a list of file names and extensions you don't want to track and adding them to a text file. I'd recommend at least these entries:*.pyc.project.pydevproject.settings.metadataYou could place the file somewhere in your repository and then run the following command:git config --global core.excludesfile <filename>.txtThis will solve the issue from the command line. If you're committing from Eclipse, you additionally need to set up the ignored files in Preferences -> Team -> Ignored Resources. There you can enter the same lines one at a time by clicking the Add Pattern... button."
"If you truly want to discard the commits you've made locally, i.e. never have them in the history again, you're not asking how to pull - pull means merge, and you don't need to merge. All you need do is this:# fetch from the default remote, origingit fetch# reset your current branch (master) to origin's mastergit reset --hard origin/masterI'd personally recommend creating a backup branch at your current HEAD first, so that if you realize this was a bad idea, you haven't lost track of it.If on the other hand, you want to keep those commits and make it look as though you merged with origin, and cause the merge to keep the versions from origin only, you can use the ours merge strategy:# fetch from the default remote, origingit fetch# create a branch at your current mastergit branch old-master# reset to origin's mastergit reset --hard origin/master# merge your old master, keeping ""our"" (origin/master's) contentgit merge -s ours old-masterYou can either use the answer from the duplicate link pointed by nvm.Or you can resolve conflicts by using their changes (but some of your changes might be kept if they doesn't conflict with remote version):git pull -s recursive -X theirs"
"UserInterfaceState.xcuserstate is where Xcode saves your GUI states, such as window positions, open tabs, expanded nodes in the project inspector etc.Simply resizing the Xcode window will cause this file to change and be flagged as modified by your source control system. You can make your SCM system ignore specific files that are not important to the project itself.Git: Git ignore file for Xcode projectsSubversion: SVN ignore pattern with Xcode 4just remove files usinggit rm --cached *xcuserstatethen do a local commit selecting .DS_Store with miscellaneous messagediscard all other changespullpushdone :)"
"You can simply convert your remote repository to bare repository (there is no working copy in the bare repository - the folder contains only the actual repository data).Execute the following command in your remote repository folder:git config --bool core.bare trueThen delete all the files except .git in that folder. And then you will be able to perform git push to the remote repository without any errors.I just had the same error while I began learning Git. Some of the other answers are clearly not for someone new to Git!(I am going to use non technical terms to get the idea across.) Anyway, what is happening is that you have two repositories, one is the original you first made, and the other the work one you just made.Right now you are in your work repository and are using the ""master"" branch. But you also happen to be ""logged in"" in your original repository to the same ""master"" branch. Now since you're ""logged in"" in the original, Git fears you might mess up because you might be working on the original and screw things up. So you need to return to the original repository and do a ""git checkout someotherbranch"", and now you can push with no problems.I hope this helps.The error message describes what has happened. More modern versions of Git refuse to update a branch via a push if that branch is checked out.The easiest way to work between two non-bare repositories is either toalways update the repositories by pull (or fetch and merge) or, if you have to,by pushing to a separate branch (an import branch) and then merging that branch into the master branch on the remote machine.The reason for this restriction is that the push operation operates only on the remote Git repository, it doesn't have access to the index and working tree. So, if allowed, a push on the checked-out branch would change the HEAD to be inconsistent with the index and working tree on the remote repository.This would make it very easy to accidentally commit a change that undoes all of the pushed changes and also makes it very difficult to distinguish between any local changes that have not been committed and differences between the new HEAD, the index and the working tree that have been caused by push moving HEAD.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.There are multiple solutions, depending on your needs.Solution 1: Use a Bare RepostioryAs suggested, if on one machine, you don't need the working directory, you can move to a bare repository. To avoid messing with the repository, you can just clone it:machine1$ cd ..machine1$ mv repo repo.oldmachine1$ git clone --bare repo.old repoNow you can push all you want to the same address as before.Solution 2: Push to a Non-Checked-Out BranchBut if you need to check out the code on your remote <remote>, then you can use a special branch to push. Let's say that in your local repository you have called your remote origin and you're on branch master. Then you could domachine2$ git push origin master:master+machine2Then you need to merge it when you're in the origin remote repo:machine1$ git merge master+machine2Autopsy of the ProblemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.You can get around this ""limitation"" by editing the .git/config on the destination server. Add the following to allow a git repository to be pushed to even if it is ""checked out"":[receive]denyCurrentBranch = warnor[receive]denyCurrentBranch = falseThe first will allow the push while warning of the possibility to mess up the branch, whereas the second will just quietly allow it.This can be used to ""deploy"" code to a server which is not meant for editing. This is not the best approach, but a quick one for deploying code.I like the idea of still having a usable repository on the remote box, but instead of a dummy branch, I like to use:git checkout --detachThis seems to be a very new feature of Git - I'm using git version 1.7.7.4.I had the same issue. For me, I use Git push to move code to my servers. I never change the code on the server side, so this is safe.In the repository, you are pushing to type:git config receive.denyCurrentBranch ignoreThis will allow you to change the repository while it's a working copy.After you run a Git push, go to the remote machine and type this:git checkout -fThis will make the changes you pushed be reflected in the working copy of the remote machine.Please note, this isn't always safe if you make changes on in the working copy that you're pushing to.You can recreate your server repository and push from your local branch master to the server master.On your remote server:mkdir myrepo.gitcd myrepo.gitgit init --bareOK, from your local branch:git push origin master:masterWith a few setup steps you can easily deploy changes to your website using a one-liner like git push productionWhich is nice and simple, and you don't have to log into the remote server and do a pull or anything. Note that this will work best if you don't use your production checkout as a working branch! (The OP was working within a slightly different context, and I think @Robert Gould's solution addressed it well. This solution is more appropriate for deployment to a remote server.) First you need to set up a bare repository somewhere on your server, outside of your webroot.mkdir mywebsite.gitcd mywebsite.gitgit init --bareThen create file hooks/post-receive:#!/bin/shGIT_WORK_TREE=/path/to/webroot/of/mywebsite git checkout -fAnd make the file executable:chmod +x hooks/post-receiveOn your local machine, git remote add production git@myserver.com:mywebsite.gitgit push production +master:refs/heads/masterAll set! Now in the future you can use git push production to deploy your changes!Credit for this solution goes to http://sebduggan.com/blog/deploy-your-website-changes-using-git/. Look there for a more detailed explanation of what's going on.With git config --local receive.denyCurrentBranch updateInstead on the server repository, it also updates the working tree if no untracked overwrite would happen.It was added in Git 2.3 as mentioned by VonC in the comments.I've compiled Git 2.3 and gave it a try. Sample usage:git init servercd servertouch agit add .git commit -m 0git config --local receive.denyCurrentBranch updateInsteadcd ..git clone server localcd localtouch bgit add .git commit -m 1git push origin master:mastercd ../serverlsOutput:abYay, b got pushed!You should only be pushing to a bare repository.  A bare repository is a repository that has no checked out branches.  If you were to cd to a bare repository directory, you'd only see the contents of a .git directory.In fact, set the remote to a non-checked out branch is sufficient. After you checked out your remote in a different branch, you can push.I had the same problem using Git to synchronise repositories on my Android phone and laptop. The solution for me was to do a pull instead of a push, as @CharlesBailey suggested.git push origin master on the Android repository fails for me with the same error messages that @hap497 got because of a push to a nonbare checkout of a repository + working-copy.git pull droid master on the laptop repository and working-copy works for me. Of course, you need to have previously run something like git remote add droid /media/KINGSTON4GB/notes_repo/.Older versions of Git used to allow pushes to the currently checked out branch of a non-bare repository.  It turns out this was a terribly confusing thing to allow.  So they added the warning message you see, which is also terribly confusing.If the first repository is just acting as a server then convert it to a bare repository as the other answers recommend and be done with it.If however you need to have a shared branch between two repos that are both in use you can achieve it with the following setupRepo1  - will act as the server and also be used for developmentRepo2  - will be for development only Setup Repo1 as followsCreate a branch to share work on.git branch shared_branchTo be safe, you should also create a $(REPO).git/hooks/update that rejects any changes to anything other than shared_branch, because you don't want people mucking with your private branches.repo1/.git/hooks  (GIT_DIR!)$ cat update#!/bin/shrefname=""$1""oldrev=""$2""newrev=""$3""if [ ""${refname}"" != ""refs/heads/shared_branch"" ]then   echo ""You can only push changes to shared_branch, you cannot push to ${refname}""   exit 1fiNow create a local branch in repo1 where you will do your actual work.git checkout -b my_work --track shared_branchBranch my_work set up to track local branch shared_branch.Switched to a new branch 'my_work'(may need to git config --global push.default upstream in order for git push to work)Now you can create repo2 with git clone path/to/repo1 repo2 git checkout shared_branch At this point you have both repo1 and repo2 setup to work on local branches that push and pull from shared_branch in repo1, without needing to worry about that error message or having the working directory get out of sync in repo1.  Whatever normal workflow you use should work.You have 3 optionsPull and push again:git pull; git pushPush into different branch:git push origin master:fooand merge it on remote (either by git or pull-request)git merge fooForce it (not recommended unless you deliberately changed commits  via rebase):git push origin master -fIf still refused, disable denyCurrentBranch on remote repository:git config receive.denyCurrentBranch ignoreHere is one test you can do to see how the bare server stuff work:Imagine you have a workstation and a server with live site hosted on it, and you want to update this site from time to time (this also applies to a situation where two developers are sending their work back and forth through a bare middleman).InitializationCreate some directory on your local computer and cd into it, then execute these commands:# initializationgit init --bare server/.gitgit clone server contentgit clone server localFirst you create a bare server directory (notice the .git at the end). This directory will serve as a container for your repository files only.Then clone your server repository to a newly created content directory. This is your live/production directory which will be served by your server software.The first two directories resides on your server, the third one is a local directory on your workstation.WorkflowNow here is the basic workflow:Enter the local directory, create some files and commit them. Finally push them to the server:# create crazy stuffgit commit -avgit push origin masterNow enter the content directory and update the server's content:git pullRepeat 1-2. Here content may be another developer that can push to the server too, and local as you may pull from him.OK, in case you want a normal remote repository, then create an extra branch and check it out. Push it into one branch (which is not checked out) and merge it with one which is currently active later after pushing from locally.For example, on a remote server:git branch devgit checkout devOn the local setup:git push On remote server:git merge devI had to re-run git --init in an existing bare repository, and this had created a .git directory inside the bare repository tree - I realized that after typing git status there. I deleted that and everything was fine again :)(All these answers are great, but in my case it was something completely different (as far as I can see), as described.)I'm sure most people viewing this question will stop at the first two huge answers, but I'd still like to offer my solution.I had an Eclipse + EGit web project setup when encountering the described error. What helped me was simply using the GitHub app, which seemed to magically resolve the issue. While EGit would always refuse the push, the GitHub desktop app would just shrug its shoulders and push my changes. Maybe it handles the multi-login-situation more gracefully.An article I found that might be useful to others is Git in 5 minutes.I had an Xcode project under Git version control that I wanted to push up to a Virtual Distributed Ethernet (VDE) I have in a DC. The VDE runs Centos 5.None of the articles I read about Git talked about bare repositories. It all sounded so simple until I tried what I thought should be easy coming from an SVN background.The suggestions here to make the remote repository bare worked. Even better for my requirements was to clone the Xcode project to projectname.git, copy that to the remote server; then pushes magically worked. The next step will be getting Xcode to push without errors about commits, but for now I'm okay doing it from Terminal.So:cd /tmp (or another other directory on your system)<br/>git clone --bare /xcode-project-directory projectname.git<br/>scp -r projectname.git sshusername@remotehost.com:repos/<br/>To push changes from your Xcode project after you've committed in Xcode:cd /xcode-project-directory<br/>git push sshusername@remotehost.com:repos/projectname.git<br/>I'm certain there is a smoother more sophisticated way of doing the above, but at a minimum this works. Just so everything is clear, here are some clarifications:/xcode-project-directory is the directory your xcode project is stored in. It's probably /Users/Your_Name/Documents/Project_Name.projectname is literally the name of the project, but it can be anything you care to call it. Git doesn't care, you will.To use scp you need to have a user account on the remote server that's allowed SSH access. Anyone running their own server will have this. If you're using shared hosting or the like, you might be out of luck.remotehost.com is the name of your remote host. You could as easily use its IP address. Just for further clarity I'm using Gitosis on the remote host with SSH keys, so I'm not prompted for passwords when I push. The article Hosting Git Repositories, the Easy (and Secure) Way tells you how to set all that up.The best way to do this is:mkdir ..../remotecd ..../remotegit clone --bare .../currentrepo/This will clone the repository, but it won't make any working copies in .../remote. If you look at the remote, you'll see one directory created, called currentrepo.git, which is probably what you want.Then from your local Git repository:git remote add remoterepo ..../remote/currentrepo.gitAfter you make changes, you can:git push remoterepo masterI just ran into this problem with a deployment git repository on Heroku.I don't know why Heroku has a non-bare repository on their side, but as a workaround I was able to reset the remote repository, and reupload.You shouldn't use Heroku's copy of your repository as your only git repository for collaboration, but just in case, I'll say clearly: Do not do this unless you are sure you have a full copy of your repository stored securely somewhere other than Heroku. Doing a reset will delete the repository contents.To reset:Install the Heroku toolbelt (which contains the command line client) if you haven't already.Install the heroku-repo plugin if you haven't already.heroku plugins:install https://github.com/heroku/heroku-repo.gitDo the reset, which deletes the repository and creates a new, empty oneheroku repo:resetPush to your Heroku remote as you normally would; it will reupload everything."
"When you have to unlink file, you have to have permission 'w' for directory, in which file is, not for the file...FWIW - I had a similar problem and I'm not sure if this alleviated it (beyond the permission mod):  Closing Eclipse that was using the branch with this problem.If you are using any IDE most likely the problem is that file was used by some process. Like your tomcat might be using the file. Try to identify that particular process and close it. That should solve your problem."
"You need to change the default push behavior.  The branch being complained about is master, which doesn't appear to be the branch you are working on.  By default, Git treats push.default as matching, which means that when you say git push, it will push every branch that goes to origin.  Unfortunately, most people don't keep all their local versions of branches up-to-date, which will result in the error that you see above.It happens because there are new commits on the master branch in the remote repository, but your local version of master doesn't have them.  When you push, Git is trying to make the remote master branch match your local version.  Since the local version is behind by several commits, this is a non-fast-forward update (you would lose history) and Git complains.I generally recommend that folks change the push.default setting right away to either upstream, simple, or current:git config push.default upstreamgit config push.default simplegit config push.default currentYou can read about the difference it the git-config man page (search for ""push.default"").  You can also see it at the command line with:git help configOnce set, git push will only push the branch that you are on, and this message will go away.Also, if you're debating on using git push --force, don't consider it until after you've changed your default push setting.  It's a great way to lose history, and it's also the reason why Git will change the default behavior in 2.0--though I think they should've done it already.You're still on the branch myBranch, so you need to specifically say that you only want to push that branch:git push origin myBranchOr, you can configure to always push the branch that you're on by default:git config push.default currentAfter that, to fix the master branch:git rebase origin/master mastergit push origin masterIt looks, like your branch didn't configured well for git pull. In case you just want to push a bunch of simple commits (no merge commits) I would suggest using git rebase:git checkout mastergit rebase origin/mastergit pushIn case your changes contain merge commits and you want to push it, like you see it in the history (gitk --all) you can dogit checkout mastergit merge origin/mastergit push"
"try thisgit pullgo to folder to delete project and project_v1, rename projectBeta to project.git add --allgit commit git pushand you do the same for other branch"
"Your git editor has not configured properly.You have to give full path while configuring your git editor.For Sublime text 3 use following command-git config --global core.editor "" 'C:/Program Files/Sublime Text 3/subl' -n -w""If you have Sublime text 2 use following command-git config --global core.editor "" 'C:/program files/sublime text2/sublime_text.exe' -n -w"""
"You should have created a local branch, and done the work on that, then when you get back, you update the master, rebase to the local branch, merge back to master then dcommit.So I'd try copying out the changes, to back them up.Create a local branch from the has svn sync point, merge your changes in there. Then back out the changes in the master branch, fetch, rebase to the branch, merge in from the local branch, fix any conflicts, then dcommit.$ git checkout -b backup    # create a local backup branch with all your work$ git checkout master   $ git checkout -b backup2   # 2nd copy just to be safe$ git checkout master$ git reset --hard <this is the revision of the last svn-id> # clean up master to make the svn merge easier$ git svn fetch    # this should update to the current version on the svn server$ git rebase master backup  # may get a conflict here, fix and commit... # after conflict is fixed and commited$ git checkout master $ git merge backup --ff  # merge in your local commits$ git svn dcommit        # push back to the svnYou can get additional info hereAnother answer you might be interested in.git-svn workflow articlesArticleWith much appreciation for VonC and sfassen's extraordinary patience with me, the solution sort of worked itself out. I don't know how or why, but maybe my initial rebase didn't work. To fix it I ended up rebasing again. From my local trunk branch:$ git co -b backup  # backup the commits to my local trunk$ git co trunk      # return to the local trunk$ git svn rebase    # rebase the trunk from the Svn server$ git br -d backup  # delete the backup branchThe key, of course, was that the rebase worked this time. I have no idea why it didn't work when I first did it, but I can't roll the clock back so I won't dwell on it.Thanks again for everyone's suggestions and patience with a newbie.To complete sfossen's excellent answer, here is some details:With git-svn, you get by default a local branch named master. You should not do any work on it, only keep it up-to-date with the svn trunk branch with:git svn fetch to get the history from the svn trunk branch on your local trunk branch: it will not apply those modifications on your working directory  git checkout master  to switch on trunk branch (only if you were on another branch)git rebase trunk to synchronize master with trunk.However, all your modifications should be done on another local branch (lets call it local-devel).  git branch local-devel git checkout local-develIf you have an urgent fix to do:git checkout master : swith on master(), git svn fetch && git rebase trunk to update it with svn trunkgit branch fastfix && git checkout fastfix, branch itfix the bug, compile, test, git commit -a: local commit, git svn dcommit update the modification to the distant svn repogit checkout master && git rebase trunk: update master againgit branch -D fastfix: remove hotfix branchgit checkout local-devel && git rebase master: get back to dev, with the updated history done on master replayed on your dev branchIt is a bit of an hassle at first, but way more comfortable than an svn diff in a file to be applied later.I had a similar situation. I was doing an git svn dcommit over a bad network connection and it failed at some point. I've discovered that the problem was caused by the fact that Subversion repository already had a new commit, but local git-svn counterpart considered that a commit was not in SVN yet. Solutions from other answers here did not help, however this did:git svn reset -r <last_svn_commit_git_was_aware_of>git svn fetchgit svn rebaseAfter this I was finally able to do git svn dcommit without any errors.I was going to comment, but thought this deserved more visibility...git svn rebase is supposed to re-write your commits. From the description and comments, I get the impression that after you rebased, you forced your old commits back on top. The commits have to be replaced with newer versions that don't conflict.To avoid having to dig through the reflog, you might want to get in the habit of making a quick tag before doing your git svn dcommit. After the dcommit succeeds, delete the tag. If the tag fails, you can do a git reset --hard followed by a git merge <tag>. Re-run your rebase to get your history back in order, re-tag and re-dcommit again.Several places I've read that it is bad practice when using git svn to use a separate branch. Something pertaining to git commits not showing up in svn the way you would expect.The following answer from http://progit.org/book/ch8-1.html appears to be the cleanest way:git svn rebasegit svn dcommitI also tried the most popular option above but it didn't always work for me, as the git rebase doens't roll back the to match the svn upstream but just back to last git commit."
"Git is opening vim because your environment variable EDITOR is set to vim, and Git believes you need to provide a commit message for the merge operation, therefore it is opening an editor for you to type one in.You can fix this by changing your environment's EDITOR variable to something you prefer, or by providing a --message ""this is my commit message"" argument after git merge -y"
"Based on my experiments and @knittl's and @twalberg's comments, it seems that git just wanted me to push my changes to the second branch before deleting it.I did:$ git checkout second$ git push origin second$ git checkout first$ git branch -d secondwhich worked without warnings."
"Somebody has added the file already and pushed in the changes you are trying to merge during pull. In most cases it is a mistake.If you have write access to the repository, remove the file as soon as possible from there. Then merging should succeed.How to remove them: Github allows to remove files this from web interface, for example. If you cannot do it from web, clone the master branch, call git rm on the file, commit and push. Even if they are auto created, repository will remember them as removed.Make sure you do no add them again (add the filename to .gitignore)"
"Are you using the Team Synchronise view?  If so that's the problem.  Conflict resolution in the Team Synchronise view doesn't work with eGit. Instead you need to use the Git Repository view.Open the git perspective. In the Git Repository view, go to on Branches->Local->master and right click -> Merge...It should auto select Remote Tracking -> origin/master.  Press Merge.It will should result:conflictOpen the conflicting files, it should have old sk000l >>>> ===== <<<< style merge conflict in the file.  Edit the file to resolve the conflict, and save.Now in the 'Git Staging' view, it should show the changed file in 'Unstaged Changes'.  Right click and 'Add to Index'Repeat for any remaining files.Now from the 'git staging' view, commit and push.  As Git/Eclipse now knows that you have merged the remote origin changes into your master, you should avoid the non-fast-forward error.I also find it confusing to resolve merge conflicts in EGit. When I am ready to commit some changes to a shared repository, the steps I have learned are as follows:Right click on the project and choose Team: Commit....Review my changes to check that I'm not committing any changes I made accidentally or unrelated changes that I forgot about. Write up the commit message while I'm reviewing the changes.I'm optimistic, so I start by clicking the Commit and Push button. If no one else has pushed any changes, I'm done. If someone has, then the commit succeeds, and the push gets rejected.Right click on the project and choose Team: Pull. If there are no conflicts, then choose Team: Push to Upstream and I'm done.If there are conflicts, look through the package explorer to see which files are conflicted. Right click on each conflicted file, and choose Team: Merge Tool. It will show all the changes in both versions of the file, with any conflicts shown in red. Click on the button to merge all non-conflict changes, then edit any red sections manually. There's also a button to show a three way merge that includes the common ancestor.Save the changes to the file. If you want, you can compare it to HEAD to see what changes you are making on top of the changes you just pulled.Right click on the file and choose Team: Add to Index to tell EGit that you've finished merging that file. To me, this is the least intuitive step, but the git command line also uses the add command to show that a merge is finished.Repeat for any other conflicted files.When all the files are merged, right click on the project and choose Team: Rebase: Continue Rebase. If there are more conflicted commits, go back to dealing with conflicts.When the rebase is complete, run your tests to see that the rebase didn't break anything.Right click on the project and choose Team: Push to Upstream."
"I found that adding ""-i"" to the commit command fixes this problem for me. The -i basically tells it to stage additional files before committing.That is:git commit -i myfile.phpgit commit -am 'Conflicts resolved'This worked for me. You can try this also.You can use git commit -i for most cases but in case  it doesn't work You need to do  `git commit -m ""your_merge_message"". During a merge conflict you cannot merge one single file so you need to Stage only the conflicted file git commit -m ""your_merge_message""You probably got a conflict in something that you haven't staged for commit.  git won't let you commit things independently (because it's all part of the merge, I guess), so you need to git add that file and then git commit -m ""Merge conflict resolution"".  The -i flag for git commit does the add for you.If you just want to ditch the whole cherry-picking and commit files in whatever sets you want, git reset --soft <ID-OF-THE-LAST-COMMIT>gets you there.I got this when I did forgot the -m in my git commit when resolving a git merge conflict.git commit ""commit message"" should be git commit -m ""commit message""Your merge stopped in the middle of the action.You should add your files, and then 'git commit':git add file_1.php file_2.php file_3.phpgit commitCheersDuring a merge Git wants to keep track of the parent branches for all sorts of reasons.  What you want to do is not a merge as git sees it.  You will likely want to do a rebase or cherry-pick manually.For myself this happened in SourceTree when I tried to commit a merge before resolving all of the files. I then marked the last file resolved and yet it still gave me this error when trying to commit. I closed SourceTree and reopened it, and then it committed fine."
"Those are OS X internal files. Somebody must have checked them in by mistake. Just move them to a different folder, do the merge, move back and add the .DS_Store folder to .gitignore and you should be fine."
"You might need to reset the file first, before doing the checkout:git reset -- Jovie/Jovie-Info.plistgit checkout -- Jovie/Jovie-Info.plistThe reset un-stage the changes in progress (here the merge, with the conflict markers in the file).Then the checkout can restore the index with the last commit content."
"See man git merge (HOW TO RESOLVE CONFLICTS):After seeing a conflict, you can do two things:Decide not to merge. The only clean-ups you need are to reset the index file to the HEAD commit to reverse 2. and to clean up working tree changes made by 2. and 3.; git-reset --hard can be used for this. Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and git add them to the index. Use git commit to seal the deal.And under TRUE MERGE (to see what 2. and 3. refers to):When it is not obvious how to reconcile the changes, the following happens:The HEAD pointer stays the same. The MERGE_HEAD ref is set to point to the other branch head. Paths that merged cleanly are updated both in the index file and in your working tree....So: use git reset --hard if you want to remove the stash changes from your working tree, or git reset if you want to just clean up the index and leave the conflicts in your working tree to merge by hand.Under man git stash (OPTIONS, pop) you can read in addition:Applying the state can fail with conflicts; in this case, it is not removed from the stash list. You need to resolve the conflicts by hand and call git stash drop manually afterwards.I had a similar thing happen to me. I didn't want to stage the files just yet so I added them with git add and then just did git reset. This basically just added and then unstaged my changes but cleared the unmerged paths.Note that Git 2.5 (Q2 2015) a future Git might try to make that scenario impossible.  See commit ed178ef by Jeff King (peff), 22 Apr 2015.(Merged by Junio C Hamano -- gitster -- in commit 05c3967, 19 May 2015)Note: This has been reverted. See below.stash: require a clean index to apply/popProblemIf you have staged contents in your index and run ""stash apply/pop"", we may hit a conflict and put new entries into the index.Recovering to your original state is difficult at that point, because tools like ""git reset --keep"" will blow away anything staged.  In other words:""git stash pop/apply"" forgot to make sure that not just the working tree is clean but also the index is clean.  The latter is important as a stash application can conflict and the index will be used for conflict resolution.SolutionWe can make this safer by refusing to apply when there are staged changes.That means if there were merges before because of applying a stash on modified files (added but not committed), now they would not be any merges because the stash apply/pop would stop immediately with:Cannot apply stash: Your index contains uncommitted changes.Forcing you to commit the changes means that, in case of merges, you can easily restore the initial state( before git stash apply/pop) with a git reset --hard.See commit 1937610 (15 Jun 2015), and commit ed178ef (22 Apr 2015) by Jeff King (peff).(Merged by Junio C Hamano -- gitster -- in commit bfb539b, 24 Jun 2015) That commit was an attempt to improve the safety of applying  a stash, because the application process may create  conflicted index entries, after which it is hard to restore  the original index state.Unfortunately, this hurts some common workflows around ""git stash -k"", like:git add -p       ;# (1) stage set of proposed changesgit stash -k     ;# (2) get rid of everything elsemake test        ;# (3) make sure proposal is reasonablegit stash apply  ;# (4) restore original working treeIf you ""git commit"" between steps (3) and (4), then this  just works. However, if these steps are part of a pre-commit  hook, you don't have that opportunity (you have to restore  the original state regardless of whether the tests passed or  failed).If, like me, what you usually want is to overwrite the contents of the working directory with that of the stashed files, and you still get a conflict, then what you want is to resolve the conflict using git checkout --theirs -- . from the root.After that, you can git reset to bring all the changes from the index to the working directory, since apparently in case of conflict the changes to non-conflicted files stay in the index."
"This is one of those areas where I think the git documentation is really terrible.  Everything points you to git pull but git pull is just a convenience method built on top of several underlying items, and it's the underlying items that are critical to understanding this.  Git lets the critical-understanding parts ""leak out"" while trying to pretend that they are irrelevant.That out of the way, here are the actual basic elements:When you are sharing stuff with someone, there are multiple independent repositories (repos) involved.  At a minimum there is ""yours"" and ""theirs"", and very often there is a third (e.g., on github) that you both use to accomplish the sharing.  In this case, the model is that this third party‰ÛÓgithub‰ÛÓhandles all the complicated authentication stuff (https, ssh, whatever), so that you don't have to.To obtain stuff from some other repo, you use git fetch.To deliver stuff to some other repo, you use git push.In other words, the opposite of push is not actually pull, but rather, is fetch.refspecsTo make these two operations (push and fetch) work, git uses what it calls ""refspecs"".  Remember that when pushing and fetching, there are two repositories involved.Refspecs usually just look like a single branch name.  However, the simplest ""real"" version of a refspec is actually two branch names separated by a colon:master:masterEditor:Editorauthor:authorThe left and right hand sides name the branch in the two repos.  For a push, the name on the left is the branch in your repo, and the name on the right is the branch in their repo.  For a fetch, the name on the left is the branch in their repo, and the name on the right is the branch in your repo.Here's where the model gets a bit strange again, and non-symmetric.  Git believes (as much as it can be said to believe anything) that when you fetch, you and they may both have been doing work; but when you push, only you should have been doing any work.  (There are good reasons for this, which I won't go into as this is already very long. :-) )To make this all function, fetch provides for branch renaming.  Instead of fetching ""their"" branches (master, author, etc) directly to ""your"" branches‰ÛÓthis would make it terribly difficult to access the work you did since the last fetch‰ÛÓyou fetch ""their"" stuff to what git calls a ""remote branch"".fetch and ""remote branches""A ""remote branch"" is in fact a local thing, despite the name ""remote branch"".  So is a ""remote"", for that matter.  A ""remote"" is a name, like origin or github, that you configure locally.  Associated with this ""remote"" is a URL, such as https://github.com/mathpunk/punk-mathematics-text.git.  There is also a fetch line.  Don't worry for now about the mechanics of the fetch line (once it's created it normally Just Works); just know that this is how git knows what ""remote branch name"" to use when fetching.You do have to worry, to some extent, about the actual name of the remote.  The usual default name is origin but you choose the name when you do a git remote add command.  The remote's name becomes part of the ""remote branch"" name.  Specifically, the remote name is prefixed in front of the branch name.Thus, assuming you will git fetch origin to bring stuff over from github, the ""remote branch names"" will be origin/master, origin/Editor, and origin/author.If you git fetch github to bring stuff over from github, the ""remote branch names"" will instead be github/master, github/Editor, and github/author.In all cases, you just name the remote, and fetch brings over all branches, but renames them.  By leaving out the refspec, you use the default one from the fetch line.If you add a branch name (git fetch origin author, for instance), git turns this into a ""real"" refspec by using that same fetch line to rename the incoming branch.  In effect, git fetch origin author turns into git fetch origin author:origin/author.  Their branch name, on the left, author turns into your ""remote branch name"", origin/author, on the right.(The idea here is that you can add multiple different remotes.  If you, your editor, and your publisher all want to share directly with each other, rather than with a third party like github, you could have two remotes, named editor and publisher for instance, and you would get ""remote branch names"" like editor/Editor for one remote, and publisher/Editor for another.  If you use a single sharing site like github, all of this is pointless complication, though.)OK, back to fetch and push.  When you git fetch origin, you use your remote origin name to bring over ""their"" branches but put them under your origin/* ""remote"" branches.  That keeps their work separate from your work.  (Of course at some point you need to combine these; we'll get to that in a moment.)When you push, though, ""push"" does not use the concept of a ""remote branch"".  You simply push directly to their branch.  So if you have some changes in your repo, in your branch author, and you want to push those, you just git push origin author:author.  The origin part here is the remote name again, and the last part is a refspec as usual, naming your branch (author) and then their branch (also just author).If you include a branch name on your push command, the lack of branch renaming here shows through: git push origin author ""means"" git push origin author:author.  Your branch name, author, on the left, is simply copied over to be used as their branch name, author, on the right.ReviewTime for a quick review:You set up a ""remote""which you use to fetch into your ""remote branches"", andwhich you use to push your local branches to their local branches.Think about that for a moment.  Notice that there's a step missing.How do you get their work, which (after step 2) is now listed in your remote-branches, into your own local branches?This is where git merge, and hence also git pull, come in.This is also where the item in your question title comes in.  Fast-forward, or non-fast-forward, is a property of a ""label move"", in git.To really understand this, we have to take another little side trip, discussing git's model for commits and branches.Commit graphsEvery commit has a guaranteed-unique identifier (the SHA-1, the 9afc317... number).  Neither your nor anyone else will ever create any different commit that has that number, but if you or anyone else can manage to recreate that commit exactly, you will get the same number.  (This is important for fetching.)Each commit also contains‰ÛÓindirectly, by reference‰ÛÓa complete stand-alone entity, the ""tree"".  The tree is the set of all files in that commit.  The commit, however, is not quite stand-alone: it has one or more ""parent"" commits.  These determine the commit history, and thus ""build up"" the actual branching structure.(In many‰ÛÓmaybe even most‰ÛÓother version control systems, the tree is not stand-alone: the VCS has to grind through parent and child commits to extract the tree, and/or to make new commits.  But in git, each tree is independent; it only has to go through parent/child sequencing to compare two trees, or to determine commit history.)Given a commit, git finds its parent commit(s), and their parent(s), and so on, and builds up a ""commit graph"":        C - F      /       \A - B           G   <-- master      \       /        D - EThis is a graph of a repository containing 7 commits in all, all on one branch named master.  A is the initial commit (A here stands for some big ugly unique SHA-1 number), B has some change since A (comparing the two trees for A and B will show the change), and then someone‰ÛÓor maybe two ""someones""‰ÛÓdid what would be called ""branching"": created commit C based on commit B, and created commit D also based on commit B.After that, someone created commit E based on D, and F based on C.Finally, someone combined the two branches to make a merge commit, commit G.  Commit G has as its (two) parents, both F and E.  The fact that it has two parents is, in fact, what makes it a ""merge commit"".When all this happens in a single repository, it's straightforward enough.  The one ""someone"", the person using the repository, made commits A, B, and C on branch master, then perhaps created a named branch starting from commit B:git checkout -b sidebranch master~1and made commits D and E.  Then they went back to master:git checkout masterand made commit F, and then ran:git merge sidebranchto create commit G.  After this they could delete branch sidebranch, as commit G (now the tip commit on master) points back to commit E as well as to commit F.This same pattern, however, occurs when both you, working in your own repo, and ""they"", working in theirs, make commits.  Let's say you're working on master and you've made commits A and B:A - B   <-- masterAt this point you push your work to the sharing point (github), so that it has A and B.  They clone this repository, giving them a third repo, with the github sharing point and the two commits A and B.Now you work within your repo and create commit C.  They work within theirs and create D and E, and before you push C to github, they push their D and E to github:[you:]        C   <-- master      /A - B[them, and github:]A - B      \        D - E   <-- masterAt this point, let's say you use git fetch github.  Remember, fetch renames ""their"" branch, so the result is this:        C   <-- master      /A - B      \        D - E   <-- github/masterGit can do this because each commit has a unique SHA-1, so it knows that your A and B and their A and B are the same, but your C is different from their D and E.At this point, you can create commit F, which makes your master point to your newest commit:        C - F   <-- master      /A - B      \        D - E   <-- github/masterNow if you want to share your work, this is when you'd git push github ... but the problem is, your master has commits A - B - C - F, while commits D and E are, from your point of view, only on github/master.If you push your master to github and make github's master point to commit F, commits D and E will be lost.  (""They"", whoever they are, will still have them, and you will still have them but named github/master, so it's possible to fix this, but it's a pain.)The solution is for you to patch this up so that ""their"" commits, D and E, are also on your master.  One easy way to do that is for you to merge your work and theirs, giving:        C - F      /       \A - B           G   <-- master      \       /        D - E   <-- github/masterFast-forwardNotice how your branch label, master, has ""moved forward"" every time you made a new commit?You made commit F and master, which used to point to commit C, moved forward to point to the new commit, F.Then, you made merge-commit G and master, which used to point to F, moved forward to point to the new commit, G.The label ""moves forward"" along the branch as you build it.Suppose we have another label‰ÛÓanother branch name‰ÛÓpointing to (say) commit B, all along, that we have not yet moved:      ..............<-- br     .    .   C - F    v /       \A - B           G   <-- master      \       /        D - EWe can now ask git to ""slide label br forward"", and to do it ""fast""‰ÛÓall at once, all the way to commit G:git checkout brgit merge --ff-only masterWhen we ask git to do a merge, if we tell it --ff-only (fast forward only), it will see if there's a way to slide the label forward from whichever commit it points to now, to the target commit, in this case G.  (The name master points to commit G so merge picks commit G as the fast-forward target.)  In this particular case there are actually two ways to do it, B-C-F-G or B-D-E-G; either one suffices to allow this ""fast forward"".(With --ff-only, if the branch label can't be fast-forwarded, the merge request is simply rejected.  Without --ff-only, git will attempt create a new, actual merge commit, so that the label can be moved forward.  And with --no-ff, git merge will create a merge even if it's already possible to do a fast-forward.  The default, with no options at all, is to fast-forward-if-possible, else make new merge commit.)push requires the fast-forward propertyIf you ask git to push our new master, it's allowed, because this meets the ""fast-forward"" test.  When we do our push, we'll tell github: ""Please take commits C, F, and G, and then move your label master (which we're calling github/master) from commit E to commit G"".  Is there a path from E to G?  There is, so it's allowed.pullAll git pull does, really, is run git fetch, and then run git merge.Unfortunately, that means you really do need to understand all of the above to really understand git pull.There are several large wrinkles here though.  First, I've been using git fetch origin and git fetch github above.  In other words, I keep naming a remote.  Where does the remote come from, when you do git pull?The answer is that it comes from your configuration.  Each branch in your repository can name a remote:$ git config branch.author.remote githubNow the ""remote"" for branch author is github.Second, if you run git merge, you have to tell it what to merge.  Where does the merge name come from, when you do git pull?The answer is, again, that it comes from the configuration.  Each branch can name an upstream merge branch:$ git config branch.author.merge authorGit combines the merge with the remote, so that after these two git config commands, git pull essentially does git merge github/author.I say ""essentially"" because there's yet another wrinkle: in older versions of git, pull runs fetch in such a way that it doesn't update the remote-branch names.  Instead, it uses a special FETCH_HEAD file.  (In newer versions of git, it still uses FETCH_HEAD but it does update the remote-branch names too.)Last, there's a very big wrinkle: you can configure git pull to use git rebase instead of git merge.  But this answer is now complete enough; I'm not going to get into those details."
"First call reset :git reset views/docs/examplesgit rm -rf views/docs/examples"
"How I would do thisgit checkout mastergit pull origin mastergit merge testgit push origin masterIf I have a local branch from a remote one, I don't feel comfortable with merging other branches than this one with the remote. Also I would not push my changes, until I'm happy with what I want to push and also I wouldn't push things at all, that are only for me and my local repository. In your description it seems, that test is only for you? So no reason to publish it.git always tries to respect yours and others changes, and so will --rebase. I don't think I can explain it appropriately, so have a look at the Git book - Rebasing or git-reade: Intro into rebasing for a little description. It's a quite cool featureNeither a rebase nor a merge should overwrite anyone's changes (unless you choose to do so when resolving a conflict).The usual approach while developing isgit checkout mastergit pullgit checkout testgit log master.. # if you're curiousgit merge origin/test # to update your local test from the fetch in the pull earlierWhen you're ready to merge back into master,git checkout mastergit log ..test # if you're curiousgit merge testgit pushIf you're worried about breaking something on the merge, git merge --abort is there for you.Using push and then pull as a means of merging is silly. I'm also not sure why you're pushing test to origin.This is one very practice question, but all before answers are not practical.Likegit checkout mastergit pull origin mastergit merge testgit push origin masterUpper operations have two issues:1) it's not one safety way, cause we don't know is there any conflicts between test branch and master branch2) it would ""squeeze"" all test commits into one merge commit on master, that is to say on master branch, we can't see the all change logs of test branch So, when we suspect there would some conflicts, we can have following git operations:git checkout testgit pull git checkout mastergit pullgit merge --no-ff --no-commit testTest merge before commit, avoid a fast-forward commit by --no-ff,If conflicts notified, we can run git status to check details about the conflicts and try to solve git statusOnce we solve the conflicts, or there is not any conflicts, we commit and push themgit commit -m 'merge test branch'git pushBut this way will lose the changes history logged in test branch, and it would make master branch to be hard for other developers to understand the history of the project.So the best method is we have to use Rebase instead of Merge (suppose, when in this time, we have solved the branches conflicts).Following is one simple sample, for advanced operations, please refer to http://git-scm.com/book/en/v2/Git-Branching-Rebasinggit checkout mastergit pullgit checkout testgit pullgit rebase -i mastergit checkout mastergit merge testYeap, when you have uppers done, the Test branch's all commits will be moved onto the head of Master branch. The major benefit of rebasing is that you get a liner and much cleaner project history. The only thing you need to avoid is: never use rebase on public branch, like master branch.like following operation:git checkout mastergit rebase -i testnever do these operations.Details for https://www.atlassian.com/git/tutorials/merging-vs-rebasing/the-golden-rule-of-rebasingappendix:if you are not sure the rebasing operations, please refer to: https://git-scm.com/book/en/v2/Git-Branching-Rebasinggit checkout mastergit pull origin master# Merge branch test into mastergit merge testAfter merging, if the file is changed, then when you merge it will through error of ""Resolve Conflict""So then you need to first resolve all your conflicts then, you have to again commit all your changes and then pushgit push origin masterThis is better do who has done changes in test branch, because he knew what changes he has done."
"What sounds like it might be happening is that you have changed the commit history of those ""repeated"" commits such that they have a different sha1. Each sha1 is unique to not only the commit, but the commit history. Hence, it's impossible (well, highly improbably to happen during the lifetime of the universe), to have two identicial sha1 in the same history or to have two sha1 in two different histories even. If you change anything in your commit, such as with an amend or interactive rebase, then you will change the sha1. So two commits that might look the same, are actually treated differently.So very likely, you rebased from the other branch, did some type of interactive rebase or amended the commits, continued to commit some more code that modified that same part of the code, then on the next rebase you have conflicts because the commits that you have in your local branch that differ from the branch you are rebasing from are removed from the branch, the upstream is pulled in including that commit you've already pulled in and changed the sha1 of, and then when the commits are replayed onto the branch you end up with a conflict because the state of the code has changed from what the commit was expected because it was original created from a different history than what you now have on your branch. Wow, that was a long sentence...When you're ""cleaning"" up the pick list... what you are doing is likely deleting these repeated commits before rebasing, so now you're not reapplying changes that have already been applied, so no more conflicts.However, if you just wanted to resolve the conflicts during the rebase, this would likely be the best bet so you don't accidently delete a commit that you want. Resolving the conflicts will make the change set of that commit different an applicable to the history you have. Once you push this merge conflict resolution, you shouldn't see the issues again unless you modify commits that have already been pushed again.To find which files have the merge conflicts do:git statusorgit ls-files -uOnce you know which files have conflicts, if you have a mergetool setup you can do:git mergetool <file>If you'd rather merge manually, you can find the merge markers and lines by doing:grep -Hnr '^=\{7\}\|^<\{7\}\|^>\{7\}' *at the top level of your repo path and edit. When you edit manually, make sure you remove the markers and make the final version of the file look like how you want it to... git doesn't do anything special with the markers for you. When you've finished editting manually, make sure to dogit add <file>to add the file to add it to the index and remove the unmerged flag. When you are done resolving all unmerged files, dogit rebase --continueTo complete the rebase.To get git rebase --continue to work you have to actually merge the conflicted files (edit them, pick the parts you want from between the conflict markers ‰ÛÏ<<<<<<<‰Ûù, ‰ÛÏ=======‰Ûù, ‰ÛÏ>>>>>>>‰Ûù) and then git add them to the index (the index is where they are recorded as conflicted, adding a file clears its conflicted state). Check the current diff with git diff --cached, then git rebase --continue if it looks right.Before you attempt your rebase (or after aborting a problematic one), check out git log -p master..deploy to view the commits that you are trying to rebase. It is one of these that is conflicting with whatever you have in master.Those commits that you are dropping by deleting their ‰Û÷pick‰Ûª lines in git rebase -i might not be exactly the same (even though they have the same ‰Û÷subject‰Ûª in their commit message). The fact that you think there should only be one of them indicates that something fishy is going on with your deploy branch. Are these ‰Û÷duplicate‰Ûª commits at the tip of deploy or are there other commits after them? Maybe seeing the content of those ‰Û÷fishy‰Ûª commits (log -p, above) will give you a clue as to their source.You could define an attribute in the parent directory of your ""deploy-specific"" files, in order to always select the content of the deploy branch in case of merge.For an example of merge manager, see this SO answer.  Other strategies have been discussed, but the key remain: always consider a merge as ""a project-wide merge"" and not a file-based merge. Hence the attributes to refine that project-wide merge when it comes to some ""special"" files."
"You should resolve the conflicts as you see fit. If the file really is supposed to be removed, and you will be publishing that change to origin, remove it again:git rm path/to/fileIf the file should in fact be tracked still, add it (the version in the work tree will be the version from origin):git add path/to/fileAfter doing either of those to resolve the conflict, commit the merge.In Git GUI, you select the conflicted file and then right-click on the main text area where the conflicted text is shown.In the context menu that appears, you can choose to go with ""Remote"" or go with ""Local"".  So if a file is remotely deleted, you can choose ""Remote"" to propagate the delete locally, and vice versa.Took me a month to figure it out...it would be nice if Git GUI actually had documentation...As an added tip in addition to the accepted answer, in a ""deleted by us"", if you would like to see the changes that were made to the deleted file so that you may apply those changes elsewhere you can use:git diff ...origin/master -- path/to/fileIf it is a ""deleted by them"" scenario, and you would like to see the changes so you can apply them elsewhere, you can use:git diff origin/master... -- path/to/file"
"This would happen if the hooks/post-receive file exists, is marked executable, but cannot be executed. It cannot be executed, because the interpreter, /bin/bash2, either does not exist or is not executable.Replace the /bin/bash2 with name of bash that does exist and is executable on the server.(The reason the error looks like this is, that the operating system only returns the error status, ""No such file or directory"", but does not report which file does not exist. And the code that tried to execute it does not know that the system already read hooks/post-receive and was looking for /bin/bash2. All it knows is it tried to run hooks/post-receive, so that's what it prints).In addition (for future reference and documentation on this question) if you were to run echo $SHELL in your shell you should see an expected result, in this case (based on the approved answer) you would expect /bin/bash as your result. But another possible problem can be an unseen carriage return.Try running hooks/post-receive if you're still having issues, you may get a response like this:-bash: hooks/post-receive: /bin/bash^M: bad interpreter: No such file or directoryThe key here is the ^M that is proof that you are in fact getting an unexpected carriage return, otherwise if it had worked you would probably get a hanging response. Fix that and it should fix your problem. The way to do that, use dos2unix, for example:dos2unix .htaccess"
"If you have already made some commits, you can do the followinggit pull --rebaseThis will place all your local commits on top of newly pulled changes.I would do it this this way:Stage all unstaged changes.git add .Stash the changes.git stash saveSync with remote.git pull -rReapply the local changes.git stash poporgit stash apply"
"Do git status, this will show you what files have changed.  Since you stated that you don't want to keep the changes you can do git checkout -- <file name> or git reset --hard to get rid of the changes.For the most part, git will tell you what to do about changes. For example, your error message said to git stash your changes. This would be if you wanted to keep them. After pulling, you would then do git stash pop and your changes would be reapplied.git status also has how to get rid of changes depending on if the file is staged for commit or not.First start with agit statusSee if you have any pending changes.To discard them, rungit reset --hardPulling with rebase is a good practice in general.However you cannot do that if your index is not clean, i.e. you have made changes that have not been committed.You can do this to work around, assuming you want to keep your changes:stash your changes with: git stashpull from master with rebasereapply the changes you stashed in (1) with: git stash apply stash@{0} or the simpler git stash popYou can always dogit fetch && git merge --ff-only origin/masterand you will either get (a) no change if you have uncommitted changes that conflict with upstream changes or (b) the same effect as stash/pull/apply: a rebase to put you on the latest changes from HEAD and your uncommitted changes left as is."
"You cannot push because your local branch and the remote branch have diverged. After the last time the two branches were synchronized, there were new commits in your local branch and the remote branch too. In situations like this you cannot push, the branches need to be merged first.A pull tries to do a merge. Apparently new files were added in the remote branch, and when Git tries to create them in your working tree, it turns out that files exist with the same name. Git cannot know for sure what to do with the existing files: should it delete them? Should it merge the incoming new content into them? This is impossible to guess, only you can make these decisions.To resolve this, either move those untracked files out of the way or commit them to your local branch. The first option will be easier for you probably: move these files somewhere else, temporarily.After that git pull will work, unless there are some conflicting changes in the remote branch and your local branch. I hope this helps.If you want to remove the untracked files, you can use the git clean command. Run first with the -n flag, which will not do anything just tell you what it would do (""dry run""):git clean -nAs @Chris pointed out in a comment, you can save your untracked files on the stash:git stash -uThis will also save all your other pending changes too, staged and unstaged. You can restore everything later with:git stash pop"
"I figured it out.  Looks like I had a couple files that I was 'Excluding' from checking in.  GIT doesn't like that.  Visual studio doesn't tell you that it's a problem.So I went to the command line and did a manual ""git commit"" on the command line.  When I did that, GIT told me which files were actually causing the conflict in the merge.They were .dlls in my case which I build.  So I just undid my changes to them them and was able to successfully merge.  I really wish Visual Studio Team Explorer would be a bit more helpful with their messages.  I figured if I excluded files from my checkin that it wouldn't consider them as conflicting.  Oh well, problem is solved now."
"Your git status shows that you‰Ûªre already in the middle of a merge; you‰Ûªll need to abort that merge before trying again. Run git merge --abort, then check git status again and clean up anything there, then pull."
"The Short AnswerAs long as you're doing a fast-forward merge, then you can simply usegit fetch <remote> <sourceBranch>:<destinationBranch>Examples:# Merge local branch foo into local branch master,# without having to checkout master first.# Here `.` means to use the local repository as the ""remote"":git fetch . foo:master# Merge remote branch origin/foo into local branch foo,# without having to checkout foo first:git fetch origin foo:fooWhile Amber's answer will also work in fast-forward cases, using git fetch in this way instead is a little safer than just force-moving the branch reference, since git fetch will automatically prevent accidental non-fast-forwards as long as you don't use + in the refspec.The Long AnswerYou cannot merge a branch B into branch A without checking out A first if it would result in a non-fast-forward merge. This is because a working copy is needed to resolve any potential conflicts.However, in the case of fast-forward merges, this is possible, because such merges can never result in conflicts, by definition. To do this without checking out a branch first, you can use git fetch with a refspec.Here's an example of updating master (disallowing non-fast-forward changes) if you have another branch feature checked out:git fetch upstream master:masterThis use-case is so common, that you'll probably want to make an alias for it in your git configuration file, like this one:[alias]    sync = !sh -c 'git checkout --quiet HEAD; git fetch upstream master:master; git checkout --quiet -'What this alias does is the following:git checkout HEAD: this puts your working copy into a detached-head state. This is useful if you want to update master while you happen to have it checked-out. I think it was necessary to do with because otherwise the branch reference for master won't move, but I don't remember if that's really right off-the-top of my head.git fetch upstream master:master: this fast-forwards your local master to the same place as origin/master.git checkout - checks out your previously checked-out branch (that's what the - does in this case).The syntax of git fetch for (non-)fast-forward mergesIf you want the fetch command to fail if the update is non-fast-forward, then you simply use a refspec of the formgit fetch <remote> <remoteBranch>:<localBranch>If you want to allow non-fast-forward updates, then you add a + to the front of the refspec:git fetch <remote> +<remoteBranch>:<localBranch>Note that you can pass your local repo as the ""remote"" parameter using .:git fetch . <sourceBranch>:<destinationBranch>The DocumentationFrom the git fetch documentation that explains this syntax (emphasis mine):<refspec>The format of a <refspec> parameter is an optional plus +, followed by the source ref <src>, followed by a colon :, followed by the destination ref <dst>.The remote ref that matches <src> is fetched, and if <dst> is not empty string, the local ref that matches it is fast-forwarded using <src>. If the optional plus + is used, the local ref is updated even if it does not result in a fast-forward update.See AlsoGit checkout and merge without touching working treeMerging without changing the working directoryNo, there is not. A checkout of the target branch is necessary to allow you to resolve conflicts, among other things (if Git is unable to automatically merge them).However, if the merge is one that would be fast-forward, you don't need to check out the target branch, because you don't actually need to merge anything - all you have to do is update the branch to point to the new head ref. You can do this with git branch -f:git branch -f branch-b branch-aWill update branch-b to point to the head of branch-a.The -f option stands for --force, which means you must be careful when using it. Don't use it unless you are sure you the merge will be fast-forward.As Amber said, fast-forward merges are the only case in which you could conceivably do this. Any other merge conceivably needs to go through the whole three-way merge, applying patches, resolving conflicts deal - and that means there need to be files around.I happen to have a script around I use for exactly this: doing fast-forward merges without touching the work tree (unless you're merging into HEAD). It's a little long, because it's at least a bit robust - it checks to make sure that the merge would be a fast-forward, then performs it without checking out the branch, but producing the same results as if you had - you see the diff --stat summary of changes, and the entry in the reflog is exactly like a fast forward merge, instead of the ""reset"" one you get if you use branch -f. If you name it git-merge-ff and drop it in your bin directory, you can call it as a git command: git merge-ff.#!/bin/bash_usage() {    echo ""Usage: git merge-ff <branch> <committish-to-merge>"" 1>&2    exit 1}_merge_ff() {    branch=""$1""    commit=""$2""    branch_orig_hash=""$(git show-ref -s --verify refs/heads/$branch 2> /dev/null)""    if [ $? -ne 0 ]; then        echo ""Error: unknown branch $branch"" 1>&2        _usage    fi    commit_orig_hash=""$(git rev-parse --verify $commit 2> /dev/null)""    if [ $? -ne 0 ]; then        echo ""Error: unknown revision $commit"" 1>&2        _usage    fi    if [ ""$(git symbolic-ref HEAD)"" = ""refs/heads/$branch"" ]; then        git merge $quiet --ff-only ""$commit""    else        if [ ""$(git merge-base $branch_orig_hash $commit_orig_hash)"" != ""$branch_orig_hash"" ]; then            echo ""Error: merging $commit into $branch would not be a fast-forward"" 1>&2            exit 1        fi        echo ""Updating ${branch_orig_hash:0:7}..${commit_orig_hash:0:7}""        if git update-ref -m ""merge $commit: Fast forward"" ""refs/heads/$branch"" ""$commit_orig_hash"" ""$branch_orig_hash""; then            if [ -z $quiet ]; then                echo ""Fast forward""                git diff --stat ""$branch@{1}"" ""$branch""            fi        else            echo ""Error: fast forward using update-ref failed"" 1>&2        fi    fi}while getopts ""q"" opt; do    case $opt in        q ) quiet=""-q"";;        * ) ;;    esacdoneshift $((OPTIND-1))case $# in    2 ) _merge_ff ""$1"" ""$2"";;    * ) _usageesacP.S. If anyone sees any issues with that script, please comment! It was a write-and-forget job, but I'd be happy to improve it.You can only do this if the merge is a fast-forward. If it's not, then git needs to have the files checked out so it can merge them!To do it for a fast-forward only:git fetch <branch that would be pulled for branchB>git update-ref -m ""merge <commit>: Fast forward"" refs/heads/<branch> <commit>where <commit> is the fetched commit, the one you want to fast-forward to. This is basically like using git branch -f to move the branch, except it also records it in the reflog as if you actually did the merge.Please, please, please don't do this for something that's not a fast-forward, or you'll just be resetting your branch to the other commit. (To check, see if git merge-base <branch> <commit> gives the branch's SHA1.)Another, admittedly pretty brute way is to just re-create the branch:git fetch remotegit branch -f localbranch remote/remotebranchThis throws away the local outdated branch and re-creates one with the same name, so use with care ...You can clone the repo and do the merge in the new repo. On the same filesystem, this will hardlink rather than copy most of the data.  Finish by pulling the results into the original repo.For many cases (such as merging), you can just use the remote branch without having to update the local tracking branch. Adding a message in the reflog sounds like overkill and will stop it being quicker. To make it easier to recover, add the following into your git config[core]    logallrefupdates=trueThen typegit reflog show mybranchto see the recent history for your branchEnter git-forward-merge:Without needing to checkout destination, git-forward-merge <source> <destination> merges source into destination branch.https://github.com/schuyler1d/git-forward-mergeOnly works for automatic merges, if there are conflicts you need to use the regular merge.As @Cupcake said, you can usegit fetch <remote> <sourceBranch>:<destinationBranch>Note that <remote> can be a local repository, and <sourceBranch> can be a tracking branch. This means that you can update a local branch, even if you don't have it checked out, without accessing the network.Currently, my upstream server access is via a slow VPN, so I periodically connect, git fetch to update all remotes, and then disconnect. Then if, say, the remote master has changed, I can dogit fetch . remotes/origin/master:masterto safely bring my local master up to date, even if I currently have some other branch checked out. No network access required."
"That isn't an error.You added the lines in both branches and Git isn't able to determine which one it should use.  So it reports a conflict and marks the lines so that you can compare them.  You need to determine what the line should be.This generally only happens when a change is made to the same line in both branches.  It isn't a common occurrence but isn't anything to worry about.If you do a git status, you will see the file marked as 'changed by both'.Do these steps to resolve the conflict:git mergetool //This will open a text editor with the files compared so that you can determine the change to usegit commithttp://githowto.com/resolving_conflicts"
"After a bit of googling, it turns out that the answer is to run the following:git config --global core.editor /usr/bin/vimThis could be a plugin or something in your .vimrc file. The best way to load vim in a safe mode for editing commit messages is to use:git config --global core.editor '/usr/bin/vim -f -u NONE'"
"The warningbranch is not fully mergedcomes when the branch you are trying to remove is not merged into another one. This warning saves you from removing a branch and its changes before you merge them, so you don't lose your changes.In your case it looks like you didn't have the branch 'master' in your computer since you get the message* [**new branch**]      master     -> masterSo when you downloaded the branch master you where on dev and then you tried git branch -d master but since it was not merged from the point of view of dev you got the messageWith gitk --all you can see the whole tree and there you will see how the branch master is not merged into another. Hence the message.If you still want to remove it just use the -D commandA branch (call it A, would be 'master' in your case) is considered ""fully merged"" into the currently checked out branch (call it B, would be 'dev' in your case) iff the [tip of] A is an ancestor of B.The error you get has thus nothing to do with how you cloned the repo or when you fetched. It merely means that 'master' has commits which are not yet contained in your current branch 'dev'."
"In a single repository:You should be able to explore the diff with git diff -- Vendor/JSONKit, but if you want to just reset the file (and abandon the changes), issue this command:git checkout HEAD -- Vendor/JSONKitThat'll checkout the most recent version of Vendor/JSONKit in your working directory and abandon the modifications.In a repository with submodules:Git submodules allow you to embed git repositories inside one another. Suppose ""JSONKit"" were a submodule inside ""MyApp"". The top-level git repository, MyApp, only tracks the HEAD commits of JSONKit, so you can perfectly reconstruct both MyApp's and JSONKit's states at any point in history. Suppose you committed changes inside the JSONKit repository. Inside JSONKit, this would look like a normal diff and have a normal history. Inside the parent repository, MyApp, it would register as a change to the HEAD commit. It might look something like this diff, taken from the git scm docs. The submodule in this example is a directory called ""rack"".$ git diff --cached rackdiff --git a/rack b/racknew file mode 160000index 0000000..08d709f--- /dev/null+++ b/rack@@ -0,0 +1 @@+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433How does MyApp know which directories are submodules? It's tracked inside the .gitmodules file. cat it, and you'll see every submodule registered in MyApp:$ cat .gitmodules [submodule ""rack""]    path = rack    url = git://github.com/chneukirchen/rack.gitWhen you issued git submodule update, you told git to checkout the most recent HEAD commit for JSONKit in your parent repo's index, thus abandoning the change in the submodule repository:update   Update the registered submodules, i.e. clone missing submodules and checkout the commit specified in the index of the containing repository. This will   make the submodules HEAD be detached unless --rebase or --merge is specified or the key submodule.$name.update is set to rebase, merge or none.  none   can be overridden by specifying --checkout."
"When it says that, just open the shell and do git status. That will give you a decent idea of what could be wrong and the state of your repo.I can't give you a specific error for this as it happens for many reasons in Github for Windows, like say some problem in updating submodules etc.This error comes because of a merge conflict in files. I faced it after I had updated my Maven Project's pom.xml but didn't commit it. Using git statuserror: Your local changes to the following files would be overwritten by merge:<my project>/pom.xmlPlease, commit your changes or stash them before you can merge.Abortingas the above post suggested helped finding any conflicting changes and you can decide to discard or commit.I had the same problem. It happened to me because of some conflicting changes. I removed the local repository of my project from my desktop and then cloned it again from the github website (using clone option in my account), the error was gone.I had this problem and found it was to do with the proxy. I fixed the problem using this command:  git config --global http.proxy %HTTP_PROXY%This is probably an edge case, but every time I've got this specific error it is because I've recently mapped a drive in Windows, and powershell cannot find it.A computer restart (of all things) fixes the error for me, as powershell can now pick up the newly mapped drive. Just make sure you connect to the mapped drive BEFORE opening the github client.I had the same problem. In my case git could not find the global variable %HTTP_PROXY%, simply because Windows was not providing/using it.I solved it by excluding the variable from the git config file (located in %USERPROFILE%\.gitconfig):[http]#   proxy = %HTTP_PROXY%Have you changed your Windows password recently, or at least the one you use to connect to your proxy?This was my problem, and git status couldn't help me. I had to change my login credentials in the "".git/config"" file to get past this error.This error also occurs if the branch you're trying to sync has been deleted. git status won't tell you that, but you'll get a ""no such ref was fetched"" message if you try git pull."
"Note Wording changed in response to the commments. Thanks @slekseThat is not an error, it is a warning. It means the branch you are about to delete contains commits that are not reachable from any of: its upstream branch, or HEAD (currently checked out revision). In other words, when you might lose commitså_.In practice it means that you probably amended, rebased or filtered commits and they don't seem identical. Therefore you could avoid the warning by checking out a branch that does contain the commits that you're about un-reference by deleting that other branch.å_ You will want to verify that you in fact aren't missing any vital commits:git log --graph --left-right --cherry-pick --oneline master...experimentThis will give you a list of any nonshared between the branches. In case you are curious, there might be a difference without --cherry-pick and this difference could well be the reason for the warning you get:--cherry-pick Omit any commit that introduces the same change as another commit on the ""other side"" when the set of commits are limited with symmetric difference. For example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with --left-right, like the example above in the description of that option. It however shows the commits that were cherry-picked from the other branch (for example, ""3rd on b"" may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output.å_ they're really only garbage collected after a while, by default. Also, the git-branch command does not check the revision tree of all branches. The warning is there to avoid obvious mistakes.å_ (My preference here is to just force the deletion instead, but you might want to have the extra reassurance).As Drew Taylor pointed out, branch deletion with -d only considers the current HEAD in determining if the branch is ""fully merged"".  It will complain even if the branch is merged with some other branch.  The error message could definitely be clearer in this regard...You can either checkout the merged branch before deleting, or just use git branch -D.  The capital -D will override the check entirely.I had this happen to me today, as I was merging my very first feature branch back into master. As some said in a thread elsewhere on SO, the trick was switching back to master before trying to delete the branch. Once in back in master, git was happy to delete the branch without any warnings.I tried sehe's answer and it did not work.To find the commits that have not been merged simply use:git log oldbranch ^newbranch --no-mergesGit is warning that you might lose history by deleting this branch. Even though it would not actually delete any commits right away, some or all of the commits on the branch would become unreachable if they are not part of some other branch as well.For the branch experiment to be ‰ÛÏfully merged‰Ûù into another branch, its tip commit must be an ancestor of the other branch‰Ûªs tip, making the commits in experiment a subset of the other branch. This makes it safe to delete experiment, since all its commits will remain part of the repository history via the other branch. It must be ‰ÛÏfully‰Ûù merged, because it may have been merged several times already, but now have commits added since the last merge that are not contained in the other branch.Git doesn‰Ûªt check every other branch in the repository, though; just two:The current branch (HEAD)The upstream branch, if there is oneThe ‰ÛÏupstream branch‰Ûù for experiment, as in your case, is probably origin/experiment. If experiment is fully merged in the current branch, then Git deletes it with no complaint. If it is not, but it is fully merged in its upstream branch, then Git proceeds with a warning seeming like:warning: deleting branch 'experiment' that has been mergedto 'refs/remotes/origin/experiment', but not yet merged toHEAD.Deleted branch experiment (was xxxxxxxx).Where xxxxxxxx indicates a commit id. Being fully merged in its upstream indicates that the commits in experiment have been pushed to the origin repository, so that even if you lose them here, they may at least be saved elsewhere.Since Git doesn‰Ûªt check other branches, it may be safe to delete a branch because you know it is fully merged into another one; you can do this with the -D option as indicated, or switch to that branch first and let Git confirm the fully merged status for you."
"That error means that you have changes to your files on the prod server that are going to be clobbered by the git pull command that you are trying to run.  Git decides that this is probably not what you want to do.You could run git status to see what you have that isn't checked in/tracked on the prod server to see what you want to do with those changes.  Then you have three options:git reset: those changes I don't need, get rid of them by resetting to the previous commit and then do the pull.git commit (adding relevant files first): those changes need to be in version control, check them in please.  And then pull the latest changes over the top of those changes.git stash: those changes are a work in progress and I don't want to lose them, but I don't want to check them in yet either.  You can retrieve them later."
"See the ""pushing a branch"" section from GitHub help page:Dealing with ‰ÛÏnon-fast-forward‰Ûù errorsFrom time to time you may encounter this error while pushing:$ git push origin masterTo ../remote/ ! [rejected]        master -> master (non-fast forward)error: failed to push some refs to '../remote/'To prevent you from losing history, non-fast-forward updates were rejectedMerge the remote changes before pushing again.  See the 'non-fast forward'section of 'git push --help' for details.This error can be a bit overwhelming at first, do not fear.  Simply put, git cannot make the change on the remote without losing commits, so it refuses the push. Usually this is caused by another user pushing to the same branch.  You can remedy this by fetching and merging the remote branch, or using pull to perform both at once.In other cases this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase.  While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do. Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don‰Ûªt force-push.Mode details on the ""Note about fast-forwards"" of git push, as mentioned by Michael Mrozek in the comments.In addition to VonC's answer,In case you, intend to override the remote changes with your local,  $git push --forcewill do.Quite important: this can also occur if name of the branch you are on (and want to merge) and the branch upstream are not the same. Then work flow could look like this:git pull --rebase             # to retrieve upstream changes, replay yours on topgit push --dry-run --verbose origin HEAD:master   # always good idea: dry-runs..git push origin HEAD:master   # actually push current branch head (non-master) to upstream masterIf you are getting this error and your .git/config file is just fine then go through these steps (this is a common problem with a submodule in git repos - again do this from the submodule dir)git checkout mastergit pull(merge happens in background)git push"
"My guess is that someone else has accidentally committed this file. How to resolve this:Remove your local .pyc filerm rtb_redis_connections/redis_connections.pycDo the pullgit pullRemove the file from git and push up the changesgit rm rtb_redis_connections/redis_connections.pycgit commit -m ""Remove pyc file""git push origin masterAssuming that you are working on the master branch that is.Why don't you put them to .gitignore?You either need to add te rtb_redis_connections directory to the repository so that it tracks to the remote, or add the files or directory to .gitignore."
"It looks like what's happening is that you successfully resolved the first merge conflict when applying ""Turned colors to html"" then hit another merge conflict when applying the next commit ""Added last sentences"".Simply do a git status to see what the merge conflicts are, resolve them then continue with git rebase --continue."
"I was having this problem and Tim's answer helped me figure out the solution.  In the past I had run:git update-index --assume-unchanged index.phpThe ProblemAfter making a bunch of changes to another branch remotely, I was getting the overwrite warning while trying to switch over locally. git checkout other-brancherror: Your local changes to the following files would be overwritten by checkout:index.phpPlease, commit your changes or stash them before you can switch branches.AbortingStashing wasn't working.git stash save --keep-indexNo local changes to saveThe Solutiongit update-index --no-assume-unchanged index.phpgit add index.phpgit commitAfter that.git checkout other-branchSuccess!It turns out that I had the skip-worktree bit set, so I needed to rungit update-index --no-skip-worktree <filename>I found this out by running git ls-files -v | grep ""^[^H]""(Or git ls-files -v | where { $_ -match ""^[^H]""} with Windows Powershell)Typing git help ls-files explained what the output meant."
"rm .DS_Storegit add -Agit commit -m ""Added .gitignore file""You'll also want to expressly add .DS_Store to your .gitignore so that when .DS_Storeis inevitably created in the future, it won't get in the way of your commits.You probably don't care about .DS_Store.So, try to move it to .DS_Store.bak and pull again"
"Edit: For newer versions of Git, --set-upstream master has been deprecated, you should use --set-upstream-to instead:git branch --set-upstream-to=origin/master masterAs it prompted, you can just run:git branch --set-upstream master origin/masterAfter that, you can simply run git pull to update your code.I had the same problem and fixed it with this command:$ git push -u origin masterFrom the help file the -u basically sets the default for pulls:-u, --set-upstream`  For every branch that is up to date or successfully pushed, add   upstream (tracking) reference, used by argument-less git-pull(1) and  other commands. For more information, see branch.<name>.merge in   git-config(1).Try these commands:git pull origin mastergit push -u origin master@alesko : it is not possible to only do only git pull after checkout my_branch to update master branch only.Because git pull will also merge to the current branch -> in your scenario to the my_branch@Simon: that will do also the push. why is that?$ git branch -u origin/masterBranch master set up to track remote branch master from origin.and acording to docs:-u <upstream>  Set up <branchname>'s tracking information so <upstream> is considered    <branchname>'s upstream branch. If no <branchname> is specified,    then it defaults to the current branch.First, make sure you are on the right branch.Then (one time only):  git branch --trackAfter that this works again:git pullSwitch back to the master branch using$ git checkout masterand then run the git pull operation$ git pull origin/masterAfterwards, you can switch back to your my_branch again.You might have multiple branch. And your current branch didn't set its upstream in remote.Steps to fix this:git checkout branch_namegit branch --set-upstream-to=origin/remote_branch_name local_branch_namee.g.// this set upstream of local branch develop to remote branch  origin/develop,git branch --set-upstream-to=origin/develop developAfter doing this, when you do git pull, it pull from specified branch.You need to set up your tracking (upstream) for the current branchgit branch --set-upstream master origin/masterIs already deprecated instead of that you can use --track flaggit branch --track master origin/masterI also like the doc reference that @casey notice:-u <upstream>  Set up <branchname>'s tracking information so <upstream> is considered    <branchname>'s upstream branch. If no <branchname> is specified,    then it defaults to the current branch.What worked for me was:git branch --set-upstream-to=origin masterWhen I did a pull again I only got the updates from master and the warning went away.Try thisgit checkout mastergit pull origin master"
"When you did a git-pull, modifications from the remote branch were merged into your local branch. The automatically generated commit signifies that.Merging could have resulted in conflicts, which would then need to be resolved manually. In your particular case, this did not happen and git could take care of everything.If there could be changes by others, it might be a  good idea to do a git pull --rebase (i.e., add your new changes after the remote changes; this might find conflicts you'd have to resolve) and then git push the result. Be careful, this creates new commits that did never exist before (as does any history rewriting), but it gives a clean, linear history (no tangle of merges)"
"This is vim, it's a common unix editorpress::wqthat's it. (w=write q=quit)When you see this, an editor already opened, because you see this ;) I guess it opens vi, or a derivate of this. Google for it to find out how to use it, but it seems you prefer to change the editor insteadgit config --global core.editor ""emacs""I prefer nano :)"
"I'm in charge of handling all patching at my work. I've had this happen many times. A patch cannot be merged. The reason this is happening is because the master branch has changes that the patch did not take into account, which prevents it from patching correctly. From all my experience, this could be caused by several things:The person who made the patch failed to pull the master branch and rebase master onto their development branch.Between the time that the person pulled and the patch was applied enough changes were made to the master branch to stop the patch from applying due to too many conflicts.The person patched incorrectly.Here is the flow I've had the most success with. (This is assuming the person is developing on a branch other than master)Make sure you've added all files and commited all changes.git checkout mastergit pullgit checkout {development branch}git rebase master (this will bring the development branch up to speed with master)git checkout -b {submission branch} mastergit merge --squash --no-commit {development branch}git commit -am ""Commit Comment Here"" (NOTE: This commit comment will be the name of the patch)git format-patch origin..HEADThat makes sure your patch is up to date with the origin master branch. Send that patch and hopefully the patch is applied before too many changes are made on the master.For more info on Git and all the steps I went through, see this wiki."
"To resolve your immediate problem, you should make a backup of the local file, remove the original, pull from the remote branch, and then git rm (followed by a push, to make sure the remote repo deletes the file as well).  Then you can put the backup file back locally, and add a line to your .gitignore file.This is happening due to an untracked file will be overwritten by a new file coming in from the pull requestMy suggestion would be to:git add .git stashgit pullBasically adding the files that aren't tracked into your git repo and stashing them away and pulling in the new version."
"The documentation ""How to revert a faulty merge"" mentioned by cebewee explains why a git revert is tricky when reverting a merge.So the merge will still exist, and it will still be seen as joining the two branches together, and future merges will see that merge as the last shared state - and the revert that reverted the merge brought in will not affect that at all.  If you think of ""revert"" as ""undo"", then you're going to always miss this part of reverts.  Yes, it undoes the data, but no, it doesn't undo history.git revert is the right solution here, but it will have a consequence in the future, when you want to merge that branch again.The next merge will then have to ""revert the revert"" first, and then merge the branch.Edit: This turns out not to be what the OP asked for, but I'll keep it here in case someone should happen to look for a solution that does involve rewriting history.First, create a new branch if you want to keep the merge commit locally, so that the commit doesn't ""disappear"" after you move master:git branch erroneousMerge masterIf the other developers have also made commits after the erroneous merge, they must do this as well!Then, reset master to refer to the last commit before the merge; let's say that it's commit e498b2...:git checkout e498b2git branch -f masterNow, you can push the corrected master (-f indicates that you want to make the server reset its master branch to the commit that you have made it point to, even though this commit is an ancestor of the one it points to in the repository):git push -f origin masterNow, the other developers can update their master to match that of the server(-f indicates that they accept that the branch has moved backwards):git fetch -f origin master:masterIf the other developers have made changes after the erroneous merge (let's say that the merge commit is abc123, they can use rebase to move the changes to the corrected master:git rebase --onto master abc123 oldMasterIf you screw up at some point and end up with ""losing"" commits because there is no longer any branches pointing to them, you can use git fsck --lost-found to recover them."
"Latest Git:git merge --abortThis attempts to reset your working copy to whatever state it was in before the merge. That means that it should restore any uncommitted changes from before the merge, although it cannot always do so reliably. Generally you shouldn't merge with uncommitted changes anyway.Prior to version 1.7.4:git reset --mergeThis is older syntax but does the same as the above.Prior to version 1.6.2:git reset --hardwhich removes all uncommitted changes, including the uncommitted merge. Sometimes this behaviour is useful even in newer versions of Git that support the above commands.Assuming you are using the latest git, git merge --abortActually, it is worth noticing that git merge --abort is only equivalent to git reset --merge given that MERGE_HEAD is present. This can be read in the git help for merge command.git merge --abort is equivalent to git reset --merge when MERGE_HEAD is present.After a failed merge, when there is no MERGE_HEAD, the failed merge can be undone with git reset --merge but not necessarily with git merge --abort, so they are not only old and new syntax for the same thing.Personally I find git reset --merge much more useful in everyday work."
"Sadly, the Visual Studio plugin for Git doesn't display the error messages you need to troubleshoot this problem. (I hope they plan that feature for a later release.)Try pulling the latest commits using Git Bash or using TortoiseGit. Either of those tools should let you know where your conflicts are.To see the error you should run git command lineYou can find it at Team Emplorer -> Unsynched commits -> Actions -> Open in Command PromptThen you should use git pull commandBe careful with credential if you are using visualstudio.com,in this case you must have an alternative login and password for connect to git from command prompt.For resolving the issue follow below steps:-1)Close visual studio.2)Now Open visual studio without opening any solution..3)Open team viewer and then go to git home->changes..4)Then click on commit..5)Now you will get the unresolved conflicts..6)Resolve the conflicts and commit..Problem Resolved :).CheersThis error often occurs when:You have a proxy on your network:See some solutions on configuring your git proxy settings here.or... The git url you are trying to connect to is over 256 charactersVisual Studio Tool for Git didn't supported the remote repositories using the SSH protocol, only HTTP and HTTPS were supported but now it supports SSH as well.See the url on how to resolve this-https://github.com/libgit2/libgit2sharp/issues/255"
"do git pull origin monty_svm_dev firstWhat has happened is that the remote has more recent changes than your branch.  So before you can push your changes, you need to get and merge the changes on the remote first.You can do this either by doing a git checkout your_branch, then:  git fetch origin your_branch and then agit merge your_branchorgit pull origin your_branch # fetch and merge in one operationWhere your branch is master, or your branch name (seems to be monty_svm_dev in your case I think)Once this is done (and any conflicts resolved) you can do a git push origin monty_svm_devIt basically because when you git pullfrom a branch , two operations take place fetch and merge. Now if your local has some changes then git will not allow you to push it before you commit your changes.Also this issue appears if the remote has changes which are still not pulled in local and merged, so you  need to take a pull again and then push it. Do reply if it doen't solve the issue"
"You get CONFLICT (add/add): Merge conflict in ... conflicts because the files are in fact NOT exactly the same. They may look pretty much the same from a distance, but they are definitely different.If there is even one bit of difference, Git cannot know which file is the right one. One branch says ""add this file"", another branch says ""add this file"", with same name but different content, only you can tell which one is the right one.You can confirm the difference with:git diff other_branch path/to/fileOr after the merge, in the conflicted state, you can see the problem with simply git diff.To resolve such conflict, you have to decide which branch has the right content, and checkout the file from that branch. To choose the version in the current branch:git checkout path/to/fileTo choose the version in the other branch:git checkout other_branch path/to/fileThe long-term solution is to avoid practices that you already know yourself to be bad.I had a git (Add/Add) conflict. The information from Janos provided the insight needed for a solution. The files ""appeared"" identical, but my conflicting folder of files were added with a permission of 664 on one branch, and a permission of 755 on another branch. Using git status revealed the difference between the files.Steps taken to resolve the conflict:git merge --abortrm -rfv myconflictedfoldergit commit -m'Resolve git Add/Add branch merge conflict by deleting conflicted folder and files in myconflictedfolder'git merge mybranch"
"HEAD refers to the current commit (generally the tip of the currently checked-out branch). You've already committed your merge, so HEAD is pointing to the merge commit. If you want to get back to the commit before it, use:git reset --hard HEAD^The ^ means ""first parent of""; for a regular commit it's the only parent, and for a merge commit it's the commit you had checked out when you merged (i.e. the prior tip of the branch you merged into).And of course, if you ever get really lost, just open up gitk, and either copy/paste the SHA1 of the commit you want to reset to (git reset --hard SHA1) or just right click on it and reset within gitk.By the way, revert doesn't mean what you think it does (it sounds like you're using it in an svn way, maybe? but I've never used svn). git revert is used to create a commit which cancels out (reverts) a previous commit, by applying the reverse diff. You use it when you want to undo a single previous commit which has already been published.After the pull, HEAD has been moved to the latest commit, which is the merge commit bringing the two branches together, not the commit that you last worked on. So this is why reset HEAD won't change anything.revert HEAD isn't what you want to do either, because that is attempting to create a new commit reverting the changes of the merge commit. (This is why you see an error; you can't revert a merge commit without telling git which of the two parent commits you want to return to.)I think what you want is:git reset [--hard] HEAD^which will reset to the commit before the merge commit.does pull command commit?Yes, it does. Pull is a wrapper over fetch and merge. If you want to see other's changes before merging, you can just fetch"
"Use:git reset--mixedinstead of git reset --hard. You will not lose any changes.I used: git reset --hardI lost some changes, but this is ok.To follow up on malat's response, you can avoid losing changes by creating a patch and reapply it at a later time.git diff --no-prefix > patch.txtpatch -p0 < patch.txtStore your patch outside the repository folder for safety.This worked for me:Do $ git statusAnd check if you have Unmerged paths# Unmerged paths:#   (use ""git reset HEAD <file>..."" to unstage)#   (use ""git add <file>..."" to mark resolution)##   both modified:      app/assets/images/logo.png#   both modified:      app/models/laundry.rbFix them with git add to each of them and try git stash again.git add app/assets/images/logo.pngmaybe there are some unmerged paths in your git repository that you have to resolve before stashing."
"Try: git reset README.mdI had a similar issue and this was the only thing that solved it.Do this:git merge --abortgit pull (to be sure you're up-to-date)Now replace the contents of the README.md file with what you want it to say.  If you don't want it at all, do git rm README.mdThen if you replaced the contents, commit and push those contents with:    git add README.md    git commit -m ""comment""    git push"
"cd `brew --repository`git reset --hard HEADbrew updateSometimes the above doesn't work. In that case, docd `brew --repository`git reset --hard origin/masterbrew update"
"All those files it lists are untracked in your local branch, so if you do the merge, any changes you have made to those files will be irretrievably lost.  Therefore, git doesn't let you do the merge.To fix it, either delete all those files from your working tree or add and commit them, depending on if you want to keep your local changes to them or not."
"The issue seems to be that git stash doesn't save a reference to the branch you were trying to merge in. During a merge, this is stored in a ref named MERGE_HEAD.To fix it and get back to your previous state, you need to find the revision (let's pretend it's d7a9884a380f81b2fbf002442ee9c9eaf34ff68d) you were trying to merge in, and set MERGE_HEAD to it after you apply the stash.Then you can apply the stash (with --index to re-stage everything that was staged before), and set your MERGE_HEAD:git stash apply --indexgit update-ref MERGE_HEAD d7a9884a380f81b2fbf002442ee9c9eaf34ff68dGiven your last comment : you can usegit stash megre --no-commit <branch>to put the index in a ""merge"" state without committing the changesthen modify it with what you want :if you have already worked out your merge in the stash :git reset #to remove the ""conflicts"" flagsgit checkout <initial commit> -- ./ #to revert everything to the previous working state,git stash apply   #apply your changesand once everything is in the desired state, git commitAbout bukzor's comment : there is actually a big difference between git checkout <tree-ish> and git checkout <tree-ish> -- <files>.From the reference on git checkout :git checkout <branch> : This form switches branches by updating the index, working tree, and HEAD to reflect the specified branch or commit.git checkout [-p|--patch] <tree-ish> -- <pathspec> : When <paths> or --patch are given, git checkout does not switch branches. It updates the named paths in the working tree from the index file or from a named <tree-ish> (most often a commit).git checkout <initial commit> would indeed discard the merge informations.git checkout <initial commit> -- ./ (note the extra -- ./), on the other hand, will keep the merge information, and revert every tracked file to its state in <initial commit>."
"You shouldn't store .pyc files in Git. On your workstation, dofind . -name *.pyc -exec git rm {} \;Then add a line *.pyc to .gitignore, commit all the changes and push.On the other end (EC2), dogit checkout classes/ec2/ec2Auto.pyc classes/redis_ha.pyc \             classes/rtbUtilities.pyc rtb_redis_connections/redis_connections.pycthen pull."
"The core.ignorecase config option was not set and Visual Studio had renamed the .Designer.cs file in case, switching from a capital to lower ""D"" (or vice versa). That was the problem in the end. It took me some file history breakup (deleting and re-adding files) to resolve this error after setting the option to true. Actually the option was set on one computer, but when cloning the repository, the setting got lost somehow. And then destiny was only waiting for VS to rename that file to catch me.So on Windows, you always need to make sure that these two settings are correct after any init/clone operation:git config core.ignorecase truegit config core.autocrlf falseSome tools (TGit, gitscc etc.) don't seem to do it right. It's absolutely necessary for normal operation on Windows, but Git doesn't care if they're not set correctly and just lets you stumble over them not telling you why. It's as much lying as it's helpful in this matter."
"Are you using any other tools while using TortoiseGit?For instance, this project mentions an interaction with Visual Studio:If you see errors about being unable to unlink old files when running git commands on Windows, it's quite likely that you have the chrome solution open in Visual Studio and it's updating IntelliSense, which will briefly lock files at random.  The workaround is either to disable IntelliSense entirely, or to be sure to close the solution temporarily while performing any git operations which could touch a large number of files. In other word, does the problem persists if you close as many currently running applications as you can?Would TortoiseGit allow you to checkout another branch then?I ran into this problem-Eclipse was locking the file even though it wasn't open in the editor. Once I closed eclipse I could checkout fine.If your problem is based on eclipse locking file,  you can start your eclipse with -Dosgi.locking=none.I ran into this problem with eclipse Luna 4.4.0The file is locked by another program and cannot be overwritten. See what application has the file locked, close that application, and try again."
"Situation:You have local uncommitted changes You pull from the master repo You get the error ""Checkout conflict with files: xy""Solution:Stage and commit (at least) the files xyPull againIf automerge is possible, everything is ok.If not, the pull merges the files and inserts the merge-conflict markers (<<<<<<, >>>>)Manually edit the conflicting filesCommit and pushThis is the way I solved my problem:Right click the folder that has uncommitted changes on your localClick Team > Advanced > Assume UnchangedPull from master.UPDATE:As Hugo Zuleta rightly pointed out, you should be careful while applying this. He says that it might end up saying the branch is up to date, but the changes aren't shown, resulting in desync from the branch.After closing the Conflict Error Dialog; from the Project Explorer, right click on the head of the project -> Team -> Stashes -> Stash ChangesEnter a name for your stash. E.G. ""Conflict""Try Pulling again. Hopefully there are no errors this time.From the Git Repository view, expand your repository -> Stashed CommitsRight Click on the stash you created in step 2 -> Apply Stashed ChangesThis brings up the merge tool if it can't automatically merge it.Manually resolve the merge conflicts in the file/s.Right Click on the file editor -> Team -> Add To IndexIf you are not ready to commit the file or just don't want it in the Index, right click on the file editor -> Team -> Remove from Index.Your local working directory file should be be merged"
"But I get an error ""! [rejected]"" and something about ""non fast forward""That's because Git can't merge the changes from the branches into your current master. Let's say you've checked out branch master, and you want to merge in the remote branch other-branch. When you do this:$ git pull origin other-branchGit is basically doing this:$ git fetch origin other-branch && git merge other-branchThat is, a pull is just a fetch followed by a merge. However, when pull-ing, Git will only merge other-branch if it can perform a fast-forward merge. A fast-forward merge is a merge in which the head of the branch you are trying to merge into is a direct descendent of the head of the branch you want to merge. For example, if you have this history tree, then merging other-branch would result in a fast-forward merge:O-O-O-O-O-O^         ^master    other-branchHowever, this would not be a fast-forward merge:    v masterO-O-O\ \-O-O-O-O         ^ other-branchTo solve your problem, first fetch the remote branch:$ git fetch origin other-branchThen merge it into your current branch (I'll assume that's master), and fix any merge conflicts:$ git merge origin/other-branch# Fix merge conflicts, if they occur# Add merge conflict fixes$ git commit    # And commit the merge!Simply track your remote branches explicitly and a simple git pull will do just what you want:git branch -f remote_branch_name origin/remote_branch_namegit checkout remote_branch_nameOr even more fitting in with the GitHub documentation on forking:git branch -f new_local_branch_name upstream/remote_branch_nameYou could pull a branch to a branch with the following commands.git pull {repo} {remotebranchname}:{localbranchname}git pull origin xyz:xyzWhen you are on the master branch you also could first checkout a branch like:git checkout -b xyzThis creates a new branch, ""xyz"", from the master and directly checks it out.Then you do:git pull origin xyzThis pulls the new branch to your local xyz branch.The best way is:git checkout -b <new_branch> <remote repo name>/<new_branch>I am not sure I fully understand the problem, but pulling an existing branch is done like this (at least it works for me :)git pull origin BRANCHThis is assuming that your local branch is created off of the origin/BRANCH.git fetch will grab the latest list of branches.Now you can git checkout MyNewBranch Done :)For more info see docs: git fetch"
"To solve the problem, I removed the file from git, then re-added it by doing the following:git rm ""myPathToAFile""git add .git commit -am 'my commit'Hope this helps someone else!I had the same issue. I'm using Windows 7 and my problem was the ""Maximum Path Length Limitation"" (max 260 characters for the path) (see http://msdn.microsoft.com/en-us/library/aa365247%28VS.85%29.aspx#maxpath for more details).My workaround was to shorten the classname a little bit."
"I figured it out. I needed to stage my local changes for commit prior to git stash pop, so I just did a git add file.js and then git stash pop and the merge proceeded as expected. Hope this helps someone!"
"All right, I'm confident enough to throw out an answer. Maybe will have to edit it, but I believe I know what your problem is.Your toy repo test case has a merge in it - worse, it has a merge with conflicts. And you're rebasing across the merge. Without -p (which doesn't totally work with -i), the merges are ignored. This means that whatever you did in your conflict resolution isn't there when the rebase tries to cherry-pick the next commit, so its patch may not apply. (I believe this is shown as a merge conflict because git cherry-pick can apply the patch by doing a three-way merge between the original commit, the current commit, and the common ancestor.)Unfortunately, as we noted in the comments, -i and -p (preserve merges) don't get along very well. I know that editing/rewording work, and that reordering doesn't. However, I believe that it works fine with squashes. This is not documented, but it worked for the test cases I describe below. If your case is way, way more complex, you may have a lot of trouble doing what you want, though it'll still be possible. (Moral of the story: clean up with rebase -i before merging.)So, let's suppose we have a very simple case, where we want to squash together A, B, and C:- o - A - B - C - X - D - E - F (master)   \             /    Z -----------Now, like I said, if there were no conflicts in X, git rebase -i -p works as you'd expect. If there are conflicts, things get a little trickier. It'll do fine squashing, but then when it tries to recreate the merge, the conflicts will happen again. You'll have to resolve them again, add them to the index, then use git rebase --continue to move on. (Of course, you can resolve them again by checking out the version from the original merge commit.)If you happen to have rerere enabled in your repo (rerere.enabled set to true), this will be way easier - git will be able to *re*use the *re*corded *re*solution from when you originally had the conflicts, and all you have to do is inspect it to make sure it worked right, add the files to the index, and continue. (You can even go one step farther, turning on rerere.autoupdate, and it'll add them for you, so the merge won't even fail). I'm guessing, however, that you didn't ever enable rerere, so you're going to have to do the conflict resolution yourself.** Or, you could try the rerere-train.sh script from git-contrib, which attempts to ""Prime [the] rerere database from existing merge commits"" - basically, it checks out all the merge commits, tries to merge them, and if the merge fails, it grabs the results and shows them to git-rerere. This could be time-consuming, and I've never actually used it, but it might be very helpful."
"Get back to where you started with$ git rebase --abortSay your history is$ git log --pretty=onelinea931ac7c808e2471b22b5bd20f0cad046b1c5d0d cb76d157d507e819d7511132bdb5a80dd421d854f bdf239176e1a2ffac927d8b496ea00d5488481db5 aThat is, a was the first commit, then b, and finally c.Running git rebase --interactive HEAD~2 gives you an editor withpick b76d157 bpick a931ac7 c# Rebase df23917..a931ac7 onto df23917## Commands:#  p, pick = use commit#  r, reword = use commit, but edit the commit message#  e, edit = use commit, but stop for amending#  s, squash = use commit, but meld into previous commit#  f, fixup = like ""squash"", but discard this commit's log message## If you remove a line here THAT COMMIT WILL BE LOST.# However, if you remove everything, the rebase will be aborted.#Changing b's pick to squash will result in the error you saw, but if instead you squash c into b by changing the text topick b76d157 bs a931ac7 cand save-quitting your editor, you'll get another editor whose contents are# This is a combination of 2 commits.# The first commit's message is:b# This is the 2nd commit message:cWhen you save and quit, the contents of the edited file become commit message of the new combined commit:$ git log --pretty=oneline18fd73d3ce748f2a58d1b566c03dd9dafe0b6b4f b and cdf239176e1a2ffac927d8b496ea00d5488481db5 aIf there are multiple commits, you can use git rebase -i to squash two commits into one.If there are only two commits you want to merge, and they are the ""most recent two"", the following commands can be used to combine the two commits into one:git reset --soft ""HEAD^""git commit --amendFirst you should check how many commits you have:git logThere are two status:One is that there are only two commits:For example:commit Acommit B(In this case, you can't use git rebase to do) you need to do following. $ git reset --soft HEAD^1$ git commit --amendAnother is that there are more than two commits; you want to merge commit C and D.For example:commit Acommit Bcommit Ccommit D(under this condition, you can use git rebase)git rebase -i BAnd than use ""squash"" to do. The rest thins is very easy. If you still don't know, please read http://zerodie.github.io/blog/2012/01/19/git-rebase-i/you can cancel the rebase withgit rebase --abortand when you run the interactive rebase command again the 'squash; commit must be below the pick commit in the listI often use git reset --mixed to revert a base version before multiple commits which you want to merge, then I make a new commit, that way could let your commit newest, assure your version is HEAD after you push to server.commit ac72a4308ba70cc42aace47509a5eAuthor: <me@me.com>Date:   Tue Jun 11 10:23:07 2013 +0500    Added algorithms for Cosine-similaritycommit 77df2a40e53136c7a2d58fd847372Author: <me@me.com>Date:   Tue Jun 11 13:02:14 2013 -0700    Set stage for similar objectscommit 249cf9392da197573a17c8426c282Author: Ralph <ralph@me.com>Date:   Thu Jun 13 16:44:12 2013 -0700    Fixed a bug in space world automationIf I want to merge head two commits into one, first I use : git reset --mixed 249cf9392da197573a17c8426c282""249cf9392da197573a17c8426c282"" was third version, also is your base version before you merge, after that, I make a new commit :git add .git commit -m 'some commit message'It's all, hope is another way for everybody.FYI, from git reset --help: --mixed     Resets the index but not the working tree (i.e., the changed files are     preserved but not marked for commit) and reports what has not been     updated. This is the default action.Assuming you were in your own topic branch.  If you want to merge the last 2 commits into one and look like a hero, branch off the commit just before you made the last two commits.  git checkout -b temp_branch HEAD^2Then squash commit the other branch in this new branch: git merge branch_with_two_commits --squashThat will bring in the changes but not commit them.  So just commit them and you're done.git commit -m ""my message""Now you can merge this new topic branch back into your main branch."
"SO at this point do you have the file in the working copy that you pulled to?if so just delete it and recommit.If you now do git status, its output contains:# Unmerged paths:#   (use ""git add/rm <file>..."" as appropriate to mark resolution)If you git rm them, a needs merge warning will be output but nevertheless the removal will succeed, then you can commit the modifications - this will be the ""merge commit""."
"Check the solution herehttps://github.com/Homebrew/homebrew/issues/21002in Short cd /usr/localgit statusgit reset --hard origin/mastergit clean -dfType brew doctor and do what it tells you."
"There probably isn't a way, since there's an open issue about it, and also by looking at the source code at least I don't see exception details recorded anywhere. They're lost.Some options what you could do:merge the branch yourself and see if it helpsmake a fork of the plugin that saves the information somewhere or outputs it orrun Jenkins using remote debugger, having a breakpoint at that point in code.There are instructions here to run Jenkins with a debugger:Add the following to the JENKINS_JAVA_OPTIONS variable (separated by  spaces, surrounded by quotes):-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5678So the full line may look something like:JENKINS_JAVA_OPTIONS=""-Djava.awt.headless=true -DXX:MaxPermSize=512m -DXX:+HeapDumpOnOutOfMemoryError -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=0""Obviously change the port from 5678 to something else if you need."
"It could be related to this. I had the same problem as you do for a long time, this helped. I couldn't find any consensus on the reason for this, though (Here is some more discussions).It seems that something is changing file meta data, essentially resetting the ctime of your files, so that git will not recognize them as changed when relying on ctime information.Links to git documentation of trustctime: git-config, git-update-index"
"You did it the wrong way around. You are meant to reset first, to unstage the file, then checkout, to revert local changes.Try this:$ git reset foo/bar.txt$ git checkout foo/bar.txtThis worked perfectly for me:$ git reset -- foo/bar.txt$ git checkout foo/bar.txtgit checkout origin/[branch] .git status// Note dot (.) at the end. And all will be good"
"Find the diff with git fetch && git log Li..origin/Li. I would guess you've rebased or otherwise recut Li since last time you pushed, but that command should tell you exactly what's in the remote that isn't in the local. You can find what's in either (but not both) with the triple-dot syntax: git log Li...origin/Li.If the diff is expected, then just merge with git merge origin/Li and then git push. If the change is unwanted, overwrite the remote with git push -f origin Li. Only do this if you want to abandon the remote's changes.Updates were rejected because a pushed branch tip is behind its remote.git config --global push.default currentTry the command above to set the current branch as default and git push"
"the first thing that I'm not understanding is that the line ...Getting changesets from 60 to current ... The TFS repo is currently on changeset 59, and when I cloned the repo, it was on changeset 57. So on a fetch, I SHOULD be getting changesets 58 to current...I don't have enough data to understand exaclty where your problem come from but I will try to give you enough understanding to let you solve it yourself...The line Getting changesets from 60 to current ... tell you that in the 'default' remote, the last changeset found is the 59 and that git-tfs is asking to tfs the changesets from 60 to the last to see if there is changes in the 'default' remote path (for exemple $/project/trunk). If there is no changes in this tfs path, no commit will be created.So your problem could come from 3 things :changes have been made in your other tfs path (managed by your other tfs remote). Then you should either fetch from all your remote with git tfs fetch -all or checkout your other branch and use git tfs fetch -I (that automatically get the good remote) or git tfs fetch -i idOfYourOtherRemote (if you want to specify yourself the remote to use)you have messed something with the git-tfs metadata that broke git-tfs (perhaps during your merge). Be sure that only commits created from tfs changeset contains metadata git-tfs-id:[http://server:8080/tfs/teamCollection/]$/.../;Cxxin the commit message. These metadata are important for git-tfs and should not be modified or added to normal commit not fetched from tfs.(less probable) the commits from tfs has already been fetch by someone else in another git repository from where you have fetch. And the commits have been found already in your repository and not fetched again. But in this case, you should see them in the 'default' remote history...One other thing I forgot to mention is that I have added another git remote to repository, and I have merged what's in refs/remotes/tfs/default with my branch that I have retrieved from the git repository. Not sure if that caused something in git-tfs to break..perhaps. let's check your metadata...the second thing is the last error it gives me. Can anyone explain what is going on with the CleanupWorkspaceDirectory error?That's not a problem. During cleanup (after all the important work was done) , git-tfs try to delete the temporary workspace directory. Because you fetched no changesets, the directory is not created and can't be found."
"I get this all the time, as there are 3 people coding the app. It seems to relate to a mix of file additions and deletions by various people but frankly not sure. Maybe a git guru will chime in here, but this is how I fix things.First close the project in Xcode and quit Xcode, and in Terminal navigate to the root directory of your project. Run 'git add' for any conflicted files you had to correct (who came up with 'add' for this???).Run 'git status' and insure all looks well.Now for the magic incantation: git commit -i -m ""hoping and praying"" . - the magic option is -i -  with it the commit always succeeds (for me).Now you can restart Xcode and reopen the project."
"First, check git status.As the OP mentions, The actual issue was an unresolved merge conflict from the merge, NOT that the stash would cause a merge conflict.That is where git status would mention that file as being ""both modified""Resolution: Commit the conflicted file.You can find a similar situation 4 days ago (March 13th, 2012) with this post ""‰Û÷Pull is not possible because you have unmerged files‰Ûª""julita@yulys:~/GNOME/baobab/help/C$ git stash pophelp/C/scan-remote.page: needs mergeunable to refresh indexWhat you did was to fix the merge conflict (editing the right file, and committing it):See ""How do I fix merge conflicts in Git?""What the blog post's author did was:julita@yulys:~/GNOME/baobab/help/C$ git reset --hard origin/mallard-documentationHEAD is now at ff2e1e2 Add more steps for optional information for scanning.I.e aborting the current merge completely, allowing the git stash pop to be applied.See ""Aborting a merge in Git"".Those are your two options.If anyone is having this issue outside of a merge/conflict/action, then it could be the git lock file for your project causing the issue.git reset     fatal: Unable to create '/PATH_TO_PROJECT/.git/index.lock': File exists.rm -f /PATH_TO_PROJECT/.git/index.lockgit resetgit stash pop"
"It's the one in the middle : BASE.In fact, BASE is not the common ancestor, but the half-finished merge where conflicts are marked with >>>> and <<<<.You can see the file names on the top of meld editing window.See the screenshot hereYou can edit the BASE file as you want with or without using meld commands.You can also get rid of meld and just edit the file with your favorite text editor.  The code between <<<< HEAD and ===== markers is the one of your local file before the merge. The code between ==== and >>>> <branch name> is the one of the remote file.Meld has a hidden 3-way merge feature activated by passing in the 4th parameter:meld $LOCAL $BASE $REMOTE $MERGEDThe right and left panes are opened in read-only mode, so you can't accidentally merge the wrong way around. The middle pane shows the result of merge. For the conflicts it shows the base version so that you can see all the important bits: original text in the middle, and conflicting modifications at both sides. Finally, when you press the ""Save"" button, the $MERGED file is written - exactly as expected by git.The ~/.gitconfig file I use contains the following settings:[merge]tool = mymeldconflictstyle = diff3[mergetool ""mymeld""]cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE $MERGEDthis opens meld with 3 tabs, 1st and 2nd tab containing the simple diffs I'm trying to merge, and the 3rd tab, open by default, shows the 3-way merge view.Now, the reason the feature is hidden is that it's not polished enough yet. It's very useful as it is now, but Kai Willadsen, the meld author, pointed to few wrinkles that need ironing out. For example there's no GUI to start the 3-way merge mode, command line syntax is a bit arcane, and such. If you speak python and have some time on your hands - you know what to do.Edit:In newer versions of Meld, the synax has changed slightly. This was in the comments, but it belongs in the answer.The meld command now uses the --output option, so the last line from the snippet above should be:cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE --output $MERGEDThere are 4 files involved:$LOCAL The file on the branch where you are merging; untouched by the merge process when shown to you$REMOTE The file on the branch from where you are merging; untouched by the merge process when shown to you$BASE The common ancestor of $LOCAL and $REMOTE, ie. the point where the two branches started diverting the considered file; untouched by the merge process when shown to you$MERGED The partially merged file, with conflicts; this is the only file touched by the merge process and, actually, never shown to you in meldThe $MERGED file is the one that contains the <<<<<<, >>>>>>, ===== (and, maybe, ||||||) markers (that delimit conflicts). This is the file that you edit manually to correct conflicts.The manual conflicts editing and the visual conflicts editing are done on different files and presented different informations.When using the mergetool (assume meld), the files that are seeing therein are: $LOCAL, $BASE, $REMOTE. Note that you don't see the $MERGED file, although this is passed as a hidden parameter to meld to write the result of the edit there.In other words, in meld, you are editing the file in the middle, the $BASE file, and you pick all the changes from left or from the right manually. It is a clean file, not touched by the merge process. The only glitch is that, when you save, you do not save into the $BASE file, but in the fourth hidden parameter of meld, that is the $MERGED file (that you do not even see). The $BASE file does not contain any conflicts or partial successful merges because it is not the $MERGED file.In the visual editing, when presenting to you the $BASE file (instead of the $MERGED file) git basically discards all its attempts to do the merging (those attempts are visible, if you want, in the $MERGED file) and lets you to completely do the merging from scratch.The bottom line is that in manual and visual merging conflicts you are not looking at the same files, but the final result is written in the same file (that is the $MERGED file).The manual correction of the conflicts is done on $MERGED because git has no mean to present you three files, so it squashes the information from the three files ($LOCAL, $BASE, $REMOTE) in that $MERGED file.But the visual tools have the means to show you three files: they show you the $LOCAL, $BASE, $REMOTE files. You are picking changes from the $LOCAL and $REMOTE files and you are bringing those into the $BASE file, completely re-building and even overwriting the failed attempt of merging that is the $MERGED file.I found that none of the default files shown was being saved.meld was showing $LOCAL, $REMOTE and $BASE by default. To make it work, I needed to make meld show $MERGED instead of $BASE. Putting this in my ~/.gitconfig fixed it for me:[merge]        tool = mymeld[mergetool ""mymeld""]        cmd = meld ""$LOCAL"" ""$MERGED"" ""$REMOTE""I'm using Arch, with:$ git --versiongit version 1.8.2$ meld --versionmeld 1.7.1Cosmin's solution works, but the $BASE file is updated--not $MERGED. This will update the $MERGED file:Meld: v1.8.4[merge]  conflictstyle = diff3  tool = mymeld[mergetool ""mymeld""]  cmd = meld --auto-merge --output $MERGED $LOCAL $BASE $REMOTE --diff $BASE $LOCAL --diff $BASE $REMOTEWith Meld 1.7 the Solution by Tomek Bury does not work anymore.The default settings didn't satisfy me:Instead for Meld >=1.7 I suggest one of two other solutions.First solution: meld $LOCAL $BASE $REMOTE --auto-mergeSecond solution: meld $LOCAL $MERGED $REMOTE.gitconfigCopy & paste this in your .gitconfig file to get the solutions as described above:[merge]    tool = meld16[mergetool ""meld17""]    # use this for Meld >=1.7    # see http://stackoverflow.com/a/22911793/859591    # second solution:    cmd = meld $LOCAL $MERGED $REMOTE    # first solution:    #cmd = meld $LOCAL $BASE $REMOTE --auto-merge[mergetool ""meld16""]    cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE --output $MERGED[include]    # requires git v1.7.10+    path = .gitconfig.localCopy & paste this in a .gitconfig.local file to set meld17 or meld16 only for this machine in case you use your .gitconfig on multiple machines:# This is a host specific config file!# Note that git 1.7.10+ is needed# http://stackoverflow.com/a/9733277/859591[merge]    tool = meld17For some reason newest versions of meld does not display marker lines added for conflicts (<<<<<<<, =======, >>>>>>>) . If you want to see those lines, you should to install meld v 1.3.3 or previous.Please see Saad's answer for the correct answer.With meld 1.8.1 on Ubuntu I was getting thewrong number of arguments supplied to --diffand adding the --output before $MERGED fixed it for me:[mergetool ""mymeld""]cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE --output $MERGED"
"EGitThe recursive merge strategy needed for this is the default since EGit 3.0 (see bug 380314).In case you are using an older version, see the download page for upgrading.WorkaroundsAlternatively, try resetting to your last local commit before you made the last merge, and then merge with origin/master. Then if you made more changes on top of the original merge, cherry-pick these.Another possibility would be to do the merge using C git (on the console), it can handle that situation.If you can't or don't want to update to the latest EGit, then the most reliable work around is (as robinst suggests) to recover from this state and then merge on the command line.Note that it is important to recover from this properly, as a Multiple merge bases problem leaves your repository in the middle of a merge state.If you don't recover properly then the next commit you do will result in a merge commit which silently reverts all remote changes!In other words, when you push, only your local changes will end up on the remote. All of the remote changes will look like they have been merged in, but will have been ignored, just like doing git merge -s ours before doing a push.You can check to see if you are in a merge state by looking for MERGE_HEAD and MERGE_MSG files in your .git folder. Just doing a git status tells you nothing to commit:$ git status# On branch master# Your branch and 'origin/master' have diverged,# and have 4 and 25 different commit(s) each, respectively.#nothing to commit (working directory clean)$ cat .git/MERGE_HEAD 1234567890abcdef1234567890abcdef12345678$ cat .git/MERGE_MSG Merge remote branch 'origin/master'You can then return to the state you were in before you attempted the merge from EGit.$ git reset --hardHEAD is now at 0123456 Blah blah blah$ cat .git/MERGE_HEAD .git/MERGE_MSGcat: .git/MERGE_HEAD: No such file or directorycat: .git/MERGE_MSG: No such file or directoryAs always, this will lose any and all changes made since the last commit.Note: This is why it is a good idea to commit all changes before doing a pull or a merge.If the pull or merge fails and your repository is left in an inconsistent state, you want to be able to reset back to a known good point before trying the pull/merge again.As an alternative to committing before a pull/merge, you can also stash your changes, perform the merge and then unstash them. This is effectively like a mini rebase of uncommitted changes on top of the merge, but with the safety net of a pre-merge commit.Note that you could also do a git merge --abort, but on some versions of git, this recommends that you commit your changes, which you should not do if you want to avoid your remote changed being silently reverted (which you definitely don't want).You can now re-run the merge you originally wanted using the git command line, which will use the recursive resolve strategy and should thus work properly:$ git merge origin/masterAuto-merging ......Merge made by recursive....$ git --no-pager log -1 --oneline2345678 Merge remote branch 'origin/master'"
"git checkout -- testFile.java will overwrite local file with the one in the repo. git checkout --help if you need more info.As mardavi already mentioned on his answer, if you want to overwrite the local file with the version of the remote, you can do a simple git checkout -- testFile.java. However, this will only update the file with the version from the remote that your .git folder has information about. Since you've mentioned that you tried to do a git pull, I'm assuming you want to update your local repository with a remote that might have been updated. If this is the case, you should do the following:Overwrite the testFile.java file with the version that your .git folder has information about:git checkout -- testFile.javaFetch data from the remote repository to update your database and merge it with your local branch. This is actually a description of the git-pull command. So you simply execute:git pullAnd now your local branch should be up to date and the testFile.java has the newest changes from the remote server.I recommend the following reading: Git Branching - Remote Branches"
"This is where you went wrong:git rebase origin/sprint_branch1You should not rebase published branches. This command should have been agit merge origin/sprint_branch1In general you should be careful with git rebase ‰ÛÒ there seems to be some kind of religion around it, even though it is a very dangerous tool.How can you proceed?If you are absolutely sure nobody else is going to touch the feature branch again and nobody did any changes to it since your last pull, you can just dogit push -fThat will overwrite the HEAD on the server with your HEAD.If you are sure that there were no changes since your last pull, but other people use your branch, you can do the above and tell everybody with a copy of your branch that they need to rungit fetch origingit checkout feature_branchgit reset --hard origin/feature_branchThat will erase all their local changes since their last push though.The safest way would be for you to rename your local feature_branch to somethengi else, find the commits you added, branch of the current origin/feature_branch and cherry-pick all your changes.Run gitk feature_branch origin/feature_branch to get an understanding of what is going on.Git says hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')hint: before pushing again.You might just need to use the rebase workflow to pull rebase from the remote branch after you have made the commit, then push to remote.git commit -m 'add another date again'git pull --rebaseThis may lead to rebase conflicts which you would have to solve and then continue rebase. This is primarily cause the version of tree in the sprint_branch1 is behind the feature_branch.You should make sure the right commits are going in as well. In a general sense when you are merging with the sprint_branch1, its better to do agit checkout feature_branchgit merge sprint_branch1This instead of rebase, since rebase rewrites your commits which could cause issues.After you merge if you just push it should work fine.EDIT 1: If you need to rebase and still avoid this error, you can usegit push --force origin feature_branchHowever this is not recommended especially in distributed teams, as it will rewrite the remote branch with your local branch irrespective of any changes others might have pushed to it."
"The index that is returned by merging the trees together is not bound to the repository. Unfortunately, the operation to write the index as a tree to a specific repository (git_index_write_tree_to) is not exposed yet through Objective-Git.You probably want to open a ticket in their issue tracker."
"The error from git pull is complaining that it can't find the branch that you've told it to merge from.  I suspect that this is because you have tagopts = --tags configured for origin, and with that option, git fetch doesn't fetch branch heads.  Try removing that line, and running git pull again.To explain the pull / fetch-and-merge difference: when you manually run git fetch, it doesn't get the --tags options, so it does fetch the branch heads.  So, after that point, origin/master exists and can be merged from.One other note might be worth adding: it's more normal to use git merge origin/<branch-name>, which is more explicit than git merge origin.  In that more unusual case, git is interpreting origin as the branch refs/remotes/origin/HEAD - i.e. the current branch (or commit) in the remote repository origin the last time you fetched from there.  It's probably better to stick with git merge origin/<branch-name> to avoid confusion."
"You need to have common ancestor before pushing, the easiest way is to do git pull (or git pull --rebase if you want to avoid merge commit and rebase is not an issue for you).The solution to your problem is:""Commit"" the changes so that these are committed to your local repository.Then ""Pull"" the code from github/git serverThen ""Push"" the code to github/git server and you will not face any issue.Read more under heading ""Pushing a Branch"" in the following url:Dealing with ""non-fast forward rejects""Hope it helps.ThanksI had this exact problem, it was due to the following:A local branch in my machine (with different origin) that was not updated (and had been modified by another user). You must move to the branch that has not been updated (git checkout [branch in question]) and do a git pull. That solved my problem. In this particular case, due to this message""! [rejected]        master -> master (non-fast-forward)!""You must move to the master branch (git checkout master) do a git pull, then move back to whatever branch you are working on (git checkout whateverBranch) and now you should be able to do a push without problems. I'm not positive on why this happens; it may be that the nature of git push is to check all local branches that are not properly updated when doing a push."
"I found a solution: apply the troubled commit's patch manually and add it to the index.$ patch -p1 < .git/rebase-apply/patch patching file bar.txtpatching file baz.txt$ git add bar.txt baz.txt$ git rebase --continueApplying: bar bazApplying: -barYou need to commit before attempting to rebase.  It will work sometimes if you don't, but you shouldn't do that.If you're uncomfortable committing for some reason, you could at least use stash (which does roughly the same thing).git rebase is working correctly. It is protecting your untracked file from being destroyed while visiting a commit that wants to write out a file with that same pathname.There does not seem to be a way to retry just the most recent step of the rebase. Usually when a rebase pauses, it will leave conflicts in the index. But in this case, it can not flag this problem in the index because doing so would convert your untracked file into a tracked file. This is probably a bit of a rough spot in the UI of git rebase. You could dig into the directory it uses to store its internal state (.git/rebase-apply) and manually apply the ‰ÛÏcurrent‰Ûù patch, but aborting and restart is probably easier (but maybe not faster if you are in the middle of rebasing a very long series).If the addition of bar.txt is considered a mistake, then you might consider using git rebase -i to tease apart and drop the addition and removal of bar.txt since you are rewriting history anyway.You will still run into the conflict, but the methods below can also be applied with git rebase -i. The script at the end would have to be split into two parts (‰ÛÏsetup temp/‰Ûù and ‰ÛÏincorporate rebase result‰Ûù since an interactive rebase will usually require multiple commands between those two sections.Move the conflicting file aside temporarily and redo the rebase.mv bar.txt +bar.txtgit rebase --abortgit rebase masterIf you expect many such conflicting files then you might consider doing your rebase in a separate clone where you can be certain that you will not have any untracked files. Perhaps the trickiest part is checking that your untracked files do not conflict with the result of the rebase (the git checkout rebased-topic accomplishes this; it aborts if the untracked files conflict with the rebase result).: ""Note: will destroy:     * 'rebased-topic' branch:     * 'temp' directory""( set -x &&  : '*** Clearing temp/' &&  rm -rf temp/ &&  : '*** Making sure we have topic checked out' &&  git checkout topic  : '*** Cloning into temp/' &&  git clone . temp &&   : '*** Rebasing topic onto master in temp/ clone' &&  ( cd temp &&  git rebase origin/master  ) &&  : '*** Fetching rebase result from topic/ into local rebased-topic branch' &&  git fetch -f temp topic:rebased-topic &&  : '*** Checking rebased-topic for conflicts with untracked files' &&  git checkout rebased-topic &&  : '*** Resetting topic to tip of rebased-topic' &&  git branch -f topic rebased-topic &&  : '*** Returning to topic branch' &&  git checkout topic &&  : '*** Deleting rebased-topic branch' &&  git branch -d rebased-topic &&  : '*** Deleting temp/' &&  rm -rf temp/)"
"It seems that a swap file created by vi has been somehow left undeleted.Remove .git/.MERGE_MSG.swp and attempt the git merge again."
"Can you try with:git merge -s resolve branch_AAlso, have you tried looking at similar questions here:git rename/delete confusiongit divergent renaming"
"Running git stash pop or git stash apply is essentially a merge. You shouldn't have needed to commit your current changes unless the files changed in the stash are also changed in the working copy, in which case you would've seen this error message:error: Your local changes to the following files would be overwritten by merge:       file.txtPlease, commit your changes or stash them before you can merge.AbortingIn that case, you can't apply the stash to your current changes in one step. You can commit the changes, apply the stash, commit again, and squash those two commits using git rebase if you really don't want two commits, but that may be more trouble that it's worth.I just discovered that if your uncommitted changes are added to the index (i.e. ""staged"", using ""git add ...""), then ""git stash apply"" (and, presumably, ""git stash pop"") will actually do a proper merge. If there are no conflicts, you're golden.  If not, resolve them as usual with ""git mergetool"", or manually with an editor.To be clear, this is the process I'm talking about:mkdir test-repo && cd test-repo && git initecho test > test.txtgit add test.txt && git commit -m ""Initial version""# here's the interesting part:# make a local change and stash it:echo test2 > test.txtgit stash# make a different local change:echo test3 > test.txt# try to apply the previous changes:git stash apply# git complains ""Cannot apply to a dirty working tree, please stage your changes""# add ""test3"" changes to the index, then re-try the stash:git add test.txtgit stash apply# git says: ""Auto-merging test.txt""# git says: ""CONFLICT (content): Merge conflict in test.txt""... which is probably what you're looking for.As suggested by @Brandan, here's what I needed to do to get arounderror: Your local changes to the following files would be overwritten by merge:       file.txtPlease, commit your changes or stash them before you can merge.AbortingFollow this process:git status  # local changes to `file`git stash list  # further changes to `file` we want to mergegit commit -m ""WIP"" filegit stash popgit commit -m ""WIP2"" filegit rebase -i HEAD^^  # I always use interactive rebase -- I'm sure you could do this in a single command with the simplicity of this process -- basically squash HEAD into HEAD^# mark the second commit to squash into the first using your EDITORgit reset HEAD^And you'll be  left with fully merged local changes to file, ready to do further work/cleanup or make a single good commit. Or, if you know the merged contents of file will be correct, you could write a fitting message and skip git reset HEAD^."
"To discard changes in a specific file you can use git checkout -- <file>: I think this would solve your problem:git checkout -- abc.jsOr you can resolve the conflict, commit the changes and reset head afterwards. The last commit will be removed:A-B-C    ^  feature-examplegit reset --hard HEAD~1A-B  ^  feature-example"
"As the error message says: git pull before you try to git push. Apparently your local branch is out of sync with your tracking branch.Depending on project rules and your workflow you might also want to use git pull --rebase.Try this: git push -f origin masterI've just received this error.I created a github repository after creating my local git repository so I needed to accept the changes into local before pushing to github. In this case the only change was the readme file created as optional step when creating github repository.git pull https://github.com/*username*/*repository*.git masterrepository URL is got from here on project github page : I then re-initialised (this may not be needed)git initgit add .git commit -m ""update""Then push : git pushIf git pull does not help, then probably you have pushed your changes (A) and after that had used git commit --amend to add some more changes (B). Therefore, git thinks that you can lose the history - it interprets B as a different commit despite it contains all changes from A.             B            /        ---X---AIf nobody changes the repo after A, then you can do git push --force.However, if there are changes after A from other person:             B            /        ---X---A---Cthen you must rebase that persons changes from A to B (C->D).             B---D            /        ---X---A---Cor fix the problem manually. I didn't think how to do that yet.Try this command: ""git pull origin master""It worked for me.Check this link: https://help.github.com/articles/dealing-with-non-fast-forward-errorsi had created new repo in github and i had the same problem, but it also had problem while pulling,  so this worked for me.but this is not advised in repos that already have many codes as this  could mess up everythinggit push origin master --force! [rejected]        master -> master (non-fast-forward)Don‰Ûªt panic, this is extremely easy to fix. All you have to do is issue a pull and your branch will be fast-forward:$ git pull myrepo masterThen retry your push and everything should be fine:$ git push github masterThe only i was able to resolve this issue was to delete the local and git repo and create the same again at both ends. Works fine for now.You need to do git branchif the output is something like:* (no branch)masterthen dogit checkout masterMake sure you do not have any pending commits as checking out will lose all non-committed changes.I had this problem on a development machine. The dev branch was pushing fine but thethe master branch gave me (while git pushing when being on the dev branch):! [rejected]        master -> master (non-fast-forward)So I tried:git checkout mastergit pullWhich gave me:You asked me to pull without telling me which branch youwant to merge with, and 'branch.master.merge' inyour configuration file does not tell me, either.I found out the master branch was missing from .git/config and added:[branch ""master""]    remote = origin    merge = refs/heads/masterAfterwards git push also worked fine on the dev branch."
"Looks like you have a space in there after the -X, try:git merge -s recursive -Xtheirs developmentgit merge allows to use a merge strategy saying that in case of conflicts ""our changes"" always win or ""their changes"" always win. Use eithergit merge -X ours ...or git merge -X theirs ..."
"It's not a Git error message, it's the editor as git uses your default editor.  To solve this:press ""i"" write your merge message press ""esc"" write "":wq""then press enterActually it's not an error! It means you should enter some message to mark this merge. My OS is Ubuntu 14.04.If you use the same OS ,you just need to do this as follows:type some message""Ctrl+C+O""type the file name(such as ""Merge_feature01"") and press Enter""Ctrl+X"" to exitNow if you go to .git and you will find the file ""Merge_feature01"", that's the merge log actually."
"Hm, that's awkward. Recreating the branch would've been my first try too. Failing that, you should be able to remove the .git/rebase-merge directory, which contains the rebase state. (Move it to the side instead to be safe, if you want.) Once that's gone, Git shouldn't have any way to know there was a rebase in progress. Have a look at your branches to make sure you haven't managed to lose any commits in the process, and you'll be good!check the git status and see if you not checkout any branch after last rebase then you are not on any branch.becase rebase transfer you to a non branch area, so you have to abort the last rebase by using git rebase --abort command and checkout a branch to go on the branch and start new rebasingI just got a very similar error during an attempted rebase that did not fail. None of the tips above helped. Here's what I was seeing:$ git pull --rebasewarning: refname 'xport1' is ambiguous.First, rewinding head to replay your work on top of it...Fast-forwarded xport1 to 98b787b0ea1f7f6771a5b1b56c7e8cc67b84c242.error: Ref refs/heads/xport1 is at 98b787b0ea1f7f6771a5b1b56c7e8cc67b84c242 but expected 3865d63ffb3a1a495363bfbd9ebb089e16152839fatal: Cannot lock the ref 'refs/heads/xport1'.Could not move back to refs/heads/xport1It turns out that if a reference name is ambigious, the rebase will fail, at least on git version 1.7.10.2 (Apple Git-33).I poked around and saw I had accidentally created a tag with the same name as the branch I was trying to rebase on. Deleting the tag got rid of this error."
"You quote the following error moessage in your question:your local changes to the following files would be overwritten by mergeThis error message is essentially saying that git is stopping you from potentially losing work.  You have some changes in your working tree that you haven't committed yet, and the pull would modify those files - this might end up with you losing your local changes.  Once you've committed your changes to those files, the pull will work.  (Or, you could skip the ""fetch"" stage of git pull and just run git merge origin/master to try the merge stage again.)  Martin Ogden's answer gives an example of using git stash as an alternative, which is more suitable if you're not ready to commit your work yet.The latter error message is:To prevent you from losing history, non-fast-forward updates were rejected.Basically, you're only allowed to push if the commit you're pushing already contains the history of branch you're pushing to.  The usual solution is to pull first.  This is another error message that is preventing you from losing work - you wouldn't (in general) want to wipe out the work that other people have pushed to that branch.You could either:Add / commit local changes before pulling from remote repositoryStash local changes before the pull and pop the local changes back in after the pull:git stash --include-untrackedgit pullgit stash pop"
"git checkout accepts a --ours or --theirs option for cases like this. So if you have a merge conflict, and you know you just want the file from the branch you are merging in, you can do:$ git checkout --theirs -- path/to/conflicted-file.txtto use that version of the file. Likewise, if you know you want your version (not the one being merged in) you can use$ git checkout --ours -- path/to/conflicted-file.txtYou have to resolve the conflict manually (copying the file over) and then commit the file (no matter if you copied it over or used the local version) like thisgit commit -a -m ""Fix merge conflict in test.foo""Git normally autocommits after merging, but when it detects conflicts it cannot solve by itself, it applies all patches it figured out and leaves the rest for you to resolve and commit manually. The Git Merge Man Page, the Git-SVN Crash Course or this blog entry might shed some light on how it's supposed to work.Edit: See the post below, you don't actually have to copy the files yourself, but can use git checkout --ours -- path/to/file.txtgit checkout --theirs -- path/to/file.txtto select the version of the file you want. Copying / editing the file will only be necessary if you want a mix of both versions.Please mark mipadis answer as the correct one.You can also overcame this problem withgit mergetoolwhich causes git to create local copies of the conflicted binary and spawn your default editor on them:{conflicted}.HEAD{conflicted}{conflicted}.REMOTEObviously you can't usefully edit binaries files in a text editor. Instead you copy the new {conflicted}.REMOTE file over {conflicted} without closing the editor. Then when you do close the editor git will see that the undecorated working-copy has been changed and your merge conflict is resolved in the usual way.To resolve by keeping the version in your current branch (ignore the version from the branch you are merging in), just add and commit the file:git commit -aTo resolve by overwriting the version in your current branch with the version from the branch you are merging in, you need to retrieve that version into your working directory first, and then add/commit it:git checkout otherbranch theconflictedfilegit commit -aExplained in more detailFrom the git checkout docsgit checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <paths>... --ours--theirs  When checking out paths from the index, check out stage #2 (ours) or #3 (theirs) for unmerged paths.The index may contain unmerged entries because of a previous failed merge. By default, if you try to check out such an entry from the index, the checkout operation will fail and nothing will be checked out. Using -f will ignore these unmerged entries. The contents from a specific side of the merge can be checked out of the index by using --ours or --theirs. With -m, changes made to the working tree file can be discarded to re-create the original conflicted merge result.I came across a similar problem (wanting to pull a commit that included some binary files which caused conflicts when merged), but came across a different solution that can be done entirely using git (i.e. not having to manually copy files over).  I figured I'd include it here so at the very least I can remember it the next time I need it. :)  The steps look like this:% git fetchThis fetches the latest commit(s) from the remote repository (you may need to specify a remote branch name, depending on your setup), but doesn't try to merge them.  It records the the commit in FETCH_HEAD% git checkout FETCH_HEAD stuff/to/updateThis takes the copy of the binary files I want and overwrites what's in the working tree with the version fetched from the remote branch.  git doesn't try to do any merging, so you just end up with an exact copy of the binary file from the remote branch.  Once that's done, you can add/commit the new copy just like normal.mipadi's answer didn't quite work for me, I needed to do this :git checkout --ours path/to/file.binor, to keep the version being merged in:git checkout --theirs path/to/file.binthengit add path/to/file.binAnd then I was able to do ""git mergetool"" again and continue onto the next conflict.I've come across two strategies for managing diff/merge of binary files with Git on windows.Tortoise git lets you configure diff/merge tools for different file types based on their file extensions. See 2.35.4.3. Diff/Merge Advanced Settings http://tortoisegit.org/docs/tortoisegit/tgit-dug-settings.html. This strategy of course relys on suitable diff/merge tools being available.Using git attributes you can specify a tool/command to convert your binary file to text and then let your default diff/merge tool do it's thing. See http://git-scm.com/book/it/v2/Customizing-Git-Git-Attributes. The article even gives an example of using meta data to diff images.I got both strategies to work with binary files of software models, but we went with tortoise git as the configuration was easy."
"It means you're trying to merge changes from somewhere, but the changes include modifications to a file that's dirty (currently modified in your working tree). You need to commit your outstanding changes, or stash them, pull/rebase/merge/whatever you're doing to update, and unstashLog into your production/destination server, cd to the directory containing your application and execute those two commands.1. Reset to the latest versiongit reset --hard HEAD2. Pull the changesgit pull origin masterAs others have pointed out, needs update message means that the file is dirty or, in other words, outdated. But instead of doing reset and starting all over again, what can be done is simply git status and then git add <file> if it's on the changed list. Because you could already add the file before, but then changed it. This happened to me, and with this simple add I have solved the problem.Like the answer to the linked other question says, the message simply means that you have outstanding changes.  You also get this e.g. if you stage some changes with git add, then change your mind and do git reset HEAD file with the intention of starting over."
"You probably are not ignoring binary and local configuration files. You have to create the .gitignore file and list in it what you don't want to add to the repo.You can find more information hereAlright! We finally solved the issue. Apparently the problem was with the .gitignore file and how it was created. I had just made a file in notepad before, but I guess it wasn't being picked up. All I did was recreate it in the git bash using the following:touch .gitignorethen adding it and committing. Thanks for all of the suggestions all, definitely got me going in the right direction."
"If you do not have any uncommitted change then do a hard reset from  Team > reset > (select Hard option)do a pull request again. find all the conflicted file(file with red diamond icon) Resolve any conflict (manually edit the file, or use merge tool), then right click on all(one by one ) conflicting files, select ""team"", then select ""Add to Index"". (if every conflict is resolve then there should not be any conflict(red diamond) icon. before trying to commit anything make sure all the conflict is revolved)now you should be able to commit to git againI am not exactly sure what is causing the conflict, but your partner should be able to see which files are conflicting by looking for a red diamond inside the Package Explorer. Resolve any conflict (manually edit the file, or use merge tool), then right click on all conflicting files, select ""team"", then select ""Add to Index"". After that, your partner should be able to commit to git again.I hope this helps!I know this is an old post but I ran into this problem yesterday. I had this Repository State: Conflicts message when I was trying to commit after removing all the conflicts. As I couldn't see anything wrong in Eclipse, I opened GitHub Desktop and it did show me straight away what was wrong. I work on MacOS X and there was a .DS_Store file in the workspace. This was the file where the conflict was. Eclipse wouldn't show it but thanks to GitHub Desktop, I managed to remove the conflict and then I could commit my changes in Eclipse. I hope it helps."
"After a few more hours of testing I found the issue.  The problem was that I was sending Windows line ending vs linux(""\r\n"" vs ""\n"").If the file specified with %A is updated and includes Windows Line endings you will get the above error.After adding this line of code everything worked as expected.       System.IO.StreamWriter outFile = new System.IO.StreamWriter(outFileName, false);-->    outFile.NewLine = ""\n"";**       foreach (LineItem li in L_Theirs)       {             outFile.WriteLine(li.Line);       }"
"Since you have already edited the conflict file, you just need git add mod/assign/locallib.phpthen git cherry-pick --continueYou attempted to do a merge (via either git merge or git pull) and have files that have conflicts that are not resolved.  If you do git status, you will likely see file(s) listed as being 'changed by both'.  You need to take care of this before you do anything else.  Do git mergetool and it will bring up the files one at a time.  Fix the file so that the conflicts are resolved and then you should be able to proceed."
"The errors are saying that your repo has changes that you don't have yet, because you added the README to the remote one when you set it up. If you've already got local changes or a local repo, you need to initialise an empty repository on Github, and then you can push. You'll have to add the remote though, something like git remote add https://github.com/username/repo.git.Downloading the README manually and adding and committing will probably produce a different commit ID, and put it at a different point in the commit history, which is why it's not detected as the same one.1) Why does it not work to initialize a remote repository on github with a README, and then try to connect the github repo with a previously existing existing local repo?When Github adds the README it commits it, and then this is the first commit. If you have a local repo, the first commit locally will be different, so they won't match up.2) Why could I not pull when I tried to fix this error? Probably because of the above, or the remote reference didn't add in properly, depending on how you added it.Generally, if you're creating locally first, you would go:# Set up the Git repo locally, with no commits in it.git init   # Add a new file.git add file1# Commit the change.git commit# Tell Git where your remote is.git remote add origin https://github.com/user/repo.git # Push the default 'master' branch to the above remote called 'origin'.git push origin master Or if it already exists on Github or a different remote server: # Download the existing repo, with all of the history.git clone https://bitbucket.org/user/repo.git# Add a new file or modified file.git add file1# Commit the change.git commit# Push to the remote that you downloaded from with clone on branch master.git push origin master3) Why could I still not push and initialize the connection to my github remote after I added the README from github to my local repository manually?That's not how the changes work with Git; they're a big list of sequential commits in a chain. Each commit has one or two parent commits, and the commit IDs aren't sequential either.See the Git website for some diagrams on the branching and commits here: http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is4) How do I create a github repo with an initialized README and connect it to a local repo WITHOUT causing the errors below?If you have an existing local repo you shouldn't create one with the initialised README. If it's blank on Github when you create it, you can push up your existing repository with no errors. If it has the README, you have to git clone the Github repo, and then add your changes to that folder, commit the changes, and then push. Adding the README is for when you have a new project and you're creating the Github repo first, and then you clone the project and start working in that location. If you have an existing repository locally don't use that option.Let's say you have a local repository:$ git log --oneline8e7e8d4 hello.txtThe local repository has a single file:$ lshello.txtNow you create a new repository via the GitHub web interface and initialize it with a README file.  At this point, your two repositories have divergent histories.  You can add the remote repository to your local repository:$ git remote add origin git@github.com:larsks/samplerepo.gitBut attempting to pull from this repository will yield an error:$ git pullwarning: no common commitsremote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From github.com:larsks/samplerepo * [new branch]      master     -> origin/masterThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for detailsThe important part of this error message is:There is no tracking information for the current branch.Please specify which branch you want to merge with.This is git telling you that while your current branch in your local repository is not associated with any branch in the remote repository, so it doesn't know what to do.  You can provide it with a remote branch name explicitly:$ git pull origin masterThis will create a merge commit (and will probably prompt you for a commit message).  Once the commit is complete, you can see that the local history now contains both our local commit as well as the commits from the GitHub repository:$ git log --oneline7f1231a Merge branch 'master' of github.com:larsks/samplerepo5f0d62e Initial commit8e7e8d4 hello.txtAnd our working directory now has a merged set of files:$ lshello.txt  README.mdAnd we can push this to our remote repository.  Just typing git push will result in an error similar to what we saw earlier:$ git pushfatal: The current branch master has no upstream branch.To push the current branch and set the remote as upstream, use    git push --set-upstream origin masterSo:$ git push --set-upstream origin masterCounting objects: 6, done.Delta compression using up to 8 threads.Compressing objects: 100% (3/3), done.Writing objects: 100% (5/5), 543 bytes | 0 bytes/s, done.Total 5 (delta 0), reused 0 (delta 0)To git@github.com:larsks/samplerepo.git   5f0d62e..7f1231a  master -> masterBranch master set up to track remote branch master from origin.And now we're all in sync.Update: Regarding your questions about --set-upstream:When you checkout a local branch that matches the name of a remote branch, git will set up the upstream association for you automatically.  For example, if the remote repository in this example also had a branch ""development"", and I did this after adding the remote:$ git checkout developmentI would see:Branch development set up to track remote branch development from origin.Switched to a new branch 'development'On the other hand, if you already have a branch checked out when you add the remote, as in the first part of this example, you need to use --set-upstream to tell git that you want your local branch to track the remote branch.As an aside, note that there's no requirement that your local branch match the name of a remote branch.  You are free to do something like:git checkout mastergit push --set-upstream origin patchesSo that from this point on, git push on your master branch will push to the remote patches branch."
"This worked for me using msysGit on windows 7:git config --global merge.tool p4mergegit config --global mergetool.p4merge.cmd 'p4merge $BASE $LOCAL $REMOTE $MERGED'Not sure why but the quoting screwed things up for me.You will see here my config for DiffMerge or KDiff3.  Based on that, I would recommend for p4merge:git config --global merge.tool mergegit config --global mergetool.merge.cmd ""merge.sh \""$PWD/$LOCAL\"" \""$PWD/$BASE\"" \""$PWD/$REMOTE\"" \""$PWD/$MERGED\""""and merge.sh being a wrapper (copied in a directory referenced by your PATH environment variable), able to take into account the case where no BASE exists.(when a file is created in two different branches being then merged, there would be no common ancestor for that file)#!/bin/sh# Passing the following parameters to mergetool:#  local base remote merge_resultalocal=$1base=$2remote=$3result=$4if [ -f $base ]then    p4merge.exe -dl ""$base"" ""$alocal"" ""$remote"" ""$result"" else    p4merge.exe -dl ""$result"" ""$alocal"" ""$remote"" ""$result"" fiYou may note:the use of PWD in the config of the mergethe use of ""merge"" as name of the merge.tool name (since the actual tool is called in the merge.sh script, where you can switch between any number of merge tool you want)the use of double quotes around $base, $alocal, $remote, $result within the scriptthe conditional path for calling the tool, based on the existence of a ""base"" file.  the need to always have 3 files to merge as parameters (even when 'base' does not exist...)Just tested it (it turns out, you can download and install only p4merge -- section Client/Visual Merge Tool --, even if you do not have any other P4 product installed).With the settings describe above, MSysGit1.6.3, DOS session or Git bash session:It just worksTM.Update msysgit 1.7.xBenjol mentions in the comments:p4merge is now supported natively by msysgit. This means you can just do:git config --global merge.tool p4merge# and I recommend git config --global mergetool.keepBackup false"
"The error The following untracked working tree files would be overwritten by merge is happening because there is a app/models/user.rb file in the folder which is currently not added to any branch. You can verify this by running the git status command; it should show an output similar to the following:$ git status# On branch master## Untracked files:#   (use ""git add <file>..."" to include in what will be committed)##   app/models/user.rbno changes added to commit (use ""git add"" and/or ""git commit -a"")When you run git merge modeling-users, it is trying to merge the modeling-users branch to master branch. The modeling-users branch already has a copy of app/models/user.rb included in it. The merge command is making it overwrite the untracked version of the file with the one already within the modeling-users branch. Hence the error message to warn you about possibly losing something you want to keep. As the git status message indicates, add the file to the master branch by running git add app/models/user.rb command.The Unable to save ~/code/rails_projects/sample_app/spec/models/user_spec.rb message seems to be unrelated to this. Not much can be made out of the error message; perhaps there is more info somewhere else. It might help to close the project and re-open it again. You may also want to try saving the files in a different editor (vim, perhaps?)"
"Git does not make it easy to do interactive rebases when merges are involved.  The -p option uses the -i mechanism internally, so mixing the two doesn't really work.However, git rebase is just an automated way to do lots of cherry-picks.  You can replicate its behavior by manually cherry-picking to get a bit more control over the process.  It's less convenient and more prone to human error, but possible.This is the approach I suggest:use git rebase to get to the commit after the merge (the child of the merge)use git reset --hard HEAD^ to manually get to the mergeuse git commit --amend to repair the mergeuse git cherry-pick to get back to the commit after the mergeuse git rebase --continue to finishHere are the specific steps:Note the SHA1 ID of the merge commit you want to modify.  For discussion, suppose it is deadbeef.Note the SHA1 ID of the commit right after the merge commit you want to modify (the merge commit's child).  Suppose it is facef00d.Run git rebase -i deadbeef.Select facef00d for editing.When rebase returns you to a prompt to edit facef00d, run git reset --hard HEAD^.  You should now be at deadbeef (git rev-parse HEAD should print deadbeef).Make your edits to fix the incorrect merge conflict and use git add to stage them.Run git commit --amend to fuse the staged fix with the bad merge commit.  The result will now have a different SHA1 (not deadbeef).Run git cherry-pick facef00d to apply the changes made by facef00d to the fixed merge commit.Run git rebase --continue to finish."
"Maybe this answer to another question will be helpful; you may just want to enable the option temporarily‰Û_git mv and only change case of directoryOK, after digging around all day, here's the solution I found:========== The Situation ==========I am developing on my branch ""Hotdog""My co-worker pushed his work to our master branch, including a file named ""Hamburgersrule""I merge master into my Hotdog branch.My co-worker changes ""Hamburgersrule"" to ""HamburgersRule"", and pushes it to master.========== The Problem ==========When I try switching between Hotdog and Master, Git thinks some changes have occured. The case of HamburgersRule looks different to Git, but windows thinks it's just fine. Every time I try to merge, or checkout another branch, Git warns me that I will lose my unstaged files.I can suppress the message by setting git config core.ignorecase true, but the underlying problem is still there, and ignoring case differences is what got us into this mess in the first place.========== The Solution ==========1: Do a Triple Rename on Master (to make sure the new file name is correct)HamburgersRule -> HamburgersRule_Rename -> HamburgersRule2: Merge that change into Hotdog Branch. To get the merge to work, you will need to delete your version of ""Hamburgersrule"" (using your OS, not git)3: Clean up the remaining files on Hotdog. Check to see if the merge worked as expected. You might have to checkout HamburgersRule from the Master branch:git checkout master HamburgersRuleEDIT:Important note. If you don't want to keep fixing this problem over and over again, make sure your coworkers all have ignorecase set to falsegit config core.ignorecase falseIf anyone is ignoring case sensitivity, their git client will ignore the changes, and keep checking in the bad name.Starting git 2.0.1 (June 25, 2014), that merge won't fail anymore.See commit ae352c7f37ef2098e03ee86bc7fd75b210b17683 by David Turner (dturner-tw)merge-recursive.c: fix case-changing merge bugOn a case-insensitive filesystem, when merging, a file would be wrongly deleted from the working tree if an incoming commit had renamed it changing only its case.  When merging a rename, the file with the old name would be deleted -- but since the filesystem considers the old name to be the same as the new name, the new file would in fact be deleted.We avoid this by not deleting files that have a case-clone in the index at stage 0."
"I encountered a similar problem with a rebase. My problem was caused because one of my commit only changed a file, and when resolving, I discarded the change introduced in this commit. I was able to solve my problem by skipping the corresponding commit (git rebase --skip).You can reproduce this problem in a test repository. First create the repository.$ mkdir failing-merge$ cd failing-merge$ git initInitialized empty Git repository in $HOME/failing-merge/.git/Then commit the original content of version.txt in master.$ echo v1.4-alpha-02 > version.txt$ git add version.txt$ git commit -m initial[master (root-commit) 2eef0a5] initial 1 files changed, 1 insertions(+), 0 deletions(-) create mode 100644 version.txtCreate the v4 branch and change the content of version.txt.$ git checkout -b v4Switched to a new branch 'v4'$ echo v1.4-alpha-03 > version.txt$ git add version.txt$ git commit -m v4[v4 1ef8c9b] v4 1 files changed, 1 insertions(+), 1 deletions(-)Go back to master and change the content of version.txt so that there will be a conflit during the rebase.$ git checkout masterSwitched to branch 'master'$ echo v1.4-alpha-04 > version.txt$ git add version.txt$ git commit -m master[master 7313eb3] master 1 files changed, 1 insertions(+), 1 deletions(-)Switch back to v4 branch and try to rebase. It fails with a conflit in version.txt as planned.$ git checkout v4Switched to branch 'v4'$ git rebase masterFirst, rewinding head to replay your work on top of it...Applying: v4Using index info to reconstruct a base tree...Falling back to patching base and 3-way merge...Auto-merging version.txtCONFLICT (content): Merge conflict in version.txtRecorded preimage for 'version.txt'Failed to merge in the changes.Patch failed at 0001 v4When you have resolved this problem run ""git rebase --continue"".If you would prefer to skip this patch, instead run ""git rebase --skip"".To restore the original branch and stop rebasing run ""git rebase --abort"".$ cat version.txt<<<<<<< HEADv1.4-alpha-04=======v1.4-alpha-03>>>>>>> v4We resolve the conflict by selecting the master content of version.txt. We add the file and try to continue our rebase.$ echo v1.4-alpha-04 > version.txt$ git add version.txt$ git rebase --continue Applying: v4No changes - did you forget to use 'git add'?If there is nothing left to stage, chances are that something elsealready introduced the same changes; you might want to skip this patch.When you have resolved this problem run ""git rebase --continue"".If you would prefer to skip this patch, instead run ""git rebase --skip"".To restore the original branch and stop rebasing run ""git rebase --abort"".It fails ! Let's see what changes git think there is in our repository.$ git status# Not currently on any branch.nothing to commit (working directory clean)Ah ah, there is no change. If you read in detail the previous error message, git informed us of this and recommended to use git rebase --skip. He told us ""If there is nothing left to stage, chances are that something else already introduced the same changes; you might want to skip this patch."" So we just skip the commit and the rebase succeed.$ git rebase --skipHEAD is now at 7313eb3 masterWord of caution: Please note that git rebase --skip will completely drop the commit that git tried to rebase. In our case, this should be okay since git is complaining this is an empty commit. If you think you've lost changes once the rebase is complete, you can use git reflog to get the commit id of your repository before the rebase, and use git reset --hard to get your depot back in that state (this is another destructive operation).Quoting from here: http://wholemeal.co.nz/node/9Huh?!? No, I didn't forget to use git  add, I did it ... like ... 2 seconds  ago!Turns out that because there is no  change from the patch git suspects  something has gone wrong. Git expects  a patch to have been applied, but the  file has remained unchanged.The error message is not very  intuitive, but it does contain the  answer. We just need to tell rebase to  skip this patch. It's also not  necessary to fix the conflict markers  in the file. You will end up with the  file version from the branch you are  rebasing on.$ git rebase --skipChange app/views/common/version.txt to v1.4-alpha-01At this point in the rebase, remember that you are resolving merge conflicts to show the progression of the non-master branch.So, in rebasing from      A---B---C topic     /D---E---F---G masterto              A*--B*--C* topic             /D---E---F---G masterthe conflict you are resolving is in how to create A* on the topic branch.So after doing git rebase --abort, the commands should begit checkout topicgit rebase master< make edits to resolve conflicts >git add .git rebase --continueThat error message is a result of your git commit -a -m ""merged"". If you just fix up the file, then run git add <file>, and git rebase --continue, it should work fine. git rebase --continue is trying to do a commit, but finding that there are no pending changes to commit (because you committed them already).The behavior you're seeing is not what I would expect from a typical rebase with just this conflict. Consider using a separate branch to do this rebase (especially if you've already pushed the commits remotely that you're fast-forwarding). Also, git mergetool can be helpful for resolving conflicts and remembering to issue a git add.In this minimal example, the rebase works as expected. Can you provide an example that shows the behavior you're seeing?#!/bin/bashcd /tmpmkdir rebasetestcd rebasetestgit initecho 'v1.0' > version.txtgit add version.txtgit commit -m 'initial commit'git checkout -b v4echo 'v1.4-alpha-01' > version.txtgit add version.txtgit commit -m 'created v4'git checkout mastergit merge v4echo 'v1.4-alpha-01-rc1' > version.txtgit add version.txtgit commit -m 'upped version on master to v1.4-alpha-01-rc1'git checkout v4echo 'v1.4-alpha-02' > version.txtgit add version.txtgit commit -m 'starting work on alpha-02'git rebase masterecho 'v1.4-alpha-02' > version.txtgit add version.txtgit rebase --continueHere are some ideas:Before starting the rebase, make sure you aren't in the middle of a rebase or am. Do: rm -rf .git/rebase-applyif you use Bash, enhance your bash prompt so it always presents this information automaticallyOne bit you mentioned I didn't understand: ""and then try to carry on: at first i try a commit:""... why commit? In the middle of a rebase I think you should only ""git add"" after you tidy up or ""git rm"" to toss changes or confirm a file deletion. Maybe that messed something up?try a merge instead of a rebasetry some of Ethan Rowe's ideas"
"Don't use merge tool, because it's confusing to you. Please take a backup your current code and revert your changes in current branch. Then checkout your master (dev), get latest then rewrite your changes, then push.First you need to type gitk --all  in your github for which branch will currently open by shown top sidethen you need to revert that or rebase your code with your server latest code:then check type the followings for push your branch to server master. git statusgit add .git statusgit commit -a -m ""Comments""git push origin yourbranchnameThat's all..."
"git pull -s recursive -X theirs <remoterepo or other repo>Or, simply, for the default repository:git pull -X theirsYou can use the recursive theirs strategy:git merge --strategy-option theirsFrom the man:ours    This option forces conflicting hunks to be auto-resolved cleanly by     favoring our version. Changes from the other tree that do not     conflict with our side are reflected to the merge result.    This should not be confused with the ours merge strategy, which does     not even look at what the other tree contains at all. It discards     everything the other tree did, declaring our history contains all that    happened in it.theirs    This is opposite of ours.OK so, picture the scenario I was just in:You attempt a merge, or maybe a cherry-pick, and you're stopped with$ git cherry-pick 1023e24error: could not apply 1023e24... [Commit Message]hint: after resolving the conflicts, mark the corrected pathshint: with 'git add <paths>' or 'git rm <paths>'hint: and commit the result with 'git commit'Now, you view the conflicted file and you really don't want to keep your changes. In my case above, the file was conflicted on just a newline my IDE had auto-added. To undo your changes and accept their's, the easiest way is:git checkout --theirs path/to/the/conflicted_file.phpgit add path/to/the/conflicted_file.phpThe converse of this (to overwrite the incoming version with your version) isgit checkout --ours path/to/the/conflicted_file.phpgit add path/to/the/conflicted_file.phpSurprisingly, I couldn't find this answer very easily on the Net.If you're already in conflicted state, and you want to just accept all of theirs:git checkout --theirs .git add .If you want to do the opposite:git checkout --ours .git add .This is pretty drastic, so make sure you really want to wipe everything out like this before doing it.To resolve all conflicts with the version in a particular branch:git diff --name-only --diff-filter=U | xargs git checkout ${branchName}So, if you are already in the merging state, and you want to keep the master version of the conflicting files: git diff --name-only --diff-filter=U | xargs git checkout master"
"This happened to me and git reset --hard HEAD from the accepted answer didn't help. However, running spring stop did the trick. I suspect spring is rewriting the file whenever it is modified to ensure that it is in sync with the code running via spring.After doing the following, I was able to pull and check out branches again.git checkout Gemfile.lockgit reset --hard HEADI'm not sure why and how this solution works. Explanations are welcome.The reason git was detecting Gemfile.lock as modified in my case, was that the bottom of the file had BUNDLED WITH 1.10.3. After updating bundler gem update bundler, regenerating and committing Gemfile.lock, it stopped appearing in git as modified.git version 2.2.1, Mac OSX version 10.10.4, iTerm2 Build 2.9.20150624-nightly (w/shell integration)"
"While git needs a place to do its work, you could point it off to a different work-tree location for the duration of the ""merge one file"" op.I have no idea if/how this works ""out of the box"" for merge-one-file, but the env variable to set is GIT_WORK_TREE:env GIT_WORK_TREE=/some/where/else git ...(you can leave out env with most, but not all, shells).A more or less equivalent method that might ""feel safer"" :-) or be more convenient for some purposes is to work in the other directory, and use GIT_DIR to the location of the repo:cd /some/where/elseenv GIT_DIR=/place/with/repo/.git git ...You can even combine them, setting both GIT_DIR and GIT_WORK_TREE.No, but the simplest way to do it is to stash, merge, stage, and unstash:git stash savegit merge-file foo.txt base-foo.txt their-foo.txtgit add foo.txtgit stash popIf you don't want to stash, then you're left with the diff and patch option: save working tree changes to a patch, remove working-tree changes, make necessary changes, and re-apply patchgit diff -p --raw foo.txt > foo.txt.diffgit checkout -- foo.txtgit merge-file foo.txt base-foo.txt their-foo.txtpatch -p1 < foo.txt.diffTo merge the changes in two different files you nave to examine their content: merging changes is working on file contents.  Work on contents is done in work trees. Doing the work somewhere else and pretending it isn't a work tree is just wordplay.If you want to leave your current worktree untouched while doing a merge, then use another worktree.git clone is cheap, it's built for stuff like this:# merge into branch m2 from branch m1 but leave your (non-m2) worktree untouched:git clone --no-checkout -b m2 . ../m2-workcd ../m2-workgit reset    # this will warn about the empty worktree, you could instead do#              git read-tree HEAD to get the same effect without the chattergit merge origin/m1git push origin m2notice the --no-checkout on the clone.  Merge does have to have a worktree to do its work, but it doesn't care about any actual file contents other than the ones that need comparison.A merge in git is a three-way merge between: the source ('remote' or 'theirs', what you want to merge)the destination ('local' or 'ours', which is always the working tree, where HEAD is checked out)the common ancestor (or 'base')See the 'local', 'base', 'remote', 'merged' illustrated in ""git rebase, keeping track of 'local' and 'remote'"".You can see an example in ""git revert does not work as expected"".git read-tree mentioned in ""Subtree Merging"" and ""Git Objects"" (and that you are using in your gist) is about merging trees (for subtree merging), not file content (blob).git write-tree can be use to create tree object, but its documentation does mention ""The index must be in a fully merged state."" (a bit hard when you want to use the index for merging files).The git index (documented here) is there to record what you have staged (the 'merged' result), as part of the merge resolution, from your working tree.It doesn't have all the information about the file content, only pointers (""index entry"") to said content. It is simply not the right structure to do a merge.Even the git-merge-one-file.sh script itself does mention:require_work_treeThe function comes from the git-sh-setup.sh script (see its documentation):test ""$(git rev-parse --is-inside-work-tree 2>/dev/null)"" = true ||die ""fatal: $0 cannot be used without a working tree.""That requirement comes from commit 6aaeca90 (peff Jeff King):The merge-one-file tool predates the invention of GIT_WORK_TREE.For the most part, merge-one-file just works with GIT_WORK_TREE; most of its heavy lifting is done by plumbing commands which do respect GIT_WORK_TREE properly.If you really need to not use the working tree, you can try and go the route chosen for Merging notes:notes-merge.c does creates its own working tree to merge git notes.Jeff King helped me solve the problem and I updated the script to work:https://gist.github.com/cool-RR/6575042#!bashif [ -n ""$2"" ]; then  export SOURCE=$1 ;  export DESTINATION=$2 ;else  export SOURCE=HEAD ;  export DESTINATION=$1 ;fiexport GIT_INDEX_FILE=`git rev-parse --show-toplevel`/.git/aux-merge-index ;export GIT_WORK_TREE=`create_temporary_folder gm_`;echo $GIT_INDEX_FILEtrap 'rm -f '""'$GIT_INDEX_FILE'""'; rm -rf '""'$GIT_WORK_TREE'"" 0 1 2 3 15 ;mkdir $GIT_WORK_TREE/.gitset -e ;git read-tree -im `git merge-base $DESTINATION $SOURCE` $DESTINATION $SOURCE ;#echo Finished read-tree#sleep 1000git merge-index git-merge-one-file -a#echo Finished merge-indexgit write-tree \| xargs -i@ git commit-tree @ -p $DESTINATION -p $SOURCE -m ""Merge $SOURCE into $DESTINATION"" \| xargs git update-ref -m""Merge $SOURCE into $DESTINATION"" refs/heads/$DESTINATION ;exit 0"
"This was my situation:git config -l(abbreviated output)merge.tool=opendiffmergetool.opendiff.cmd=/usr/bin/opendiff $2 $5 -merge $1How I fixed it:git config --global --unset mergetool.opendiff.cmd"
"I can't tell you what's wrong, but you might trygit reset app/models/disclosure_even.rbgit add app/models/disclosure_even.rband then commit.I had exactly the same situation today on branches merging (not rebasing).I spot, that file it errors on, in your case:U      app/models/disclosure_event.rbwas absent in git status. But is could be seen as unmerged in gitk GUI. It also was absent in working copy (moved to another place in my case).I tried git rm, and it solved the problem:git rm app/models/disclosure_event.rbI encountered such situation before with rebase. Git determines that you leave some files as they were before merge and thinks you still didn't merge them. That time I googled and find out many suggestions to do just git rebase --skip. It worked for me.More detailed description of such case: http://git.661346.n2.nabble.com/BUG-git-rebase-is-confuse-if-conflict-resolution-doesn-t-produce-diff-td726597.htmlSimilar problem: Git rebase: conflicts keep blocking progressI'm not sure it is your case if you have merge, though.I tried the 2 suggestions without any luck. And I couldn't get it to reset back to HEAD, so I just re-cloned the repository and did the entire merge over and didn't have any issues. For what it's worth, I now highly recommend p4merge over vimdiff..."
"Since your pull was unsuccessful then just HEAD is the last ""valid"" commit on your branch (not HEAD^):git reset --hard HEADThe other piece you want is to let their changes over-ride your changes.  Older versions of git allowed you to use the ""theirs"" merge strategy:git pull --strategy=theirs remote_branchBut this has since been removed, as explained in this message by Junio Hamano (the Git maintainer).  As noted in the link, instead you would do this:git fetch origingit reset --hard originIf your git version is >= 1.6.1, you can use git reset --merge.Also, as @Michael Johnson mentions, if your git version is >= 1.7.4, you can also use git merge --abort.As always, make sure you have no uncommitted changes before you start a merge.From the git merge man pagegit merge --abort is equivalent to git reset --merge when MERGE_HEAD is present.MERGE_HEAD is present when a merge is in progress.Also, regarding uncommitted changes when starting a merge:If you have changes you don't want to commit before starting a merge, just git stash them  before the merge and git stash pop after finishing the merge or aborting it.git merge --abortAbort the current conflict resolution process, and try to reconstruct  the pre-merge state.If there were uncommitted worktree changes present when the merge  started, git merge --abort will in some cases be unable to  reconstruct these changes. It is therefore recommended to always  commit or stash your changes before running git merge.git merge --abort is equivalent to git reset --merge when  MERGE_HEAD is present.http://www.git-scm.com/docs/git-mergeIn this particular use case, you don't really want to abort the merge, just resolve the conflict in a particular way.There is no particular need to reset and perform a merge with a different strategy, either. The conflicts have been correctly highlighted by git and the requirement to accept the other sides changes is only for this one file.For an unmerged file in a conflict git makes available the common base, local and remote versions of the file in the index. (This is where they are read from for use in a 3-way diff tool by git mergetool.) You can use git show to view them.# common base:git show :1:_widget.html.erb# 'ours'git show :2:_widget.html.erb# 'theirs'git show :3:_widget.html.erbThe simplest way to resolve the conflict to use the remote version verbatim is:git show :3:_widget.html.erb >_widget.html.erbgit add _widget.html.erbOr, with git >= 1.6.1:git checkout --theirs _widget.html.erbI think it's git reset you need.Beware that git revert means something very different to, say, svn revert - in Subversion the revert will discard your (uncommitted) changes, returning the file to the current version from the repository, whereas git revert ""undoes"" a commit.git reset should do the equivalent of svn revert, that is, discard your unwanted changes.Since comments suggest that git reset --merge is an alias for git merge --abort, it is worth noticing that git merge --abort is only equivalent to git reset --merge given that a MERGE_HEAD is present. This can be read in the git help for merge command.git merge --abort is equivalent to git reset --merge when MERGE_HEAD is present.After a failed merge, when there is no MERGE_HEAD, the failed merge can be undone with git reset --merge but not necessarily with git merge --abort, so they are not only old and new syntax for the same thing.Personally I find git reset --merge much more powerful for scenarios similar to the described one, and failed merges in general.Since Git 1.6.1.3 git checkout has been able to checkout from either side of a merge:git checkout --theirs _widget.html.erbAn alternative, which preserves the state of the working copy is:git stashgit merge --abortgit stash popI generally advise against this, because it is effectively like merging in Subversion as it throws away the branch relationships in the following commit."
"The message ‰ÛÏAlready up-to-date‰Ûù means that all the changes from the branch you‰Ûªre trying to merge have already been merged to the branch you‰Ûªre currently on. More specifically it means that the branch you‰Ûªre trying to merge is a parent of your current branch. Congratulations, that‰Ûªs the easiest merge you‰Ûªll ever do. :)Use gitk to take a look at your repository. The label for the ‰ÛÏtest‰Ûù branch should be somewhere below your ‰ÛÏmaster‰Ûù branch label.Late answer, but for the record:This often happens to me when I know there are changes on the remote master, so I try to merge them using git merge master. However, this doesn't merge with the remote master, but with your local master.So before doing the merge, checkout master, and then git pull there. Then you will be able to merge the new changes into your branch.Say you have a branch master with the following commit history:A -- B -- C -- DNow, you create a branch test, work on it, and do 4 commits:                 E -- F -- G -- H                /A -- B -- C -- Dmaster's head points to D, and test's head points to H.The ""Already up-to-date"" message shows up when the HEAD of the branch you are merging into is a parent of the chain of commits of the branch you want to merge.That's the case, here: D is a parent of E.There is nothing to merge from test to master, since nothing has changed on master since then.What you want to do here is literally to tell Git to have master's head to point to H, so master's branch has the following commits history:A -- B -- C -- D -- E -- F -- G -- HThis is a job for Git command reset.You also want the working directory to reflect this change, so you'll do a hard reset:git reset --hard HA merge is always between the current HEAD and one or more commits (usually, branch head or tag),  and the index file must match the tree of HEAD commit (i.e. the contents of the last commit) when it starts out.  In other words, git diff --cached HEAD must report no changes. The merged commit is already contained in HEAD. This is the simplest case, called ""Already up-to-date.""That should mean the commits in test are already merged in master, but since other commits are done on master, git diff test would still give some differences.This happened to me because strangely GIT thought that the local branch was different from the remote branch.This was visible in the branch graph: it displayed two different branches: remotes/origin/branch_name and branch_name.The solution was simply to remove the local repo and re-clone it from remote. This way GIT would understand that remotes/origin/branch_name>and branch_name are indeed the same, and I could issue the git merge branch_name.rm <my_repo>git clone <my_repo>cd <my_repo>git checkout <branch_name>git pullgit checkout mastergit merge <branch_name>Faced this scenario using Git Bash.Our repository has multiple branches and each branch has a different commit cycle and merge happens once in a while.Old_Branch was used as a parent for New_BranchOld_Branch was updated with some changes which required to be merged with New_BranchWas using below pull command without any branch to get all sources from all branches.git pull originStrangely this doesn't pull all the commits from all the branches. Had thought it so as the indicated shows almost all branches and tags.So to fix this had checked out the Old_Branch pulled the latest usinggit checkout Old_Branchgit pull origin Old_BranchNow checked out New_Branchgit checkout New_BranchPulled it to be suregit pull origin New_Branchgit merge Old_BranchAnd viola got conflicts to fix from Old_Branch to New_Branch :) which was expected"
"You need a clean state to change branches. The branch checkout will only be allowed if it does not affect the 'dirty files' (as Charles Bailey remarks in the comments).Otherwise, you should either:stash your current change orreset --hard HEAD  (if you do not mind losing those minor changes) orcheckout -f (When switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes. )If you want to discard the changes,git checkout -- <file>git checkout branchIf you want to keep the changes,git stash savegit checkout branchgit stash popwell, it should begit stash savegit checkout branch// do somethinggit checkout oldbranchgit stash popFollow, $: git checkout -f$: git checkout next_branchIf you have made changes to files that Git also needs to change when switching branches, it won't let you. To discard working changes, use:git reset --hard HEADThen, you will be able to switch branches.Note that if you've merged remote branches or have local commits and want to go back to the remote HEAD you must do:git reset --hard origin/HEADHEAD alone will only refer to the local commit/merge -- several times I have forgotten that when resetting and end up with ""your repository is X commits ahead.."" when I fully intended to nuke ALL changes/commits and return to the remote branch."
"Answering my own question due to the weirdness of the solution. The first step is as @Don Branson, @VonC and @robinst suggested. I did a clean clone into a new folder on my Windows machine.This did not seem to work, and git returned the exact same error.  However git status showed the offending folder as ""deleted"", even though a folder with the same name did exist and contained the proper files.I then staged and committed the ""deleted"" folder, pushed to the remote repo. and pulled the commit from my original repo. Lo-and-behold the branch was updated properly.When you git pull git will apply the commits in order.  So, even though the directories are consolidated by the final commit, they won't be in the commits it's applying to reach the HEAD.  I'd try a new git clone on the Windows machine.The problem could be that Git first tries to create the new files (under the new name name) before the old directory Name has been deleted. So when it tries to create the new directory name it doesn't notice that Name already exists, because it compares them case-sensitive.You could try the following (with a clean working directory of course):Recursively delete my/folder/Name (the old location).Do git reset --hard origin/branchname (the branch you are pulling).Alternatively, just do a fresh clone."
"The msysgit FAQ on Git cannot create a filedirectory with a long path seems not up to date, as it still links to old msysgit ticket #110. However, according to later ticket #122 the problem has been fixed in msysgit 1.9, thus:Update to msysgit 1.9 (or later)Launch Git BashGot to your Git repository which 'suffers' of long paths issueEnable long paths support with git config core.longpaths trueSo far, it's worked for me very well.Be aware of important notice in comment on the ticket #122don't come back here and complain that it breaks Windows Explorer,  cmd.exe, bash or whatever tools you're using.As someone that has ran into this problem constantly with java repositories on Windows, the best solution is to install Cygwin (https://www.cygwin.com/) and use its git installation under all > devel > git.  The reason this is the best solution I have come across is since Cygwin manages the long path names so other provided commands benefit. Ex: find, cp and rm.  Trust me, the real problem begins when you have to delete path names that are too long in Windows.Or you can edit directly your git config file:edit file : YourRepoFolder -> .git -> config[core]    repositoryformatversion = 0    filemode = false    ...    longpaths = true        <-- (add this line under core section)Try to keep your files closer to the file system root. More details : for technical reasons, Git for Windows cannot create files or directories when the absolute path is longer than 260 characters."
"Common frustrating situation:Open the terminalGo to your project repository folder (the one containing the .git hidden file)Move your merge head aside typing mv .git/MERGE_HEAD /.git/MERGE_HEAD_STUCKYou problem should be half solved already, in some case you need to make a pull from the organizer:Open the Organizer - Repositories ""File > source control > repositories‰Û_""Find the repository of your project and make a pull from here.Then you should be able to use Git again from Xcode, you will probably have to resolve some merge conflicts but at least this will be under Xcode and not on the terminal.Note: Consider removing the .DS_Stores from your git repositoryYou can't commit until all merge conflicts are resolved.  Based on what you described there are files that you both changed.  They are conflicts that you must resolve.I've never resolved a conflict in Xcode.  You could always resolve the conflict from the Terminal app.  Once in a terminal and assuming you've installed the Xcode command line tools try:git mergetoolgit commitThis will/should pop up a FileMerge window that allows you to select your or his edit.  The other option you have from the Terminal is to resolve the conflicts by simply accepting his changes.  This will break your code but you can go back and fix it.  For that try:git statusgit checkout --theirs -- /path/to/a/conflicted/file ...git add -- /path/to/a/conflicted/file ...git commitThen edit the files to fix your functionality.  Once all the conflicts are resolved you will be able to commit back in Xcode."
"This error means that the upstream repository has made commits that would be lost if you were to push. First do a ""git pull"" to merge, and then push again.I'm the only person working on my app and only work on it from my desktop, so the possibility that I managed to get the heroku repository above dev didn't make sense. BUT! I recently had a Heroku support rep look into my heroku account for a cache issue involving gem installs and he had changed something that caused heroku to return the same error as the one listed above. A git pull heroku master was all it took. Then I found the reps minor change and reverted it myself.Execute this:$ rake assets:precompile$ git add .$ git commit -m ""Add precompiled assets for Heroku""$ git push heroku masterSource: http://ruby.railstutorial.org/ruby-on-rails-tutorial-bookIt would appear that you are not fully up-to-date. You would need to do a git pull and either ""--rebase"" or let it merge into your set.After this, you should then be able to push, since it would be a 'fast-forward' change that wouldn't remove history."
"Somebody has already committed to production branch.As @user1281385 said you shouldgit pull origin master:prooduction or better before review changes on production branch in other way.try git help pull to read more.remote changes are done on the repository. as the error messages says:Merge the remote changes (e.g. 'git pull') before pushing again.pull first, then push."
"I had a similar problem. My laptop ran out of battery during a git operation. Boo. I didn't have any backups. (N.B. Ubuntu One is not a backup solution for git; it will helpfully overwrite your sane repository with your corrupted one.)To the git wizards, if this was a bad way to fix it, please leave a comment. It did, however, work for me... at least temporarily. Step 1: Make a backup of .git (in fact I do this in between every step that changes something, but with a new copy-to name, e.g.  .git-old-1, .git-old-2, etc.): cp -a .git .git-oldStep 2: Run git fsck --fullnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullerror: object file .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e is emptyfatal: loose object 8b61d0135d3195966b443f6c73fb68466264c68e (stored in .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e) is corruptStep 3: Remove the empty file. I figured what the heck; its blank anyway. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e rm: remove write-protected regular empty file `.git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e'? yStep 3: Run git fsck again. Continue deleting the empty files. You can also cd into the .git directory and run find . -type f -empty -delete to remove all empty files. Eventually git started telling me it was actually doing something with the object directories: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: object file .git/objects/e0/cbccee33aea970f4887194047141f79a363636 is emptyfatal: loose object e0cbccee33aea970f4887194047141f79a363636 (stored in .git/objects/e0/cbccee33aea970f4887194047141f79a363636) is corruptStep 4: After deleting all of the empty files, I eventually came to git fsck actually running: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: HEAD: invalid sha1 pointer af9fc0c5939eee40f6be2ed66381d74ec2be895ferror: refs/heads/master does not point to a valid object!error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 5: Try git reflog. Fail because my HEAD is broken. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git reflogfatal: bad object HEADStep 6: Google. Find this. Manually get the last two lines of the reflog: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ tail -n 2 .git/logs/refs/heads/masterf2d4c4868ec7719317a8fce9dc18c4f2e00ede04 9f0abf890b113a287e10d56b66dbab66adc1662d Nathan VanHoudnos <nathanvan@gmail.com> 1347306977 -0400  commit: up to p. 24, including correcting spelling of my name9f0abf890b113a287e10d56b66dbab66adc1662d af9fc0c5939eee40f6be2ed66381d74ec2be895f Nathan VanHoudnos <nathanvan@gmail.com> 1347358589 -0400  commit: fixed up to page 28Step 7: Note that from Step 6 we learned that the HEAD is currently pointing to the very last commit. So let's try to just look at the parent commit:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git show 9f0abf890b113a287e10d56b66dbab66adc1662dcommit 9f0abf890b113a287e10d56b66dbab66adc1662dAuthor: Nathan VanHoudnos <nathanvan@XXXXXX>Date:   Mon Sep 10 15:56:17 2012 -0400    up to p. 24, including correcting spelling of my namediff --git a/tex/MCMC-in-IRT.tex b/tex/MCMC-in-IRT.texindex 86e67a1..b860686 100644--- a/tex/MCMC-in-IRT.tex+++ b/tex/MCMC-in-IRT.texIt worked!Step 8: So now we need to point HEAD to 9f0abf890b113a287e10d56b66dbab66adc1662d. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git update-ref HEAD 9f0abf890b113a287e10d56b66dbab66adc1662dWhich didn't complain.Step 9: See what fsck says:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 10: The invalid sha1 pointer in cache-tree seemed like it was from a (now outdated) index file (source). So I killed it and reset the repo.nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/indexnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git resetUnstaged changes after reset:M   tex/MCMC-in-IRT.texM   tex/recipe-example/build-example-plots.RM   tex/recipe-example/build-failure-plots.RStep 11: Looking at the fsck again...nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!dangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79aThe dangling blobs are not errors. I'm not concerned with master.u1conflict, and now that it is working I don't want to touch it anymore! Step 12: Catching up with my local edits: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git status# On branch master# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   tex/MCMC-in-IRT.tex#   modified:   tex/recipe-example/build-example-plots.R#   modified:   tex/recipe-example/build-failure-plots.R#< ... snip ... >no changes added to commit (use ""git add"" and/or ""git commit -a"")nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""recovering from the git fiasco""[master 7922876] recovering from the git fiasco 3 files changed, 12 insertions(+), 94 deletions(-)nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git add tex/sept2012_code/example-code-testing.Rnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""adding in the example code""[master 385c023] adding in the example code 1 file changed, 331 insertions(+) create mode 100644 tex/sept2012_code/example-code-testing.RSo hopefully that can be of some use to people in the future. I'm glad it worked.I solved this removing the various empty files that git fsck was detecting, and then running a simple git pull.I find it disappointing that now that even filesystems implement journaling and other ""transactional"" techniques to keep the fs sane, git can get to a corrupted state (and not be able to recover by itself) because of a power failure or space on device.I just had the same issue : after pulling the distant repository, when I did a git status I got :""error: object file (...) is empty""""fatal: loose object (...) is corrupted""The way I resolved this was to :git stashremoving git file in error (not sure that is necessary)git stash clearI dont know exactly what things happened, but that instructions seemed to make everything clean.This error happens to me when I am pushing my commit and my computer hangs.This is how I've fix it.Steps to fixgit statusshow the empty/corrupt object filerm .git/objects/08/3834cb34d155e67a8930604d57d3d302d7ec12remove itgit statusI got fatal: bad object HEAD messagerm .git/indexI remove the index for the resetgit resetfatal: Could not parse object 'HEAD'.git statusgit pulljust to check whats happeningtail -n 2 .git/logs/refs/heads/MY-CURRENT-BRANCHprints the last 2 lines tail -n 2 of log branch to show my last 2 commit hashgit update-ref HEAD 7221fa02cb627470db163826da4265609aba47b2I pick the last commit hashgit statusshows all my file as deleted because i removed the .git/index filegit resetcontinue to the resetgit statusverify my fixNote:    The steps starts when I landed on this question and used the answers as reference.The git object files have gone corrupt (as pointed out in other answers as well). This can happen during machine crashes, etc.I had the same thing. After reading the other top answers here I found the quickest way to fix the broken git repository with the following commands (execute in the git working directory that contains the .git folder):(Be sure to back up your git repository folder first!)find .git/objects/ -type f -empty | xargs rmgit fetch -pgit fsck --fullThis will first remove any empty object files that cause corruption of the repository as a whole, and then fetch down the missing objects (as well as latest changes) from the remote repository, and then do a full object store check. Which, at this point, should succeed without any errors (there may be still some warnings though!)PS. This answer suggests you have a remote copy of your git repository  somewhere (e.g. on GitHub) and the broken repository is the local repository that is tied to the remote repository which is still in tact. If that is not the case, then do not attempt to fix it the way I recommend.mv your folder app to make backup, i.e. mv app_folder app_folder_bk (it is like a git stash)git clone your_repositoryFinally,.  Open a merge tool (I use meld diff viewer linux or Winmerge Windows) and copy the changes from right(app_folder_bk)  to left( new app_folder)  (it is like a git stash apply).That's all. Maybe it is not the best way, but I think it is so practical .In my case, this error occurred because I was typing commit message and my notebook turned off.I did these steps to fix the error:git checkout -b backup-branch # Create a backup branchgit reset --hard HEAD~4 # Reset to the commit where everything works well. In my case, I had to back 4 commits in the head, that is until my head be at the point before I was typing the commit message. Before doing this step, copy the hash of the commits you will reset, in my case I copied the hash of the 4 last commitsgit cherry-pick <commit-hash> # Cherry pick the reseted commits (in my case 4, so I did this step 4 times) from the old branch to the new branch. git push origin backup-branch # Push the new branch to be sure everything works wellgit branch -D your-branch # Delete the branch locally ('your-branch' is the branch with problem)git push origin :your-branch # Delete the branch from remotegit branch -m backup-branch your-branch # Rename the backup branch to have the name of the branch that had the problemgit push origin your-branch # Push the new branchgit push origin :backup-branch # Delete the backup branch from remoteHere is a really simple and quick way to deal with this problem IF you have a local repo with all the branches and commits you need, and if you're OK with creating a new repo (or deleting the server's repo and making a new one in it's place):Create a new empty repo on the server (or delete the old repo and create a new one in its place)Change the remote URL of your local copy to point to the remote URL of the new repo.Push all branches from your local repo to the new server repo.This preserves all the commit history and branches that you had in your local repo.If you have collaborators on the repo, then I think in many cases all your collaborators have to do is change the remote URL of their local repo as well, and optionally push any commits they have that the server doesn't have.This solution worked for me when I ran into this same problem. I had one collaborator. After I pushed my local repo to the new remote repo, he simply changed his local repo to point to the remote repo URL and everything worked fine.If you don't care about keeping your historical commits, just run rm -r .gitThen answer yes to anything asking about deleting write-protected files.Problem solved in under a minute.Because I have to reboot my VM regularly, so somehow this problem happens to me very often. After few times of it, I realized I cannot repeat the process described by @Nathan-Vanhoudnos every time this happens, though it always works. Then I figured out the following faster solution.Step 1Move your entire repo to another folder.mv current_repo temp_repoStep 2Clone the repo from origin again.git clone source_to_current_repo.gitStep 3Remove Everything under the new repo except the .git folder.Step 4Move Everything from the temp_repo to the new repo except the .git folder.Step 5Remove the temp_repo, and we are done.After few times, I'm sure you can do this procedures very quickly."
"Add .idea directory to the list of ignored filesFirst, add it to .gitignore, so it is not accidentally committed by you (or someone else) again:.ideaRemove it from repositorySecond, remove the directory only from the repository, but do not delete it locally. To achieve that, do what is listed here:Git: Remove a file from the repository without deleting it from the local filesystemSend the change to othersThird, commit the .gitignore file and the removal of .idea from the repository. After that push it to the remote(s).SummaryThe full process would look like this:$ echo '.idea' >> .gitignore$ git rm -r --cached .idea$ git add .gitignore$ git commit -m '(some message stating you added .idea to ignored entries)'$ git push(optionally you can replace last line with git push some_remote, where some_remote is the name of the remote you want to push to)You can remove it from the repo and commit the change.git rm .idea/ -r --cachedgit add -u .idea/git commit -m ""Removed the .idea folder""After that, you can push it to the remote and every checkout/clone after that will be ok.You can rewrite git history:$ git reset --soft HEADNow you have your local repo like before the commit. You can $ git reset --soft HEAD~Nwhere N is the number of commit you want to ""reset""."
"I don't know why this happens with Homebrew when you don't do anything to mess with it, but here's how I fixed it:Change to your Homebrew cellar directory cd `brew --cellar`Reset git repository git reset --hard HEADUpgrade pianobar, at last! brew upgrade pianobarFYI, brew update will update Homebrew to the latest version, so you may want to do that before step 3.As @Felix said, use upgrade not update.If the problem comes from your dirty git tree and you just want to forget about your modifications, type git reset --hard HEAD before upgrading."
"The problem you have is that git isn't designed to do such a thing. Consider the following history that might result in your two branches A and B from the question:C - D - E - F - G - H \  H - Iwith branch A pointing at commit I and branch B pointing at commit H. Now you want to take over some changes in B into A.For example commits D and F modified Dir2, E, G and H did something to Dir1 and Dir3. So actually you only want to have commits D and F added to your integration branch A.That means that branch B wasn't created carefully enough and you actually want to redo it into (at least) two clean topic branches. Something like:git checkout -b topic_I_want_to_merge_touching_Dir2 Cgit cherry-pick Dgit cherry-pick Fgit checkout -b topic_I_dont_want_to_merge_now Cgit cherry-pick Egit cherry-pick Ggit cherry-pick Hgit checkout Bgit merge topic_I_want_to_merge_touching_Dir2If there are commits that are touching both, Dir1 and Dir2 then these commits are ""bad"", as they don't address a single topic, but does several things at once. In this case you might want not only reshuffle the commits, but also change the commits to be good ones using git-rebase -i.Of course you could just merge branch A and fix-up the resulting tree. But that would make it hardly possible to continue working on the ""non-merged"" changes in A, because when you merge a descendant of A you would have to fix-up the resulting tree once more, because the changes of E, G and H would not be included in the tree that git prepares for you, as these commits are already merged."
"Update 2013:More recent git versions authorize using merge with strategy recursive and strategy option (-X):from ""Git Merge and Fixing Mixed Spaces and Tabs with two Branches"":git merge -s recursive -Xignore-space-at-eolBut using ""-Xignore-space-change"" is also a possibilityFab-V mentions below:git merge master -s recursive -X renormalizejakub.g also comments that the strategies work also with cherry-picking: git cherry-pick abcd123456 --strategy=recursive --strategy-option=renormalize This works much better than ignore-all-space.Original answer (May 2009)The patch for ignoring eol style has been proposed in June 2007, but it only concerns git diff --ignore-space-at-eol, not git merge.At the time, the question has been askeed:Should --ignore-space-at-eol be an option to git-merge ?  Merges are where this functionality matters.  What are the semantics of an auto-resolved merge  with those options in effect -- are they only used for rename detection, or do we, e.g., not flag conflicts with only whitespace changes ? And if we don't, which version do we accept automatically ?Julio C Hamano was not exactly enthusiastic:This certainly is tempting, but I suspect that should be left to later rounds.  I suspect that it would introduce a concept of two different kinds of diffs, one to be mechanically processed (i.e. use in merge with ""git-merge-recursive"", and apply with  ""git-am""), and another to be inspected by humans to understand.  It often may be useful to munge the input for the latter case, even though the output from comparing munged input files may not be readily usable for mechanical application.The general idea, when it comes to git merge, is to rely on the third-party merge tool.For instance, I have setup DiffMerge to be the tool for Git merge, setting a ruleset which allow that merge tool to ignore eol for certain type of files.Setup on Windows, with MSysGit1.6.3, either for DOS or Git bash session, with DiffMerge or KDiff3:set a directory into your PATH (here: c:\HOMEWARE\cmd).add in that directory the script merge.sh (wrapper for your favorite merge tool)merge.sh:#!/bin/sh# Passing the following parameters to mergetool:#  local base remote merge_resultalocal=$1base=$2remote=$3result=$4if [ -f $base ]then    #""C:/Program Files/SourceGear/DiffMerge/DiffMerge.exe"" ""$alocal"" ""$base"" ""$remote"" -m --result=""$result"" --title1=""Mine"" --title2=""Merging to: $result"" --title3=""Theirs""    # for merge respecting eol, KDiff3 is better than DiffMerge (which will always convert LF into CRLF)    # KDiff3 will display eol choices (if Windows: CRLF, if Unix LF)    ""C:/Program Files/KDiff3/kdiff3.exe"" -m ""$base"" ""$alocal"" ""$remote"" -o ""$result""else    #there is not always a common ancestor: DiffMerge needing 3 files, BASE will be the result    #""C:/Program Files/SourceGear/DiffMerge/DiffMerge.exe"" ""$alocal"" ""$result"" ""$remote"" -m --result=""$result"" --title1=""Mine"" --title2=""Merging to: $result"" --title3=""Theirs""    # KDiff3 however does know how to merge based on 2 files (not just 3)    ""C:/Program Files/KDiff3/kdiff3.exe"" -m ""$base"" ""$remote"" -o ""$result""fiDeclare your merge wrapper for GitGit config commands:git config --global merge.tool diffmergegit config --global mergetool.diffmerge.cmd ""merge.sh \""$PWD/$LOCAL\"" \""$PWD/$BASE\"" \""$PWD/$REMOTE\"" \""$PWD/$MERGED\""git config --global mergetool.diffmerge.trustExitCode falsegit config --global mergetool.diffmerge.keepBackup falseCheck that autoCRLF is falsegit config at system level:git config ---system core.autoCRLF=falseTest that, when two lines are identical (but their eol  chars), both DiffMerge or KDiff3 will ignore those line during a merge.DOS script (note: the dos2unix command comes from here, and is used to simulate a Unix eol-style. That command has been copied in the directory mentioned at the beginning of this answer.):C:\HOMEWARE\git\test>mkdir test_mergeC:\HOMEWARE\git\test>cd test_mergeC:\HOMEWARE\git\test\test_merge>git initC:\HOMEWARE\git\test\test_merge>echo a1 > a.txt & echo a2 >> a.txtC:\HOMEWARE\git\test\test_merge>git add a.txtC:\HOMEWARE\git\test\test_merge>git commit -m ""a.txt, windows eol style""C:\HOMEWARE\git\test\test_merge>git checkout -b windowsSwitched to a new branch 'windows'C:\HOMEWARE\git\test\test_merge>echo a3 >> a.txt & echo a4 >> a.txtC:\HOMEWARE\git\test\test_merge>git add a.txtC:\HOMEWARE\git\test\test_merge>git commit -m ""add two lines, windows eol style""C:\HOMEWARE\git\test\test_merge>git checkout masterC:\HOMEWARE\git\test\test_merge>git checkout -b unixSwitched to a new branch 'unix'C:\HOMEWARE\git\test\test_merge>echo au3 >> a.txt & echo au4 >> a.txt && echo au5 >> a.txtC:\HOMEWARE\git\test\test_merge>dos2unix a.txtDos2Unix: Processing file a.txt ...C:\HOMEWARE\git\test\test_merge>git add a.txtC:\HOMEWARE\git\test\test_merge>git commit -m ""add 3 lines, all file unix eol style""[unix c433a63] add 3 lines, all file unix eol styleC:\HOMEWARE\git\test\test_merge>git merge windowsAuto-merging a.txtCONFLICT (content): Merge conflict in a.txtAutomatic merge failed; fix conflicts and then commit the result.C:\HOMEWARE\git\test\test_merge>git ls-files -u100644 39b4c894078a02afb9b1dfeda6f1127c138e38df 1       a.txt100644 28b3d018872c08b0696764118b76dd3d0b448fca 2       a.txt100644 3994da66530b4df80189bb198dcfac9b8f2a7b33 3       a.txtC:\HOMEWARE\git\test\test_merge>git mergetoolMerging the files: a.txtNormal merge conflict for 'a.txt':  {local}: modified  {remote}: modifiedHit return to start merge resolution tool (diffmerge):"
"You have untracked files in the way of the pull.  You can't remove them with git rm --cached because they are untracked.  They don't appear in the index.  You need to remove them with plain old rmThis is an opportunity for the 'git clean' command. If you don't care about the untracked files ... git clean -n to see what will be removed, and git clean -f to go ahead and rm untracked files. Add -d to the commands to also operate on directories:  git clean -dn  git clean -dfI agree with other posters, the issue is that the file isn't being tracked by git.  the command git rm works on files being tracked.  rm will remove the file from your machine.  Alternatively you could add the file to your list of ignored files, or file types if that is convenient.  You could also use one of the GUI tools like tortoise git to quickly delete all untracked files.That file isn't in the current branch yet, so you can't remove it with git rm --cache. Just use rm.As it says in the original error message, that file is untracked.  That means git doesn't know anything about it.  Just remove it from the filesystem using rm.  If you care about the contents, just move it somewhere else."
"Looks like you've got a conflict during merge. Go to the Changes View and see if there are any unmerged files. Then invoke Resolve Conflicts, choose what to take from your changes and theirs, and commit.You may also want to try Update Project for more intelligent pulling from the tracked branch."
"Before any interaction with a remote repository (i.e. push or pull) have a look at git status and decide what to do with those ""uncommitted changes"". Either commit them if they introduce useful functionality or discard them if not. - A git pull might not be able to do its job if you still have ""uncommitted changes"".Remember that a git pull is actually just a combination of git fetch which updates your remote branches and git merge which combines the corresponding remote branch into your current working tree. (That's why your git error talks about a failed merge.)If you did not commit any changes on your side a git pull is always fine and just fast-forwards your working tree to the new version. If you did any commits and no one pushed to your remote branch everything is fine, too.The only tricky part is, if you did some commits and someone else did other commits, too. In this case those branches diverted. git fetch will fetch the other changes and git merge will try to merge them with your work. This might work if you worked at other places in the code or might cause a conflict otherwise."
"I think you missed the name of the remote when pulling:git pull <remote> my_branch_nameRun this command:git remote -vAnd check what is the name of the remote you want to pull fromEDIT:If you are new to Git, I would recommend you this book. It covers from basic to advanced topics, is easy to understand and to readAs the first error message indicated, you need to tell git where to look when it pulls for that branch:In Git 1.8 and up, ensure you've checked out develop and run:git branch --set-upstream-to origin/develop or the shorter:-git branch -u origin/develop In Git prior to version 1.8:git branch --set-upstream develop origin/developOnce you've done that you can git pull without having to specify the remote or the branch.If the remote origin is not yet set up, first run:git remote add origin urltry this command:git pull origin mastergit push -u origin master"
"I was able to resolve the issue myself.What tipped me off is running ""git status"" did not show that file.Instead of using the common solution:cd $(brew --repository)git reset --hard FETCH_HEADI had to do:cd [directory of the file in question]git reset --hard FETCH_HEADThat resolved the problem.This fixed it for me:http://stackoverflow.com/a/20138806cd `brew --prefix`git fetch origingit reset --hard origin/masterI had this problem after manually correcting a URL in the numpy formula.  I was able to correct this later by:cd /usr/local/Library/Taps/homebrew/homebrew-pythongit checkout -- numpy.rbbrew update"
"Update July 2012 (git 1.7.12+)You now can rebase all commits up to root, and select the second commit Y to be squashed with the first X.git rebase -i --root masterpick sha1 Xsquash sha1 Ypick sha1 Zgit rebase [-i] --root $tipThis command can now be used to rewrite all the history leading from ""$tip"" down to the root commit.See commit df5df20c1308f936ea542c86df1e9c6974168472 on GitHub from Chris Webb (arachsys).Original answer (February 2009)I believe you will find different recipes for that in the SO question ""How do I combine the first two commits of a git repository?""Charles Bailey provided there the most detailed answer, reminding us that a commit is a full tree (not just diffs from a previous states).And here the old commit (the ""initial commit"") and the new commit (result of the squashing) will have no common ancestor.That mean you can not ""commit --amend"" the initial commit into new one, and then rebase onto the new initial commit the history of the previous initial commit (lots of conflicts)(That last sentence is no longer true with git rebase -i --root <aBranch>)Rather (with A the original ""initial commit"", and B a subsequent commit needed to be squashed into the initial one):Go back to the last commit that we want to form the initial commit (detach HEAD):git checkout <sha1_for_B>Reset the branch pointer to the initial commit, but leaving the index and working tree intact:git reset --soft <sha1_for_A>Amend the initial tree using the tree from 'B':git commit --amendTemporarily tag this new initial commit (or you could remember the new commit sha1 manually):git tag tmpGo back to the original branch (assume master for this example):git checkout masterReplay all the commits after B onto the new initial commit:git rebase --onto tmp <sha1_for_B>Remove the temporary tag:git tag -d tmpThat way, the ""rebase --onto"" does not introduce conflicts during the merge, since it rebases history made after the last commit (B) to be squashed into the initial one (which was A) to tmp (representing the squashed new initial commit): trivial fast-forward merges only.  That works for ""A-B"", but also ""A-...-...-...-B"" (any number of commits can be squashed into the initial one this way)I've reworked VonC's script to do everything automatically and not ask me for anything. You give it two commit SHA1s and it will squash everything between them into one commit named ""squashed history"":#!/bin/sh# Go back to the last commit that we want# to form the initial commit (detach HEAD)git checkout $2# reset the branch pointer to the initial commit (= $1),# but leaving the index and working tree intact.git reset --soft $1# amend the initial tree using the tree from $2git commit --amend -m ""squashed history""# remember the new commit sha1TARGET=`git rev-list HEAD --max-count=1`# go back to the original branch (assume master for this example)git checkout master# Replay all the commits after $2 onto the new initial commitgit rebase --onto $TARGET $2For what it's worth, I avoid this problem by always creating a ""no-op"" first commit, in which the only thing in the repository is an empty .gitignore:https://github.com/DarwinAwardWinner/git-custom-commands/blob/master/bin/git-myinitThat way, there's never any reason to mess with the first commit.This will squash second commit into the first one:A-B-C-... -> AB-C-...git filter-branch --commit-filter '    if [ ""$GIT_COMMIT"" = <sha1ofA> ];    then        skip_commit ""$@"";    else        git commit-tree ""$@"";    fi' HEADCommit message for AB will be taken from B (although I'd prefer from A).Has the same effect as Uwe Kleine-KÌ_nig's answer, but works for non-initial A as well.Squashing the first and second commit would result in the first commit being rewritten. If you have more than one branch that is based off the first commit, you'd cut off that branch.Consider the following example:a---b---HEAD \  \   '---dSquashing a and b into a new commit ""ab"" would result in two distinct trees which in most cases is not desirable since git-merge and git-rebase will no longer work across the two branches.ab---HEADa---dIf you really want this, it can be done. Have a look at git-filter-branch for a powerful (and dangerous) tool for history rewriting.You could use rebase interactive to modify the last two commits before they've been pushed to a remotegit rebase HEAD^^ -iIf you simply want to squash all commits into a single, initial commit, just reset the repository and amend the first commit:git reset hash-of-first-commitgit add -Agit commit --amendGit reset will leave the working tree intact, so everything is still there. So just add the files using git add commands, and amend the first commit with these changes. Compared to rebase -i you'll lose the ability to merge the git comments though.You can use git filter-branch for that.  e.g.git filter-branch --parent-filter \'if test $GIT_COMMIT != <sha1ofB>; then cat; fi'This results in AB-C throwing away the commit log of A."
"In short, WARNING: there is no real safe way to undo a merge except to actually reset the branch to the commit before the merge.Let me explain and browse for an existing reference for now.Git revert of merge commit causes issues when merge is actually done.Git merge, then revert, then revert the revertQuoting the linked answer from How do you revert a faulty git merge commitBasically, reverting a merge will undo the data changes, but not the history (graph) changes. Therefore it is expected that reverting your faulty merge does nothing.Certainly, resetting the branch would be the most simple approach, but it has drawbacks if the result of the merge has already been pushed to a shared repo (because you're effectively rewriting published history).Here is the breakdowngit merge <someref> to merge (optionally commit after resolving conflicts)If you find out right away that you want to reset the branch to before the merge:git reset HEAD@{1}      # optionally pass --hard to reset the working tree tooif you found out only later, per-use the reflog to find the point before the merge. (HEAD@{1} is short for the previous value of the current head reference, but the reflog tracks a limited history of values for the head reference)git reflogreset the branchgit reset HEAD@{n} # substitute reflog entry indexoptionally rebase/cherry-pick the commits done after the mergegit cherry-pick HEAD@{1} # just an example. interactive tools will make this easierAnother (more safe) approach is to create a diff between the last good and the current version of the file and then restore the lost parts by copy&paste.This always works, doesn't need any odd command line options, and it doesn't tamper with things that you should leave alone :-)Eclipse, for example, has good tools to cherry pick each individual difference and copy it to either version. Just use the ""Compare"" menu to open both versions side by side.The most straightforward way is:git revert --mainline 1 abc123Where mainline tells you which of the multiple previous commits is the one to consider as the one whose state to restore.I can't find a good explanation of what the mainline numbers mean, but my guess is that they're a list of mappings to previous commits sorted by ascending chronological order (oldest first - which is usually what you want to revert to).Source:http://thezencoder.com/2013/09/05/how-to-correctly-revert-a-bad-merge-in-git/"
"Your merge direction is incorrect as i see it:You should do:git checkout mastergit pull origin masterhere you have two variants:1) if you don't want to rewrite dev branch history on the remote then yo got to keep it as is but to dogit merge dev # will produce merge commit if not fast-forward 2) or if you don't care much about dev branch historygit checkout devgit rebase master # now all commits that happened in dev will be ""on top"" of master, master will be behindgit checkout mastergit merge dev # will result in fast-forward merge without merge commitNow in order to go back to the state before the faulty merge you can just do (if the merge is the last thing you did in dev branch):git checkout devgit reset --hard HEAD~1Now you can merge properly. In second case the push of dev branch to remote dev most times will be prohibited as non-fast-forward unless you will use -f flag. Hope that helps."
"Run git merge --abort.You are in the middle of a merge, so stashing is definitely not something you should do (you would lose the history information associated with the merge).git stash is to save the changes for future use, not for canceling a conflicted state, that's why it doesn't work.Instead use git reset ORIG_HEAD (see How to Just undo a git pull?)"
"mate is the command-line utility for TextMate (an editor for OS X that influenced Sublime Text in many ways) in the same way that subl is the command-line utility for Sublime. Somehow (perhaps in your .gitconfig?) it got set up as your default editor, and git is trying to open it to compose a commit message. Run through your settings (you may also want to check .bashrc, .bash_profile, .profile, or other files associated with your particular shell), see where mate -w got defined as your EDITOR, and change it to to subl -w, assuming you've installed it correctly."
"It's not the commits you've made that touch the file, but the commits that you're pulling. Inspect the remote branch you're tracking to see what's happened. For example, git log master..origin/master will show all the commits that have happened on origin/master since you last pulled. According to your output above, there are 26 of these. Using the --name-status option will show which commit added the file.You will need to rename the offending file, do the pull, and then move it back (overwriting the copy from the repo). git diff filename will then tell you how your copy differs from the one that someone else has committed to master. You can then commit the differences, or throw them away with git checkout filename.You will need to use git pull --rebase to rebase your recent commits on top of the ones in origin. Once git status says master is ahead rather than diverged from origin/master, you can push."
"My solution to this problem uses rebase rather than mergeStarting with a commit tree like this:a-b-c <-- master \  d <-- local   \    e-f-g <-- dev$ git rebase --onto master local dev       master        V    a-b-c-e'-f'-g' <-- dev     \      d <-- local$ git checkout master$ git merge dev               master                V    a-b-c-e'-f'-g' <-- dev     \      d <-- local$ git rebase --onto master master local               master                V    a-b-c-e'-f'-g' <-- dev                \                 d' <-- local$ git branch -f dev local               master                V    a-b-c-e'-f'-g'                \                 d' <-- local                 ^                 devYou can use git cherry pick to only merge the patches you select. Just cherry pick every commit except for the local one over to the master branch.A technical (Git) solution would be using git attributes, using the attribute merge.mergeThe attribute merge affects how three versions of a file is merged when a file-level merge is necessary during git merge.You will find in the SO question ""How do I tell git to always select my local version for conflicted merges on a specific file?"" an example of using such an attribute, to force keeping the local version of certain files when merging to a given branch.The problem with setting merge attributes is that the files that contain the paths may contain other changed code, which I want mergedDo not forget you can associate any kind of script to manage those merges through git attributes. That include a script able to keep changes you want local, while merging the rest. It is more complicated to write such a ""merge manager"", but it is a way toward an ad-hoc automated solution.A less-technical solution would be to separate the configuration values from the configuration files:the configuration file contains only names to be replacedthe configuration values are several files (one per environment) with the actual values for each name.A script is used to replace the name in the actual config file by the values of one of the config values files needed for a given environment.ok. this is not guaranteed to work every time but something like this can work (and in the cases it wont you will have a conflicting changes anyway that has to be resolved):do your local branchdo local-only changecontinue developmentwhen doing merge to the master:rebase -i master from your branch and move the local-only change to the END of the patch chain.resolve any conflicts in the process. If the local-only change is in the config files and you are not touching them in the regular development, then you will have no problems. If, otherwise, you do have a conflict, then this is a case when you actually change in the same area and it needs your attention to resolve anyway.check out mastermerge your local-branch -1:git merge local^This will leave you with master having all the changes on the local except for the last one.If you have multiple local=only changes, I suggest you squash them together during rebase.Personally, if I had to do something like this and was for whatever reason prevented from refactoring credentials as I go, I'd add two more branches, ending up with an arrangement similar to the following:master: the original code you inheritedlocalcred: branch from master, and add just the one patch that changes all the credentials to what you need locally.  Treat this branch as read-only hereafter (and possibly add a hook to prevent accidental commits).feature: branch from master, and all fixes go here (and possibly add a hook to prevent merging with the patch in localcred)local: a branch (not a tag!) that will start out as a branch of localcred, and then merge feature whenever you need to run your unit tests.  All testing happens from here, but no development happens here.  In addition, this branch is disposable, because you might want to rebase inside of feature, and the fastest way to deal with the result will be to delete branch local, branch it again from localcred and merge feature before running your tests.  This is likely to be a common enough operation in my workflow that I'd build an alias to do it repeatedly in just a few keystrokes, but I work the hell out of the disposability of Git branches, which kind of freaks out some people who watch me, so YMMV.When you think your fixes are ready for publication, you do your final rebase of feature to clean up the history, dump and recreate local for your final test, merge feature into master, and once that's accepted upstream, merge master into localcred and rebase your credential patch to the top, then dump and recreate local and feature and play the game all over again.If you want to rapidly test a large set of tiny variations of code without having to commit and merge each time, checkout local, make your changes until you're happy, commit, and immediately cherry-pick from local into feature, then drop and recreate local.Does that satisfy your needs?"
"To create a new commit that 'undoes' the changes of a past commit, use:$ git revert <commit>It's also possible to actually remove a commit from an arbitrary point in the past by rebasing and then resetting, but you really don't want to do that if you have already pushed your commits to another repository (or someone else has pulled from you).To revert a merge commit, you need to use: git revert -m . So for example, to revert the recent most merge commit using the parent with number 1 you would use:git revert -m 1 HEADTo revert a merge commit before the last commit, you would do:git revert -m 1 HEAD^Use git show <merge commit SHA1> to see the parents, the numbering is the order they appear e.g. Merge: e4c54b3 4725ad2git merge documentation:http://schacon.github.com/git/git-merge.htmlgit merge discussion (confusing but very detailed): http://schacon.github.com/git/howto/revert-a-faulty-merge.txtIf I understand you correctly, you're talking about doing asvn merge -rn:n-1to back out of an earlier commit, in which case, you're probably looking forgit revert"
"git will not overwrite your data unless you use reset. git pull will take the commits on origin/master (assuming your branch is master) and try to fast-forward your local branch to that point, merging any local changes. If you've committed locally, and those commits are meant to go after any more recent commits on the server, you can do git pull --rebase instead."
"The error is unreleated to the message, which is just the commit message. If you look at the logs you will see that npm cannot find a version of grunt-protractor-runner that matches the version specified. This is because your package.json is using the new ^ syntax, which was introduced in a recent version of npm, hence why your installation works on node v0.10 but not v0.8. You can either change this ^ to a ~ or remove node v0.8 from your .travis.yml"
"The error is telling you that it can't find a source for that blob object on your filesystem, presumably due to filesystem or repository corruption of some kind.git-find-blob is finding references to that blob, not the blob itself.git fsck will check your repository, but will probably just report the same error.ls -al .git/objects/72/4b6f6b35fd871a84ab1742099de2c3671d7899 to check if it's there at all and if it has messed up permissions, otherwise follow a set of instructions of your choice for recovering from repository corruption; preferably, if everything was pushed, re-cloning?"
"Okay I finally found answer: git commit -m ""Test"" apparently fixed this. The result was an empty commit with no changes whatsoever. Even Github shows an empty commit, but it works.Did you end up with an empty merge commit (two parents) or just an empty commit? In the latter case, you could have deleted .git/MERGE_HEAD.Update: Rather than delete MERGE_HEAD by hand, you could also use git merge --abort (as of git 1.7.4) or git reset --merge (as of git 1.6.2).It's also worth mentioning that at least as of git 1.8.3 (maybe earlier?) you should see a status message like this if an actual merge is in progress and needs to be committed (if you specified --no-commit, for example):# On branch master# All conflicts fixed but you are still merging.#   (use ""git commit"" to conclude merge)#nothing to commit, working directory cleanIf you don't see this and still get the MERGE_HEAD warning, something is messed up and you should probably just --abort to get back to a clean state.Additional Detail from CommentsDuring a merge, git creates a MERGE_HEAD file in the root of the .git folder (next to HEAD, ORIG_HEAD, probably FETCH_HEAD, etc) to track information about the merge in progress (specifically, the SHA(s) of the commit(s) being merged into the current HEAD). If you delete that, Git will no longer think a merge is in progress. Obviously, if a merge really is in progress then you wouldn't want to delete this file."
"First, let me suggest that you read the Pro Git book, because most of the documentation that comes with git is pretty bad, especially for newbies.  (It's improved from where it was 5+ years ago, but it still leaves much to be desired.)That said, let me try a quick introduction to ""what you need to know"" here.Introductory stuffWhen working with other people (including github which counts as ""other people"" here), you're having your git call up their git over the internet-phone and exhcange work.  These other people are peers, i.e., they have the exact same ability to do new work that you do, at least in the general case (github won't itself do new work all on its own).  What this means is that during an exchange, you might have things ""they"" (whoever they are) don't but they might also have things you don't.Git exchanges work with individual commits.1  Exactly which commits, and how, gets a bit more complicated, so let's hold off on that for a moment.The opposite of git push is not git pull, it's actually git fetch.  I think the error message you get should not refer directly to git pull; we'll see more on this in a bit as well.Git keeps track of commits internally by their ""true name"" SHA-1 IDs, which are the long 40-character-hex things you see in git log output, for instance.  Every commit has some set of ""parent"" commits, identified by SHA-1 IDs.  You could use SHA-1 IDs yourself, but they're extremely human-unfriendly, you'd never remember whether you should start with f13c9ab or 0e1d227 or whatever (and these are abbreviated IDs!).So, git therefore provides you, the user, with branch names like master.  A branch name is simply a name that you tell git to use to keep track of the newest commit you've made on that branch.The newest commit has, as its parent, the commit that ""used to be newest"", which has an even older ""newest"" as its parent, and so on.  (The way git achieves this is remarkably simple: when you make a new commit, its parent is ""the current commit"", and once the commit is safely stored in the repository, git replaces the ID stored in the branch with the ID of the new commit just made.)Given the last three items, let's draw a commit graph fragment:... <- 1f3a33c <- 98ab102   <-- branchHere, the tip of the branch is commit 98ab102 and its parent is 1f3a33c.  We can say that the name branch ""points to"" 98ab102, which points to its parent, and so on.When you make a new repository (git init, assuming this actually makes one2) it's entirely empty of commits, so the first commit has no parent.  It's the second and third and so on commits that point back to previous commits.When you do a ""merge"", you tell git to take two (or more,3 but let's just say two, for now) existing commits and make a new commit that has both of those as parents, by combining all the changes from some common point.  Merges are not that complicated, but they're something you should generally do after deliberately dividing up work into separate lines of development.Now, back to fetch, push, and pullYou've created a new repository (git init), put in at least one commit (git commit), and added a ""remote"" (git remote add origin ...).  This last step says ""I have a peer git I want to call origin, so remember the URL under that name.""Then, you asked your git to call up ""origin"" (git push ... origin) and give it your commits as found under your branch-name ""master"" (git push ... master).  Here's where it gets a little bit tricky.  When your git talks to his git, what name should his git use?  The short answer here is that his git will use the name master too.  This is changeable, but changing it is not what you want here.(You also asked, via the -u flag, to have your git record this exchange in your git configuration.  We'll leave that aside for now.)When your git called up his git, your git said ""here, look at these shiny new commits"" (and he did), and then your git said: ""Why not add these new commits exactly as they are to your repository,4 and make your master point to the tip-most of those commits?""  His answer was: ""Well, I could do that, but then I'd lose some commits I have that you don't.""  This is where you see the rejected message.Maybe you want them to forget their stuff-so-far.  If so, you can ask for a ""force push"", where you have your git tell them to set their master even if that ""loses"" some commits.  It's still up to them whether to do this, but often it's not what you want.Maybe you want to pick up what they have and add it to your collection, or pick up what they have and toss out your own work-so-far.  This is where you want git fetch.What git fetch does, de-complicated as much as possible,5 is call up the peer over the Internet-phone and find out what they have that you don't.  It brings over all these commits (remember, the exchanges go by commits) and adds them, Borg-like, to your repository.  Then‰ÛÓthis is the crucial part‰ÛÓit changes their branch-names so that they won't interfere with your branch-names.The names that git fetch uses to synchronize with your peers are called ""remote-tracking branches"" or sometimes ""remote branches"".  One odd thing about ""remote branches"" is that they're not actually on the remote!  They're kept in your own repository.  The reason is simple: they're a snapshot of what was on the remote, the last time your git talked to that remote.  After the two gits hang up the Internet-phone, the remote could get changed.  (How fast a remote actually changes depends, of course, on how busy that remote git is.)The renaming-pattern here is simple: take the remote's branch name (like master) and add the name of the remote (origin) in front: your origin/master ""tracks"" origin's master.  (There's a full-name form that you can use if you accidentally name one of your own purely-local, not-remote-tracking, branches origin/oops for instance, but your best bet is not to do that in the first place.)Wait, where does git pull come in?Note that so far, it's been all git push and git fetch.  But suppose you've done a git fetch and picked up their work?  Now you have a bit of a problem: you have your work, and you have their work, and these two have diverged.If you both started from a common base, we can draw your commit graph like this:... base <- yours   <-- HEAD -> master         \           theirs   <-- origin/masterI put in the HEAD -> this time to show which branch you're on (run git status and you should see ""on branch master"" in its output).One easy way to tie these two divergent bits of work together is to use git merge.  If you want to do that, you simply run git merge origin/master (note the slash: you want your git to find your origin/master, which it picked up during git fetch, and merge that into your master, making a new commit on your master).  The result looks like this:... base <- yours <- merge  <-- HEAD -> master         \         /           theirs      <-- origin/masterAnother way to handle this‰ÛÓusually the better way, in fact‰ÛÓis to use git rebase, which I won't go into in detail here; there are plenty of over StackOverflow answers about using rebase.  If you do, though, you wind up with:... base <- theirs <- yours   <-- HEAD -> master                  \                   .......... <-- origin/master(Note that in all cases, origin/master still points to the tip-most ""theirs"" commit.)The main point to keep in mind right now is that whatever you do, if you want to get their git to accept your commits without having to force-push, you need to make your work be an add-on to theirs, so that your new commits ""point back to"" theirs.  It doesn't matter to the push process whether your work has theirs as a ""second parent"" of a merge commit, or simply builds directly on their commit(s); it only needs to point to their commits, by their commit-IDs.  (But again, rebase is usually better than merge!)So, git pull (finally!)...What git pull does, simplified, is just run git fetch and then git merge.  In short, it's meant as a convenience script: you're always fetching and then merging, so we'll give you a script that fetches, then merges.Of course, git merge is usually wrong.  It really should use git rebase by default.You can make git pull use git rebase,6 but I think it's wiser, at least (or especially?) for newbies, to use the two separate steps‰ÛÓin part because if something goes wrong, the way you recover from this is different for the two different actions.  To get out of a failing merge, you use git merge --abort.  To get out of a failing rebase, you use git rebase --abort.  (These used to be even more different, now it's just ""abort whatever's failing"", which is a big improvement.  But you need to know which to do, and that's an awful lot clearer if you started with git merge or git rebase.)The bottom lineIn the end, the action you need to take here depends on what you want to have happen, and what the remote will allow you to do.  If you want to drop their stuff, use git push -f (force), being aware that you're causing them (whoever they are) pain this way, and that they might forbid it entirely.  If you want to keep their stuff, use git fetch first, then keep their stuff however you prefer (merge, rebase, rework, whatever).1Or with patches, which you can exchange with your peers by email.  It's also possible to ""bundle"" commits and transfer them by other methods.  But in this case we're doing commit-based exchanges over the Internet-phone.2You can safely run git init in an existing repository.  It has a minor effect but for our purposes here it basically does nothing, hence the need to say ""assuming it actually makes one"".3Git calls this an ""octopus"" merge, even if there are just 3 or 4 parents instead of 8.4Git mostly only ever adds ""more stuff"".  I like to refer to this as the ""Git Borg"", where git adds your technological distinctiveness to its existing collection.5A common theme in git is ""That wasn't quite what you wanted?  OK, we'll keep the existing stuff but make it more complicated so you can do what you want too!""6See footnote 5.This SO answer suggests:git fetch --allgit reset --hard origin/masterBut I haven't tried it yet, so I can't say for certain whether it solves the problem. But it is, at least, one direction to try.GIT is telling you to fetch first. You can see in the log$ git fetch -allProbably somebody else has pushed to master already, and your commit is behind. Therefore you have to fetch, merge the change set, and then you'll be able to push again.If it says there are changes in the remote make a Pull which will update your working directory.$ git pullThen you push your changes to the remote$ git push -u origin masterI hope this will help you push your changes to the master"
"By default git revert refuses to revert a merge commit as what that actually means is ambiguous. I presume that your HEAD is in fact a merge commit.If you want to revert the merge commit, you have to specify which parent of the merge you want to consider to be the main trunk, i.e. what you want to revert to.Often this will be parent number one, for example if you were on master and did git merge unwanted and then decided to revert the merge of unwanted. The first parent would be your pre-merge master branch and the second parent would be the tip of unwanted.In this case you could do:git revert -m 1 HEADSay the other guy created bar on top of foo, but you created baz in the meantime and then merged, giving a history of$ git lola*   2582152 (HEAD, master) Merge branch 'otherguy'|\  | * c7256de (otherguy) bar* | b7e7176 baz|/  * 9968f79 fooNote: git lola is a non-standard but useful alias.No dice with git revert:$ git revert HEADfatal: Commit 2582152... is a merge but no -m option was given.Charles Bailey gave an excellent answer as usual. Using git revert as in$ git revert --no-edit -m 1 HEAD[master e900aad] Revert ""Merge branch 'otherguy'"" 0 files changed, 0 insertions(+), 0 deletions(-) delete mode 100644 bareffectively deletes bar and produces a history of$ git lola* e900aad (HEAD, master) Revert ""Merge branch 'otherguy'""*   2582152 Merge branch 'otherguy'|\  | * c7256de (otherguy) bar* | b7e7176 baz|/  * 9968f79 fooBut I suspect you want to throw away the merge commit:$ git reset --hard HEAD^HEAD is now at b7e7176 baz$ git lola* b7e7176 (HEAD, master) baz| * c7256de (otherguy) bar|/  * 9968f79 fooAs documented in the git rev-parse manual<rev>^, e.g. HEAD^, v1.5.1^0  A suffix ^ to a revision parameter means the first parent of that commit object. ^<n> means the n-th parent (i.e. <rev>^ is equivalent to <rev>^1). As a special rule, <rev>^0 means the commit itself and is used when <rev> is the object name of a tag object that refers to a commit object.so before invoking git reset, HEAD^ (or HEAD^1) was b7e7176 and HEAD^2 was c7256de, i.e., respectively the first and second parents of the merge commit.Be careful with git reset --hard because it can destroy work."
"NEW:Apparently 1) github does not give ssh access :(, and 2) it's impossible to share reflogs between different machines through git protocol.So... You already created a ticket apparently, but you don't necessarily need them to fix the repository. All you need is for them (since they have privileged access) to run git reflog master on the server's repo and then paste the results for you to view. In that file, look for the previous SHA-1 value of master (since the current one doesn't seem to work). Once you have that, you (I think) can do the following (on your own computer):$ git checkout -b temp$ git update-ref refs/heads/temp $SHA1$ git push -u origin +temp:masterThis will undo the merge operation on the server.You may be able to get the previously working SHA1 without having to get the reflog from the server. In your local repo (or your friend's local repo), the previously working commit does exist somewhere in there. If you can figure out a way to find it there, then you can proceed with the above suggestion.OLD: Here is my first thought. If you are able to copy the .git/logs directory from the server, then that will have stored in it all the previous values of the master branch. Specifically, the file .git/logs/refs/heads/master will be a raw text file with the previous values of that branch. For example (I don't know if github allows you to do this or not):$ git clone https://github.com/dapphp/securimage.git -b audiofixes$ scp github.com:/dapphp/securimage.git/logs/refs/heads/master .git/logs/refs/remotes/origin/master$ git update-ref refs/remotes/origin/master refs/remotes/origin/master@{1} #see ""Date Spec"" section of http://book.git-scm.com/4_git_treeishes.htmlthat should theoretically change the value to what master was previously. However it will only do that locally and will not actually change the value on the server, which is what we really need. So if you could ssh directly to the server and just run that last command there, that would (again, theoretically) fix the problem for good by simply undoing the merge..This is all that I can think of on top of my head. But I really like solving git puzzles like this, so I'll let it sit in my head for a bit longer :)"
"The error is that somebody else has pushed in the master branch and you would overwrite their change if git allowed you to push (this is what non-fast forward error means). So you need to merge your local master branch with the remote master branch.This can happen if you did the git pull while the local branch was not the master branch. If you only want to push the branch you are working on and not the master branch, you need to tell it to git using the complete form of git-push:$ git push remote local-branch:remote-branchThe best possible answer is on Git help hereDealing with non-fast-forward errorsFrom time to time, you may encounter this error while pushing commits (git push origin master) to GitHub:To https://github.com/user/repo.git   ! [rejected]        master -> master (non-fast-forward)  error: failed to push some refs to 'https://github.com/user/repo.git'  To prevent you from losing history, non-fast-forward updates were rejected  Merge the remote changes (e.g. 'git pull') before pushing again.  See the  'Note about fast-forwards' section of 'git push --help' for details.This error can be a bit overwhelming at first; do not fear!Simply put, Git can't make the change on the remote without losing commits, so it refuses the push. Usually, this is caused by another user pushing to the same branch.You can remedy this by fetching and merging the remote branch:git fetch origingit merge origin masterOr, you can simply use git pull to perform both commands at once:git pull origin masterIn some cases, this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase. While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do. Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don't force-push.Be sure to verify that the pull actually worked.  It is possible the merge (which is part of a pull) failed.When I had this error message I failed to notice the pull failed.  The pull failed due to some uncommitted file changes (unrelated to the files I was trying to push) which caused the merge to fail. I reverted those file changes (because they were not important) and then did a pull again.  After the successful pull, the push worked."
"Say the remote is origin and the branch is master, and say you already have master checked out, might try the following:git fetch origingit reset --hard origin/masterThis basically just takes the current branch and points it to the HEAD of the remote branch.WARNING: As stated in the comments, this will throw away your local changes and overwrite with whatever is on the origin.Or you can use the plumbing commands to do essentially the same:git fetch <remote>git update-ref refs/heads/<branch> $(git rev-parse <remote>/<branch>)git reset --hardEDIT: I'd like to briefly explain why this works.The .git folder can hold the commits for any number of repositories. Since the commit hash is actually a verification method for the contents of the commit, and not just a randomly generated value, it is used to match commit sets between repositories.A branch is just a named pointer to a given hash. Here's an example set:$ find .git/refs -type f.git/refs/tags/v3.8.git/refs/heads/master.git/refs/remotes/origin/HEAD.git/refs/remotes/origin/masterEach of these files contains a hash pointing to a commit:$ cat .git/refs/remotes/origin/masterd895cb1af15c04c522a25c79cc429076987c089bThese are all for the internal git storage mechanism, and work independently of the working directory. By doing the following:git reset --hard origin/mastergit will point the current branch at the same hash value that origin/master points to. Then it forcefully changes the working directory to match the file structure/contents at that hash.To see this at work go ahead and try out the following:git checkout -b test-branch# see current commit and diff by the followinggit show HEAD# now point to another locationgit reset --hard <remote>/<branch># see the changes againgit show HEADI've had luck with git checkout -f <branch>in a similar situation.http://www.kernel.org/pub//software/scm/git/docs/git-checkout.htmlUndo delete in GITAssuming you want to throw away any changes you have, first check the output of git status. For any file that says ""unmerged"" next to it, run git add <unmerged file>. Then follow up with git reset --hard. That will git rid of any local changes except for untracked files."
"The error you're getting comes from the large files in your repository.  Git is trying to put the entire contents of the file in memory, which makes it croak.Try Upgrading GitGit 1.7.6 was released last month and has this lovely bit in its release notes:Adding a file larger than core.bigfilethreshold (defaults to 1/2 Gig) using ""git add"" will send the contents straight to a packfile without having to hold it and its compressed representation both at the same time in memory.Upgrading to 1.7.6 might enable you to run git gc and maybe even git merge, but I can't verify because it's hard get a repository into that state (the conditions must be just right).Try Removing the Offending FilesIf upgrading Git doesn't help, you can try removing the large files from the repository using git filter-branch.  Before you do that, try backing up the large files using git cat-file -p <commit_sha1>:path/to/large/file >/path/to/backup/of/large/file.You'll want to do these operations on your most beefy machine (lots of memory).If this works, try re-cloning to the other machines (or simply rsync the .git directory)."
"If you use git rm git will remove all versions of that path from the index so your resolve action will leave you without either version.You can use git checkout --ours src/MyFile.cs to chose the version from the branch onto which you are rebasing or git checkout --theirs src/MyFile.cs to chose the version from the branch which you are rebasing.If you want a blend you need to use a merge tool or edit it manually.I sometimes find it confusing using the --theirs and --ours options to identify where the file will come from. Most of the time mine will be in the branch I am rebasing which is referred to by --theirs!You can also use git checkout <tree-ish> -- src/MyFile.cs Where the <tree-ish> can be replaced either by the branch name or commit-id that contains the file you wish to keep.git checkout 6a363d8 -- src/MyFile.csgit checkout my_branch -- src/MyFile.csgit checkout HEAD -- src/MyFile.csWhen doing ...git checkout --ours someFileIt may seem like it didn't do anything when doing git status.Just Remember to do this afterwards.git add someFilegit status"
"When you do git commit but don't do git push, the changes are added in your local repository and are not committed to the global repo. So, whosoever pushes his changes first, he won't get any conflicts since the remote server doesn't know about the changes made by other user that are not yet pushed. Later when the next user tries to push the changes, git will give error that the global repo has been changed and you must pull the changes first. Since, the changes are in the same file and the location has been changed, There will be a conflict, which would not be resolved by git itself.The next user will have to make the changes again and push it so as to update the global repo.Git/SVN/etc, do a merge as best as possible: if they see that separate, non interfering lines of code have been added/deleted/modified, then it will simply combine those changes made by John/FileA.c and Karen/FileA.c (its become practice to make someone in your example a girl =P). If the merge script see's that the same lines of code have been edited then it will mark it as conflict in the file.I think this point has been made, but this process occurs locally; either by Karen or John, depending on who was the person to try and push last. The person who pushed last will be notified to pull from the remote repo and resolve any conflicts before pushing their own changes.Git will never merge during push. One of the two devs (the poor one who tries to push last) has to resolve the conflict locally and tell git where to move the file. Git cannot know where the file should end up without human intervention.# dev1git clone ‰Û_mkdir John && git mv FileA.c John/FileA.cgit commit -m 'move file to john subdir'git push origin master# dev2git clone ‰Û_mkdir Tom && git mv FileA.c Tom/FileA.cgit commit -m 'move file to tom subdir'git push origin master# git errors out: non-fast-forward, pull first to resolve potential conflictsgit pull origin master# merge conflict in FileA.c# tell git which file to delete and which file to keep:git rm Tom/FileA.c && git add John.FileA.cgit commit # creates a merge commitgit push origin masterA second push operation will fail; merge has to be done locally. In this case there will be a conflict that must be resolved manually.The nice thing about git is that it's easy to try these things out for yourself without affecting any servers.  The result for the last guy to push is:02:32:54 ~/desktop/tom$ git pushTo /cygdrive/h/desktop/test ! [rejected]        master -> master (non-fast-forward)error: failed to push some refs to '/cygdrive/h/desktop/test'To prevent you from losing history, non-fast-forward updates were rejectedMerge the remote changes (e.g. 'git pull') before pushing again.  See the'Note about fast-forwards' section of 'git push --help' for details.02:32:54 ~/desktop/tom$ git pullremote: Counting objects: 3, done.remote: Total 2 (delta 0), reused 0 (delta 0)Unpacking objects:  50% (1/2)   Unpacking objects: 100% (2/2)   Unpacking objects: 100% (2/2), done.From /cygdrive/h/desktop/test   307f68a..2539f44  master     -> origin/mastererror: refusing to lose untracked file at 'John/FileA.c'error: refusing to lose untracked file at 'John/FileA.c'CONFLICT (rename/rename): Rename ""FileA.c""->""Tom/FileA.c"" in branch ""HEAD"" rename ""FileA.c""->""John/FileA.c"" in ""2539f448bb15d10f14bef74688dc3470975c2dbf""CONFLICT (rename/rename): Rename ""FileA.c""->""Tom/FileA.c"" in branch ""HEAD"" rename ""FileA.c""->""John/FileA.c"" in ""2539f448bb15d10f14bef74688dc3470975c2dbf""Automatic merge failed; fix conflicts and then commit the resultGit is nice and asks which rename is the correct one.  Note that not all version control systems are capable of detecting this kind of rename/rename conflict."
"A single branch of another repository can be easily placed under a subdirectory retaining its history. For example:git subtree add --prefix=rails git://github.com/rails/rails.git masterThis will appear as a single commit where all files of Rails master branch are added into ""rails"" directory.However the commit's title contains a reference to the old history tree.Add 'rails/' from commit <rev>Where <rev> is a SHA-1 commit hash. You can still see the history, blame some changes.git log <rev>git blame <rev> -- README.mdNote that you can't see the directory prefix from here since this is an actual old branch left intact.You should treat this like a usual file move commit: you will need an extra jump when reaching it.# finishes with all files added at once commitgit log rails/README.md# then continue from original treegit log <rev> -- README.mdThere are more complex solutions like doing this manually or rewriting the history as described in other answers.The git-subtree command is a part of official git-contrib, some packet managers install it by default (OS X Homebrew).But you might have to install it by yourself in addition to git.There are two possible solutions:SubmodulesEither copy repository A into separate directory in larger project B, or (perhaps better) clone repository A into subdirectory in project B.  Then use git submodule to make this repository a submodule of a repository B.This is a good solution for loosely-coupled repositories, where development in repository A continues, and major portion of development is separate stand-alone development in A.  See also SubmoduleSupport and GitSubmoduleTutorial pages on Git Wiki.Subtree mergeYou can merge repository A into a subdirectory of a project B using the subtree merge strategy. This is described in Subtree Merging and You by Markus Prinz.git remote add -f Bproject /path/to/Bgit merge -s ours --no-commit Bproject/mastergit read-tree --prefix=dir-B/ -u Bproject/mastergit commit -m ""Merge B project as our subdirectory""git pull -s subtree Bproject masterOr you can use git subtree tool (repository on github) by apenwarr (Avery Pennarun), announced for example in his blog post A new alternative to git submodules: git subtree.I think in your case (A is to be part of larger project B) the correct solution would be to use subtree merge"
"You can either commit your changes before you do the merge, or you stash them:git stashgit merge origin/mastergit stash popIf you want to keep your changes, you can commit your changes to your local repository first and then merge the remote repository."
"There are changes in the central repository that you must pull before you can push.Do git add -Agit commit -m ""my local changes"" git pullResolve any conflicts. Then dogit pushAlternatively, if you have no valuable modifications locally, you can create a new clone of your repo, and start working from there:git clone https://johnsproject@bitbucket.org/johnsproject/proj.git new_repo_dirTry doinggit pull origin mastergit add -Agit commit -m ""modified code""git push origin masterYour local repository is likely out of sync with the remote repository."
"This is caused by an old bug in the update code that has long since been fixed. However, the nature of the bug requires that you do the following:cd $(brew --repository)git reset --hard FETCH_HEADIf brew doctor still complains about uncommitted modifications, also run this command:cd $(brew --repository)    git clean -fdTry the solution suggested on the ""Common Issues"" page under brew update complains about untracked working tree files. I had a similar issue and this resolved it for me."
"As you state, ""git pull"" is equivalent to ""git fetch + git merge"".If you can not do a ""git merge"", it follows logically that you can not do a ""git pull"", because it will do a ""git merge"" in the process.You likely have your own files in Temp, or your local *.pidb files may already exist and conflict with the upstream branch.Putting these files into version control is just asking for trouble, unless you want to version and reconcile differences to these files (and you really don't...), I suggest you reject the upstream changes and tell them to fix it.Incidentally, for the record, this is what the full output of git pull looks like, I have made a simple test repository to demonstrate:$ git --versiongit version 1.7.12.4 (Apple Git-37)$ git pullUpdating e78f298..3067a12error: The following untracked working tree files would be overwritten by merge:    three.txtPlease move or remove them before you can merge.AbortingIn this case, the answer is very simple:Move three.txt somewhere else. (Perhaps do git stash to do that)Perform the git pullThen, if your version of 'three.txt' was significant, additionally perform:Move three.txt back. (If you did git stash, perhaps you could do git stash popAttempt to reconcile the differences so that you aren't just clumsily overwriting the other person's changes.Commit the new changes."
"Make sure that:you are using the latest version of EGit (2.3+)you have stashed/commit everything before pulling (as in this thread)you are not in a detached head mode (as in ""can't push upstream using EGit"")The OP Krige adds:in the end I noticed a class file was mentioned in the DIRTY_WORKTREE error message.  I deleted that file from the file system, did a pull, resolved the conflicts and pushed.  Everything seems to work fine now.If you have the DIRTY_WORKTREE issue and you are not able to delete the file (for whatever reasons), you should do a pull, or replace with HEAD and then add to Index. This will resolve the conflicts (assuming use of the merge tool) and you should then be able to commit/push your changes, or else pull again."
"May I suggest:git reset --hard ORIG_HEADThen investigate the submodule with:git submodule statusDo you have a .gitmodules file in place?   Do your best to remove the notion of a submodule from both branches (commit that), and then re-attempt your merge."
"Your Change-Id is missing. Examine your log message and make sure the Change-Id is the last line of your commit message.If you have copied to commit-msg hook, as you mentioned, and have done the git commit --amend the Change-Id should now be present in you commit message.You try to push a merge commit. These are not modified by the gerrit commit msg hook. However, the error message already suggests a valid ChangeId to use.remote: Suggestion for commit message:remote: Merge branch 'master' of ssh://s3.testing.com:29418/testing into masoudremote:remote: Change-Id: I12be02f75b42c4304591835dffe8d7e8aa01f761So, simple do agit commit --amendand insert the Change-Id above as last line in the commit message."
"You can try (git update-index man page):git update-index --skip-worktree -- pathSkip-worktree bit can be defined in one (long) sentence: When reading an entry, if it is marked as skip-worktree, then Git pretends its working directory version is up to date and read the index version instead.However, as mentioned in ""git assume unchanged vs skip worktree"":Both options have problems. --assume-unchanged resets itself whenever the index gets discarded (e.g. git reset), so that will probably trip you up sooner or later. Same goes for --skip-worktree.What I've started doing is creating a branch off master called private that has my local changes; think of it as a proxy branch between my work branch and master. I can rebase my current work branch against private when I need my local-only changes and I have a couple of aliases in my .gitconfig that automate keeping private up-to-date with master. When I need to merge to master, my aliases make sure to rebase --onto master private my work branch first.I posted a blog entry about this in more detail here http://blog.ericwoodruff.me/2013/02/git-private-branch-pattern.html"
"The conflict message:CONFLICT (delete/modify): res/layout/dialog_item.xml deleted in dialog and modified in HEADmeans that res/layout/dialog_item.xml was deleted in the 'dialog' branch you are merging, but was modified in HEAD (in the branch you are merging to).  So you have to decide whetherremove file using ""git rm res/layout/dialog_item.xml""oraccept version from HEAD (perhaps after editing it) with ""git add res/layout/dialog_item.xml""Then you finalize merge with ""git commit"".Note that git will warn you that you are creating a merge commit, in the (rare) case where it is something you don't want. Probably remains from the days where said case was less rare."
"GitHub has a nice section called ""Dealing with ‰ÛÏnon-fast-forward‰Ûù errors""This error can be a bit overwhelming at first, do not fear.Simply put, git cannot make the change on the remote without losing commits, so it refuses the push.  Usually this is caused by another user pushing to the same branch. You can remedy this by fetching and merging the remote branch, or using pull to perform both at once.In other cases this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase.  While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do.  Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don‰Ûªt force-push.Git cannot make changes on the remote like a fast-forward merge, which a Visual Git Reference illustrates like:This is not exactly your case, but helps to see what ""fast-forward"" is (where the HEAD of a branch is simply moved to a new more recent commit).The ""branch master->master (non-fast-forward) Already-up-to-date"" is usually for local branches which don't track their remote counter-part.See for instance this SO question ""git pull says up-to-date but git push rejects non-fast forward"".Or the two branches are connected, but in disagreement with their respective history:See ""Never-ending GIT story - what am I doing wrong here?""This means that your subversion branch and your remote git master branch do not agree on something.  Some change was pushed/committed to one that is not in the other.  Fire up gitk --all, and it should give you a clue as to what went wrong - look for ""forks"" in the history.It means that there have been other commits pushed to the remote repository that differ from your commits. You can usually solve this with a git pullbefore you pushUltimately, ""fast-forward"" means that the commits can be applied directly on top of the working tree without requiring a merge.I found this description of fast-forward to be the clearest.http://365git.tumblr.com/post/504140728/fast-forward-mergeA fast-forward update is where the only changes one one side are after the most recent commit on the other side, so there doesn't need to be any merging.  This is saying that you need to merge your changes before you can push."
"The reason is that git merge uses a strategy called ""recursive"" merging by default.  It is able to perform 3-way merging: taking the patch from one side, and applying that patch to the other side, to produce a new file.  It also does this recursively, in more complicated situations where a lot of branching and merging has been happening and there are multiple merge bases for the two commits being merged.I recently encountered this same situation:$ git merge-base --all 90d64557 05b3dd8f711d1ad9772e42d64e5ecd592bee95fd63590b86f303c59666877696feef62844cfbb7960d464fc1$With 2 merge bases, a 3-way merge is not possible.  The 'recursive' strategy therefore resolved this by first recursing into a merge of those two commits:$ git merge-base 711d1ad9 f303c5963f5db59435ffa4a453e5e82348f478547440e7eb$OK, only one merge base, so the 3-way merging can begin.  what's the changes on either side?$ git diff --stat 3f5db594 711d1ad9 normalize/coll.py      | 116 ++++++++++++++++++++++++++++++++++++++----------- normalize/visitor.py   |  49 ++++++++++----------- tests/test_property.py |  10 +++-- 3 files changed, 120 insertions(+), 55 deletions(-)$ git diff --stat 3f5db594 f303c596 normalize/identity.py  | 38 +++++++++++++++++++++++++++++++------- tests/test_property.py |  2 ++ 2 files changed, 33 insertions(+), 7 deletions(-)$ These two diffs both made changes to the same file, so they can't be resolved using a simple strategy of just taking the newer version of each file from each side (an index merge).  Instead, git takes the new file from one side, and tries to apply the patch from the other side to it.  The result is a combined commit, which can be simulated like this:$ git checkout -b tmpSwitched to a new branch 'tmp'$ git reset --hard f303c59666877696feef62844cfbb7960d464fc1HEAD is now at f303c59 record_id: throw a more helpful error if record identity is not hashable$ git merge 711d1ad9772e42d64e5ecd592bee95fd63590b86Auto-merging tests/test_property.pyMerge made by the 'recursive' strategy. normalize/coll.py      | 116 ++++++++++++++++++++++++++++++++++++++----------- normalize/visitor.py   |  49 ++++++++++----------- tests/test_property.py |  10 +++-- 3 files changed, 120 insertions(+), 55 deletions(-)$ git diff --stat 3f5db594 HEAD tests/test_property.py tests/test_property.py | 12 +++++++++--- 1 file changed, 9 insertions(+), 3 deletions(-)$It then returns to the original 3-way merge, using this merge result as its starting point; and this also involves changes to the same file:$ git diff --stat HEAD 90d64557| grep selector normalize/selector.py          |  17 +-- tests/test_selector.py         |  19 ++--$ git diff --stat HEAD 05b3dd8f| grep selector normalize/selector.py  | 29 +++++++++++++++++------------ tests/test_selector.py |  9 +++++++++$However again the changes are to different sections of the file, and so taking the diff and applying it to the other side is successful.So, C git was able to resolve this merge by first doing a 3-way merge on the two merge bases of the two starting points, and then doing another 3-way merge on the two original commits being merged and the intermediate result of the first merge.Github's automatic resolution doesn't do this.  It's not necessarily incapable, and I'm not sure how much of the recursive strategy it does implement, but it is erring on the side of caution, which is exactly what you expect a big green button like that to do :-).No, it isn't about merging. It is about rebasing.You should try and rebase, in your local repo (cloned of your fork), otherbranch on top of master.First, make sure master is the most recent one from the original upstream repo:cd /your/local/repogit remote add upstream /url/original/repogit fetch upstream# Make sure you don't have any local commmit on your mastergit branch -f master upstream/master # reset your master branch                                      # to the one from upstream repogit checkout otherbranchgit rebase masterThat rebase will generate conflicts, which you should resolve, git add, and then git rebase --continue.Finally, simply push --force your branch to your fork: that will update your pull request automatically (nothing else to do).git push -u -f otherbranch origin(if it was already pushed once, a git push alone should be enough)See more tips about pull-requests here."
"StashingThe key here is that you have uncommitted work that you want to save. Before trying to merge anything in, you should stash your changes to save your uncommitted changes and clean your working directory.Run git stash to stash your changes. You should then be able to pull the changes without any issues.After you have successfully pulled, you can do a git stash apply to re-apply the changes you had made prior to the pull.Merging and rebasingStashing your changes only works if you only have uncommitted changes. If at some point you committed but didn't push you will need to either rebase or merge.This StackOverflow post has some great information on the differences.In general, merging is easier, but some believe that it ""pollutes"" the git history with merge commits.Rebasing requires additional work, but since you don't have a merge commit it will essentially make the merge invisible.Again, in your case you shouldn't need to merge or rebase. Simply stash, pull, then apply the stash and it should all be good.I couldn't find the answer to this question (i.e. the work-flow) in any of Google's documents... so here's my practical experience using Android Studio and Git completely from a UI.(I vomit at the thought of switching between command line and IDE - it means the IDE is lacking!)Stash your changes with: Right Click Project -> Git -> Repository -> Stash Changes. Give it a name.Pull updates that your colleague did with: Right Click Project -> Git -> Repository -> PullMerge back your code changes with: Right Click Project -> Git -> Repository -> UnStash Changes -> Apply StashYou will then see a ""Files Merged with Conflicts"" UI. This is where you select a file and selectively merge.WARNINGThe manual merge ""Merge Revisions"" UI is TERRIBLE. Once you try it, you'll see what I mean. Good luck trying to get ""Synchronize Scrolling"" to actually work. I sincerely hope this UI is addressed within the first few weeks of 2015."
"You can review the differences with a:git log HEAD..origin/masterbefore pulling it (fetch + merge) (see also ""How do you get git to always pull from a specific branch?"")When you have a message like:""Your branch and 'origin/master' have diverged, # and have 1 and 1 different commit(s) each, respectively."", check if you need to update origin. If origin is up-to-date, then some commits have been pushed to origin from another repo while you made your own commits locally.... o ---- o ---- A ---- B  origin/master (upstream work)                   \                    C  master (your work)You based commit C on commit A because that was the latest work you had fetched from upstream at the time.However, before you tried to push back to origin someone else pushed commit B.Development history has diverged into separate paths. You can then merge or rebase. See Pro Git: Git Branching - Rebasing for details.MergeUse the git merge command:$ git merge origin/masterThis tells Git to integrate the changes from origin/master into your work and create a merge commit.The graph of history now looks like this: ... o ---- o ---- A ---- B  origin/master (upstream work)                   \      \                    C ---- M  master (your work)The new merge commit M has two parents, each representing one path of development that led to the content stored in the commit.Note that the history behind M is now non-linear.RebaseUse the git rebase command:$ git rebase origin/masterThis tells Git to replay commit C (your work) as if you had based it on commit B instead of A.CVS and Subversion users routinely rebase their local changes on top of upstream work when they update before commit.Git just adds explicit separation between the commit and rebase steps.The graph of history now looks like this:... o ---- o ---- A ---- B  origin/master (upstream work)                          \                           C'  master (your work)Commit C' is a new commit created by the git rebase command.It is different from C in two ways:It has a different history: B instead of A.It's content accounts for changes in both B and C: it is the same as M from the merge example. Note that the history behind C' is still linear.We have chosen (for now) to allow only linear history in cmake.org/cmake.git.This approach preserves the CVS-based workflow used previously and may ease the transition.An attempt to push C' into our repository will work (assuming you have permissions and no one has pushed while you were rebasing).The git pull command provides a shorthand way to fetch from origin and rebase local work on it:$ git pull --rebaseThis combines the above fetch and rebase steps into one command.I had this and am mystified as to what has caused it, even after reading the above responses.  My solution was to dogit reset --hard origin/masterThen that just resets my (local) copy of master (which I assume is screwed up) to the correct point, as represented by (remote) origin/master.git pull --rebase origin/master is a single command that can help you most of the time.I found myself in this situation when I tried to rebase a branch that was tracking a remote branch, and I was trying to rebase it on master. In this scenario if you try to rebase, you'll most likely find your branch diverged and it can create a mess that isn't for git nubees!Let's say you are on branch my_remote_tracking_branch, which was branched from master$ git status# On branch my_remote_tracking_branchnothing to commit (working directory clean)And now you are trying to rebase from master as:git rebase masterSTOP NOW and save yourself some trouble! Instead, use merge as:git merge masterYes, you'll end up with extra commits on your branch. But unless you are up for ""un-diverging"" branches, this will be a much smoother workflow than rebasing. See this blog for a much more detailed explanation.On the other hand, if your branch is only a local branch (i.e. not yet pushed to any remote) you should definitely do a rebase (and your branch will not diverge in this case).Now if you are reading this because you already are in a ""diverged"" scenario  due to such rebase, you can get back to the last commit from origin (i.e. in an un-diverged state) by using:git reset --hard origin/my_remote_tracking_branchIn my case here is what I did to cause the diverged message: I did git push but then did git commit --amend to add something to the commit message. Then I also did another commit.So in my case that simply meant origin/master was out of date. Because I knew no-one else was touching origin/master, the fix was trivial: git push -f  (where -f means force)"
"You resolved the conflict in your file (maybe? see footnote), but Git doesn't know whether you're done or not. You have to indicate to git that you've finished resolving that conflict. (Otherwise, if it let you move on and you hadn't actually resolved it, you could find all kinds of ways to shoot yourself in the foot.)As far as I know, the way to do that is:git add <file>        # stage the resolved version, which marks it as resolvedgit reset HEAD <file> # unstage the changes, leaving the resolution just in the work treeIt seems like there should be a way to do both at once with update-index but it's not obvious to me from a quick look. (But then again, for actual merge conflicts, you never want to mark a conflict as resolved without staging the content; it's just for stashes that this arises.)And as VonC says in his answer, should this happen again, you can easily see what things had merge conflicts when applying the stash using git status. They'll be listed in red (if you have color on) and say unmerged (or maybe deleted by us/them if it was a delete/modify conflict).Footnote: Looking back at your question, I can't actually tell if you fixed the conflicts or not - you just said ""so far so good."" The ""warning"" you saw is really meant as a suggestion to resolve the conflicts immediately. The conflicts arose when trying to combine the changes which you pulled with the changes which you had stashed away. You have to resolve that conflict and get your work tree into a consistent state before you can move on in any way. Deal with it just as you would a merge conflict - look in the file, find the conflict markers, figure out what content to keep! (And then look back above for how to finish up.)That should mean your second stash don't work because of still unresolved merge.See this SO question which illustrates the same error message on a stash.This thread confirms that a tree cannot contain unmerged files.You have a tree with unmerged entries.  Why don't you look into the issue and solve it?  A simple ""git status"" should show you what are the unmerged  entries.  A simple look at those files should show you conflict markers.Resolve the issue, commit, continue."
"Git doesn't push individual files one at a time, it pushes complete commit trees, as in, ""here is how the entire project looked at one commit, and then it looked like that at another, and now finally it looks like this"".Drawn as a graph of commits, this is, e.g., the very linear:...--D--E--F--G    <-- masterWhat's being ""rejected"" is that the ""finally"" you're supplying is not ""forward progress"" from the ""finally"" the remote had before, i.e., you're missing some ""forward progress"" that someone else put in.  You had:...--D             <-- masterand then you added commits E, F, and G.  But while you were doing that, someone else picked up the series of commits ending in D and added his or her own commit H:...--D--H          <-- masterYou're proposing to throw away H and make the commit sequence look like your sequence: D is followed by E-through-G and that's the end of everything.Git tells you the branch name that has the progress you're proposing to throw away, in this case, master.  It's up to you to git fetch the progress and then retain it, perhaps by git merge creating a merge commit M:       H------      /       \...--D         M   <-- master      \       /       E--F--Gor perhaps by ""rebasing"" your series of commits on top of H:...--D--H-E'-F'-G' <-- master(where E', F', and G' are versions of ""what changed in E, F, and G"" with just enough changed to make them apply on top of H instead‰ÛÓquite often that's just commit parentage, occasionally there's a bit more work involved).Do a git pull, then try to push, that's what the message is saying."
"First, you and those you're working with need to agree whether a topic/devel branch is for shared development or just your own. Other developers know not to merge on my development branches because they'll be rebased at any time. Usually the workflow is as follows:o-----o-----o-----o-----o-----o       master \   o-----o-----o                      devel0                \                  o-----o-----o       devel1Then to stay up-to-date with remote I'll do the following: git fetch origin git checkout master git merge --ff origin/masterI do this for two reasons. First because it allows me to see if there are remote changes without needing to switch from my devel branch. Second it's a safety mechanism to make sure I don't overwrite any un-stashed/committed changes. Also, if I can't fast-forward merge to the master branch that means either someone has rebased the remote master (for which they need to be flogged severely) or I accidentally committed to master and need to clean up my end.Then when remote has changes and I've fast forwarded to the latest I'll rebase:git checkout devel0git rebase mastergit push -f origin devel0Other developers then know they'll need to rebase their devel branches off my latest:git fetch <remote>git checkout devel1git rebase <remote>/devel0Which results in much cleaner history:o-----o                                 master       \         o-----o-----o                  devel0                      \                        o-----o-----o   devel1Don't merge commits back and forth at your whim. Not only does it create duplicate commits and make history impossible to follow, finding regressions from a specific change becomes near impossible (which is why you're using version control in the first place, right?). The problem you're having is the result of doing just this.Also it sounds like other developers may be making commits to your devel branches. Can you confirm this?The only time to merge is when your topic branch is ready to be accepted into master.On a side note. If multiple developers are committing to the same repository you should all consider having named branches to distinguish between developers devel branches. For example:git branch 'my-name/devel-branch'So all developers topic branches reside within their own nested set.You need to force the push as you have moved the commits further down the line git is expecting you to add commits to the tip of the branch. git push -f origin myNewFeature will fix your problem.Tip: Above is a legitimate usage of force pushing. Never ever rewrite the history on a publicly accessible repository or a lot of people will hate you.The main thing to keep in mind here is what pull and rebase are doing behind the scenes.A pull will basically do two things: fetch and merge.  When you include --rebase it will do a rebase instead of the merge.A rebase is pretty much like stashing all of your local changes since you branched, fast forwarding your branch to the latest commit on the target, and unstashing your changes in order on top.You never want to push rebased changes to remote branches as this is rewritting history.  Ofcoarse, never is a bit strong as there are almost always exceptions.  The case that you need to maintain a remote version of your local repository to work on a specific environment for example.This will require you to push rebased changes at times either using force:git push -f origin newfeatureOr in some cases your administrator may have removed the ability to force so you must delete and recreate:git push origin :newfeaturegit push origin newfeatureIn either case you must be absolutely sure you know what you are doing if someone else is collaborating with you on your remote branch.  This may mean that you work together initially with merges and rebase those into a more manageable commit format just before going to master and removing your working branch.Remember you can almost always fallback on git's GC by taking advantage of:git reflogThis is a HUGE life saver as you can reset back to a more stable state if you get lost in all of your rebase/conflict management.You need to perform a forced push, i.e. git push -f origin myNewFeatureOh, and you better make damn sure that people don't base anything on your dev branch - usually you aren't supposed to publish branches where you are rewriting history at all (or rather do not rewrite history once published). One way would be using a branch name like wip/myNewFeature and then mentioning that wip branches will be rebased to master from time to time."
"I had this same issue, and the fetch/rebase answer didn't work for me. Here's how I solved it:I deleted the file that was causing the issue, checked it out, and then pulled successfully.rm file/name/path/some/more/filenamepathgit checkout file/name/path/some/more/filenamepathgit pullYou should:fetch (updating all remote tracking branches, like origin/master)rebase your current branch on top of origin/master in order to replay your 2 commits on top of the 7 updated commits that you just fetched.That would be:git checkout mastergit fetchgit rebase origin/masterA shorter version of the above set of commands would be the following single command:git pull --rebase"
"Step 1: git rm --cached ProjectName.xcodeproj/project.xcworkspace/xcuserdata/username.xcuserdatad/UserInterfaceState.xcuserstateStep 2:git commit -m ""Removed file that shouldn't be tracked""Okay, turns out I just had to make a comment//THIS IS A TESTAnd commit that. Now it works fine. This must have just been some strange bug.Thanks for the help though, SirKaydian"
"Checkout a different branch first, before deleting it:git checkout mastergit branch -d MyModsAlso, branches have nothing to do with folders. Git always tracks the whole repository at once, with all its folders and files. A branch is nothing else than a pointer to a single commit, or snapshot, in the history of the repository.Yes just checkout another branch(maybe master) and then:git checkout mastergit branch -d thebran"
"One way to get that error message is to somehow not be in the git repo working tree.See ""After git clone I get a ‰ÛÏ fatal: Not a git repository (or any of the parent directories): .git ‰Ûù error"" as an illustration.It can also be cause because of a GIT_WORK_TREE environment variable being set to the wrong path.Or it is seen in wrappers using git repo like rvm (see this thread for example)In both case, resetting the situation in a new clone (which you did) usually is a good way to fix the situation.Check the following file:your_repo_dir/.git/HEAD If this content seems corrupted, this is the issue. I had the similar issue and I fixed it by replacing the content of the HEAD file with the git commit hash of the last commit from selected branch.Commit hashes could be found under the .git/logs/refs/heads  and branch_name_fileI hope it helps.I had this error after having problems with visual studio git plugin.The solution was to rename my_repo_dir/.git/HEAD.lock to my_repo_dir/.git/HEADLooks like something crashed after locking the head file and that killed the repo.Had the same problem after I tried to push the branch to remote from Visual Studio. I renamed .git/HEAD.lock to .git/HEAD after checking its content. Now it works fine."
"I found it myself. It was because git on the jenkins server wasn't configured with author name/email.After configuring this (under additional behaviours) solved the problem."
"Try git fetch so that your local repository gets all the new info from github. It just takes the information about new branches and no actual code. After that the git checkout should work fine.I got this error for a branch that was remote and had no local tracking branch. Even though I'm certain I've checked out remote branches via a simplegit checkout feature/fooin the past, to get around this error I had togit checkout -t -b feature/foo origin/feature/fooI have no idea what I did to get myself into that situation either.I was getting following error when I tried to checkout new brancherror: pathspec 'BRANCH-NAME' did not match any file(s) known to git.When I tried git checkout origin/<BRANCH-NAME> it went to detached HEAD (detached from origin/)Did following to resolve the issuegit remote updategit fetch git checkout --track origin/<BRANCH-NAME>""error: pathspec 'foo' did not match any file(s) known to git.""This happenned to me when the full repo was not fetched.try:$ git fetchGit Windows users beware - without the --icase-pathspecs or GIT_ICASE_PATHSPECS = 1 env var setting, that git pathspecs will be case-sensitive, in which case git checkout origin/FooBranch ""Some/Path/To/File.txt""is not the same as git checkout origin/FooBranch ""some/path/to/file.Txt""I got this when I did the following:Used IntelliJ IDE, connected to gitCreated a new file, and added to gitRenamed the new fileWhen I tried to check in the directory, I got this error.To fix:I opened the repo in git extensions. I saw that the file (with the old name) was staged. But since it didnt exist anymore, it could not be committed.I simply unstaged this file. Then I re-added the file (this time correctly named) into git and committed without errors.If it happens on Windows, it is probably the filename case issue. I had this error today - I've created new file, added to GIT, then I changed one letter in filename from lower to upper and then I couldn't to anything - commit, revert, delete file from repo. The only solution I found was changing the filename again back to exact same case when I added this file to GIT, then doing GIT revert to remove this file from GIT, then changing filename again as I want. After those changes I could commit to repo and then push without any problem.None of these answers solved my issue:Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git log --format=onelineb9cc6a9078312865280fb5432a43e17eff03a5c6 Formatted README288772f36befe6bd60dd41b8185f1e24e0119668 Updated README documentationd2bdbe18f4169358d46fad50eacfb89786df3bf8 Version object v3.0.0-SNAPSHOTa46b1910a3f548b4fa254a6055d25f68d3f217dd VersionFactory is now Platform agnostic24179ae569ec7bd28311389c0a7a85ea7b4f9594 Added internal.Platform abstraction252b684417cf4edd71aed43a15da2c8a59c629a7 Added IPlugin implementation for Spongee3f8d21d6cf61ee4fc806791689c984c149b45e3 Added IPlugin implementation for Bukkitaeb403914310b4b10dee9e980cf64472e2bfda79 Refactored Version.javaef50efcff700c6438d57f70fac30846de2747a7e Refactored TesterFactorya20808065878d4d28657ae362235c837cfa8e625 Added IPlugin abstraction9712a3575a70060d7ecea8b62bb5e888fdc32d07 Heavily refactored Tester02d025788ae740dbfe3ef76a132cea8ca4e47467 Added generic Predicate<T> interface9c565777abea9be6767dfdab4ab94ed1173750dd Minor refactoring of testCompareTo()2ff2a28c221681e256dcff28770782736d3a796a Version object v2.0.1d4b2e2bd830f77cdbc2297112c2e46b6555d4393 Fix compareTo()05fe7e012b07d1a5b8de29804f96d9a6b24229a1 Make compareTo() fail6e85371414357a41c1fc0cec0e75adba92f96832 Fix VersionFactory passing nullc1fd1f032f87d860d5ed9d6f6679c9fa522cff8d Version object v2.062c3a92c008a2ed11f0a4d016080afc3541d0700 Version object v1.2c42e9e617128085e872c51b4d977a04e48d69e8f Deprecated, doc'd, future-proofed getNmNikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 3a796aerror: pathspec '3a796a' did not match any file(s) known to git.I was trying to go back and build the commit for Version object v2.0.1. Luckily, I got the idea to try the whole hash code and it worked ! Which means that I was using the wrong end of the hash code.Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 2ff2aNote: checking out '2ff2a'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example:  git checkout -b new_branch_nameHEAD is now at 2ff2a28... Version object v2.0.1Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version ((2ff2a28...))$As shown above, for partial hash codes, you must supply the front-end, not the back-end.If you deleted a folder and pulled/cloned again your repo, you may need to create your local branch again. Try: git checkout -b yourbranchnameIn my case I had renamed a file changing the case of the file, i.e.   SomeFile.js -> someFile.jsI think that was related to the problem.  Doing a git fetch didn't fix the issue.I moved the files out of my project, did a fetch, and did a push without them.  Then I did a fetch, added them back, and did a push, and it worked.  I don't know if all those steps were needed, but it did ultimately work.in my case I enter submodule directory without doing git submodule init git submodule updateSo git was linked to the parent folder that indeed missed that branch.On Windows OS by default git is instaled with core.ignorecase = trueThis means that git repo files will be case insensitive, to change this you need to execute:\yourLocalRepo> git config core.ignorecase falseyou can find this configuration on .git\config file$ cat .git/refs/heads/feature/user_controlled_site_layouts3af84fcf1508c44013844dcd0998a14e61455034Can you confirm that the following works:$ git show 3af84fcf1508c44013844dcd0998a14e61455034It could be the case that someone has rewritten the history and that this commit no longer exists (for whatever reason really).This can be caused when upstream rewrites history.When this happens, I toss all affected repos, clone them fresh from upstream, and use 'git format-patch' / 'git am' to ferry any work in progress from old world to new.When I have this issue I install a new version of git. If I can't do that from a binary package, I install it from source into my $HOME directory like this:mkdir $HOME/binexport version=1.7.10.3  wget http://git-core.googlecode.com/files/git-$version.tar.gz  tar zxf git-$version.tar.gz  cd git-$version  ./configure --prefix=$HOME  make && make install  echo ""export PATH=$HOME/bin:\$PATH"" >> ~/.bashrc  chmod +x ~/.bashrc      which git      git --versionthe last two lines are to verify.(updated with code from user FractalSpace - thanks!)I had this problem today i was trying to git checkout foo and got error: pathspec 'testing' did not match any file(s) known to git. turns out i was in the wrong repo.. So lesson learned check your repo before freaking out.Happened to me after renaming an uncommitted file in Android Studio.Git seemed to have the old version in its repository, even if it didnå«t exist anymore.fetch, pull, checkout, add all and so on did not help in my case!So I opened the Git GUI of TortoiseGit which showed me the exactly file which caused trouble.Afterwards I deleted the file from the repository withgit rm -r --cached /path/to/affected/fileand the problem was goneI faced a similar issue. What led me into this trouble was:I had multiple remote branches and I deleted the folder that had the code.I did a get pull. : git pull git@git.corp......Then I added remote repository : git remote add upstream git@git.corp.......Then I tried to change branch to some other branch say AAAA and I got errorerror: pathspec 'AAAA' did not match any file(s) known to git.After spending an hour I found a solution.I deleted the source folder again.Then I did a git pull :git pull git@git.corp......Then I changed branch before linking it to remote repository : git checkout AAAthen I added it to remote repositorygit remote add upstream git@git.corp......After this I can easily switch branches.Although this is not a standard way but it worked for me after I tried all of above options.I faced this problem last time, and the thing I have done is remove the folder (or source code) related to that branch.Ex: the branch origin/foo create folder foo at your local, so I just delete it and use git fetch $ checkout to get code back from remote.Or you can do it by create folder at local same as the branch you intended to checkout.Ex: create folder foo at local, after that, use Git command: git branch --set-upstream-to=origin/foo foo, that all. Use git pull to get code."
"Sublime Text needs to be launched with the subl line instead of sublime, and will need to be in your PATH.You can check if it's present by running the commands which subl (to show you the path of the file on the computer) or subl -n (to launch a new window in Sublime Text).To fix your git editor you can run git config --global core.editor ""subl""Source: https://www.sublimetext.com/docs/3/osx_command_line.htmlProbably Git is configured to use sublime as editor and it is not able to find it.If you really want to use Sublime as editor check if it is really installed and it is in your  PATH.Alternatively, you can change the editor git uses with this command (replace vim with your preferred editor: emacs, nano, etc):git config --global core.editor ""vim""Edit: Also the correct command to launch Sublime Text in terminal is subl (thanks  QuantumPhi)"
"The solution is very simple. git checkout <filename> tries to check out file from the index, and therefore fails on merge. What you need to do is (i.e. checkout a commit):To checkout your own version you can use one of: git checkout HEAD -- <filename>git checkout --ours -- <filename>git show :2:<filename> > <filename> # (stage 2 is ours)To checkout the other version you can use one of: git checkout test-branch -- <filename>git checkout --theirs -- <filename>git show :3:<filename> > <filename> # (stage 3 is theirs)You would also need to run 'add' to mark it as resolved:git add <filename>Based on Jakub's answer you can configure the following git aliases for convenience:accept-ours = ""!f() { git checkout --ours -- \""${@:-.}\""; git add -u \""${@:-.}\""; }; f""accept-theirs = ""!f() { git checkout --theirs -- \""${@:-.}\""; git add -u \""${@:-.}\""; }; f""They optionally take one or several paths of files to resolve and default to resolving everything under the current directory if none are given.Add them to the [alias] section of your ~/.gitconfig or rungit config --global alias.accept-ours '!f() { git checkout --ours -- ""${@:-.}""; git add -u ""${@:-.}""; }; f'git config --global alias.accept-theirs '!f() { git checkout --theirs -- ""${@:-.}""; git add -u ""${@:-.}""; }; f'Try this:git merge --strategy-option theirs -- To accept theirs changes git merge --strategy-option ours -- To accept yoursBased on kynan's answer, here are the same aliases, modified so they can handle spaces and initial dashes in filenames:accept-ours = ""!f() { [ -z \""$@\"" ] && set - '.'; git checkout --ours -- \""$@\""; git add -u -- \""$@\""; }; f""accept-theirs = ""!f() { [ -z \""$@\"" ] && set - '.'; git checkout --theirs -- \""$@\""; git add -u -- \""$@\""; }; f"""
"Those errors generally reflects a repo which hasn't been properly updated (git fetch or git pull), and is missing references to complete those operations (merge or push).This thread illustrates the ""missing commit"" error on merge.I had to pull from native git to solve that problem.  After that, for some reasons I don't understand, some of my source files had a ""modified"" marker, like if the merged source files were not locally committed or something like that.  I had to commit manually the merged code. Push was still failing. I had to pull again first.The main issue with EGit is to make sure you are not in a detached HEAD mode (as detailed in ""can't push upstream using EGit"").Beside that, it is best to train first following Egit tutorial and manual (and of course understanding git first, with git tutorials, like gitimmersion)."
"That means there would be merge conflicts if it attempted to merge.  You have to merge in ""Repo A"" and resolve the conflicts.  Then push back up to BitBucket so it can close the pull request.  Example workflow:git remote add repo_a https://url.com/path/to/repogit fetch repo_agit merge repo_a/dev# resolve conflictsgit commit -am ""Merge in repo_a/dev and resolved conflicts""git push origin devIf you've never dealt with merge conflicts in Git, checkout this SO question."
"The problem might comes from the fact those are two different repository (with a different SHA-1 first node), and not one repo cloned and then modified.That means a 'git fetch' is probably not enough.You could simply use an external tool (external to Git that is) to merge the content of CB2 (Code-Base-2) into CB1, like WinMerge as suggested in the question ""Merging in changes from outside a git repository"".The other option would be using some graft technique to complete a fetch: see the question ""Can two identically structured git repos be merged when they have never had any common history?""$ cd project1$ git config remote.project2.url /path/to/project2$ git config remote.project2.fetch 'refs/heads/*:refs/project2/*'$ git fetch projectPlus modify the graft file (.git/info/grafts) to link the commits of project2 to project1.Try:cd code-base-1git fetch ../code-base-2 master:code-base-2git merge code-base-2"
"I was just searching for this and happened upon the answer.  do ""git rebase "".  This will reparent your changes to the updated branch.  You might need to perform merges as prompted.Use ""repo rebase""SummaryRebase local branches on upstream branchUsage: repo rebase {[...] | -i ...}Options:  -h, --help          show this help message and exit  -i, --interactive   interactive rebase (single project only)  -f, --force-rebase  Pass --force-rebase to git rebase  --no-ff             Pass --no-ff to git rebase  -q, --quiet         Pass --quiet to git rebase  --autosquash        Pass --autosquash to git rebase  --whitespace=WS     Pass --whitespace to git rebase  --auto-stash        Stash local modifications before startingDescription'repo rebase' uses git rebase to move local changes in the current topicbranch to the HEAD of the upstream history, useful when you have madecommits in a topic branch but need to incorporate new upstream changes""underneath"" them."
"This fixed it for mecd `brew --prefix`git fetch origingit reset --hard origin/masterbrew update worked fine after that"
"find a *.pack.temp in .git/objects/pack in your local repository. Then find an .idx file with same basename, and move both of them away (or remove them, but it is better to be safe than sorry). Rerun git fetch and it should work (well, it did for me). For example:% git fetcherror: Unable to find a4fb0b54b2609df8a1ee4b97c268d205fc5bf9f1 under https://www.example.com/~someuser/something.gitCannot obtain needed object a4fb0b54b2609df8a1ee4b97c268d205fc5bf9f1error: fetch failed.% ls -l .git/objects/packtotal 65872-rw-r--r-- 1 someuser someuser    64072 Feb 12  2014 pack-2e31e66e67d8596f1193bbbc06c87293900c6e45.idx-rw-r--r-- 1 someuser someuser    16920 Jul 21  2013 pack-3d76e0bf6c67d71913efc0711d56f04c7f79b95d.idx-rw-r--r-- 1 someuser someuser    62224 Feb 11  2014 pack-74107fa80989df6619479874d94b5f8ed010fd2f.idx-rw-r--r-- 1 someuser someuser    96552 Oct 30 22:55 pack-bb75633331ea0e74d4d3cb29f7660e1ba00fb899.idx-rw-r--r-- 1 someuser someuser    73228 Mar  6  2014 pack-de0c1bcf3550cd7a2fd0c5a981bc17d15f1144c0.idx-r--r--r-- 1 someuser someuser   129144 Feb  2 18:57 pack-ffb25d036dea040923468e2de07023f9b497aeb7.idx-r--r--r-- 1 someuser someuser 46413554 Feb  2 18:57 pack-ffb25d036dea040923468e2de07023f9b497aeb7.pack-r--r--r-- 1 someuser someuser   129312 Feb  2 19:10 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.idx-rw-r--r-- 1 someuser someuser 20450545 Feb  2 19:09 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.pack-rw-r--r-- 1 someuser someuser   129312 Feb  2 18:36 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.idx-rw-r--r-- 1 someuser someuser  9863168 Feb  2 18:37 pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.pack.temp% mv .git/objects/pack/pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.idx /tmp/% mv .git/objects/pack/pack-ffbdfa2c676aaf392ea722cb68eaa87e45af092c.pack.temp /tmp/% git fetchFrom https://www.example.com/~someuser/something   3288ab9..a4fb0b5  master     -> origin/masterTry these commands:git fsckgit gcman git-fscksays to use rsync :Any corrupt objects you will have to find in backups or other archives  (i.e., you can just remove them and         do an rsync with some other site in the hopes that somebody else has the object you have corrupted).rsync -av user@host:repo/.git ./.gitworked for me"
"From git branch it appears that somehow your local branch name is ""origin"".You can rename the branch with -mv flag, like this: git branch -mv origin masterAfter this git branch should show master :-)Just to make sure the name is indeed the only thing that went astray, you can run git log and look at the last few commits - and compare them to the last few commits on bitbucket website.This should help yougit initgit add .git commit -m 'Initial Commit'git push -u origin master"
"Just delete bc file in your resource folder.Your case:remove=>  C:\Users\prog\Documents\git\PROJECT\src\main\res\raw\levelsfilterrs.bcReason:After compile renderscript, llvm will generate *.bc file in order to bundled with final apk.Because you already have *.bc file, it caused merge resources task failed."
"I usually see that kind of error when there is a process not releasing the handle of those files.Make sure nothing is running, and then try your checkout again.Note: it can also be related with the way Git has been installed (on Windows, UAC can generate problem if msysgit is installed in C:\Program or C:\Program Files, see ""msysgit - sh.exe - fork: Permission denied - Vista 64 bit"" and comment 2 of issue 437)In my first encounter with this error my user had rights to ""write"" to the file but not the containing directory. Check the permissions of the directory containing the file.""Unlink"" essentially means ""delete file"" in this case. This error is not caused by git itself. You should have similar errors deleting those files manually, in a command line or file explorer.I was having the issue with a default-settings.php file in drupal 7. In this case I wasn't able to delete it or revert it just like @rtconner said. I didn't have an application or anything using this file, and it ended up being a permissions error.I added chmod 777 * to the folder and then I was able to revert it no problem.You don't have the access permission, maybe because you are not the owner.Fix by changing the owner to yourself:sudo chown -R your_login_name /path/to/folderTo those who are using Intellij, as @rtconner said this problem is not caused by git. Since your IDE is locked a file(s) git cannot un-link it. So, you need to close your IDE and then try to merge (or whatever you like) it via command line.In my case it was a "":"" character in a folder name prevenitng the git repo to checkout on windows.I ran into this problem whenever running ""git repack"" or ""git gc"" on my OS X machines, even when running git with admin privileges, and I finally solved it after coming across this page: http://hints.macworld.com/comment.php?mode=view&cid=1734The fix is to open a terminal, go to your git repo, cd into the .git folder, and then do:chflags -R nouchg *If that was the issue, then after that, your git commands will work as normal."
"UPDATE: The original answer is now obsolete.If you have the latest git just do a one-time git config merge.tool tortoisemergeImportant: do not add a .exe extension to the command.=== original answer (now outdated) ===I don't have tortoisemerge installed so I can't test this, but I'm pretty sure the problem is that git gui uses a file called C:\Program Files (x86)\Git\share\git-gui\lib\mergetool.tcl to define each merge tool it works with, and it shows that ""Unsupported merge tool"" error for merge tools defined in .gitconfig that don't match one of the ones defined in mergetool.tcl.So, to make it work, you should be able to add something like this to mergetool.tcl:tortoisemerge {    set cmdline [list TortoiseMerge.exe -base:""$BASE"" -mine:""$LOCAL"" -theirs:""$REMOTE"" -merged:""$MERGED""]}Put the new tortoisemerge entry above this other code:default {        error_popup [mc ""Unsupported merge tool '%s'"" $tool]        return}Try this:[merge]tool = tortoise[mergetool ""tortoise""]cmd = ""TortoiseMerge.exe"" -base:""$BASE"" -theirs:""$REMOTE"" -mine:""$LOCAL"" -merged:""$MERGED""Source: http://programmersunlimited.wordpress.com/2010/07/01/getting-git-to-use-tortoisemerge/Try typing TortoiseMerge.exe from the command line to make sure it's in the path. If not add it via My Computer > Properties > Advanced > Environment Variables > System Variables:Path.Then from command prompt configure it via the following commandsgit config --replace --global diff.tool tortoisemergegit config --replace --global difftool.diffmerge.cmd ""TortoiseMerge.exe -base:\""$BASE\"" -theirs:\""$REMOTE\"" -mine:\""$LOCAL\"" -merged:\""$MERGED\""""git config --replace --global difftool.prompt falseTo use it from the command prompt, type git difftool from your within your git working directory.It shows the files one at a time so you're still better off installing TortoiseGit which makes things easier to handle, even if just for the diff part.For the case that I was working on, the mergetool was already set to tortoisemerge, but it could not find it.Providing a fully qualified location worked in Windows:git config --global mergetool.tortoisemerge.cmd ""\""C:\\Program Files\\TortoiseGit\\bin\\TortoiseGitMerge.exe\"" -base:\""$BASE\"" -mine:\""$LOCAL\"" -theirs:\""$REMOTE\"" -merged:\""$MERGED\"""""
".pbxproj will change when you add new files to the project. There will be conflicts if two or more collaborators add files at the same time (without getting one another's changes first). We are avoiding this in my project by following these steps before and after adding new files:Before adding a file, commit your changes, then pull from the master so that you have the latest.If someone has added a file, you now have the latest .pbxprojAdd your file(s).Immediately commit and push your changes up to the master (hopefully, before another collaborator has added another file).It's wimpy, but we don't relish manually resolving .pbxproj conflicts. Also, see this Stack Overflow question with excellent responses: How to use Git properly with XCode?In most case, you can fix the merge by following code, remove the lines which git adds:#!/bin/bashFILE={PRODUCT_NAME}.xcodeproj/project.pbxprojsed '/======/d' $FILE | sed '/<<<<</d' | sed '/>>>>>/d' > tempcat temp > $FILErm tempbut if you rename the group of your project and it leads to conflicts, you will manually delete the extra lines of your original group."
"git rebase has found a .git/rebase-apply directory and so presumes that you might be in the middle of a rebase. This would have happened if there was a conflict during a previous rebase and the rebase was not finished; i.e. you did not run one of git rebase --abort, git rebase --skip or git rebase --continue (the last one after resolving the conflict).Anyway, it does not matter how you ended up in this state if you don't think you ran git rebase at all. Simply rm -fr /my_project_directory/.git/rebase-apply as the help suggests and you should be able to do the rebase now.But wait. Since you say that you have already published your branch to the remote repository, you should not try to rebase master onto it. In fact, if your remote is set to deny non-fast-forward commits (which seems to be a generally recommended best practice), you'll not even be able to push the rebase'd changes to your remote. In general, it is a bad practice to try to modify a commit (which is what git rebase does) after you have published it to a remote."
"This may be an old reply but I'm hoping this is more useful on next who need this solution.On linux/unix/gitbash/cygwin, tryrm -f .git/index.lockOn Windows Command Prompt, try:del .git\index.lockHope that helps, I found this solution here: Fatal: Unable to create ‰Û÷‰Û_git/index.lock‰Ûª File existscheck if the git still running (ps -ef  | grep git)if not, remove the locked fileif yes, kill the git process at first.On a Windows platform running Visual Studio 2015 RC (v4.6.00057) in combination with SourceTree (v1.6.14.0) will give this error as well. Solution:Assuming you want to use source tree as source code manager, simply disable the source control provider inside Visual Studio like this:Go to: Tools > Options > Source ControlSelect Current source control plug-in as: NoneJust had this issue... Gitbox was at fault. So maybe you had a GUI running that was causing problems.Sometimes Git creates a lock file associated with your repo while you are making any changes or most probably when you are using sub modules. The error message will show you the path of the lock file.Fix: Just manually go to the path in terminal and delete the lock file by $ rm index.lockIt should help.Probably (it has happened to me), ls command is saying it doesn't exist because current user doesn't have permissions to reach that directory or file.Remove the lock and make sure you are executing git with the right user in order to avoid permission problems.If you are in a GNU/Linux box with sudo command: sudo rm project_path/.git/index.lockI had this exact same error, but the issue was not the lock file. Instead the issue was that I had copied the contents of another git repo into this repo, including the .git invisible folder. So, SourceTree was confused about which repo I wanted to stage files to (there being a mismatch between the repo SourceTree thought I was in, and the one that the contents of my embedded .git dir said I should be in).I had this problem with TortoiseGit with Cygwin on Windows. I wasn't able to delete remove ./.git/index.lock even with administrative privileges, I tried both Cygwin and command prompt, it said the file was in use by another process. I found that I had 2 instances of TortoiseProc.exe running. I killed one of them, and closed all of my windows explorer windows, and then was able to delete the file. I don't know if killing an instance of TortoiseProc.exe was the solution or closing windows explorer windows.The solution for me was to delete the .index file and allow Git to rebuild another.I created an empty index.lock file, deleted it using windows command"
"Looks like the following process had a lock on the .git\index file:ssh-agent.exeC:\Users\Tom\AppData\Local\GitHub\PortableGit_8810fd5c2c79c73adcc73fd0825f3b32fdb816e7\bin\ssh-agent.exeI killed the process and ran git reset HEAD and looks like I'm back to normal now."
"From what you're describing, the database.yml file just shouldn't be in your repository anymore.Perform git rm --cached config/database.yml to remove it from Git, then attempt your merge once more."
"So AFTER I deleted the beta developer folder to try and solve this (couldn't get the fix to work with merge tool) I stumbled upon this in the command line:Error: No developer directory found at /Developer Beta. Run /usr/bin/xcode-select to update the developer directory path.Turns out you can set the developer path you need it to use:Usage: xcode-select -print-path   or: xcode-select -switch <xcode_folder_path>   or: xcode-select -versionArguments:   -print-path                     Prints the path of the current Xcode folder   -switch <xcode_folder_path>     Sets the path for the current Xcode folder   -version  Looks like installing the beta had automatically set that path to beta. To fix it, run this:sudo /usr/bin/xcode-select -switch /DeveloperThat fixed it for me.UpdateYing's comment below was important enough to include in the answer. From Xcode 4.3 on, the location of the folder has changed to inside the application package:sudo /usr/bin/xcode-select -switch /Applications/Xcode.app/Contents/Developer/If you have two SDKs installed, and the latest (presumably beta) version doesn't have the System Tools installed, some tools like opendiff can break. You can only have one set of System Tools installed at a time, so you have to choose which SDK/installation has it. I fixed this problem by using the path of opendiff that is in the Developer folder that had the system tools installed.In my case, I have the following Xcode installations:Current stable release (with System Tools installed)/DeveloperLatest beta (without System Tools installed)/Developer (iOS SDK XXX beta)My ~/bin/opendiff-git.sh script now looks like this:""/Developer/usr/bin/opendiff"" $2 $5first the reason is xcode's installation path  modified since 4.3, so must reselect xcode pathfull guide is in below link:http://useyourloaf.com/blog/2012/2/17/updating-to-xcode-43.html"
"I had the same problem, because a number of package files were removed on the server which were not being used. I had to open command prompt and see all errors by running:git pullI saw this error with a list of files to remove: Please move or remove them before you can merge.Aborting. After removing them I was able to successfully do a pull."
"You are talking about merge tool, yet you (and some other people with answers) are configuring it as a diff tool.To configure a merge tool, you'd need to use merge.tool and mergetool configurations instead of diff.tool and difftool, like this:git config --global merge.tool winmergegit config --replace --global mergetool.winmerge.cmd ""\""C:\Program Files (x86)\WinMerge\WinMergeU.exe\"" -e -u -dl \""Base\"" -dr \""Mine\"" \""$LOCAL\"" \""$REMOTE\"" \""$MERGED\""""git config --global mergetool.prompt falseAnd then you can usegit mergetoolwhich will open you the two files to edit.(kudos for @dvdvck mentioning in the comments that in command line parameters you can specify a third file for the result file for winmerge (outputpath parameter))(for completeness, I'll mention that there is also this gist aimed at full configuration of winmerge for both as diff and merge tool)Here's mine (in %userprofile%\.gitconfig, or ~/.gitconfig on *nix), no wrapper (Win 7 Home Pro):[diff]    tool = winmerge[difftool ""winmerge""]    cmd = c:/path/to/winmergeu.exe -e -u -x -wl -wr -dl ""base"" -dr ""mine"" \""$LOCAL\"" \""$REMOTE\""If you decide to use SourceTree (or for any Google searchers with SourceTree), you can use WinMerge for the Merge Tool by setting the Merge Tool to custom, pointing Diff Command to WinMergeU.exe, typically:C:\Program Files (x86)\WinMerge\WinMergeU.exeIn Arguments use:-e -u -dl ""Mine"" -wr -dr ""Theirs"" $LOCAL $REMOTE $MERGEDThat will cause the left side (labeled ""Mine"") to be editable and it will be the output file when you save in WinMerge. The right side (labeled ""Theirs"") will be read only (that's the -wr argument), this is needed because WinMerge outputs all saved files to the $MERGED file, so if both sides were edited, it would output the left side then overwrite that with the right side; best to avoid that kind of confusion.If you leave the backup file option turned on, WinMerge will generate a .bak file. The contents of this file will either be the original left side file, or the second to last output file if you saved multiple times. You can either turn this off, or add *.bak to your .gitignore file.Git itself will create a *.orig conflict file AFTER the conflict is resolved, just in case you botched it. Again, you can add *.orig to your .gitignore file or turn off this feature. Unfortunately, SourceTree does not have a GUI option for this, so fire up your git bash or, if you chose the right PATH option during installation, the Windows Command prompt and do this:git config --global mergetool.keepBackup falseThat will stop Git creating the *.orig files. You can also directly edit the config file by locating the .gitconfig file in the root of your user directory. If you know how to use VIM, you can edit the whole thing with this command:git config --global --editGit 2.5+ (Q2 2015) will include Winmerge as a known git mergetool!If Winmerge is in your %PATH%, a git config merge.tool winmerge is all you need to do!(It works for diff tool too: git config diff.tool winmerge)See commit 3e4f237 by David Aguilar (davvid), 20 May 2015.(Merged by Junio C Hamano -- gitster -- in commit 324a9f4, 01 Jun 2015)Helped-by: Philip Oakley (PhilipOakley), Johannes Schindelin (dscho), Sebastian Schuberth (sschuberth), SZEDER GÌÁbor (szeder) All the config is now done for you directly in Git itself, with mergetools/winmerge:diff command: ""$merge_tool_path"" -u -e ""$LOCAL"" ""$REMOTE""merge command: ""$merge_tool_path"" -u -e -dl Local -dr Remote ""$LOCAL"" ""$REMOTE"" ""$MERGED""mergetools: add winmerge as a builtin toolAdd a winmerge scriptlet with the commands described in this thread, so  that users can use winmerge without needing to perform any  additional configuration.This is easier to do and is what worked for me:git config --global diff.tool winmergegit config --replace --global difftool.winmerge.cmd ""\""C:\path to winmerge\WinMergeU.exe\"" -e -u -dl \""Base\"" -dr \""Mine\"" $LOCAL $REMOTE""git config --global difftool.prompt falseYour path is incorrect, it should be ""/c/Program Files (x86)/WinMerge/WinMergeU.exe"".You're running in a shell script environment, not native windows command prompt.After hassling with this for over an hour, I installed tortoisegit and so far it's giving me exactly what I want.Settings of Winmerge for Tortoise git are described in http://thoai-nguyen.blogspot.com.au/2012/03/setup-tortoise-git-and-winmerge.html"
"Use git ls-files -u.  It prints unmerged files.  If it prints nothing, there are no unmerged files.However, while that's a direct answer for the question you asked ""as asked"", using git pull in a script is a bit dicey: pull is a convenience script that runs fetch for you, and then (depending on how you direct it and/or have configured your repo) runs either merge or rebase for you.  Given that you are writing a script that has a particular goal in mind, you should most likely be using lower-level commands that do more-specific things.  For instance, you might use git fetch followed by (as Etan Reisner suggested in a comment) git merge --ff-only so as to never attempt a merge."
"There are two types of repositories: bare and non-bareBare repositories do not have a working copy and you can push to them. Those are the types of repositories you get in Github! If you want to create a bare repository, you can usegit init --bareSo, in short, you can't push to a non-bare repository (Edit: Well, you can't push to the currently checked out branch of a repository. With a bare repository, you can push to any branch since none are checked out. Although possible, pushing to non-bare repositories is not common). What you can do, is to fetch and merge from the other repository. This is how the pull request that you can see in Github works. You ask them to pull from you, and you don't force-push into them.Update: Thanks to VonC for pointing this out, in the latest git versions (currently 2.3.0), pushing to the checked out branch of a non-bare repositories is possible. Nevertheless, you still cannot push to a dirty working tree, which is not a safe operation anyway.I solved this problem by first verifying the that remote did not have anything checked out (it really was not supposed to), and then made it bare with:$ git config --bool core.bare trueAfter that git push worked fine.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.Autopsy of the problemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.As there's already an existing repository, runninggit config --bool core.bare trueon the remote repository should sufficeFrom the core.bare documentationIf true (bare = true), the repository is assumed to be bare with no working directory associated. If this is the case a number of commands that require a working directory will be disabled, such as git-add or git-merge (but you will be able to push to it).This setting is automatically guessed by git-clone or git-init when the repository is created. By default a repository that ends in ""/.git"" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).TLDRPull & push again: git pull &&& git push.Still a problem? Push into different branch: git push origin master:foo and merge it on remote repo.Alternatively force the push by adding -f (denyCurrentBranch needs to be ignored).Basically the error means that your repository is not up-to-date with the remote code (its index and work tree is inconsistent with what you pushed).Normally you should pull first to get the recent changes and push it again.If won't help, try pushing into different branch, e.g.:git push origin master:foothen merge this branch on the remote repository back with master.If you changed some past commits intentionally via git rebase and you want to override repo with your changes, you probably want to force the push by adding -f/--force parameter (not recommended if you didn't do rebase). If still won't work, you need to set receive.denyCurrentBranch to ignore on remote as suggested by a git message via:git config receive.denyCurrentBranch ignorecd into the repo/directory that you're pushing into on the remote machine and enter$ git config core.bare trueMaybe your remote repo is in the branch which you want to push. You can try to checkout another branch in your remote machine. I did this, than these error disappeared, and I pushed success to my remote repo. Notice that I use ssh to connect my own server instead of github.com."
"This could mean that another program is using the file, which is preventing git from ""moving"" the file into or out of the working directory when you are attempting to change branches. I have had this happen on Windows Vista where eclipse is the program ""using"" the file. The file may not be actually open in eclipse but may have been opened by a process run by eclipse. In this event, try closing the file in any applications that might have used it. If that doesn't work, completely exit any applications which may have opened the file.I had this issue and solved it by the command : git gcThe above command remove temp and unnecessary files. (Garbage collector.)this solution from here worked for me:This is a Windows specific answer, so I'm aware that it's not relevant to you... I'm just including it for the benefit of future searchers.In my case, it was because I was running Git from a non-elevated command line. ""Run as Administrator"" fixed it for me.I encountered this issue while doing a git pull.I tried git gc and it resolved my problem.In my case there are no processes touching the file or directory. Maybe it happens if the path is very long, because an operating system restriction (windows). Try enabling the longpath support flag in the global git configuration as indicated below:git config --global core.longpaths trueor try to setting the yes/no answer flag if it is not conflictive for youset GIT_ASK_YESNO=falseIf the path is too long, I've not found a successful solution.I ran into this issue running git Bash and Eclipse EGit at the same time.Solution: close Eclipse. Also wouldn't hurt to run git gc as @khilo mentioned.I had this kind of issue on Windows 7 and it turned out to be due to some orphaned git.exe process.To solve it, open Task Manager and kill all git.exe processes.Since git commands are short-lived, you should normally never see any git.exe in Task Manager. When they are there, it usually means something is wrong, and you should kill those processes.In my case (Win8.1, TortoiseGit running), it was the process called ""TortoiseSVN status cache"" that was locking the file.Killing it allowed me to run ""git gc"" without any more problems.The above process is fired up by TortoiseGit, so there is no need to manually restart it.I had this issue with .tmp files in /.git/objects/pack folder. I think something had failed during a push or pull, so I removed these temporary files and reset the HEAD to my last commit. Not sure if this is advised but it worked for me. Also git count-objects -v gave me a list of the .tmp files that didn't belong in the pack folder.Or to suppress the y/n messages in windows git open cmd.exe and run:SETX GIT_ASK_YESNO falseseen here: https://twitter.com/petercamfield/status/494805475733807104This may be a separate gitk window running to see some git history.Just close that window to fix that problem.On Windows 8:I ran git gc and it said git gc was already running, I ran git gc --force and the garbage collector ran.I could then switch branches and merge without any issues, try git gc --force.Perhaps the gc process didn't stop gracefully for one reason or another."
"You seem to have been bitten by JGit bug 419641, which has been fixed in EGit 3.2 and above.To work around this, do the merge on the command line, or see this answer for a workaround in EGit.For your information, I just ran into this same exception pulling the origin/master into my local/master. Yet both EGit and JGit are in version 3.3.1Pull result in Eclipse:Exception caught during execution of merge command.org.eclipse.jgit.errors.NoMergeBaseException: No merge base could be determined.Reason=CONFLICTS_DURING_MERGE_BASE_CALCULATION.""More than 200 merge bases for:a f13ef2fd1cbcdae32a8b275fdec244819c219679b 2bfec3e6ae8963376e9618c800dba67081616feafound: count 2""I've tried 3 or 4 times with hard resets in between and with or without --no-ff but always got the exact same response.Pull result in command line (in French, sorry, but it worked and I just have a tiny conflict in a tiny file):$ git pullCompression automatique du dÌ©pÌ«t pour une performance optimum. Vous pouvez aussilancer ""git gc"" manuellement. Voir ""git help gc"" pour plus d'information.Counting objects: 7132, done.Delta compression using up to 2 threads.Compressing objects: 100% (5341/5341), done.Writing objects: 100% (7132/7132), done.Total 7132 (delta 4315), reused 2693 (delta 1317)Fusion automatique de src/path/to/tiny/fileCONFLIT (contenu) : Conflit de fusion dans src/path/to/tiny/fileLa fusion automatique a Ì©chouÌ© ; rÌ©glez les conflits et validez le rÌ©sultat.So I wonder if this is the same bug and, if it is, if it has indeed been fixed. :)"
"The error message leads to the conclusion that you do not have a master branch in your local repository. Either push your main development branch (git push origin my-local-master:master which will rename it to master on github) or make a commit first. You can not push a completely empty repository.I was having the same issue and then smacked myself in the head because I hadn't actually added my project files.git add -Agit commit -am ""message""git push origin masterI had the same issue. I deleted the .git folder then followed the following commands$ git init$ git add .$ git remote add origin git@gitorious.org:project/project.git$ git commit -m ""Initial version""$ git push origin masterI just had the same problem while creating my first Git repository ever. I had a typo in the Git origin remote creation - turns out I didn't capitalize the name of my repository. git remote add origin git@github.com:Odd-engineFirst I removed the old remote using git remote rm originThen I recreated the origin, making sure the name of my origin was typed EXACTLY the same way my origin was spelled. git remote add origin git@github.com:Odd-EngineNo more error! :)I have same issue . it's solved my problem . €¡f you init your git . you have to do on Terminal 1) git add .2)git commit -m ""first commit""For send to bitbucket 3) git push -u origin --all # pushes up the repo and its refs for the first timeI had the same error, as Bombe said I had no local branch named master in my config, although git branch did list a branch named master...To fix it just add this to your .git/config[branch ""master""]    remote = origin    merge = refs/heads/masterKinda hacky but does the jobmake sure you are on a branch, at least in master branchtype:git branchyou should see:ubuntu-user:~/git/turmeric-releng$ git branch* (no branch)masterthen type:git checkout masterthen all your changes will fit in master branch (or the branch u choose)i fixed my problem....not sure what the problem was but using the gitx interface to commit my staged files, then...$ git push origin masterworked...i am having the same problem...created a new folder added in the bort template files...$ git commit -m 'first commit'$ git remote add origin git@github.com:eltonstewart/band-of-strangers.git$ git push origin masterthen i get the same error...error: src refspec master does not match any.  fatal: The remote end hung up unexpectedly  error: failed to push some refs to 'git@github.com:eltonstewart/band-of-strangers.git'error: failed to push some refs to 'git@github.com:{username}/{projectname}.git'Unless you're generalizing the error message, it looks like you literally put git@github.com:{username}/{projectname}.git as your remote Git repo. You should fill in {username} with your GitHub username, and {projectname} with your project's name.To actually resolve the issue I used the following command to stage all my files to the commit.$ git add .$ git commit -m 'Your message here'$ git push origin masterThe problem I had was that the -u command in git add didn't actually add the new files and the git add -A command wasn't supported on my installation of git. Thus as mentioned in this thread the commit I was trying to stage was empty.cd  app git init git status touch  test git add . git commit  -a  -m""message to log "" git commit  -a  -m ""message to log"" git remote add origin  git remote add origin git@git.google.net:cherry git push origin master:refs/heads/mastergit clone git@git.google.net:cherry test1I had same issue. I had mistakenly created directory in machine in lower case. Once changed the case , the problem solved(but wasted my 1.5 hrs :( )Check it out your directory name and remote repo name is same.It looks like this question has a number of answers already, but I'll weigh in with mine since I haven't seen any that address the issue I had.I had this error as well on a brand new github repository. It turns out the user I was pushing from did not have push access. For some reason, this results in an ""ERROR: repository not found"" error instead of some sort of access error.Anyway, I hope this helps the poor soul who runs into the same issue."
"I actually once pushed with --force to git.git repository and got scolded by Linus BIG TIME.  It will create a lot of problems for other people.  A simple answer is ""don't do it"".I see others gave the recipe for doing so anyway, so I won't repeat them here, but here is a tip to recover from the situation after you have pushed out the amended commit with --force (or +master).First, you find the old commit that you amended (call it old, and we'll call the new commit you created by amending new).Then create a merge between old and new, recording the tree of new, like git checkout new && git merge -s ours old.Merge that to your master with git merge masterUpdate your master with the result with git push . HEAD:masterThen push the result out.Then people who were unfortunate enough to have based their work on the commit you obliterated by amending and forcing a push (which is your being a very very bad boy) will see the resulting merge will see that you favor new over old. Their later merges will not see the conflicts between old and new that resulted from your amending and they do not have to suffer.What you are seeing is a git safety feature. git refuses to update the remote branch with your branch because your branch's head commit is not a direct descendent of the current head commit of the branch that you are pushing to.If this were not the case, then two people pushing to the same repository at about the same time would not know that there was a new commit coming in at the same time and whoever pushed last would lose the work of the previous pusher without either of them realising this.If you know that you are the only person pushing and you want to push an amended commit or push a commit that winds back the branch, you can 'force' git to update the remote branch by using the -f switch.git push -f origin masterEven this may not work as git allows remote repositories to refuse non-fastforward pushes at the far end by using the config variable 'receive.denynonfastforwards'. If this is the case the rejection reason will look like this (note the 'remote rejected' part): ! [remote rejected] master -> master (non-fast forward)To get around this, you either need to change the remote repository's config or as a dirty hack you can delete and recreate the branch thus:git push origin :mastergit push origin masterIn general the last parameter to git push uses the format <local_ref>:<remote_ref>, where local_ref is the name of the branch on the local repository and remote_ref is the name of the branch on the remote repository. This command pair uses two shorthands. :master has a null local_ref which means push a null branch to the remote side master, i.e. delete the remote branch. A branch name with no : means push the local branch with the given name to the remote branch with the same name. master in this situation is short for master:master.Quick rant: The fact that no-one has posted the simple answer here demonstrates the desperate user-hostility exhibited by the Git CLI.Anyway, the ""obvious"" way to do this, assuming you haven't tried to force the push, is to pull first. This pulls the change that you ammended (and so no longer have) so that you have it again.Once you have resolved any conflicts, you can push again.So:git pullIf you get errors in pull, maybe something is wrong in your local repo config (I had a wrong ref in .git/config branch section)And aftergit pushMaybe you will get an extra commit with subject telling about a ""Trivial merge""Short answer: Don't push amended commits to a public repo.Long answer: A few Git commands, like git commit --amend and git rebase, actually rewrite the history graph. This is fine as long as you haven't published your changes, but once you do, you really shouldn't be mucking around with the history, because if someone already got your changes, then when they try to pull again, it might fail. Instead of amending a commit, you should just make a new commit with the changes.However, if you really, really want to push an amended commit, you can do so like this:$ git push origin +master:masterThe leading + sign will force the push to occur, even if it doesn't result in a ""fast-forward"" commit. (A fast-forward commit occurs when the changes you are pushing are a direct descendant of the changes already in the public repo.)I have solved it by discarding my local amended commit and adding the new changes on top:# rewind to commit before conflictinggit reset --soft HEAD~1# pull the remote versiongit pull# add the new commit on topgit add ...git commitgit pushHere is a very simple and clean way to push your changes after you have already made a ""commit --amend"" git reset --soft HEAD^git stashgit push -f origin mastergit stash popgit commitgit push origin masterWhich does the following:Reset branch head to parent commit.Stash this last commit.Force push to remote. The remote now doesn't have the last commit.Pop your stash.Commit cleanly.Push to remote.Had the same problem.accidentally amended the last commit that was allready pusheddone alot of changes locally, committed some 5 timestried to push, got an error, panicked, merged remote, got alot of not-my-files, pushed, failed, etc.As a GIT-newbie, I thought it was comlpete fubar.Solution: somewhat like @bara suggested + created a local backup branch# Rewind to commit just before the pushed-and-amended one. # Replace <hash> with the needed hash.# --soft means: leave all the changes there, so nothing is lost.git reset --soft <hash># Create new branch, just for a backup, still having all changes in it. # The branch was feature/1234, new one - feature/1234-gone-badgit checkout -b feature/1234-gone-bad# Commit all the changes (all the mess) not to lose it & not to carry aroundgit commit -a -m ""feature/1234 backup""# Switch back to the original branchgit checkout feature/1234# Pull the from remote (named 'origin'), thus 'repairing' our main problemgit pull origin/feature/1234# Now you have a clean-and-non-diverged branch and a backup of the local changes.# Check the needed files from the backup branchgit checkout feature/1234-gone-bad -- the/path/to/file.phpMaybe its not a fast and clean solution and I lost my history (1 commit instead of 5), but it saved a day's work.I had to fix this problem with pulling from the remote repo and deal with the merge conflicts that arose, commit and then push. But I feel like there is a better way."
"Meld is a good diff/merge tool.Here's how to install it on:UbuntuMacWindows (download link) - v3.14.2You can configure your own merge tool to be used with ""git mergetool"".Example:  git config --global merge.tool p4merge  git config --global mergetool.p4merge.cmd p4merge '$BASE' '$LOCAL' '$REMOTE' '$MERGED'  git config --global mergetool.p4merge.trustExitCode falseAnd while you are at it, you can also set it up as your difftool for ""git difftool""  git config --global diff.tool p4merge  git config --global difftool.p4merge.cmd p4merge '$LOCAL' '$REMOTE'Note that in unix/linux you don't want the $BASE to get parsed as a variable by your shell - it should actually appear in your ~/.gitconfig file for this to work.Beyond Compare 3, my favorite, has a merge functionality in the Pro edition. The good thing with its merge is that it let you see all 4 views: base, left, right, and merged result. It's somewhat less visual than P4V but way more than WinDiff. It integrates with many source control and works on Windows/Linux. It has many features like advanced rules, editions, manual alignment...The Perforce Visual Client (P4V) is a free tool that provides one of the most explicit interface for merging (see some screenshots). Works on all major platforms. My main disappointement with that tool is its kind of ""read-only"" interface. You cannot edit manually the files and you cannot manually align.PS: P4Merge is included in P4V. Perforce tries to make it a bit hard to get their tool without their client.SourceGear Diff/Merge may be my second free tool choice. Check that merge screens-shot and you'll see it's has the 3 views at least.UPDATEMeld is a newer free tool that I'd prefer to SourceGear Diff/Merge: Now it's also working on most platforms (Windows/Linux/Mac) with the distinct advantage of natively supporting some source control like Git. So you can have some history diff on all files much simpler. The merge view (see screenshot) has only 3 panes, just like SourceGear Diff/Merge. This makes merging somewhat harder in complex cases.PS: If one tool one day supports 5 views merging, this would really be awesome, because if you cherry-pick commits in Git you really have not one base but two. Two base, two changes, and one resulting merge.My favorite visual merge tool is SourceGear DiffMergeIt is free.Cross-platform (Windows, OS X, and Linux).Clean visual UIAll diff features you'd expect (Diff, Merge, Folder Diff).Command line interface.Usable keyboard shortcuts.I hear good things about kdiff3, seems to be between that and meld (which another poster already suggested).p4mergevimdiffOnce you have have learned vim (and IMHO you should), vimdiff is just one more beautiful little orthogonal concept to learn.  To get online help in vim::help vimdiffIf you're stuck in the dark ages of mouse usage, and the files you're merging aren't very large, I recommend meld.Diffuse is my favourite but of course I am biased. :-)  It is very easy to use:$ diffuse ""mine"" ""output"" ""theirs""http://diffuse.sourceforge.net/Araxis Merge http://www.araxis.com/I'm using it on Mac OS X but I've used it on windows... it's not free... but it has some nice features... nicer on windows though. Also... I'm not very fond of the araxis git merge script... it exits with code zero ""properly"". This means that when you run git mergetool you don't have to say ""yes"" on the command line to the query ""Was the merge successful?"".  This feature is great... if things go smoothly... if it's not... getting the file that was not successfully merged (e.g. some error happened) back into an unmerged state is something i have yet to discover how to do.  So I modified there apple script araxisgitmerge to not wrap and return in a try catch statement so that I always have to answer yes to the query ""Was the merge successful?""If you are just looking for a diff tool beyond compare is pretty nice: http://www.scootersoftware.com/moreinfo.phpYou can change the tool used by git mergetool by passing git mergetool -t=<tool> or --tool=<tool>. To change the default (from vimdiff) use git config merge.tool <tool>.You can install ECMerge diff/merge tool on your Linux, Mac or Windows. It is pre-configured in Git, so just using git mergetool will do the job."
"The problem is that git push assumes that remote branch can be fast-forwarded to your local branch, that is that all the difference between local and remote branches is in local having some new commits at the end like that:Z--X--R         <- origin/some-branch (can be fast-forwarded to Y commit)       \                T--Y    <- some-branchWhen you perform git rebase commits D and E are applied to new base and new commits are created. That means after rebase you have something like that:A--B--C------F--G--D'--E'   <- feature-branch       \          D--E                <- origin/feature-branchIn that situation remote branch can't be fast-forwarded to local. Though, theoretically local branch can be merged into remote (obviously you don't need it in that case), but as git push performs only fast-forward merges it throws and error.And what --force option does is just ignoring state of remote branch and setting it to the commit you're pushing into it. So git push --force origin feature-branch simply overrides origin/feature-branch with local feature-branch.In my opinion, rebasing feature branches on master and force-pushing them back to remote repository is OK as long as you're the only one who works on that branch.One solution to this is to do what msysGit's rebasing merge script does - after the rebase, merge in the old head of feature with -s ours.  You end up with the commit graph:A--B--C------F--G (master)       \         \        \         D'--E' (feature)         \           /          \       --           \    /            D--E (old-feature)... and your push of feature will be a fast-forward.In other words, you can do:git checkout featuregit branch old-featuregit rebase mastergit merge -s ours old-featuregit push origin feature(Not tested, but I think that's right...)It may or may not be the case that there is only one developer on this branch, that is now (after the rebase) not inline with the origin/feature.As such I would suggest to use the following sequence:git rebase mastergit checkout -b feature_branch_2git push origin feature_branch_2Yeah, new branch, this should solve this without a --force, which I think generally is a major git drawback.Other's have answered your question. If you rebase a branch you will need to force to push that branch. Rebase and a shared repository generally do not get along. This is rewriting history. If others are using that branch or have branched from that branch then rebase will be quite unpleasant.In general, rebase works well for local branch management. Remote branch management works best with explicit merges (--no-ff). We also avoid merging master into a feature branch. Instead we rebase to master but with a new branch name (e.g adding a version suffix). This avoids the problem of rebasing in the shared repository.What is wrong with a git merge master on the feature branch? This will preserve the work you had, while keeping it separate from the mainline branch.A--B--C------F--G       \         \        D--E------HEdit: Ah sorry did not read your problem statement. You will need force as you performed a rebase. All commands that modify the history will need the --force argument. This is a failsafe to prevent you from losing work (the old D and E would be lost).So you performed a git rebase which made the tree look like (although partially hidden as D and E are no longer in a named branch):A--B--C------F--G       \         \        D--E      D'--E'So, when trying to push your new feature branch (with D' and E' in it), you would lose D and E.I will use instead ""checkout -b"" and it is more easy to understand.git checkout myFeaturegit rebase mastergit push origin --delete myFeaturegit push origin myFeaturewhen you delete  you prevent to push in an exiting branch that contains different SHA ID.I am deleting only the remote branch in this case.As the OP does understand the problem, just looks for a nicer solution...How about this as a practice ?Have on actual feature-develop branch (where you never rebase and force-push, so your fellow feature developers don't hate you). Here, regularly grab those changes from main with a merge. Messier history, yes, but life is easy and no one get's interupted in his work.Have a second feature-develop branch, where one feature team member regulary pushes all feature commits to, indeed rebased, indeed forced. So almost cleanly based on a fairly recent master commit. Upon feature complete, push that branch on top of master.There might be a pattern name for this method already."
"The pull seems to be successfull. Check withgit statusIf this is the case git checkout -- .gitignore should bring the file back (the version from remote repository"
Thanks @jthill.  I merged using a Linux command line client and the merge succeeded.
"As it turns out, Git is smart enough not to drop a stash if it doesn't apply cleanly. I was able to get to the desired state with the following steps:To unstage the merge conflicts: git reset HEAD .To save the conflicted merge (just in case): git stashTo return to master: git checkout masterTo pull latest changes: git fetch upstream; git merge upstream/masterTo correct my new branch: git checkout new-branch; git rebase masterTo apply the correct stashed changes (now 2nd on the stack): git stash apply stash@{1}Luckily git stash pop does not change the stash in the case of a conflict!So nothing, to worry about, just clean up your code and try it again.Say your codebase was clean before, you could go back to that state with: git checkout -fThen do the stuff you forgot, e.g. git merge missing-branchAfter that just fire git stash pop again and you get the same stash, that conflicted before."
"Well, the message is pretty much self-explanatory. You did not tell git what your name and email address is.Open a command line and type:git config --global user.email ""you@example.com""git config --global user.name ""Your Name""Of course you should enter your real name and email.Afterwards git knows who you are and is able to insert this information in your commits.Seems like smartgit does not add the git binary to your path. You have to add its path to the PATH environment variable or first change to the corresponding directory. You can find a screencast here: http://blog.dragndream.com/?p=97If you are using sourcetree:Repository -> Repository Settings --> Advanced --> uncheck ""Use global user settings"" boxworked great for me.You can solve the problem with the global solution, but firstly I want to describe the solution for each project individually, cause of trustfully compatibility with most of Git clients and other implemented Git environments:Individual SolutionGo to the following location:Local/repo/location/.git/open ""config"" file there, and set your parameters like the example (add to the end of the file):[user]    name = YOUR-NAME    email = YOUR-EMAIL-ADDRESSGlobal SolutionOpen a command line and type:git config --global user.email ""YOU@EXAMPLE.COM""git config --global user.name ""YOUR NAME"""
"When you created your repository on GitHub, you created a README.md, which is a new commit.Your local repository doesn't know about this commit yet. Hence:Updates were rejected because the remote contains work that you do  not have locally.You may want to find to follow this advice:You may want to first merge the remote changes (e.g.,  'git pull') before pushing again.That is:git pull# Fix any merge conflicts, if you have a `README.md` locallygit push -u origin masterif is your first push... relax take it easy..just change the git push **-u** origin master  change de like this!git push -f origin masterDo a forced push with:git push -f origin master.All you need is a force push. Because you might have created Readme.md file on Githib and you haven't committed it yet.git push -f origin master.Assuming that you added the Readme.md file through the interface provided by github, the readme is not yet in your local folder.  Hence, when you try to push to the remote repo, you get an error, because your local repo is lacking the readme file - it's ""behind the times"", so to speak.  Hence, as is suggested in the error message, try ""git pull"" first.  This will pull the readme from the remote repository and merge it with your local directory.  After that, you should have no problem pushing to the remote repo  (the commands you posted look valid to me).if you use the git for mac in GUI you can chose Respository->Pull or the ""comm+shift+p"" to ""git pull"" first, then publish the source.Considering if you haven't committed your changes in a while, maybe doing this will work for you.git add filesgit commit -m ""Your Commit""git push -u origin masterThat worked for me, hopefully it does for you too."
"When doing a push, try specifying the refspec for the upstream master:git push upstream upstreammaster:masterJarret Hardie is correct.  Or, first merge your changes back into master and then try the push.  By default, git push pushes all branches that have names that match on the remote -- and no others.  So those are your two choices -- either specify it explicitly like Jarret said or merge back to a common branch and then push.There's been talk about this on the Git mail list and it's clear that this behavior is not about to change anytime soon -- many developers rely on this behavior in their workflows.Edit/ClarificationAssuming your upstreammaster branch is ready to push then you could do this:Pull in any changes from the upstream.$ git pull upstream masterSwitch to my local master branch$ git checkout masterMerge changes in from upstreammaster$ git merge upstreammasterPush my changes up$ git push upstreamAnother thing that you may want to do before pushing is to rebase your changes against upstream/master so that your commits are all together.  You can either do that as a separate step between #1 and #2 above (git rebase upstream/master) or you can do it as part of your pull (git pull --rebase upstream master)First, attempt to pull from the same refspec that you are trying to push to.If this does not work, you can force a git push by using git push -f <repo> <refspec>, but use caution: this method can cause references to be deleted on the remote repository.Is your repository at ""upstream"" a bare repository? I got the same error, but when I change to bare they no longer happen.first usegit pull https://github.com/username/repository masterand then trygit push -u origin master"
"I had the same problem, and in my case it seems to be due to the initial subtree commit being merge-squashed into the master branch.Looking through the subtree source I found this: https://github.com/git/git/blob/master/contrib/subtree/git-subtree.sh#L224It looks like subtree greps your git log for git-subtree-dir: foo but doesn't find a suitable commit. Try git log --grep=""git-subtree-dir: foo/*\$"", and if there's something weird with that commit, such as it being a merge commit, that could be the issue.Just pulling without squashing worked for me, apart from the annoying merge conflicts. I did that in a temporary branch which I then git merge --squashed into another branch to avoid a messier history. It could've been rebased instead too of course."
"I'm not sure if I really understand what you want, so I will name some possible situations and resolutions.If you want know files your local branch different from remote counterpart:git diff --name-status master origin/masterIf you plan to pull, but want to know what will be modified:git pull --no-commitgit will leave a merged working tree to you and you can check modified files by command like git status.If you want to make a clean history, I recommend (maybe not you planned to)git pull --rebaseit will fetch the latest code from remote and apply your local changes on it."
"git is simply telling you the result of the reset. HEAD(your current position) is now at 3291a25(the commit you wanted to reset to) ""will create merge confict 1""(the message of the commit).You should pass a commit which you want to reset to rather than just say HEAD. Also, if you want to abort a half completed merge, use git merge --abort (or git reset --merge in older versions of git)."
"Perhaps try:git push git@github.com:{username}/{projectname}.git HEAD:testThe format of the last parameter on that command line is a refspec which is a source ref followed by a colon and then the destination ref. You can also use your local branch name (my_test) instead of HEAD to be certain you're pushing the correct branch.The documentation for git push has more detail on this parameter.Also, you don't need to type out the whole url each time you want to push.  When you ran the clone, git saved that URL as 'origin', that's why you can run something like 'merge origin/test' - it means the 'test' branch on your 'origin' server.  So, the simplest way to push to your server in that case would be:git push origin my_test:testThat will push your local 'my_test' branch to the 'test' branch on your 'origin' server.  If you had named your local branch the same as the branch on the server, then the colon is not neccesary, you can simply do:git push origin testI think here you will need to set up branch tracking. Please run the following to enable trackinggit branch --track my_test origin/my_testTo test git push -u origin my_testgit pull origin my_testThis error also comes up if you try to push to a new repository without having committed anything first. Try:git add -Agit commit -am 'Initial commit'And then try your push again."
"The subtree merge strategy artificially limits the depth of its search for where the subtree ‰ÛÏfits‰Ûù into the overall tree. Unfortunately this limit is hard coded (see match-trees.c:267).Luckily, Git 1.7.0 added the subtree=‰Û_ option to the (default) recursive merge strategy. This option lets you exactly specify the prefix so that Git does not have to guess (as much).With Git 1.7.0 or later, try this:git pull -X subtree=sites/all/modules/my_module REMOTE_REPO masterClarifying for future readers, the solution is in the comments of Chris Johnsen's response. If you're seeing the ""fatal: entry not found in tree"" error, get rid of the trailing slash at the end of your subtree prefix.For example, if you are trying to pull a GitHub Pages subtree with a command likegit subtree --prefix gh-pages/ pull origin gh-pagesand there are conflicts you will get an error like * branch            gh-pages   -> FETCH_HEADfatal: entry  not found in tree 6e69aa201cad3e5888f1d12af0d910f8a10a8ec3Just remove the trailing slash from the gh-pages directorygit subtree --prefix gh-pages pull origin gh-pagesThis will work, and will try to merge. The worst scenario you can get is when the auto merge fails and you get an error likeAutomatic merge failed; fix conflicts and then commit the result.but you just have to resolve the conflicts manually and you are done."
"Q. What conflict?The conflict from merging the reverse patch of that revision, when later revisions changed the same lines of code: a merge conflictEdit If you are reverting the latest commit, this means that you had local changes (refer to git status). Don't forget that you can have staged and unstaged local changes. To easily see all local changes, use    git diff HEADYou should just open up the unmerged file (git status) to see the conflicted file(s). You'll see the <<<<, =====, >>>>> conflict markers soon enough.You can usegit mergetoolto resolve the conflicts with more user-friendly tools like Meld, KDiff3, Gvim etc."
"That means the merge is a fast-forward one: it simply moves master HEAD to feature branch HEAD.The blog post ""Merge or Rebase?"" (August 2012) mentions:You can turn fast-forward merges off in SourceTree so that a merge commit is always created if you want - check the 'Create a commit' option in the Merge dialog or set it globally in Preferences > Git.]Note: if you are using git-flow with SourceTree, then the merge would always be a fast-forward one if fast-forward is possible: see this thread.The screenshot added by the OP reveals a non-fast-forward merge, with:a merge commit in master historycommits done in feature branchSo A-D is in master, while B-C remain in feature branch: you don't have to ""remove"" B-C from master history.The current branch (master) only has A-D. The feature commits are only visible as a context, to explain where the merge commit D is coming from.Note: this (the merge commit) is represented in GitHub with both parents, meaning including the latest commit of the the merged branch: it is a ""feature"" from GitHub, not an accurate representation of master history.See for instance the commits in the master branch of the Git repo itself: each merge commit is followed by one commit from the merged branch.In the case of the second screenshot, GitHub displays the commits from the merged branch, but those commits aren't part of the history of master (a git log master wouldn't list them).It is a feature from GitHub, not an exact view of the master log.Note bis: those merged commits are displayed by GitHub according to their date.If they are recent, you see them right under the merge commit, if they are older, you see them further down in the commit history list of the master branch. The OP Asaf Maoz adds in the comments:when I used smart git I had an option to merge branches and see only one commit in my master branch (similar to those in your link) - the merged commit,This doesn't seem to be supported yet in ST (see the ST forum).Even displaying the name of the current branch isn't there yet (SRCTREE-1925)I didn't change anything in my github account, so it must be in the ST. maybe this option does not exist in STYes: each tool chose its graphical display of a git log."
"You can revert the merge following the official guide, however this leaves Git with the erroneous belief that the merged commits are still on the target branch.Basically you have to : git revert -m 1 (Commit id of the merge commit)Try using git reflog <branch> to find out where your branch was before the merge and git reset --hard to restore the old revision.Reflog will show you older states of the branch, so you can return it to any change set you like.Make sure you are in correct branch when you use git resetTo change remote repository history, you can do git push -f, however this is not recommended because someone can alredy have downloaded changes, pushed by you."
"The error that you are seeing:error: Your local changes to 'foo.cpp' would be overwritten by merge. Aborting. Please, commit your changes or stash them before you can merge.is because you have uncommitted changes (it says this at the very top of the SourceTree display).  Any attempt to merge will fail if you have uncommited changes.  You have three choices:Axe all the changes     (Use: git reset --hard)Stash all the changes   (Use: git stash)Commit all the changes  (use: git add ...; git commit ...)After you've done that you will be allowed to merge.  If you choose option #3 above then conflicts might arise; there will be no conflicts for options #1 or #2.  [Note: for option #2, you will do git stash pop later and conflicts might arise then.]For your Q1: do git config merge.tool diff3 (or vimdiff, or whatever).  Merging can be confusing (it is typically a 3-way merge so the tool shows three versions and a combined version).For your Q2: SourceTree does not include it's own merge tool; you'll need to rely on another (I use p4merge and SourceTree).  With these config options:difftool.sourcetree.cmd=/Applications/p4merge.app/Contents/MacOS/p4merge ""$LOCAL"" ""$REMOTE""difftool.sourcetree.path=mergetool.sourcetree.cmd=/Applications/p4merge.app/Contents/MacOS/p4merge ""$BASE"" ""$LOCAL"" ""$REMOTE"" ""$MERGED""mergetool.sourcetree.trustexitcode=trueYou are getting the conflict message because you have made modifications to a file that is changed in remote that will get pulled in.  Hence the message to either stash or commit your changes.If you do either of these things then pull, there may or may not be any conflicts to resolve.  If the changes that you pulled in are not in the same locations as your modifications there will not be a conflict, for example.  If there are mergetool should work for taking care of it."
"Regarding the rebase in your fasq branch, that would be:git checkout fastqgit rebase -i 67901f963470a1cd2f8477f736b6b2192343485c (last commmit before your change)# select s for each commmit in order to squash them)You will have to force push your branch once your commit is rebase/squashed, since the history is different.git checkout fastqgit push -fThat will update the PR (Pull Request) automatically."
"Branches are just commit pointers. You get into some weird territory when there's nothing at which to point. Honestly if you're just looking to get a ""clean"" workflow history, so the first commit of any significance is a merge from develop into master, add an insignificant commit to master first:git branch --move master developgit checkout --orphan mastergit rm -rf . ;# abandon the staged, orphaned changesecho README > README ;# put something in this working directorygit add README && git commit -m ""Initial commit of <my_project>""Why commit something? Because once you run the --orphan checkout, you won't be able to do anything meaningful with the master branch. Try it yourself:$ git checkout --orphan masterSwitched to a new branch 'master'$ git checkout develop && git checkout mastererror: pathspec 'master' did not match any file(s) known to git.How about a merge?$ git checkout --orphan masterSwitched to a new branch 'master'$ git merge developfatal: Non-fast-forward commit does not make sense into an empty headNo dice. The only real way around this is to commit something, anything, to that empty branch.  The moment you do, you can merge develop any way you'd like:$ git merge developMerge made by the 'recursive' strategy. README | 1 + 1 file changed, 1 insertion(+) create mode 100644 READMEAnd the log:$ git log --graph --oneline*   867a1f9 Merge branch 'develop'|\  | * 22df145 README* 15ba82a Initial commit of test project"
"try git checkout -f master-f or --force Source : https://www.kernel.org/pub/software/scm/git/docs/git-checkout.htmlWhen switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes.When checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored."
"First some background ... merging, in git, has two functions:It compares the ""merge base"" of two lines of development to the two tip commits, and then combines the changes, using a semi-intelligent1 algorithm.  That is, git merge other first computes $base,2 then does git diff $base HEAD and git diff $base other.  These two diffs tell git what you want done to $base, e.g., add a line to foo.txt, remove a line from bar.tex, and change a line in xyz.py.  Git then tries to keep all these changes, and if the line added to foo.txt was added the same way in each branch, or the same line was removed from bar.tex, just keep one copy of the change.It records, for future use, the fact that two lines of development were brought together, and that all the desired changes from both lines are now present in the ""merge commit"".  The resulting commit is therefore suitable as a new merge-base, for example.  We'll see something like this (not exactly this) in a moment.These two functions are implemented in quite different ways.  The first one is done by merging the diffs in your work-tree, leaving any too-difficult cases for you to handle manually.  The second one is done at the time you make the merge commit, by listing two3 ""parent commit IDs"" in the new (merge) commit.What you'll need to decide is how much of this to preserve, in what way.  I think it helps immensely, in these cases, to draw (part of) the commit graph.Here, in your example you start with a common base, which I will call B (for base), then have two more commits on master and one on branch:B - C - D    <-- master  \    E   <-- branchNow on branch you first merge commit C:B - C - D   <-- master  \   \    E - F   <-- branchWhether this needs manual intervention depends on the change from B to C, and the change from B to E, but in any case this makes new merge commit F.You then ask git to merge in commit D.  This, however, no longer uses commit B as the merge base, because following the new merge F backwards, git finds that the merge base‰ÛÓthe most recent commit‰ÛÓbetween branch and master‰ÛÓis now commit C.  The comparisons are therefore C to D, and C to F.  Git combines these (perhaps having to stop and get help); when someone (you or git) commits the result, we get:B - C - D   <-- master  \   \   \    E - F - G   <-- branchNow, you're asking (I think) to ""squash"" F and G into a single merge commit.  Given the way git works, you can only achieve this by creating a new merge commit, then making branch point to it (dropping the reference to G and hence the only reference to F as well).There are two things to consider when making this new merge commit:What tree (set of files/directories attached to the commit, will be made out of the index/staging-area) do you want?  You can only have one!What parent commits do you want to list?  To make it come right after commit E, you want its ""first parent"" to be E.  To make it a merge commit, it must have at least one other parent.The tree to choose is obvious: commit G has the desired merge-result, so use the tree from G.The second (and perhaps third) parent to use is less obvious.  It's possible to list both C and D, giving an octopus merge O:B - C = D   <-- master  \    \ \    E --- O   <-- branchBut this doesn't do anything particularly useful, because C is an ancestor of D.  If you made a more normal-looking merge commit M that just points back to both E (as first parent) and D) (as second parent), you'd get this:B - C - D   <-- master  \      \    E ---- M   <-- branchThis would be ""just as good"" as the octopus merge: it has the same tree (we're picking the tree out of commit G each time) and it has the same first-parent (E).  It has just one other parent (i.e., D), but that causes C to be in its history, so it doesn't need an explicit connection directly to C.(It can have an explicit connection, if you want one, but there's no particularly good reason to give it one.)That leaves one last problem: the mechanics of actually producing this merge (M or O, whichever you prefer) and getting branch to point to it.There's a ""plumbing"" command that creates it directly, assuming you're in this state at the moment:B - C - D   <-- master  \   \   \    E - F - G   <-- branchAt this point you can run (note, these are untested):$ commit=$(git commit-tree -p branch~2 -p master branch^{tree} < msg)where msg is a file containing the desired commit message.  This creates commit M (with just the two parents, the first one being commit E, i.e., branch~2 and the second being commit D, i.e., master).  Then:$ git update-ref refs/heads/branch $commitIt's possible to create M using just ordinary git ""porcelain"" commands, but it requires a bit more trickiness.  First we want to save the desired tree, i.e., branch^{tree}:$ tree=$(git rev-parse branch^{tree})Then, while on branch branch (because git reset will use the current branch), tell git to back up two commits.  It doesn't matter whether we use soft, hard, or mixed reset here, we're just rewinding the label branch for the moment:$ git reset HEAD~2Then, tell git we're merging master, but don't commit no matter what.  (This is just to get git to set up .git/MERGE_MSG and .git/MERGE_HEAD -- you could write those files directly, instead of doing this part.)$ git merge --no-commit masterThen wipe out whatever's in the work tree and index, replacing it all with the saved tree from commit G instead:$ git rm -rf .; git checkout $tree -- .(you'll need to be in the top level directory of the work tree for this).  This prepares the index for the new commit, and now there's just that one last commit to make:$ git commitThis commits the merge, using the tree whose ID we grabbed before doing the git reset.  The git reset made the tip commit of branch be commit E, so our new commit is merge-commit M, the same as if we had used the low level plumbing commands.(Note: git rebase -i -p can't quite do this, it's not smart enough to know when this is OK‰ÛÓwhich is only when we have set it up to be OK in the first place.)1It's not particularly smart, but it handles the easy cases pretty well.2You can compute this yourself using git merge-base, with base=$(git merge-base other).  For some (uncommon but not as rare as one might hope) cases, though, there may be more than one suitable merge base.  The default merge algorithm (""recursive"") will merge two merge-bases to come up with a ""virtual base"" and use that.  So there are some subtle differences if you try to do this all manually.3There can be more than two parents: the definition of a ""merge commit"" is any commit with more than one parent.  Multi-way merges (""octopus"" merges) are done differently, though (using the ""octopus merge"" strategy).  So, for the most part, I'm ignoring these here."
"Use this insteadgit config --global diff.tool diffmergegit config --global difftool.diffmerge.cmd ""diffmerge \$LOCAL \$REMOTE""There is plenty of blog posts and articles explaining how to configure diffmerge as default diff or merge tool. See http://adventuresincoding.com/2010/04/how-to-setup-git-to-use-diffmerge/ for example"
"How can you test that a core update (or any other dependency that gets updated) doesn't break things in the projects using it if the developer don't do this step themselves?That's why the usual workflow is expecting the composer update being run on a development machine having enough RAM (i.e. probably more than 1GB set as memory limit for PHP), and the update should be triggered manually by the developer (and if triggered automatically by a continuous integration build, the memory requirements apply to this machine as well).There is no way around this memory requirement. A web server with only 512 MB RAM installed might be able to function as a staging server with barely any concurrent users present, but it shouldn't be used to update the Composer dependencies.Personally I fix the merge conflicts in the composer.lock with a very easy system: Delete the lock file and run composer update. This will update all dependencies to the latest versions that satisfy the version requirements, and create a new working composer.lock file that get's committed during the merge.I am not afraid to potentially update everything, because either it works as expected, or my tests will catch errors quickly. I do select the 3rd party packages I use carefully:they have to tag their versions, preferably using semantic versioning. I do not use any branches for release versions (the rare occasions that someone used them during development were painful)they should ship a new major version if they make backwards incompatible changesthe locally developed packages also follow these requirementsThis works with around 270 packages served by our local Satis instance (probably also a factor to consider when trying to reduce memory footprint - only the packages known to Composer can end up in memory: Compare the ten thousand packages potentially available on packagist.org with 270 local packages). 60 packages of the 270 are locally developed by 20 developers, and randomly releasing new versions. The update failures in the last 2 years are very rare, and should be handled like other bugs: If a tagged version is detected to be incompatible, we release a bugfix release reverting the change, and tag the original change with a new major release, if the incompatible change is necessary.So the workflow you ask for is probably like this:Anytime, any developer should be able to run composer update on his local machine.He should be able to detect if this breaks things on his local machine.If nothing is broken, he commits the changes including the composer.lock file to GitThe staging server only runs composer install and will use exactly the versions that the developer used on his machine.If nothing is broken on staging, that version is ready to be used on production.Merging an already committed version on another developers machine will likely show merge conflicts with composer.lock.Resolve conflicts on all other files.The composer.lock file should be deleted.From here, the workflow is like above, i.e.:The developer should be able to run composer update on his local machine.He should be able to detect if this breaks things on his local machine.If nothing is broken... and so on."
"Try using the --force parameter:git rm --force <file>If you want to keep the file in filesystem:git rm --cached <file>"
"Your branch is no longer directly based off of the branch you're trying to merge it into - e.g. another commit was added to the destination branch that isn't in your branch. Thus, you can't fast-forward into it (because fast-forward requires your branch to completely contain the destination branch).You can rebase your branch on top of the destination branch (git rebase <destination branch>) to rework the commits such that they will fast forward into it, or you can do a regular merge."
"There's a couple of ways to fix this but I've found git stash works good for me. It temporary puts your local changes into another place. Then you can pull, to grab the latest changes. And then you can get your local changes back.Just like this:$ git pull......file your_file.rb not up to date, cannot merge.$ git stash$ git pull$ git stash popThis sort of problem is frequently caused by trying to pull from a repository that has two filenames that differ only in case. If you are on FAT, NTFS in case-insensitive mode (essentially, any time it's being used under Windows), or HFS+ in case-insensitive mode, and have two files ""foobar"" and ""FOOBAR"", then Git will see two distinct files, but the filesystem will only see one, which will cause all kinds of problems. Git will checkout, say, ""FOOBAR"", and then checkout ""foobar"", which the filesystem sees as simply replacing the contents of ""FOOBAR"" but leaving it in place. Now to Git, it appears that ""FOOBAR"" has been replaced with the contents of ""foobar"", and ""foobar"" is gone.There are two different manifestations of this basic problem. One is when your repository actually contains two files that differ only on case. In this case, you need to work on a case-sensitive file system, or you will need to edit the repository to ensure that no collisions of this sort occur; a case-insensitive file system simply cannot store the contents of this repository.A different case that you can workaround is when a rename happens that changes the case of the file. Say, for example, that the Git repository contains a rename from ""EXAMPLE"" to ""example"". Before Git checks out the new version, it will try and check to make sure it's not overwriting some existing file that you have on your disk. Since it thinks that ""example"" is a new filename, it will ask the filesystem if it exists, and the filesystem will see ""EXAMPLE"" and say yes, so Git will refuse to check out the new version since it thinks it will be overwriting untracked files. In this case, if you have no local changes that you care about, a simple git reset --hard <revision-to-checkout> will generally be sufficient to get you past the problem and to the new revision. Just try and remember not to rename files to other names that differ only in case if you're on a case-insensitive file system, as it will cause problems like this.Generally speaking, this means you have changes in your local files that haven't been committed to your local repository.  You can also see this stackoverflow question for a bit more detail.It might a problem also with file permissions. Git is versioning them too, unless config says otherwise. Just adding this answer for people who has almost but not the like problem.Worth a try:Could you set, just for this update, set the config parameter core.trustctime to false?core.trustctimeIf false, the ctime differences between the index and the working copy are ignored; useful when the inode change time is regularly modified by something outside Git (file system crawlers and some backup systems)."
"That usually means a process is still using that specific file (still has an handle on it)(on Windows, ProcessExplorer is good at tracking that kind of process)Try closing your other programs, and try again your git pull.Note that you have an alternative with the GIT_ASK_YESNO variable.Update January 2016That should be fixed in Git 2.8 (March 2016)See commit d562102, commit dcacb1b, commit df617b5, commit 0898c96 (13 Jan 2016) by Johannes Schindelin (dscho).(Merged by Junio C Hamano -- gitster -- in commit 3c80940, 26 Jan 2016) fetch: release pack files before garbage-collectingBefore auto-gc'ing, we need to make sure that the pack files are released in case they need to be repacked and garbage-collected.  Many codepaths that run ""gc --auto"" before exiting kept packfiles mapped and left the file descriptors to them open, which was not friendly to systems that cannot remove files that are open.  They now close the packs before doing so.That fixes git-for-widows issue 500.Looking at the test used to validate that new approach, a possible workaround (since Git 2.8 is not yet out) would be to raise artificially gc.autoPackLimit.git config gc.autoPackLimit 10000git fetchgit config gc.autoPackLimit 50 # default valueThis is a Windows specific answer, so I'm aware that it's not relevant to you... I'm just including it for the benefit of future searchers. In my case, it was because I was running Git from a non-elevated command line. ""Run as Administrator"" fixed it for me.For me, it was because Visual Studio was trying to reload all of the changed files from the pull. Have visual studio refresh, then run git gc.On Windows using GitHub for Windows, I got a similar error in the shell when running git gc:Unlink of file '.git/objects/pack/pack-0b40ae7eae9b83edac62e19c07ff7b4c175244f6.idx' failed. Should I try again? (y/n)I solved it by closing the GitHub GUI.This was caused in my case by SimpLESS, the LESS compiler. You have to close it in the systray.Closed Visual Studio and Rubymine and didn't get the error again. One of them was the culprit."
"First you'll want to add the files in question so that they're tracked by Git (you don't have to commit any changes, but Git needs to know about the files):git add pages/memclub/images/subheaders/leadership.png pages/memclub/images/subheaders/male.png git add pages/memclub/images/subheaders/marketing.png pages/memclub/images/subheaders/training.pngThen you can stash your changes:git stash When you're ready to start working on the files again, you can use:git stash pop"
"There was a bug in Homebrew that was fixed just a few days ago. To fix the bug you can run git reset --hard FETCH_HEAD inside your Homebrew installation. Since that won't fix files that are already seen as modified you can also run git checkout Library to replace your checkout with the latest files. (That wipes all edits so take appropriate measures with any you made.)The accepted answer is correct but incomplete. If you are getting the error of error: The following untracked working tree files would be overwritten by merge:Then go to your terminal and run these commandscd /usr/localThen git reset --hard FETCH_HEADThen git checkout LibraryThat should get everything in order. Then run brew updateLet me add: cd /usr/local/gitand then run git reset --hard FETCH_HEADgo to your terminal and run these commandscd /usr/localsudo git reset --hard FETCH_HEADsudo git checkout LibraryFor those of you using OS X El Capitan, your problem may be System Integrity Protection. The fix is documented here.If /usr/local exists already, run the following in Terminal:sudo chown -R $(whoami):admin /usr/localIf /usr/local does not exist:First, try to create /usr/local the normal way:sudo mkdir /usr/local && sudo chflags norestricted /usr/local && sudo chown -R $(whoami):admin /usr/localIf you see permission issues instead try:Reboot into Recovery mode (Hold Cmd+R on boot) & access the Terminal.In that terminal run: csrutil disableReboot back into OS XOpen your Terminal application and execute the line from just aboveReboot back into Recovery Mode & access the Terminal again.In that terminal execute: csrutil enableReboot back into OS X & you'll be able to write to /usr/local & install Homebrew.Out of no reason (or at least no one I'd understand) the repository in /usr/local (which is the brew install!) lost its remote repository. So, neither a git reset nor a git pull and for sure no brew update would work. How do you know that happened? Check /usr/local/.git/config whether there are some lines like the following:[remote ""origin""]url = http://github.com/mxcl/homebrew.gitfetch = +refs/heads/*:refs/remotes/origin/*If not do as follows:cd /usr/localgit remote add origin http://github.com/mxcl/homebrew.gitgit pull origin master"
"Your feature branch will still point to your work. You will not lose those changes.As plaes said, you can reset master back one withgit reset --hard HEAD^If you want to grab some specific files from your branch without merging, you can check them out:git checkout yourbranch -- file1 file2 etcIf you want some files from master from before the merge you can also check these out:git checkout master^ -- file3 file4 etcThis is not ideal but it is what is needed sometimes. A merge /may/ mean that you reject some changes from either side in a merge. The best way to attain a proper merge is to:git merge --no-commit yourbranchfrom master, then run the git checkout commands from above and finally commit:git add . -Agit commitWhen you push this branch now, you will need to add the force optiongit push --forceorgit push -fHope this helps.The problem here is that you want to undo changes that you already have pushed to the central repository. If you hadn't pushed them in the first place, a git reset --hard/--soft/--mixed HEAD^ would have done the trick.So when you have reseted your HEAD git complains when you try to push to the origin and update the remote ref which is not an ancestor to your HEAD. Use --force:git push --force origin masterHehe, you almost figured it out:git reset --hard HEAD^"
"In this case it might be better to use an interactive rebase.To apply d4fd8cad..HEAD from branch develop to master, you can use the following command.Make sure we are standing in develop:git checkout developBranch out of develop:git checkout -b develop-rebaseDo an interactive rebase on master. The -p option lets you keep the merge commits.git rebase master -i -pDelete all the lines with commits before d4fd8cad. Leaving you with the commits you wanted to cherrypick.Save the rebase file.Resolve conflicts, if any.Now you have a branch that look exactly like you want your master branch to look. Take a look in gitk to verify if you want.Now all we have to do is merge this into master. If this is not a fast-forward merge, something wrong has probably happened, so let's add the --ff-only flaggit checkout mastergit merge develop-rebase --ff-only"
"Ok, I think I have worked out ""git stash unapply"".  It's more complex than git apply --reverse because you need reverse merging action in case there was any merging done by the git stash apply.The reverse merge requires that all current changes be pushed into the index:git add -uThen invert the merge-recursive that was done by git stash apply:git merge-recursive stash@{0}: -- $(git write-tree) stash@{0}^1Now you will be left with just the non-stash changes.  They will be in the index.  You can use git reset to unstage your changes if you like.Given that your original git stash apply failed I assume the reverse might also fail since some of the things it wants to undo did not get done.Here's an example showing how the working copy (via git status) ends up clean again: $ git status# On branch trunknothing to commit (working directory clean) $ git stash applyAuto-merging foo.c# On branch trunk# Changed but not updated:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##       modified:   foo.c#no changes added to commit (use ""git add"" and/or ""git commit -a"") $ git add -u $ git merge-recursive stash@{0}: -- $(git write-tree) stash@{0}^1Auto-merging foo.c $ git status# On branch trunknothing to commit (working directory clean)Edit: From the git help stash documentation in the pop section:Applying the state can fail with conflicts; in this case, it is not removed from the stash list. You need to resolve the conflicts by hand and call git stash drop manually afterwards.If the --index option is used, then tries to reinstate not only the working tree's changes, but also the index's ones. However, this can fail, when you have conflicts (which are stored in the index, where you therefore can no longer apply the changes as they were originally).Try hardcopying all your repo into a new dir (so you have a copy of it) and run:git stash show and save that output somewhere if you care about it.then: git stash drop to drop the conflicting stashthen: git reset HEADThat should leave your repo in the state it was before (hopefully, I still haven't been able to repro your problem)===I am trying to repro your problem but all I get when usin git stash pop is: error: Your local changes to the following files would be overwritten by merge:...Please, commit your changes or stash them before you can merge.AbortingIn a clean dir:git initecho hello world > agit add a & git commit -m ""a""echo hallo welt >> aecho hello world > bgit add b & git commit -m ""b""echo hallo welt >> bgit stashecho hola mundo >> agit stash popI don't see git trying to merge my changes, it just fails. Do you have any repro steps we can follow to help you out?My use case: just tried popping onto the wrong branch and got conflicts.  All I need is to undo the pop but keep it in the stash list so I can pop it out on the correct branch.  I did this:git reset HEAD --hardgit checkout my_correct_branchgit stash popEasy.OK, I think I have managed to find a work-flow that will get you back to where you need to be (as if you had not done the pop).TAKE A BACKUP BEFOREHAND!! I don't know whether this will work for you, so copy your whole repo just in case it doesn't work.1) Fix the merge problems and fix all the conflict by selecting all the changes that come from the patch (in tortoisemerge, this shows up as one.REMOETE (theirs)).git mergetool2) Commit these changes (they will already be added via the mergetool command). Give it a commit message of ""merge"" or something you remember. git commit -m ""merge""3) Now you will still have your local unstaged changes that you started originally, with a new commit from the patch (we can get rid of this later). Now commit your unstaged changesgit add .git add -u .git commit -m ""local changes""4) Reverse the patch. This can be done with the following command:git stash show -p | git apply -R5) Commit these changes:git commit -a -m ""reversed patch""6) Get rid of the patch/unpatch commitsgit rebase -i HEAD^^^from this, remove the two lines with 'merge' and 'reversed patch' in it. 7) Get your unstanged changes back and undo the 'local changes' commitgit reset HEAD^I've run through it with a simple example and it gets you back to where you want to be - directly before the stash was popped, with your local changes and with the stash still being available to pop.Some ideas:Use git mergetool to split the merge files into original and new parts. Hopefully one of those is the file with your non-stash changes in it. Apply the diff of the stash in reverse, to undo just those changes. You'll probably have to manually split out the files with the merge conflicts (which hopefully the above trick will work for).I didn't test either of these, so I don't know for sure of they will work.I could reproduce clean git stash pop on ""dirty"" directory, with uncommitted changes, but not yet pop that generates a merge conflict.If on merge conflict the stash you tried to apply didn't disappear, you can try to examine git show stash@{0} (optionally with --ours or --theirs) and compare with git statis and git diff HEAD.  You should be able to see which changes came from applying a stash.If DavidG is correct that it didn't pop the stash because of the merge conflict, then you merely need to clean up your working directory.  Quickly git commit everything you care about.  (You can reset or squash the commit later if you're not done.)  Then with everything you care about safe, git reset everything else that git stash pop dumped into your working directory."
"HEAD is (direct or indirect, i.e. symbolic) reference to the current commit. It is a commit that you have checked in the working directory (unless you made some changes, or equivalent), and it is a commit on top of which ""git commit"" would make a new one. Usually HEAD is symbolic reference to some other named branch; this branch is currently checked out branch, or current branch. HEAD can also point directly to a commit; this state is called ""detached HEAD"", and can be understood as being on unnamed, anonymous branch.ORIG_HEAD is previous state of HEAD, set by commands that have possibly dangerous behavior, to be easy to revert them. It is less useful now that Git has reflog: HEAD@{1} is roughly equivalent to ORIG_HEAD (HEAD@{1} is always last value of HEAD, ORIG_HEAD is last value of HEAD before dangerous operation).For more information read git(1) manpage, Git User's Manual, the Git Community Book and Git GlossaryFrom git reset""pull"" or ""merge"" always leaves the original tip of the current branch in ORIG_HEAD.git reset --hard ORIG_HEADResetting hard to it brings your index file and the working tree back to that state, and resets the tip of the branch to that commit. git reset --merge ORIG_HEADAfter inspecting the result of the merge, you may find that the change in the other branch is unsatisfactory. Running ""git reset --hard ORIG_HEAD"" will let you go back to where you were, but it will discard your local changes, which you do not want. ""git reset --merge"" keeps your local changes.Before any patches are applied, ORIG_HEAD is set to the tip of the current branch.  This is useful if you have problems with multiple commits, like running 'git am' on the wrong branch or an error in the commits that is more easily fixed by changing the mailbox (e.g. +errors in the ""From:"" lines).In addition, merge always sets '.git/ORIG_HEAD' to the original state of HEAD so a problematic merge can be removed by using 'git reset ORIG_HEAD'.Note: from hereHEAD is a moving pointer.  Sometimes it means the current branch, sometimes it doesn't.So HEAD is NOT a synonym for ""current branch"" everywhere already.HEAD means ""current"" everywhere in git, but it does not necessarily mean ""current branch"" (i.e. detached HEAD).  But it almost always means the ""current commit"".  It is the commit ""git commit"" builds on top of, and ""git diff --cached"" and ""git status"" compare against.  It means the current branch only in very limited contexts (exactly when we want a branch  name to operate on --- resetting and growing the branch tip via commit/rebase/etc.).Reflog is a vehicle to go back in time and time machines have interesting interaction with the notion of ""current"".HEAD@{5.minutes.ago} could mean ""dereference HEAD symref to find out what branch we are on RIGHT NOW, and then find out where the tip of that branch was 5 minutes ago"".  Alternatively it could mean ""what is the commit I would have referred to as HEAD 5  minutes ago, e.g. if I did ""git show HEAD"" back then"".git1.8.4 (July 2013) introduces introduced a new notation!(actually, it will be for 1.8.5 or 1.9, Q4 2013: reintroduced with commit 9ba89f4 )Instead of typing four capital letters ""HEAD"", you can say ""@"" now,  e.g. ""git log @"".See commit cdfd948Typing 'HEAD' is tedious, especially when we can use '@' instead.The reason for choosing '@' is that it follows naturally from the ref@op syntax (e.g. HEAD@{u}), except we have no ref, and no operation, and when we don't have those, it makes sens to assume 'HEAD'.So now we can use 'git show @~1', and all that goody goodness.Until now '@' was a valid name, but it conflicts with this idea, so let's make it invalid. Probably very few people, if any, used this name.A blog post during the 1.8.4-rc3 period (14th, August 2013) announced that this feature was reverted and delayed (Thank you Cupcake for the heads-up).Again, it is introduced again with  commit 9ba89f4 (Sept. 2013).See commit 2c2b664:Revert ""Add new @ shortcut for HEAD""This reverts commit cdfd948, as it does not just apply to ""@"" (and forms with modifiers like @{u} applied to it), but also affects e.g. ""refs/heads/@/foo"", which it shouldn't.The basic idea of giving a short-hand might be good, and the topic can be retried later, but let's revert to avoid affecting existing use cases for now for the upcoming release.My understanding is that HEAD points the current branch, while ORIG_HEAD is used to store the previous HEAD before doing ""dangerous"" operations.For example git-rebase and git-am record the original tip of branch before they apply any changes."
"The simplest thing would be to completely remove your stash. Note that you‰Ûªll need to remove two files - not one file, as outlined in the linked solution:rm .git/refs/stash .git/logs/refs/stash"
"Your local master branch is not set up to track remote master branch.You could do git pull origin master to tell git the explicit branch you want to pull or you add this to your .git/config:[branch ""master""]  remote = origin  merge = refs/heads/masterWhen you push to master for the first time, add the -u switch (git push -u origin master). This will set everything up automatically.As it turns out, @MichaÅâ Szajbe's answer IS the solution to the problem.  The eclipse keys in question are built from the egit ""working directory"". Should you encounter this problem, then find the .git directory in that working directory and edit the .git/config file with a text editor, adding the section Michal describes.  This is in my experience a fairly standard operation these days for cases when you first git init and push to an uninitialized remote, that creates the master branch.  I haven't found a way in that case not to do the manual editing in order to git pull, even with command line git.  After the edit is saved, right click on the git repo in your egit ""Git Repositories"" perspective, and choose properties, you will now see this section of keys has been created (or more likely just read from the config file) and a remote master to local master git pull will operate as expected going forward.It's possible that you could enter these keys and values yourself, but copying and pasting what Michal shows is certainly a lot faster and probably safer.  I didn't actually try adding the keys manually through the property editor nor am I likely to, as I know this method works, and makes sense since egit is simply calling through to the local git repo.I am also supporting some people in my office who are using Flex and the Flexbuilder editor which is built on top of eclipse and egit.  These instructions are equally relevant to them.To fix this problem in Eclipse, open the Windows menu and select Show View / Other / Git Repositories.From the Git Repositories tab:expand your local repositoryright click on Remoteclick on Create Remote...Remote name = originnext to IRI press the Change buttonCTRL+SPACE on URIselect the remote locationpress Finishpress Save and PushAgain, from the Git Repositories tab:right click on originselect Configure Fetch...on Ref mapping press the Edit (Advanced)...press Add All Branches Specselect the Force Update checkbox press FinishAgain, from the Git Repositories tab:right click on your local repositoryselect Propertiespress New Entry...enter the following two keys:(1)Key = branch.master.remoteValue = origin(2)Key = branch.master.mergeValue = refs/heads/masterThis worked for me:Right-click my checked-out local branch that can't pull (mine's called ""development"")Select ""Configure Branch...""For ""Upstream Branch:"", I selected ""refs/heads/development""For ""Remote:"" I selected ""origin""Left ""Rebase"" uncheckedHit OKNow my config pref window looks like the one in gview's answer.I also had problems to configure it. It is working now so I'm going to share my configuration file. I think it will help:[core]    repositoryformatversion = 0    filemode = false    logallrefupdates = true    [branch ""master""]         remote = origin         merge = refs/heads/master     [remote ""origin""]         url = https://github.com/chelder86/ArcadeTongame.git        fetch = +refs/heads/*:refs/remotes/origin/*Note: https://github.com/chelder86/ArcadeTongame.git should be replaced with your own HTTPS clone URL.Same problem.  Here's how I solved it within eclipse/egit:Originally I cloned a remote repo to my office computer (my own repo, but on a remote server).  Then I created a new branch of repo project locally (""testing""), and pushed it to remote repository.  Cloned remote repo to my laptop, switched to ""testing"" branch, worked on it, etc., pushed, then came back to office.  When I tried to pull ""testing"" changes from server, got msg ""local branch not configured for pull"".  Problem is that on desktop, ""testing"" is local only, does not have remote URL info, so cannot pull changes.I solved this within eclipse (egit) by:deleting local branchpull branch from remote repo as newbranch.Steps were:Go to Git Repository Exploring perspectiverename local branch ""zzz""  (paranoid, don't like deleting until sure I've got it right!)rt-click ""Branches"", ""Switch to"", ""New Branch""pull down ""Source ref"" list, select ""testing"" branch (pull strategy ""merge"", ""Checkout new branch"" checked)click ""finish""Switch to usual perspective, make sure my files are presentswitch back to Git Repository Exploring and delete branch ""zzz""  Note:  am running Eclipse Indigo .  Steps may be different on other releases.I just got the same issue but accepted answer did not work for me. Here's what I did (although I can't confirm if accepted answer had an impact as the updated config remains) : Expand your git repository tree from 'Git Repositories' view.Right click on 'Remotes' and select 'Create Remote'Select radio button 'Configure fetch' -> 'Ok'Select 'Change' opposite 'URI' text boxEnter your git repository details and click 'Finish'Select 'Save'You should now be able to pull from the remote repository.Note - when I tried 'Dry-Run' which I think is just a connection test it failed but the pull still worked.About gview's solution: then find the .git directory in that working directory and edit the .git/config file with a text editorYou don't need to find it yourself or open it with a text editor.Window -> Show view -> Other -> GIT -> Git RepositoriesExpand the repo folder you created.It will contain a folder called ""Working Directory"" expand it.There will be a folder inside the ""Working Directory"" folder called "".git"" expand it.Inside "".git"" there will be ""config"", right click ""config"" -> open in editor.The config file will open right in Eclipse where you can edit it. I added the following and now I can pull without errors:[branch ""master""]remote = originmerge = refs/heads/masterWhat I found that worked using eclispe (this is certainly not the right way to go about this but it works): push to remote repository, delete local workspace and repository, import from git using the import dialogue. The import wizard takes care of setting everything up for future pulls.Try windows->Show View->Navigator.In the Navigator windows, find bin folder in your projectThen commit bin folder to github and hope it work well.Try pull or fetch it after all task above.The current branch is not configured for pull.No value for key branch.master.merge found in configurationAn alternative for PULL (avoiding above error) is:FETCH to update your remote branch on your machineMERGE of your local branch with your remote branch  (Team -> Merge... -> Remote Tracking -> origin/branch)git repository view -> + branches -> local -> select the local branch you want to assign to the remote one -> right click -> select the remote (probably origin) and the upstream branchThe simplest solution I've found while using the Eclipse Git plugin is as follows:Right click the project and select Team > Push BranchMake sure the box next to ""Configure upstream for push and pull"" ischeckedClick next and complete the push.After this completes, the branch will now be correctly configured for pull as well."
"You are right, you get that message because the files already exist locally, are not tracked in the currently checked out version, and the commit you are trying to merge in contains the file.When Git already knows the file before the merge, then it can safely agree to overwrite it, but in this situation there is the chance that you have the file and don‰Ûªt know that Git would now overwrite it, so Git simply won‰Ûªt do it.To resolve this issue, you just need to make room for Git to perform the merge. You can do this in two simple ways:Delete the file. That way, Git will be able to check out the file from the new commit without any conflicts.Rename the file. Same as above, but you have the chance to recover your local changes in case you want to make sure that everything you did locally is also included in the tracked file."
"then make a git reset --hardafter that try to pull again.your local data will be overwritten by this command! So be careful...Well, the message says it all =). You can stash the changes and apply after if you do not want to merge now.http://git-scm.com/book/en/Git-Tools-Stashing"
"Assuming you're not doing anything with git at the moment (i.e., not doing a push or pull or running a git script in the repository, for any reason), you could just remove the lock file manually and try again.Also, git expects a ""commit message"" describing your changes. Assuming you don't want an editor to open, you can provide an inline message using the -m option:git commit -m ""Changed this, that, and the other thing"""
"The command line arguments are separated by space. If you want provide an argument with a space in it, you should quote it. So use git commit -m ""initial commit"".I would just like to add-- In windows the commit message should be in double quotes, as I spent about an hour,just to figure out that single quote is not working in windows.Had this happen to me when committing from Xcode 6, after I had added a directory of files and subdirectories to the project folder.  The problem was that, in the Commit sheet, in the left sidebar, I had checkmarked not only the root directory that I had added, but all of its descendants too.  To solve the problem, I checkmarked only the root directory.  This also committed all of the descendants, as desired, with no error.In my case, this error was due to special characters what I was considering double quotes as I copied the command from a web page."
"I fixed my problem by editing the editor value in the .gitconfig file to match the one suggested by @awayken on this StackOverflow post Git config core.editor -- how to make sublime text the default editor for git on Windows. I'm not sure why, but this seems to have resolved the issue for now.I am also taking the same course from udacity and have the same errors . I figured out that the path in .gitconfig file includes slashes before space but they aren't needed . Go to the .gitconfig file , you will find your path as C:/Program Files/Sublime\\ Text\\ 2/sublime_text.exe . Just remove the slashes and make it C:/Program Files/Sublime Text 2/sublime_text.exe.Now the error of providing message using -m will go away and sublime will open on entering git commit"
"Windows‰Ûª file system is mostly case-insensitive, so you cannot rename a file by just changing its capitalization. Instead, you will have to use a temporary name in between.Try the following from the command line:git mv FOOBar.java FooBar.java.newgit mv FooBar.java.new FooBar.javagit commit -m 'Rename file'I found out a very simple solution to this.Say you need to rename a java package ""Activities"" to ""activities"". This package contains several files and sub-packagesFollow the sequence of stepsRefactor ""Activities"" to ""ActivitiesTemp"" (Shift + F6)Commit and push these changesRefactor again from ""ActivitiesTemp"" to ""activities""Commit and push these changesThats All Folks !Rename the file back to the original one, then rename it to a different name, then back to the one with the correct capitalization. Git will not throw the bug anymore, it's the same solution as Poke pointed out, but using android studio.Example:Created FOOBar class.Renamed it to FooBar and then got the error.Rename it back to FOOBar.Rename to FooBarTest.Rename to FooBar.Git works now.I also faced the almost same situation, in my case I have created a file and added to git (using git add ), after adding to git I have renamed the file. While committing I got the same type error. I solved with the following step use git status to see the staged files you can see your old file in the list - -app/src/main/java/blahblah/FOOBar.java--use git reset to remove file from staging git reset app/src/main/java/blahblah/FOOBar.javaAfter removing from staging you can add your new file git add app/src/main/java/blahblah/FooBar.javaafter this you can commit"
"Catch this condition beforehand by checking the exit code of git diff?For example (in shell):git add -Agit diff --quiet --exit-code --cached || git commit -m 'bla'From the git commit man page:--allow-empty    Usually recording a commit that has the exact same tree as its    sole parent commit is a mistake, and the command prevents you    from making such a commit. This option bypassesthe safety, and    is primarily for use by foreign SCM interface scripts.with settings(warn_only=True):  run('git commit ...')This causes fabric to ignore the failure. Has the advantage of not creating empty commits.You can wrap it in a additional layer of with hide('warnings'): to totally suppress output, otherwise you'll get a note in the fabric output that the commit failed (but the fabfile continues to execute)."
"It's git commit -m ""commit message"".  You're missing the -m flag.If you're using Windows you need to use double quotesVery Good point using double quotes on windows.  It cost me hours trying to figure out why the single quote didn't work.  Thank you!  One thing I want to mention here from my own experience is it seems you still have to do 'git commit -a' for some reason to be able later on to push to the remote git repo such as 'git push'.  and it's almost no point doing just 'git commit -m ""commit message...""' coz you will type it up in a vi editor again anyway when you do 'git commit -a' on windows.  I think only on windows you need to do 'git commit -a' instead of just 'git commmit -m ""msg""'"
"According to your log, it doesn't look like you added your files (to be tracked) before committing.Using git commit -am isn't enough, because it only adds modified files (that is, files that are already part of your repo). You're on your initial commit, so there aren't any files in the index yet.To add (stage) all the files in your current directory, use git add . before you commit. Alternately, use git add <filename1> <filename2> ... to stage individual files for commit.Then you can use git status to verify the files you want to add to your commit are staged to be committed. They should show up as green if they are properly staged (under a heading that says ""Changes to be committed"". Files that are not staged to be committed will show up as red, under a heading that says ""Changes not staged for commit"".More info on git workflow here: https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-RepositoryYou must use git add to add your untracked files.Use the commandgit add ."
"This is the error you get when you attempt to rungit commit <file>but <file> hasn't been staged yet; in other words, Git hasn't been told about it, yet. This is most likely what's happening here. Rungit add application/libraries/Funder.phpthen try to commit.The reason why this error happens is pointed in this post: http://stackoverflow.com/a/29485441/2769415Solution:Rename the file back to the original one, then rename it to a different name, then back to the one with the correct capitalization. Git will not throw the bug anymore.Example:Created FOOBar class.Renamed it to FooBar and then got the error.Rename it back to FOOBar.Rename to FooBarTest.Rename to FooBar.Git works now.I had the same problem in Android Studio after renaming some activities. I tried adding (git add) and moving (git mv) the files but never helped and I was getting the same message again and again.Finally I decided to backup the classes in the package that had the problematic file in a separate folder in my HDD, then I removed the files from the original folder and in the terminal I did:rm app/src/main/java/com/path/to/package/with/problematic/files/Then recreated the deleted package via Android Studio and copied and pasted my classes back there. After that I was able to commit without any issues.I had this failing commit scenario due to a renamed directory.This was the originally created directory with a capitalization mistake:application/Templates/lists/index.htmlWithin the IDE, I had agreed to add this file to the existing git repo.In later testing, I discovered I had a case-sensitive path issue with the capitalization of ""Templates"".  Within the IDE, I simply renamed the directory to ""templates"" (changed to lower-case).  I did not record the actual sequence of events around this, but later when my commit failed with the following message, I had a hunch this was this issue.  Apparently, the IDE did not fully handle this case of renaming a directory.The IDE commit error message:  Commit failed with error: pathspec  ""application/templates/lists/index.html"" did not match any file(s)  known to git.After doing some reading, my strategy was to take the file back out and then add it again.  I unstaged the suspect filegit reset HEAD lists/Templates/lists/index.htmlNote, git status only showed the directory here... Not the file.Untracked files:  (use ""git add <file>..."" to include in what will be committed)    lists/templates/Then, I added back with the corrected directory name (I only used the path for the add, following the lead from git status).git add lists/templates/After this, my commit succeeded.  I'm not sure if this was the ideal technique, but it resolved the commit error in my case.Here's a concise answer on the quickest way to resolve this issue. Similar to @cmbind55 post but to the point.Problem: I have added a file that I later renamed.Solution:Un-add the old file namegit reset HEAD oldFileName.fileNow, add the new file namegit add newFileName.fileCommit and be happyi had the same issue with the word ""certificate"" as a package name... when i rename the Package to ""certificates"" it just work... strange .."
"This happened to me.  Try opening up PowerShell and manually committing each file using the ""git add [file name]"" command.  To see which files have been added, enter ""git status"" into the command line. The green files have been added, the red ones have not been added.  Once you've added them all, type ""git commit."" Then go back to Github for Windows and sync it up.I'm not sure what causes this issue, but once I followed the above steps, Github went back to its normal, awesome behavior.I had this problem too after an unexpected crash. I couldn't fix using the 'Open Shell' option as suggested. I had to open the Windows CLI (Start -> run -> cmd) and delete the index.lock file in my GitHub folder:cd \Users\myUser\my\local\github\repocd .gitdel index.lockThen when I went back to the GitHub app, it committed successfully.Im using Githug for Windows (7) and faced the same problem. While using PowerShell I realized that I didn't fill Full Name and email address in tools > options. Look like a beginner mistake (and I am!).hope it helps!just try to commit a few from your updates. 5 for example. and then make another commit with all other updates.I am using windows client and getting the same error. Then suddenly I realized that my local db in app_data was opened on the SQL management. It just simply can't commit the some files to github if they are opened or using at the other programs.Just disconnected management studio closed it and just simply committed.This may be your case also. Check your files out!So guys this is the full steps I had to take in order to fix the problem...1) Using Process Explorer (you can download it form here http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx) I searched for any process referencing "".git\index"" and then I killed it.2)Then using Git Shell (Windows Power Shell) I went into the repository which was giving me such difficulty and then furthermore went into its .git folder. (cd .\your_respository_name\.git). I then removed the index.lock file in that directory (rm -r index.lock).3)Then from within that same directory I ran git reset HEAD.4)Then I manually committed each file using the ""git add [file_name]"" comand. (You can check that they were added successfully if when you run git status, the files are green.5)Next run git commit if your files are added correctly.6)Finally go back to github for windows and sync everything up and it should hopefully work and resolve the problem.This issue seems to be a bug in the github client - I get it ""all the time"" on the machine on which i only installed the github client.I Never saw it on the git + github PC (I have not used it for a few days now).Doing the ""git add ."" and then ""git commit"" worked for me also on the shell  - but that is the thing the GUI should be doing not me - otherwise I can just stick to the git shell client.Had the same problem, couldn't commit or sync using the windows GUI, but I could commit the changes through the shell. Once I'd added the changes through the shell the windows GUI started to sync normally. Hopefully it's a one off.I had an interesting issue - even though I had an excel file open called ""Combined - ForImportv4.xlsm"", Git UI had no problem checking that in but it gave the error in the OP's subject for the backup file ""~$Combined - ForImportv4.xlsm"" so I discarded that change and all went through.PS: As for why i'm checking an Excel file into Git ... just don't got there :)...I had this issue with the git windows desktop commit tool. I was getting this often and I figured out that Visual Studios was locking the files. To get around this issue I simply closed visual studio and the commit / sync worked fine.I just had the same problem, tried some of the suggestions on this post but none worked so what i did was, on the GiTHub client i went to tools -> settings and then click on the section where it says add/create default ignored files. Then hit Update and try to commit again through the client.It happend to me when my project was opened in an IDE (Netbeans in my case), make sure non of the files you're about to commit isn't open in some program.If you are new user make sure that you have confirmed your e-mail. Had same problem and confirmation fixed it!You can manually navigate to index.lock which is found inside the hidden .git folder of your repository location.  Once you delete index.lock you will be able to commit as per usual. The easiest way to navigate to the folder will be to click on the folder breadcrumbs inside windows explorer and add \.git and press enter."
"The error message leads to the conclusion that you do not have a master branch in your local repository. Either push your main development branch (git push origin my-local-master:master which will rename it to master on github) or make a commit first. You can not push a completely empty repository.I was having the same issue and then smacked myself in the head because I hadn't actually added my project files.git add -Agit commit -am ""message""git push origin masterI had the same issue. I deleted the .git folder then followed the following commands$ git init$ git add .$ git remote add origin git@gitorious.org:project/project.git$ git commit -m ""Initial version""$ git push origin masterI just had the same problem while creating my first Git repository ever. I had a typo in the Git origin remote creation - turns out I didn't capitalize the name of my repository. git remote add origin git@github.com:Odd-engineFirst I removed the old remote using git remote rm originThen I recreated the origin, making sure the name of my origin was typed EXACTLY the same way my origin was spelled. git remote add origin git@github.com:Odd-EngineNo more error! :)I have same issue . it's solved my problem . €¡f you init your git . you have to do on Terminal 1) git add .2)git commit -m ""first commit""For send to bitbucket 3) git push -u origin --all # pushes up the repo and its refs for the first timeI had the same error, as Bombe said I had no local branch named master in my config, although git branch did list a branch named master...To fix it just add this to your .git/config[branch ""master""]    remote = origin    merge = refs/heads/masterKinda hacky but does the jobmake sure you are on a branch, at least in master branchtype:git branchyou should see:ubuntu-user:~/git/turmeric-releng$ git branch* (no branch)masterthen type:git checkout masterthen all your changes will fit in master branch (or the branch u choose)i fixed my problem....not sure what the problem was but using the gitx interface to commit my staged files, then...$ git push origin masterworked...i am having the same problem...created a new folder added in the bort template files...$ git commit -m 'first commit'$ git remote add origin git@github.com:eltonstewart/band-of-strangers.git$ git push origin masterthen i get the same error...error: src refspec master does not match any.  fatal: The remote end hung up unexpectedly  error: failed to push some refs to 'git@github.com:eltonstewart/band-of-strangers.git'error: failed to push some refs to 'git@github.com:{username}/{projectname}.git'Unless you're generalizing the error message, it looks like you literally put git@github.com:{username}/{projectname}.git as your remote Git repo. You should fill in {username} with your GitHub username, and {projectname} with your project's name.To actually resolve the issue I used the following command to stage all my files to the commit.$ git add .$ git commit -m 'Your message here'$ git push origin masterThe problem I had was that the -u command in git add didn't actually add the new files and the git add -A command wasn't supported on my installation of git. Thus as mentioned in this thread the commit I was trying to stage was empty.cd  app git init git status touch  test git add . git commit  -a  -m""message to log "" git commit  -a  -m ""message to log"" git remote add origin  git remote add origin git@git.google.net:cherry git push origin master:refs/heads/mastergit clone git@git.google.net:cherry test1I had same issue. I had mistakenly created directory in machine in lower case. Once changed the case , the problem solved(but wasted my 1.5 hrs :( )Check it out your directory name and remote repo name is same.It looks like this question has a number of answers already, but I'll weigh in with mine since I haven't seen any that address the issue I had.I had this error as well on a brand new github repository. It turns out the user I was pushing from did not have push access. For some reason, this results in an ""ERROR: repository not found"" error instead of some sort of access error.Anyway, I hope this helps the poor soul who runs into the same issue."
"It's probably those hilarious ‰ã¢ trademark symbols:$ echo -e ""\0342\0204\0242""‰ã¢Try typing in, by hand, git commit -m ""initial commit"", and using the standard "" quotes -- ASCII octal 042, decimal 34, hex 0x22."
"From the help page (git help diff):NAME       git-diff - Show changes between commits, commit and working tree, etcSYNOPSIS       git diff [options] [<commit>] [--] [<path>...]       git diff [options] --cached [<commit>] [--] [<path>...]       git diff [options] <commit> <commit> [--] [<path>...]       git diff [options] <blob> <blob>       git diff [options] [--no-index] [--] <path> <path>So you can specify two different path options. If those are timestamps you have to get them into the right syntax. See git help revisions:   <refname>@{<date>}, e.g. master@{yesterday}, HEAD@{5 minutes ago}       A ref followed by the suffix @ with a date specification enclosed in a brace pair (e.g.  {yesterday}, {1 month 2 weeks 3 days 1 hour 1 second ago} or {1979-02-26       18:30:00}) specifies the value of the ref at a prior point in time. This suffix may only be used immediately following a ref name and the ref must have an existing log       ($GIT_DIR/logs/<ref>). Note that this looks up the state of your local ref at a given time; e.g., what was in your local master branch last week. If you want to look at       commits made during certain times, see --since and --until.This works well for a single file as refname.If you want to really diff all the changes in your full  repo between two times, see this question and this questionUpdate based on the update of the question and clarifications in the comments:As the dates appear in the first line of the commit message, you first have to search for the matching date (=commit message) in your repository to determine the unique checksum that identifies the respective commit just as Wumpus explained in the comments:git log --oneline --grep='07/25/15 - 22:42'This should work in your case. In the general case where the date or the search string cannot be found in the first line of the commit message use:git log --grep='07/25/15 - 22:42'If you have multiple branches and don't know on which branch the respective commit is to be found, add the --all switch.On the output you will find the checksum, e.g. 3d4c7fb. This is the unique identifier which you can then feed into git diff. Note that the full checksum is actually a bit longer, but abbreviations are fine as long as they are unambiguous. Usually the first four to six digits are sufficient, depending on the amount of commits done in the past.As Wumpus already said: This is awful. Do not add the commit date to the log message. It is redundant and therefore meaningless: git already maintains two dates for each commit: The author date and the commit date. For the first commit of a changeset these two are identical. During operations that integrate one commit onto a different branch (and generating a new commit checksum), the commit date represents the timestamp of the operation while the author date remains the same old. As I explained above you can refer to a file at a certain timestamp with filename@{timestamp}. See git help revisions to learn about the details of what you can do with the syntax. It's neat and quite flexible."
"You might have a corrupted object in your git repository.If you have a remote, or other clones of this repository, you could grab from there the problematic file and just replace it on your local repo.The file you want would be in:/repo/.git/objects/13/da9eeff5a9150cf2135aaed4d2e337f97b8114git reset --hard should bring your repository back to normal, but you will lose uncommitted changes.If the problematic file is being added by your change you can just remove it from the index and add it again: git reset <file> git add <file>For me it was just permissions issue. When I run with 'sudo', it worked. perhaps something to do with mac environmnet"
"Your current approach to remove the most recent commit is completely correct:git reset --hard HEAD~1git push -f origin AUnfortunately, GitHub does not seem to be allowing you to do the force push.  However, there is an alternative.  You could instead git revert the most recent commit.  This will add a new commit on top of the branch which will undo whatever the most recent commit did.  Presumably you won't have any problems in adding a new commit in GitHub.  If you want to go this route, try the following:git revert HEADgit push origin AYour new branch diagrams will be left looking like this:remote: C1 -- C2 -- C3 -- C4 -- Rlocal:  C1 -- C2 -- C3 -- C4 -- Rwhere R is the commit which reverted commit C4.  Functionally speaking, the two branches will behave as if neither the C4 nor R commits are there, i.e.:local/remote: C1 -- C2 -- C3"
"This is a classic issue:(picture from Luis Tubes's blog post)The usual fix is to convert those files yourself, with dos2unix or Swiss File Knife.I have always preferred to keep core.autocrlf to false, which means:git config --global core.autocrlf false$ git config core.autocrlf falseI had the same problem and tried the suggested solution with no success. I had to execute a second command to make it work:$ git config --global core.autocrlf false$ git config --global core.safecrlf falseOne may just try dos2unix:dos2unix [filename]"
"I had a similar problem. My laptop ran out of battery during a git operation. Boo. I didn't have any backups. (N.B. Ubuntu One is not a backup solution for git; it will helpfully overwrite your sane repository with your corrupted one.)To the git wizards, if this was a bad way to fix it, please leave a comment. It did, however, work for me... at least temporarily. Step 1: Make a backup of .git (in fact I do this in between every step that changes something, but with a new copy-to name, e.g.  .git-old-1, .git-old-2, etc.): cp -a .git .git-oldStep 2: Run git fsck --fullnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullerror: object file .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e is emptyfatal: loose object 8b61d0135d3195966b443f6c73fb68466264c68e (stored in .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e) is corruptStep 3: Remove the empty file. I figured what the heck; its blank anyway. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e rm: remove write-protected regular empty file `.git/objects/8b/61d0135d3195966b443f6c73fb68466264c68e'? yStep 3: Run git fsck again. Continue deleting the empty files. You can also cd into the .git directory and run find . -type f -empty -delete to remove all empty files. Eventually git started telling me it was actually doing something with the object directories: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: object file .git/objects/e0/cbccee33aea970f4887194047141f79a363636 is emptyfatal: loose object e0cbccee33aea970f4887194047141f79a363636 (stored in .git/objects/e0/cbccee33aea970f4887194047141f79a363636) is corruptStep 4: After deleting all of the empty files, I eventually came to git fsck actually running: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: HEAD: invalid sha1 pointer af9fc0c5939eee40f6be2ed66381d74ec2be895ferror: refs/heads/master does not point to a valid object!error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 5: Try git reflog. Fail because my HEAD is broken. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git reflogfatal: bad object HEADStep 6: Google. Find this. Manually get the last two lines of the reflog: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ tail -n 2 .git/logs/refs/heads/masterf2d4c4868ec7719317a8fce9dc18c4f2e00ede04 9f0abf890b113a287e10d56b66dbab66adc1662d Nathan VanHoudnos <nathanvan@gmail.com> 1347306977 -0400  commit: up to p. 24, including correcting spelling of my name9f0abf890b113a287e10d56b66dbab66adc1662d af9fc0c5939eee40f6be2ed66381d74ec2be895f Nathan VanHoudnos <nathanvan@gmail.com> 1347358589 -0400  commit: fixed up to page 28Step 7: Note that from Step 6 we learned that the HEAD is currently pointing to the very last commit. So let's try to just look at the parent commit:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git show 9f0abf890b113a287e10d56b66dbab66adc1662dcommit 9f0abf890b113a287e10d56b66dbab66adc1662dAuthor: Nathan VanHoudnos <nathanvan@XXXXXX>Date:   Mon Sep 10 15:56:17 2012 -0400    up to p. 24, including correcting spelling of my namediff --git a/tex/MCMC-in-IRT.tex b/tex/MCMC-in-IRT.texindex 86e67a1..b860686 100644--- a/tex/MCMC-in-IRT.tex+++ b/tex/MCMC-in-IRT.texIt worked!Step 8: So now we need to point HEAD to 9f0abf890b113a287e10d56b66dbab66adc1662d. nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git update-ref HEAD 9f0abf890b113a287e10d56b66dbab66adc1662dWhich didn't complain.Step 9: See what fsck says:nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!error: 0e31469d372551bb2f51a186fa32795e39f94d5c: invalid sha1 pointer in cache-treedangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2missing blob 8b61d0135d3195966b443f6c73fb68466264c68emissing blob e89896b1282fbae6cf046bf21b62dd275aaa32f4dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79amissing blob caab8e3d18f2b8c8947f79af7885cdeeeae192fdmissing blob e4cf65ddf80338d50ecd4abcf1caf1de3127c229Step 10: The invalid sha1 pointer in cache-tree seemed like it was from a (now outdated) index file (source). So I killed it and reset the repo.nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ rm .git/indexnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git resetUnstaged changes after reset:M   tex/MCMC-in-IRT.texM   tex/recipe-example/build-example-plots.RM   tex/recipe-example/build-failure-plots.RStep 11: Looking at the fsck again...nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git fsck --fullChecking object directories: 100% (256/256), done.error: refs/heads/master.u1conflict does not point to a valid object!dangling blob 03511c9868b5dbac4ef1343956776ac508c7c2a2dangling blob dd09f7f1f033632b7ef90876d6802f5b5fede79aThe dangling blobs are not errors. I'm not concerned with master.u1conflict, and now that it is working I don't want to touch it anymore! Step 12: Catching up with my local edits: nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git status# On branch master# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   tex/MCMC-in-IRT.tex#   modified:   tex/recipe-example/build-example-plots.R#   modified:   tex/recipe-example/build-failure-plots.R#< ... snip ... >no changes added to commit (use ""git add"" and/or ""git commit -a"")nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""recovering from the git fiasco""[master 7922876] recovering from the git fiasco 3 files changed, 12 insertions(+), 94 deletions(-)nathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git add tex/sept2012_code/example-code-testing.Rnathanvan@nathanvan-N61Jq:~/workspace/mcmc-chapter$ git commit -a -m ""adding in the example code""[master 385c023] adding in the example code 1 file changed, 331 insertions(+) create mode 100644 tex/sept2012_code/example-code-testing.RSo hopefully that can be of some use to people in the future. I'm glad it worked.I solved this removing the various empty files that git fsck was detecting, and then running a simple git pull.I find it disappointing that now that even filesystems implement journaling and other ""transactional"" techniques to keep the fs sane, git can get to a corrupted state (and not be able to recover by itself) because of a power failure or space on device.I just had the same issue : after pulling the distant repository, when I did a git status I got :""error: object file (...) is empty""""fatal: loose object (...) is corrupted""The way I resolved this was to :git stashremoving git file in error (not sure that is necessary)git stash clearI dont know exactly what things happened, but that instructions seemed to make everything clean.This error happens to me when I am pushing my commit and my computer hangs.This is how I've fix it.Steps to fixgit statusshow the empty/corrupt object filerm .git/objects/08/3834cb34d155e67a8930604d57d3d302d7ec12remove itgit statusI got fatal: bad object HEAD messagerm .git/indexI remove the index for the resetgit resetfatal: Could not parse object 'HEAD'.git statusgit pulljust to check whats happeningtail -n 2 .git/logs/refs/heads/MY-CURRENT-BRANCHprints the last 2 lines tail -n 2 of log branch to show my last 2 commit hashgit update-ref HEAD 7221fa02cb627470db163826da4265609aba47b2I pick the last commit hashgit statusshows all my file as deleted because i removed the .git/index filegit resetcontinue to the resetgit statusverify my fixNote:    The steps starts when I landed on this question and used the answers as reference.The git object files have gone corrupt (as pointed out in other answers as well). This can happen during machine crashes, etc.I had the same thing. After reading the other top answers here I found the quickest way to fix the broken git repository with the following commands (execute in the git working directory that contains the .git folder):(Be sure to back up your git repository folder first!)find .git/objects/ -type f -empty | xargs rmgit fetch -pgit fsck --fullThis will first remove any empty object files that cause corruption of the repository as a whole, and then fetch down the missing objects (as well as latest changes) from the remote repository, and then do a full object store check. Which, at this point, should succeed without any errors (there may be still some warnings though!)PS. This answer suggests you have a remote copy of your git repository  somewhere (e.g. on GitHub) and the broken repository is the local repository that is tied to the remote repository which is still in tact. If that is not the case, then do not attempt to fix it the way I recommend.mv your folder app to make backup, i.e. mv app_folder app_folder_bk (it is like a git stash)git clone your_repositoryFinally,.  Open a merge tool (I use meld diff viewer linux or Winmerge Windows) and copy the changes from right(app_folder_bk)  to left( new app_folder)  (it is like a git stash apply).That's all. Maybe it is not the best way, but I think it is so practical .In my case, this error occurred because I was typing commit message and my notebook turned off.I did these steps to fix the error:git checkout -b backup-branch # Create a backup branchgit reset --hard HEAD~4 # Reset to the commit where everything works well. In my case, I had to back 4 commits in the head, that is until my head be at the point before I was typing the commit message. Before doing this step, copy the hash of the commits you will reset, in my case I copied the hash of the 4 last commitsgit cherry-pick <commit-hash> # Cherry pick the reseted commits (in my case 4, so I did this step 4 times) from the old branch to the new branch. git push origin backup-branch # Push the new branch to be sure everything works wellgit branch -D your-branch # Delete the branch locally ('your-branch' is the branch with problem)git push origin :your-branch # Delete the branch from remotegit branch -m backup-branch your-branch # Rename the backup branch to have the name of the branch that had the problemgit push origin your-branch # Push the new branchgit push origin :backup-branch # Delete the backup branch from remoteHere is a really simple and quick way to deal with this problem IF you have a local repo with all the branches and commits you need, and if you're OK with creating a new repo (or deleting the server's repo and making a new one in it's place):Create a new empty repo on the server (or delete the old repo and create a new one in its place)Change the remote URL of your local copy to point to the remote URL of the new repo.Push all branches from your local repo to the new server repo.This preserves all the commit history and branches that you had in your local repo.If you have collaborators on the repo, then I think in many cases all your collaborators have to do is change the remote URL of their local repo as well, and optionally push any commits they have that the server doesn't have.This solution worked for me when I ran into this same problem. I had one collaborator. After I pushed my local repo to the new remote repo, he simply changed his local repo to point to the remote repo URL and everything worked fine.If you don't care about keeping your historical commits, just run rm -r .gitThen answer yes to anything asking about deleting write-protected files.Problem solved in under a minute.Because I have to reboot my VM regularly, so somehow this problem happens to me very often. After few times of it, I realized I cannot repeat the process described by @Nathan-Vanhoudnos every time this happens, though it always works. Then I figured out the following faster solution.Step 1Move your entire repo to another folder.mv current_repo temp_repoStep 2Clone the repo from origin again.git clone source_to_current_repo.gitStep 3Remove Everything under the new repo except the .git folder.Step 4Move Everything from the temp_repo to the new repo except the .git folder.Step 5Remove the temp_repo, and we are done.After few times, I'm sure you can do this procedures very quickly."
"I have the same problem.Try uncheck ""Perform code analysis"" in commit changes dialog. it worked for me.As suggested by LaYer Sutachad, I attempted to Commit and Push with ""Perform code analysis"" unchecked in the Commit dialog. This, however, finally gave me a bunch of actual error messages in the form of:Commit failed with error:pathspec 'f/Workspaces/AndroidStudio/ProjectName/app/src/main/java/com/ project/Utilities/PixelConverter.java' did not match any file(s) known to git.After only a few Google Searches I found an answer to this problem provided by RacZo here. Which basically prompts to backup the problematic packages/files and re add them through Android Studio, adding them to Git in the process.Thanks to LaYer Sutachad for pointing me in the right direction!"
"Going into terminal and manually committing to git solved the issue. All my further commits in xcode have worked since.git add .git commit -m ""message""The same issue happen to me with the Bolts.framework and Parse.framework. Both were added in the git repo already, so adding them back did not fixed the issue. I had to remove first:cd MyApp/SDK/git rm -r Parse.framework/git rm -r Bolts.framework/The I had to copy them again in the SDK/ folder and adding to git cd MyApp/SDK/ git add . git commit * -m ""Maintenance: Fixed git error unable to index file"""
"I was just running into this, and found your question trying to figure it out.  I too assumed it needed escape characters for the spaces and parentheses IN .gitconfig, but apparently not.  This statement worked for me:editor = C:/Program Files (x86)/Notepad++/notepad++.exeWhich was created in my .gitconfig file by the below command:git config --global core.editor /c/Program\ Files\ \(x86\)/Notepad\+\+/notepad\+\+.exeI had to remove the invalid line, before setting it with the above command would work.Unfortunately, git commit still didn't work.  Adding both Quotation marks and single quotes around it finally worked, launching the COMMIT_EDITMSG in my running Notepad++ window:editor = ""'C:/Program Files (x86)/Notepad++/notepad++.exe'""Platform is Windows 8.1 Pro x64, the MINGW64/Bash shell, installed from the https://git-scm.com Windows client.Looks like the prepare-commit-msg hook or the editor option in the gitconfig has a typo. You call c:/Program/ Files/ /(x86/)/Notepad++/notepad++.exe but you should have called c:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe (use backslashes to escape space and bracket, not slash)"
"On a ""broken link"" message, you could follow the GitFaq recommendations:back up all your state so that anything you do is re-doable if you corrupt things more!explode any corrupt pack-files  See ""man git-unpack-objects"", and in particular the ""-r"" flag.  Also, please realize that it only unpacks objects that aren't already available, so you need to move the pack-file away from its normal location first (otherwise git-unpack-objects will find all objects that are in the pack-file in the pack-file itself, and not unpack anything at all) replace any broken and/or missing objects  This is the challenging part.  Sometimes (hopefully often!) you can find the missing objects in other copies of the repositories.  At other times, you may need to try to find the data some other way (for example, maybe your checked-out copy contains the file content that when hashed will be the missing object?). make sure everything is happy with ""git fsck --full""repack everything to get back to an efficient state againNotes: missing objects can also be related to alternate (when you share objects between repositories) with git alternates (even though that can be risky).The JGit/Egit eclipse plugin is also known to have a few issues.(Update February 2012: those plugins have come a long way and are now quite stable)I had a similar issue just now. The corruption arose when my laptop did a hard power-off during a git pull. I have a remote backup repository. First I had several object files in .git/objects/??/* that were zero size. After a cp -a backup of the repository, I did this:remove the zero length objectsclone the remote repository into a ../fresh/ repositoryin the broken repository, I did cat ../fresh/.git/objects/pack/pack-*.pack | git unpack-objectsThis filled up the missing objects in the object database. The repository seems to be back up now.I had the same problem. After a lot of hair-pulling, I discovered that it was cause by changed permission to the repository's git files. I have solved it as follows:$ cd .git$ chmod 755 *Done!If you don't have uncommited changes the easiest solution is to delete the local branch:git branch -D [branch name]and then checkout again the remote branch:git checkout -b [branch name] origin/[branch name]I got a similar error in my Homebrew install‰Ûªs Git repository. Rather than restoring all the missing objects one by one, I found it easier to simply delete the .git directory and create it again by re-cloning from Homebrew‰Ûªs public repository. These were my steps:Check what information you have in your Git repository that you won‰Ûªt get by just re-cloning. For me, it was private branches, stashes, and remotes.Convert stashes into real commits by creating a new branch, applying the stash, and committing with something like ‰ÛÏ[WIP]‰Ûù in the name to show that it‰Ûªs a stash.Save branches that are not on the public remote by pushing them to a remote of your own. This could be fork of the repository on GitHub, or just a new Git repository in a different location on your machine.If you have more than one remote, save the output of git remote -v, which contains the names and URLs of your remotes, so you can manually add them back later.Delete your repoistory‰Ûªs .git directory (or rename it to .git-broken and delete it later). On the command-line, this is rm -rf .git.Re-clone the remote directory with git clone https://github.com/Homebrew/homebrew.git or whatever URI.This will have created a new sub-folder homebrew named after the repository. You want just the .git directory from that; your local files are already okay. So mv homebrew/.git .git, and then delete the homebrew folder.Your Git repository should have no errors, since you recreated it from scratch. Now just restore any information you saved in the first step.If you had additional remotes, add them again with git remote add <name> <url>.If you backed up any branches (or stashes converted to branches) to a remote repository, pull them from that repository to your local repository.If you want, you can convert the stash-branches back to stashes by rolling the ‰ÛÏ[WIP]‰Ûù commit with git reset HEAD^ and saving the working directory to a stash again with git stash save <custom-message>.If you run git fsck, you should see no errors:$ git fsckChecking object directories: 100% (256/256), done.Checking objects: 100% (197135/197135), done.Checking connectivity: 197162, done.$And git stash list, git branch, and git remote -v should show the same output as before."
"I found that adding ""-i"" to the commit command fixes this problem for me. The -i basically tells it to stage additional files before committing.That is:git commit -i myfile.phpgit commit -am 'Conflicts resolved'This worked for me. You can try this also.You can use git commit -i for most cases but in case  it doesn't work You need to do  `git commit -m ""your_merge_message"". During a merge conflict you cannot merge one single file so you need to Stage only the conflicted file git commit -m ""your_merge_message""You probably got a conflict in something that you haven't staged for commit.  git won't let you commit things independently (because it's all part of the merge, I guess), so you need to git add that file and then git commit -m ""Merge conflict resolution"".  The -i flag for git commit does the add for you.If you just want to ditch the whole cherry-picking and commit files in whatever sets you want, git reset --soft <ID-OF-THE-LAST-COMMIT>gets you there.I got this when I did forgot the -m in my git commit when resolving a git merge conflict.git commit ""commit message"" should be git commit -m ""commit message""Your merge stopped in the middle of the action.You should add your files, and then 'git commit':git add file_1.php file_2.php file_3.phpgit commitCheersDuring a merge Git wants to keep track of the parent branches for all sorts of reasons.  What you want to do is not a merge as git sees it.  You will likely want to do a rebase or cherry-pick manually.For myself this happened in SourceTree when I tried to commit a merge before resolving all of the files. I then marked the last file resolved and yet it still gave me this error when trying to commit. I closed SourceTree and reopened it, and then it committed fine."
"You could use the --author flag:$ git commit --author=""A U Thor <author@example.com""Another option is to use the -c flag to pass config paramter to the current command.In your case git -c user.email=""your@email.com"" -c user.name=""Your Name"" commit ...The -c values override any other default values (set and unset parameters).  Note that all the -c options need to come before the command name commit."
"That error means that you have changes to your files on the prod server that are going to be clobbered by the git pull command that you are trying to run.  Git decides that this is probably not what you want to do.You could run git status to see what you have that isn't checked in/tracked on the prod server to see what you want to do with those changes.  Then you have three options:git reset: those changes I don't need, get rid of them by resetting to the previous commit and then do the pull.git commit (adding relevant files first): those changes need to be in version control, check them in please.  And then pull the latest changes over the top of those changes.git stash: those changes are a work in progress and I don't want to lose them, but I don't want to check them in yet either.  You can retrieve them later."
"So guys this is the full steps I had to take in order to fix the problem...1) Using Process Explorer (you can download it form here http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx) I searched for any process referencing "".git\index"" and then I killed it. 2)Then using Git Shell (Windows Power Shell) I went into the repository which was giving me such difficulty and then furthermore went into its .git folder. (cd .\your_respository_name\.git). I then removed the index.lock file in that directory (rm -r index.lock).3)Then from within that same directory I ran git reset HEAD. 4)Then I manually committed each file using the ""git add [file_name]"" comand. (You can check that they were added successfully if when you run git status, the files are green. 5)Next run git commit if your files are added correctly. 6)Finally go back to github for windows and sync everything up and it should hopefully work and resolve the problem.If you have a process blocking (keeping an handle) on a git resource, you can track it using process explorer.Search for any process referencing "".git\index"" and you will be able to kill it."
"This doesn't seem like a git limitation, but should be some kind of pre-receive hook on the remote side (the Git repository hosting service/server to which you are pushing to)That hook seems to parse the commits and check the committer email against a specific criteria which rejects karan@xyz.com.You should check with the remote side administrator to see what is going on.The OP Karan Singla confirms in the comments it was an issue at the server side:Issue got resolved. Admin re-created my account and it is working fine now.This worked for megit config --global user.name ""Correct Name"" git config --global user.email name@email.com git commit --amend --reset-authorI would suggest to open git terminal and set correct email. This worked for me when I encountered same issue.git config --global user.email ""your_correct_email@example.com"""
"The problem is that you are using Windows or Mac, which have (more or less) case insensitive file systems.The easiest solution (took it from http://apple.stackexchange.com/a/51619) would be to  rename the file to something completely different, commit, rename the file again to the name you want and commit again, this time amending the old commit.If Android Studio does not support amend commits, you could go with the terminal commands from the answer avove."
"You need to do these things in order..Fetch All Branches git fetch --allCheck Branch Namegit branchThen Checkout to branchgit checkout your_branch_nameNow, while committingAdd all files you want to commit in the staging areagit add . (for all files)git add filename (for respective file)Commit to local database git commit -m ""your custom message""Push to remote repogit push origin current_branch_nameHere, origin is the remote name."
"It looks like Xcode is not reading global GIT settings. If you encounter this issue, set your name and email to the specific project via the Terminal:git config user.email ""you@example.com"" git config user.name ""Your Name""Note: Make sure you are in the project's directory when you do the above.It's not only the matter in global settings, the real problem are local ones.Try this.cd your/project/directory    git config --local user.email ""your@email.com""    git config --local user.name ""yourName"" This worked for me."
"I removed .xcdatamodel file, committed, added it and committed again. Not clean, but worked.The chosen answer is too specific to his own question and gives zero insight on the actual cause. The problem is indeed, as mentioned before the changing of a filename's case. For me personally this is because of my Macbook/OSX. Apparently Windows has the same 'thing'. Cause: git isn't able to recognise a change from 'filename' to 'FileName'.Here's a list of solutions for anyone stumbling upon this. All should be run at the project root:The Permanent fix that will work on current and future projectsChange the git case setting. The file should be committed afterwardsgit config core.ignorecase false --globalThe Project only fixgit config core.ignorecase falseThe just give me a line of code so I can move on fix - credit to Brucegit commit -a -m ""pathspec did not match any file(s) known to git fix""The I get paid by the hour fixDelete the file. Commit. Push. Add the file again. Commit. Push.This probably wasn't your problem, but this page has a high Google rank for the error:Git doesn't like renames where the source and destination differ only by case. (Windows-specific) SeeHow do I commit case-sensitive only filename changes in Git?for solutions.This is not a proper way to solve the problem, but it's a workaround that may help others...Do this in your terminal:git commit -m ""<message>"" <project dir>Replace  with your message, and  with the directory of your project.This is similar to tf.alves answer, but normally I do agit commit -a -m ""comment""I've found that if I forget the -a and -m parameters that I get the error: pathspec message mentioned above."
"It seems you have lost your HEAD, so you will have to recreate it. You can do that using this.echo ref: refs/heads/master >.git/HEADThis will create a HEAD file in your .git folder. That should solve your problem.Also, try the git fsck command. It verifies the connectivity and validity of the objects in the database.git fsck --lost-foundUse this to scan for unreachable objects. It will write dangling objects into .git/lost-found/commit/ or .git/lost-found/other/, depending on type. If the object is a blob, the contents are written into the file, rather than its object name."
"I fix this error bygit rm -r --cached sections          git commit -m ""blalblalba""       git add .    git commit -m ""2blablalbla"""
"It seems that you have set using gitpad to edit git commit message. You can set commit message on CLI withgit commit -m ""Commit message""Or unset gitpad withexport EDITOR=git commit -m ""Commit message"""
"See the 'non-fast forward' section of 'git push --help' for details.You can perform ""git pull"", resolve potential conflicts, and ""git push"" the result. A ""git pull"" will create a merge commit C between commits A and B.Alternatively, you can rebase your change between X and B on top of A, with ""git pull --rebase"", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A.You can also force a push by adding the + symbol before your branch name.git push origin +some_branchYou probably have changes on github that you never merged. Try git pull to fetch and merge the changes, then you should be able to push. Sorry if I misunderstood your question.If you ""git pull"" and it says ""Already up-to-date."", and still get this error, it might be because one of your other branches isn't up to date.  Try switching to another branch and making sure that one is also up-to-date before trying to ""git push"" again:Switch to branch ""foo"" and update it:$ git checkout foo$ git pullYou can see the branches you've got by issuing command:$ git branchYou can force it to push, but please do this ONLY when you're quite sure what you are doing.The command is:git push -fThis problem can also occur when you have conflicting tags. If your local version and remote version use same tag name for different commits, you can end up here.You can solve it my deleting the local tag:$ git tag --delete foo_tagWhen I got this error, I backed up my entire project folder.  Then I did something like$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master...depending on your branch name (if it's not master).Then I did git pull --rebase.  After that, I replaced the pulled files with my backed-up project's files.  Now I am ready to commit my changes again and push."
"I spend on it lots hours when i call php script to init and commit git.And i Found the work flow should Be:1.git init2.git config user.name ""someone""3.git config user.email ""someone@someplace.com""4.git add *5.git commit -m ""some init msg""If you swap [23] and 1, the config will not work at all.Wish this will do some help.Instead of doing a git pull, you can do:git fetchgit reset --hard origin/masterNeither of those require you to configure your git user name / email.This will destroy any uncommitted local changes / commits, and will leave your HEAD pointing to a commit (not a branch). But neither of those should be a problem for an app server since you shouldn't be making local changes or committing to that repository.If you are using sourcetree: Repository -> Repository Settings --> Advanced --> uncheck ""Use global user settings"" boxworked great for me.Update your bootstrap process to create a ${HOME}/.gitconfig with the proper contents, or to copy an existing one from somewhere."
"One fix is to:revert to command line.clone your current repotry and create new branch/new commit on that clone.If you had previously pushed your repo, try cloning the remote repo instead of the local one.Or try cloning the repo as save by Time machine.If that doesn't work, you have a broken repo, and you can try some of the methods exposed in ""Tree contains duplicate file entries"".Have you changed git version? Do you only use the one that came with Xcode, or have you got an obsolete version installed in Terminal? One that might be corrupting the repo. (Try 'git --version' - the current version is 2.0.4, and it's easily installed using homebrew).Are there any strange permissions in the repo folder that are preventing git from working?"
"No, you need to add that file to your .gitignore.Simply create a .gitignore that contains the following :*.opensdfEasier, though, is to let Visual Studio create the default .gitignore in your repository, or download the default Visual Studio .gitignore and add it to your project."
"If you want to use git commands inside a powershell script make sure you have a record in the environment variable 'Path' with the actual path to the git. In my case it looks as shown on the attached picture!: Anyway, this setting was automatically added when I installed Git Extensions. If you don't use extensions just add this line to the 'Path' variable eather manually or from powershell script.Hope this will helpGithub for windows uses posh-git so you may want to confirm that you are following the manual install to be used by powershell.Verify execution of scripts is allowed with Get-ExecutionPolicy (should be RemoteSigned or Unrestricted). If scripts are not enabled, run PowerShell as Administrator and call Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm."
"Someone else (or you on some other machine) has pushed a changeset to the remote repository. You, on your local machine dont have those changes yet. So to solve the situation you first have to git pulland then git pushHowever, you wont be able to git pull while you have changes in your working tree, so before you pull/push, you first have to commit or stash your local changes. This, potentialy, might bring up a merge situation if remote changes overlap with your local ones."
"What is currently happening is, that you have a certain set of files, which you have tried merging earlier, but they threw up merge conflicts.Ideally, if one gets a merge conflict, he should resolve them manually, and commit the changes using git add file.name && git commit -m ""removed merge conflicts"".Now, another user has updated the files in question on his repository, and has pushed his changes to the common upstream repo.It so happens, that your merge conflicts from (probably) the last commit were not not resolved, so your files are not merged all right, and hence the U(unmerged) flag for the files.So now, when you do a git pull, git is throwing up the error, because you have some version of the file, which is not correctly resolved.To resolve this, you will have to resolve the merge conflicts in question, and add and commit the changes, before you can do a git pull.Sample reproduction and resolution of the issue:# Note: commands below in format `CUURENT_WORKING_DIRECTORY $ command params`Desktop $ cd testFirst, let us create the repository structuretest $ mkdir repo && cd repo && git init && touch file && git add file && git commit -m ""msg""repo $ cd .. && git clone repo repo_clone && cd repo_clonerepo_clone $ echo ""text2"" >> file && git add file && git commit -m ""msg"" && cd ../reporepo $ echo ""text1"" >> file && git add file && git commit -m ""msg"" && cd ../repo_cloneNow we are in repo_clone, and if you do a git pull, it will throw up conflictsrepo_clone $ git pull origin masterremote: Counting objects: 5, done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From /home/anshulgoyal/Desktop/test/test/repo * branch            master     -> FETCH_HEAD   24d5b2e..1a1aa70  master     -> origin/masterAuto-merging fileCONFLICT (content): Merge conflict in fileAutomatic merge failed; fix conflicts and then commit the result.If we ignore the conflicts in the clone, and make more commits in the original repo now,repo_clone $ cd ../reporepo $ echo ""text1"" >> file && git add file && git commit -m ""msg"" && cd ../repo_cloneAnd then we do a git pull, we getrepo_clone $ git pullU   filePull is not possible because you have unmerged files.Please, fix them up in the work tree, and then use 'git add/rm <file>'as appropriate to mark resolution, or use 'git commit -a'.Note that the file now is in an unmerged state and if we do a git status, we can clearly see the same:repo_clone $ git statusOn branch masterYour branch and 'origin/master' have diverged,and have 1 and 1 different commit each, respectively.  (use ""git pull"" to merge the remote branch into yours)You have unmerged paths.  (fix conflicts and run ""git commit"")Unmerged paths:  (use ""git add <file>..."" to mark resolution)        both modified:      fileSo, to resolve this, we first need to resolve the merge conflict we ignored earlierrepo_clone $ vi fileand set its contents totext2text1text1and then add it and commit the changesrepo_clone $ git add file && git commit -m ""resolved merge conflicts""[master 39c3ba1] resolved merge conflictsYou are attempting to add one more new commits into your local branch while your working directory is not clean.  As a result, Git is refusing to do the pull.  Consider the following diagrams to better visualize the scenario:remote: A <- B <- C <- D local:  A <- B*   (*indicates that you have several files which have been modified but not committed.)There are two options for dealing with this situation.  You can either discard the changes in your files, or retain them.Option one: Throw away the changes You can either use git checkout for each unmerged file, or you can use git reset --hard HEAD to reset all files in your branch to HEAD.  By the way, HEAD in your local branch is B, without an asterisk.  If you choose this option, the diagram becomes:remote: A <- B <- C <- D local: A <- BNow when you pull, you can fast-forward your branch with the changes from master.  After pulling, you branch would look like master:local: A <- B <- C <- DOption two: Retain the changes If you want to keep the changes, you will first want to resolve any merge conflicts in each of the files.  You can open each file in your IDE and look for the following symbols:<<<<<<< HEAD   // your version of the code   =======   // the remote's version of the code   >>>>>>>Git is presenting you with two versions of code.  The code contained within the HEAD markers is the version from your current local branch.  The other version is what is coming from the remote.  Once you have chosen a version of the code (and removed the other code along with the markers), you can add each file to your staging area by typing git add.  The final step is to commit your result by typing git commit -m  with an appropriate message.  At this point, our diagram looks like this:remote: A <- B <- C <- D local: A <- B <- C'Here I have labelled the commit we just made as C' because it is different from the commit C on the remote.  Now, if you try to pull you will get a non-fast forward error.  Git cannot play the changes in remote on your branch, because both your branch and the remote have diverged from the common ancestor commit B.  At this point, if you want to pull you can either do another git merge, or git rebase your branch on the remote.Getting a mastery of Git requires being able to understand and manipulate uni-directional linked lists.  I hope this explanation will get you thinking in the right direction about using Git.Theres a simple solution to it. But for that you will first need to learn the following vimdiffTo remove conficts, you can usegit mergetoolThe above command basically opens local file, mixed file, remote file (3 files in total), for each conflicted file. The local & remote files are just for your reference, and using them you can choose what to include (or not) in the mixed file. And just save and quit the file.You have some files locally that need to be merged before you can pull. You could checkout the files and then pull to overwrite your local files.git checkout app/config/app.php app/config/database.php app/routes.phpgit pull origin master"
"Probably a typo mistake: set user.mail with no e. Fix it by setting user.email in the global configuration with$ git config --global user.email ""you@example.com""Already been asked: Why Git is not allowing me to commit even after configuration?To be sure run:$ git config --local -lfatal: unable to auto-detect email address (got 'jsiddharth@TheDEN.(none)')I ran the following,jsiddharth@TheDEN:~/workspace/androidsource$ git config --global user.email ""myemailid@domain.com""jsiddharth@TheDEN:~/workspace/androidsource$ git config --global user.name ""my name""jsiddharth@TheDEN:~/workspace/androidsource$ repo init -u https://<domainname>/platform/manifestI get this error when running git stash. Fixed with $git config --global user.email {emailaddress}$git config --global user.name {name}Make sure you should be in your home directory not in local directory. while setting your username and Email id.$ git config --global user.email ""you@domain.com""$ git config --global user.name ""github_username""Then Follow the procedure on github."
"The problem is that there is already an index.lock file in the .got folder of your repository. Every time you create a commit, a check is made that this file does not already exist. Fix this issue by runningOn linux/unix/gitbash/cygwin, rm -f .git/index.lock On Windows Command Prompt, try:del .git\index.lock"
"I often have this problem if something has changed, added files to gitignore or something else. Maybe you have to rebuild the index.Updated: added recursive and file param to git rmIn my case this worked:remove cached files (only the paths are removed from the index, not the real files!!!)git rm -r --cached .add all files to the indexgit add .commitgit commit -m ""hopefully fixed pathspec error""UPDATE:If this won't work, try the following:Get a new checkout from your reporemove composer, composer.lock, vendor/ from your .gitignorerun the above suggestion againmove the folders composer, composer.lock, vendor/ outside your repoadd and commit, maybe add with -A to add that the files are deletedadd composer, composer.lock, vendor/ to your .gitignore and commitmove back the folders composer, composer.lock, vendor/ to your repoNow it should be gone from the repo and due to your .gitignore, never will be commited again. Hopefully the pathspec error is gone :)"
"You can simply convert your remote repository to bare repository (there is no working copy in the bare repository - the folder contains only the actual repository data).Execute the following command in your remote repository folder:git config --bool core.bare trueThen delete all the files except .git in that folder. And then you will be able to perform git push to the remote repository without any errors.I just had the same error while I began learning Git. Some of the other answers are clearly not for someone new to Git!(I am going to use non technical terms to get the idea across.) Anyway, what is happening is that you have two repositories, one is the original you first made, and the other the work one you just made.Right now you are in your work repository and are using the ""master"" branch. But you also happen to be ""logged in"" in your original repository to the same ""master"" branch. Now since you're ""logged in"" in the original, Git fears you might mess up because you might be working on the original and screw things up. So you need to return to the original repository and do a ""git checkout someotherbranch"", and now you can push with no problems.I hope this helps.The error message describes what has happened. More modern versions of Git refuse to update a branch via a push if that branch is checked out.The easiest way to work between two non-bare repositories is either toalways update the repositories by pull (or fetch and merge) or, if you have to,by pushing to a separate branch (an import branch) and then merging that branch into the master branch on the remote machine.The reason for this restriction is that the push operation operates only on the remote Git repository, it doesn't have access to the index and working tree. So, if allowed, a push on the checked-out branch would change the HEAD to be inconsistent with the index and working tree on the remote repository.This would make it very easy to accidentally commit a change that undoes all of the pushed changes and also makes it very difficult to distinguish between any local changes that have not been committed and differences between the new HEAD, the index and the working tree that have been caused by push moving HEAD.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.There are multiple solutions, depending on your needs.Solution 1: Use a Bare RepostioryAs suggested, if on one machine, you don't need the working directory, you can move to a bare repository. To avoid messing with the repository, you can just clone it:machine1$ cd ..machine1$ mv repo repo.oldmachine1$ git clone --bare repo.old repoNow you can push all you want to the same address as before.Solution 2: Push to a Non-Checked-Out BranchBut if you need to check out the code on your remote <remote>, then you can use a special branch to push. Let's say that in your local repository you have called your remote origin and you're on branch master. Then you could domachine2$ git push origin master:master+machine2Then you need to merge it when you're in the origin remote repo:machine1$ git merge master+machine2Autopsy of the ProblemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.You can get around this ""limitation"" by editing the .git/config on the destination server. Add the following to allow a git repository to be pushed to even if it is ""checked out"":[receive]denyCurrentBranch = warnor[receive]denyCurrentBranch = falseThe first will allow the push while warning of the possibility to mess up the branch, whereas the second will just quietly allow it.This can be used to ""deploy"" code to a server which is not meant for editing. This is not the best approach, but a quick one for deploying code.I like the idea of still having a usable repository on the remote box, but instead of a dummy branch, I like to use:git checkout --detachThis seems to be a very new feature of Git - I'm using git version 1.7.7.4.I had the same issue. For me, I use Git push to move code to my servers. I never change the code on the server side, so this is safe.In the repository, you are pushing to type:git config receive.denyCurrentBranch ignoreThis will allow you to change the repository while it's a working copy.After you run a Git push, go to the remote machine and type this:git checkout -fThis will make the changes you pushed be reflected in the working copy of the remote machine.Please note, this isn't always safe if you make changes on in the working copy that you're pushing to.You can recreate your server repository and push from your local branch master to the server master.On your remote server:mkdir myrepo.gitcd myrepo.gitgit init --bareOK, from your local branch:git push origin master:masterWith a few setup steps you can easily deploy changes to your website using a one-liner like git push productionWhich is nice and simple, and you don't have to log into the remote server and do a pull or anything. Note that this will work best if you don't use your production checkout as a working branch! (The OP was working within a slightly different context, and I think @Robert Gould's solution addressed it well. This solution is more appropriate for deployment to a remote server.) First you need to set up a bare repository somewhere on your server, outside of your webroot.mkdir mywebsite.gitcd mywebsite.gitgit init --bareThen create file hooks/post-receive:#!/bin/shGIT_WORK_TREE=/path/to/webroot/of/mywebsite git checkout -fAnd make the file executable:chmod +x hooks/post-receiveOn your local machine, git remote add production git@myserver.com:mywebsite.gitgit push production +master:refs/heads/masterAll set! Now in the future you can use git push production to deploy your changes!Credit for this solution goes to http://sebduggan.com/blog/deploy-your-website-changes-using-git/. Look there for a more detailed explanation of what's going on.With git config --local receive.denyCurrentBranch updateInstead on the server repository, it also updates the working tree if no untracked overwrite would happen.It was added in Git 2.3 as mentioned by VonC in the comments.I've compiled Git 2.3 and gave it a try. Sample usage:git init servercd servertouch agit add .git commit -m 0git config --local receive.denyCurrentBranch updateInsteadcd ..git clone server localcd localtouch bgit add .git commit -m 1git push origin master:mastercd ../serverlsOutput:abYay, b got pushed!You should only be pushing to a bare repository.  A bare repository is a repository that has no checked out branches.  If you were to cd to a bare repository directory, you'd only see the contents of a .git directory.In fact, set the remote to a non-checked out branch is sufficient. After you checked out your remote in a different branch, you can push.I had the same problem using Git to synchronise repositories on my Android phone and laptop. The solution for me was to do a pull instead of a push, as @CharlesBailey suggested.git push origin master on the Android repository fails for me with the same error messages that @hap497 got because of a push to a nonbare checkout of a repository + working-copy.git pull droid master on the laptop repository and working-copy works for me. Of course, you need to have previously run something like git remote add droid /media/KINGSTON4GB/notes_repo/.Older versions of Git used to allow pushes to the currently checked out branch of a non-bare repository.  It turns out this was a terribly confusing thing to allow.  So they added the warning message you see, which is also terribly confusing.If the first repository is just acting as a server then convert it to a bare repository as the other answers recommend and be done with it.If however you need to have a shared branch between two repos that are both in use you can achieve it with the following setupRepo1  - will act as the server and also be used for developmentRepo2  - will be for development only Setup Repo1 as followsCreate a branch to share work on.git branch shared_branchTo be safe, you should also create a $(REPO).git/hooks/update that rejects any changes to anything other than shared_branch, because you don't want people mucking with your private branches.repo1/.git/hooks  (GIT_DIR!)$ cat update#!/bin/shrefname=""$1""oldrev=""$2""newrev=""$3""if [ ""${refname}"" != ""refs/heads/shared_branch"" ]then   echo ""You can only push changes to shared_branch, you cannot push to ${refname}""   exit 1fiNow create a local branch in repo1 where you will do your actual work.git checkout -b my_work --track shared_branchBranch my_work set up to track local branch shared_branch.Switched to a new branch 'my_work'(may need to git config --global push.default upstream in order for git push to work)Now you can create repo2 with git clone path/to/repo1 repo2 git checkout shared_branch At this point you have both repo1 and repo2 setup to work on local branches that push and pull from shared_branch in repo1, without needing to worry about that error message or having the working directory get out of sync in repo1.  Whatever normal workflow you use should work.You have 3 optionsPull and push again:git pull; git pushPush into different branch:git push origin master:fooand merge it on remote (either by git or pull-request)git merge fooForce it (not recommended unless you deliberately changed commits  via rebase):git push origin master -fIf still refused, disable denyCurrentBranch on remote repository:git config receive.denyCurrentBranch ignoreHere is one test you can do to see how the bare server stuff work:Imagine you have a workstation and a server with live site hosted on it, and you want to update this site from time to time (this also applies to a situation where two developers are sending their work back and forth through a bare middleman).InitializationCreate some directory on your local computer and cd into it, then execute these commands:# initializationgit init --bare server/.gitgit clone server contentgit clone server localFirst you create a bare server directory (notice the .git at the end). This directory will serve as a container for your repository files only.Then clone your server repository to a newly created content directory. This is your live/production directory which will be served by your server software.The first two directories resides on your server, the third one is a local directory on your workstation.WorkflowNow here is the basic workflow:Enter the local directory, create some files and commit them. Finally push them to the server:# create crazy stuffgit commit -avgit push origin masterNow enter the content directory and update the server's content:git pullRepeat 1-2. Here content may be another developer that can push to the server too, and local as you may pull from him.OK, in case you want a normal remote repository, then create an extra branch and check it out. Push it into one branch (which is not checked out) and merge it with one which is currently active later after pushing from locally.For example, on a remote server:git branch devgit checkout devOn the local setup:git push On remote server:git merge devI had to re-run git --init in an existing bare repository, and this had created a .git directory inside the bare repository tree - I realized that after typing git status there. I deleted that and everything was fine again :)(All these answers are great, but in my case it was something completely different (as far as I can see), as described.)I'm sure most people viewing this question will stop at the first two huge answers, but I'd still like to offer my solution.I had an Eclipse + EGit web project setup when encountering the described error. What helped me was simply using the GitHub app, which seemed to magically resolve the issue. While EGit would always refuse the push, the GitHub desktop app would just shrug its shoulders and push my changes. Maybe it handles the multi-login-situation more gracefully.An article I found that might be useful to others is Git in 5 minutes.I had an Xcode project under Git version control that I wanted to push up to a Virtual Distributed Ethernet (VDE) I have in a DC. The VDE runs Centos 5.None of the articles I read about Git talked about bare repositories. It all sounded so simple until I tried what I thought should be easy coming from an SVN background.The suggestions here to make the remote repository bare worked. Even better for my requirements was to clone the Xcode project to projectname.git, copy that to the remote server; then pushes magically worked. The next step will be getting Xcode to push without errors about commits, but for now I'm okay doing it from Terminal.So:cd /tmp (or another other directory on your system)<br/>git clone --bare /xcode-project-directory projectname.git<br/>scp -r projectname.git sshusername@remotehost.com:repos/<br/>To push changes from your Xcode project after you've committed in Xcode:cd /xcode-project-directory<br/>git push sshusername@remotehost.com:repos/projectname.git<br/>I'm certain there is a smoother more sophisticated way of doing the above, but at a minimum this works. Just so everything is clear, here are some clarifications:/xcode-project-directory is the directory your xcode project is stored in. It's probably /Users/Your_Name/Documents/Project_Name.projectname is literally the name of the project, but it can be anything you care to call it. Git doesn't care, you will.To use scp you need to have a user account on the remote server that's allowed SSH access. Anyone running their own server will have this. If you're using shared hosting or the like, you might be out of luck.remotehost.com is the name of your remote host. You could as easily use its IP address. Just for further clarity I'm using Gitosis on the remote host with SSH keys, so I'm not prompted for passwords when I push. The article Hosting Git Repositories, the Easy (and Secure) Way tells you how to set all that up.The best way to do this is:mkdir ..../remotecd ..../remotegit clone --bare .../currentrepo/This will clone the repository, but it won't make any working copies in .../remote. If you look at the remote, you'll see one directory created, called currentrepo.git, which is probably what you want.Then from your local Git repository:git remote add remoterepo ..../remote/currentrepo.gitAfter you make changes, you can:git push remoterepo masterI just ran into this problem with a deployment git repository on Heroku.I don't know why Heroku has a non-bare repository on their side, but as a workaround I was able to reset the remote repository, and reupload.You shouldn't use Heroku's copy of your repository as your only git repository for collaboration, but just in case, I'll say clearly: Do not do this unless you are sure you have a full copy of your repository stored securely somewhere other than Heroku. Doing a reset will delete the repository contents.To reset:Install the Heroku toolbelt (which contains the command line client) if you haven't already.Install the heroku-repo plugin if you haven't already.heroku plugins:install https://github.com/heroku/heroku-repo.gitDo the reset, which deletes the repository and creates a new, empty oneheroku repo:resetPush to your Heroku remote as you normally would; it will reupload everything."
"As the message says:no changes added to commit (use ""git add"" and/or ""git commit -a"")Git has a ""staging area"" where files need to be added before being committed, you can read an explanation of it here.For your specific example, you can use:git commit -am ""save arezzo files""(note the extra a in the flags, can also be written as git commit -a -m ""message"" - both do the same thing)Alternatively, if you want to be more selective about what you add to the commit, you use the git add command to add the appropriate files to the staging area, and git status to preview what is about to be added (remembering to pay attention to the wording used).You can also find general documentation and tutorials for how to use git on the git documentation page which will give more detail about the concept of staging/adding files.One other thing worth knowing about is interactive adding - this allows you to add parts of a file to the staging area, so if you've made three distinct code changes (for related but different functionality), you can use interactive mode to split the changes and add/commit each part in turn. Having smaller specific commits like this can be helpful.You didn't add the changes. Either specifically add them viagit add filename1 filename2or add all changes (from root path of the project)git add .or use the shorthand -a while commiting:git commit -a -m ""message"".you should dogit commit . -m ""save arezzo files""You could have done a:git add -u -nTo check which files you modified and are going to be added (dry run: -n option), and thengit add -uTo add just modified filesI copied a small sub project I had that was under git source into another project and forgot to delete the .git folder. When I went to commit got the same message as above and couldn't clear it until I deleted the .git folder. Bit silly, but worth checking you don't have a .git folder under the folder that doesn't commit.Maybe an obvious thing but... If you have problem with the index, use thegit guiYou get a very good view how the index (staging area) actually works.Another source of info that helped me understand the index was Scott Chacons ""Getting Git"" page 259 and forward.I started off using the command line because most documentation only shown that...I think the git gui and gitk actually make me work faster and I got rid of bad habits like ""git pull"" for example... Now I always fetch first... see what the new changes really are before I merge.I find this problem appearing when I've done a git add . in a subdirectory below where my .gitignore file lives (the home directory of my repository, so to speak).  Try changing directories to your uppermost directory and running git add . followed by git commit -m ""my commit message""."
"If you have fixed the conflicts you need to add the files to the stage with git add [filename], then commit as normal.You can use git stash to save the current repository before doing the commit you want to make (after merging the changes from the upstream repo with git stash pop). I had to do this yesterday when I had the same problem.You need to do two things.First add the changes withgit add .git stash  git checkout <some branch>It should solve your issue as it solved to me."
"If the GitHub repo has seen new commits pushed to it, while you were working locally, I would advice for:git pull --rebasegit pushThe full syntax is:git pull --rebase origin mastergit push origin masterThat way, you would replay (the --rebase part) your local commits on top of the newly updated origin/master (or origin/yourBranch: git pull origin yourBranch).See a more complete example in the chapter 6 Pull with rebase of the Git Pocket Book.I would recommend a:git push -u origin masterThat would establish a tracking relationship between your local master branch and its upstream branch.After that, any future push for that branch can be done with a simple:git pushSee ""Why do I need to explicitly push a new branch?"".Since the OP already reset and redone its commit on top of origin/master:git reset --mixed origin/mastergit add .git commit -m ""This is a new commit for what I originally planned to be amended""git push origin masterThere is no need to pull --rebase.Note: git reset --mixed origin/master can also be written git reset origin/master, since the --mixed option is the default one when using git reset.If you just used git init and have added your files with git add . or something similar and have added your remote branch it might be that you just haven't committed (git commit -m 'commit message') anything locally to push to the remote... I just had this error and that was my issue.I find the solution to this problem in github help.You can see it from:Dealing with non-fast-forward errorsIt says:You can fix this by fetching and merging the changes made on the remote branch with the changes that you have made locally:  $ git fetch origin# Fetches updates made to an online repository$ git merge origin branch# Merges updates made online with your local workOr, you can simply use git pull to perform both commands at once:$ git pull origin branch# Grabs online updates and merges them with your local work"
"cd repositorychown -R user:group *cd .gitchown -R user:group *cd ..the second chown is there because the first one didn't get into .gitWho are the owner/group of the repository, and of the scpecific file/folder you're trying to upload: local and on the server?"
"It might be a good idea to customize you bash, like this:0 ;) $ cat ~/.bashrcPS1=""\[\033[01;37m\]\$? \$(if [[ \$? == 0 ]]; then echo \""\[\033[01;32m\];)\""; else echo \""\[\033[01;31m\];(\""; fi) $(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi)\[\033[01;34m\] \w \$\[\033[00m\] ""It displays a green happy face ;) if the last command finished with no errors, and a red sad face ;( if it failed, for example:0 ;) $ cat 1.sh#!/bin/bashexit 10 ;) $ ./1.sh1 ;( $ 0 ;( $ cat 1.sh#!/bin/bashexit 00 ;) $ ./1.sh0 ;) $You can customize the output however you want.The example was taken from hereIn action:UpdateFor Git 2.5 for windows it should be if ! \$?; then  PS1=""\[\e[1;32m\]Nice Work!\n\[\e[0;32m\]\u@\h \[\e[0;33m\]\w\[\e[0;37m\]\n\$ "" else  PS1=""\[\e[1;31m\]Something is wrong!\n\[\e[0;32m\]\u@\h \[\e[0;33m\]\w\[\e[0;37m\]\n\$ ""fiBest way to deal with this is to colorize your hook output instead of the PS1 prompt, like so:red='\033[0;31m'green='\033[0;32m'yellow='\033[0;33m'no_color='\033[0m'echo -e ""\n${yellow}Executing pre-commit hook${no_color}\n""... do your hook stuff ...if [[ something bad happens ]]; then    >&2 echo -e ""\n${red}ERROR - Something BAD happened!\n${no_color}""    exit 1fiecho -e ""${green}Git hook was SUCCESSFUL!${no_color}\n""Note: Using -e with echo is required - it specifies to interpret special characters, like colors and new lines. (http://ss64.com/bash/echo.html)"
"You have to either use https and enter your password or use ssh (and associate your public ssh key to your github account)I tried my best and looked for the causes/solution of the error:Error: The requested URL returned error: 403 while accessinghttps://github.com/Joey-project/repo.git/info/refsfatal: HTTP request failedI believe one of the main reasons of this happening is because of bad login credentials from your local machine to the server.If I remember correctly, one has to (1) Make sure you have a stable git version(2) Ensure the remote is correct(3) Provide access token if 2FA is enabled(4) Checking your permissions(username/password)(5) Use ssh instead of httpsPushing to Git returning Error Code 403 fatal: HTTP request failed might come in handy, which has a lot of extra information regarding your problem.Goodluck! I hope it helps you"
"You can solve this by putting in a full pathgit config --global core.editor ""/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl""Source: OXS CommandlineEDIT: If the name of the app is not Sublime Text.app you will want to replace that with the correct name.For what it's worth, here's how I solved it: 1) Run in Terminal: sudo ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublThis adds a subl alias to /usr/local/bin/ pointing to Sublime Text 3 app‰Ûªs binary file. Now running subl in Terminal will launch Sublime Text 3 app. 2) Run in Terminal: git config --global core.editor ""subl -n -w""This adds editor = subl -n -w to the [core] section of the ~/.gitconfig file. Now running git commit in Terminal will launch Sublime Text 3 app (subl) in a new window (-n), and the command line will wait (-w) until the commit message is saved. Image of final workflow added in response to clarifying question in comments below: Official Sublime Text 3 doc: http://www.sublimetext.com/docs/3/osx_command_line.htmlI'm new to the community, and apologize if the answer is not in the proper format.For me the following things worked for Sublime 3 git config --global core.editor "" '/usr/bin/subl' -n -w"" Thank you all.I found out that I receive messages like:subl -n -w: subl: command not found.error: There was a problem with the editor 'subl -n -w'error: There was a problem with the editor 'subl'even though Sublime works well and can be launched from Terminal.To fix it, run the following in Terminal:git config --global core.editor "" 'XXXXX' -n -w""while 'XXXXX' is the path which Sublime is launched from.It could be /usr/bin/subl as Pranav Misra mentioned, or  /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl, or whatever you put in the symlink you have created."
"Check if you have installed commit-message-length-validator plugin. By default, commit message max subject length is 65, max line length is 70.You could change the default setting on gerrit.config or you could remove/disable this plugin."
"start debugging?Check the ""Errors"" Eclipse view for a full Stack Trace associate with that error messageExample of an Error View:fix it?If the Exception is a NPE one (NullPointerException), like shown in bug 329611, then you can try a git commit -m ""a message"" in a shell, in order to get past that initial first commit with a GUI.As the OP rogueleaderr mentions, the error view and the exact stack trace behind the exception was enough:Somehow, I managed to not have ""write"" permissions to the .git directory.  So was trying to write the commit and getting bounced.I've solved my case removing index.lock file from the git folder of the project.I face this problem too, Error tab doesn't show anything more. So I use GitExtension to commit instead, problem solved. Using parallel eGit and GitExtension to keep tracking a local git repo is a good idea. It's update runtime on both Eclipse and GitExtension when we make change on each.I faced this problem. I delete the .git folder and .gitignore file push to upstream it works correctly."
"Like most people, I expect, I had the correct global setting of user.email and user.name and never had problems with Xcode before.I found that by making those settings local Xcode was happy again.That is:cd <YourCodeRepository>xcrun git config user.email ""you@example.com""xcrun git config user.name ""Your Name"""
"You can't merge with local modifications. Git protects you from losing potentially important changes.You have three options. One is to commit the change usinggit commit -m ""My message""The second is to stash it. stashing acts as a stack, where you can push changes, and you pop them in reverse order.To stash type:git stashDo the merge, and than pull the stash:git stash popThe third options is to discard the local changes using git reset --hard.$ git stash$ git pull <remote name> <remote branch name> (or) switch branch$ git stash apply --indexFirst command store your changes temporarily and discard those changes from working directory Second command you can pull / switch branches  Third command to restore the important changes which you have discarded temporarily. (--index option is useful for those files are not staged are being upstaged) Refer Git - StashingSo the situation that I ran into was the following:error: Your local changes to the following files would be overwritten by merge:  wp-content/w3tc-config/master.php  Please, commit your changes or stash them before you can merge.except, right before that, was remote:so actually this:remote: error: Your local changes to the following files would be overwritten by merge:  some/file.ext  Please, commit your changes or stash them before you can merge.What was happening was (I think, not 100% positive) the git post receive hook was starting to run and screwing up due to movement changes in the remote server repository, which in theory, shouldn't have been touched.So what I ended up doing by tracing through the post-receive hook and finding this, was having to go to the remote repository on the server, and there was the change (which wasn't on my local repository, which, in fact, said that it matched, no changes, nothing to commit, up to date, etc.) So while on the local, there were no changes, on the server, I then did a git checkout -- some/file.ext and then the local and remote repositories actually matched and I could continue to work, and deploy. Not entirely sure how this situation occurred, though a couple dozen developers plus IT changes may had something to do with it."
"chown [ -f ] [ -h ] [ -R ] Owner [ :Group ] { File ... | Directory ... }From the man pageThe chown command changes the owner of the file specified by the File  parameter to the user specified by the Owner parameter. The value  of the Owner parameter can be a user ID or a login name found in the  /etc/passwd file. Optionally, a group can also be specified. The value  of the Group parameter can be a group ID or a group name found in  the /etc/group file.About the -R option-R   Descends directories recursively, changing the ownership for each  file. When a symbolic link is encountered and the link points to a  directory, the ownership of that directory is changed but the directory  is not further transversed.Sochown -R user:christophe /myapp/app/views/reviews/update.js.erbWould change the owner of the update.js.erb file to the user user in the group christophe, which is probably not what you want.In your case changing the owner of the repo to yourself, i.e.sudo chown -R christophe /path/to/your/local/reposhould suffice.If you don't know your user name, you can find it out with the whoami command.1) Make sure you're inside the repository where you're getting the error.2) Get your username by typing `whoami`3) Enter this command sudo chown -R dwain .git/*"
"You don't have files named config_files*, as you wan't to add the content of config_files directory you must do : git add config_files/then a git status will show :new file : config_files/file1new file : config_files/file2and so on...then you can commit with :git commit -m ""commit message"""
"I actually once pushed with --force to git.git repository and got scolded by Linus BIG TIME.  It will create a lot of problems for other people.  A simple answer is ""don't do it"".I see others gave the recipe for doing so anyway, so I won't repeat them here, but here is a tip to recover from the situation after you have pushed out the amended commit with --force (or +master).First, you find the old commit that you amended (call it old, and we'll call the new commit you created by amending new).Then create a merge between old and new, recording the tree of new, like git checkout new && git merge -s ours old.Merge that to your master with git merge masterUpdate your master with the result with git push . HEAD:masterThen push the result out.Then people who were unfortunate enough to have based their work on the commit you obliterated by amending and forcing a push (which is your being a very very bad boy) will see the resulting merge will see that you favor new over old. Their later merges will not see the conflicts between old and new that resulted from your amending and they do not have to suffer.What you are seeing is a git safety feature. git refuses to update the remote branch with your branch because your branch's head commit is not a direct descendent of the current head commit of the branch that you are pushing to.If this were not the case, then two people pushing to the same repository at about the same time would not know that there was a new commit coming in at the same time and whoever pushed last would lose the work of the previous pusher without either of them realising this.If you know that you are the only person pushing and you want to push an amended commit or push a commit that winds back the branch, you can 'force' git to update the remote branch by using the -f switch.git push -f origin masterEven this may not work as git allows remote repositories to refuse non-fastforward pushes at the far end by using the config variable 'receive.denynonfastforwards'. If this is the case the rejection reason will look like this (note the 'remote rejected' part): ! [remote rejected] master -> master (non-fast forward)To get around this, you either need to change the remote repository's config or as a dirty hack you can delete and recreate the branch thus:git push origin :mastergit push origin masterIn general the last parameter to git push uses the format <local_ref>:<remote_ref>, where local_ref is the name of the branch on the local repository and remote_ref is the name of the branch on the remote repository. This command pair uses two shorthands. :master has a null local_ref which means push a null branch to the remote side master, i.e. delete the remote branch. A branch name with no : means push the local branch with the given name to the remote branch with the same name. master in this situation is short for master:master.Quick rant: The fact that no-one has posted the simple answer here demonstrates the desperate user-hostility exhibited by the Git CLI.Anyway, the ""obvious"" way to do this, assuming you haven't tried to force the push, is to pull first. This pulls the change that you ammended (and so no longer have) so that you have it again.Once you have resolved any conflicts, you can push again.So:git pullIf you get errors in pull, maybe something is wrong in your local repo config (I had a wrong ref in .git/config branch section)And aftergit pushMaybe you will get an extra commit with subject telling about a ""Trivial merge""Short answer: Don't push amended commits to a public repo.Long answer: A few Git commands, like git commit --amend and git rebase, actually rewrite the history graph. This is fine as long as you haven't published your changes, but once you do, you really shouldn't be mucking around with the history, because if someone already got your changes, then when they try to pull again, it might fail. Instead of amending a commit, you should just make a new commit with the changes.However, if you really, really want to push an amended commit, you can do so like this:$ git push origin +master:masterThe leading + sign will force the push to occur, even if it doesn't result in a ""fast-forward"" commit. (A fast-forward commit occurs when the changes you are pushing are a direct descendant of the changes already in the public repo.)I have solved it by discarding my local amended commit and adding the new changes on top:# rewind to commit before conflictinggit reset --soft HEAD~1# pull the remote versiongit pull# add the new commit on topgit add ...git commitgit pushHere is a very simple and clean way to push your changes after you have already made a ""commit --amend"" git reset --soft HEAD^git stashgit push -f origin mastergit stash popgit commitgit push origin masterWhich does the following:Reset branch head to parent commit.Stash this last commit.Force push to remote. The remote now doesn't have the last commit.Pop your stash.Commit cleanly.Push to remote.Had the same problem.accidentally amended the last commit that was allready pusheddone alot of changes locally, committed some 5 timestried to push, got an error, panicked, merged remote, got alot of not-my-files, pushed, failed, etc.As a GIT-newbie, I thought it was comlpete fubar.Solution: somewhat like @bara suggested + created a local backup branch# Rewind to commit just before the pushed-and-amended one. # Replace <hash> with the needed hash.# --soft means: leave all the changes there, so nothing is lost.git reset --soft <hash># Create new branch, just for a backup, still having all changes in it. # The branch was feature/1234, new one - feature/1234-gone-badgit checkout -b feature/1234-gone-bad# Commit all the changes (all the mess) not to lose it & not to carry aroundgit commit -a -m ""feature/1234 backup""# Switch back to the original branchgit checkout feature/1234# Pull the from remote (named 'origin'), thus 'repairing' our main problemgit pull origin/feature/1234# Now you have a clean-and-non-diverged branch and a backup of the local changes.# Check the needed files from the backup branchgit checkout feature/1234-gone-bad -- the/path/to/file.phpMaybe its not a fast and clean solution and I lost my history (1 commit instead of 5), but it saved a day's work.I had to fix this problem with pulling from the remote repo and deal with the merge conflicts that arose, commit and then push. But I feel like there is a better way."
"You need add files before commit!For example, you add a file or a directory like this:git add filenameThen commit with message:git commit -m ""This is commit message to show what does the added file do""Then run git push -u origin master to push to the origin repo's master branch, and set that the origin master branch as the upstream of your local master branch.Pro-git is really a good book to learn git: https://git-scm.com/documentation"
"not sure about this but looking at the Git documentation for default editor, it falls back to vi when no editor is set.  As the error suggested, you can pass a -m option so you dont have to use an editor.git commit -a -m 'committing all files'You have configured gvim as the default editor in git but you don't have it installed in your system. You've 3 choices:1) install the  gvim  editor on your system2) change the default editor of git with:git config --global core.editor ""path_of_your_favourite_text_editor""3) keep on commiting without using a text-editor (not really a good solution)git commit -a -m 'commit message'"
"Windows‰Ûª file system is mostly case-insensitive, so you cannot rename a file by just changing its capitalization. Instead, you will have to use a temporary name in between.Try the following from the command line:git mv FOOBar.java FooBar.java.newgit mv FooBar.java.new FooBar.javagit commit -m 'Rename file'I found out a very simple solution to this.Say you need to rename a java package ""Activities"" to ""activities"". This package contains several files and sub-packagesFollow the sequence of stepsRefactor ""Activities"" to ""ActivitiesTemp"" (Shift + F6)Commit and push these changesRefactor again from ""ActivitiesTemp"" to ""activities""Commit and push these changesThats All Folks !Rename the file back to the original one, then rename it to a different name, then back to the one with the correct capitalization. Git will not throw the bug anymore, it's the same solution as Poke pointed out, but using android studio.Example:Created FOOBar class.Renamed it to FooBar and then got the error.Rename it back to FOOBar.Rename to FooBarTest.Rename to FooBar.Git works now.I also faced the almost same situation, in my case I have created a file and added to git (using git add ), after adding to git I have renamed the file. While committing I got the same type error. I solved with the following step use git status to see the staged files you can see your old file in the list - -app/src/main/java/blahblah/FOOBar.java--use git reset to remove file from staging git reset app/src/main/java/blahblah/FOOBar.javaAfter removing from staging you can add your new file git add app/src/main/java/blahblah/FooBar.javaafter this you can commit"
"error: insufficient permission for adding an object to repository database .git/objectsThat is your problem. For some reason or another, Git is having trouble writing to .git/objects - typically this means it is owned by another user and doesn't have the proper permissions.Try seeing what permissions the folder currently has by running ls -l .git/objects. Then, you can chmod or chown (or both) as necessary.I hadn't changed any permissions on my files, but I had the same error message and fixed it by changing ownership on the git directory (chown -R user:group .git)."
"I read the error message once again and thought that I should merge the local branch into remote branch. I looked around in the IDE to find these options. I got lucky when I tried:Project > right click > Git > repository browser. The following window opens up:Steps: Remote branch > right click > merge revision. Then you will see the hash of remote next to local.Project > Right click > Git > Remote > Push. This will push your local branch code to remote repo.Realize a pull. Then a window with the option 'merge' will appear. Do a merge and try to push it again.Sorry for my english levelDon‰Ûªt use git pull, use git fetch, then git merge, then git commit and then git push.FYI: http://longair.net/blog/2009/04/16/git-fetch-and-merge/"
"What I had to do was:git remote rm origingit remote add origin 'git@github.com:username/repo.git'Then, I was able to push my changes.Well I had the same problem - what annoys me to no end is that I don't have a clue why (edit: bug). I was pushing with https. Manually editing the config did not work for me (or doing a chkdsk as suggested in another answer). I ended up pushing with ssh - as in, replace:https://github.com/USER/REPO.gitwithgit@github.com:USER/REPO.gitafter generating your keysEDIT as to why : it is a bug in 1.8.5. See the report and a discussion with a way to workaroundI tried following command and it worked for megit push https://<username>:<password>@github.com/<username>/<repository-name>Since it's a bug from 1.8.5 version, if you don't want use SSH Key you can downgrade to 1.84 from here, or upgrade to higher version, 1.9.x, for example.This seems to be a known bug in Git 1.8.5 on Windows. As described and reported by @Mr_and_Mrs_D:https://groups.google.com/forum/#!msg/msysgit/s4dB8Nv9V4c/55-cGPdPYmAJDowngrading to 1.8.4 works for me. Please note you have to explicitly uninstall 1.8.5 first by running C:\Program Files (x86)\Git\unins000.exe as described here:https://github.com/swcarpentry/bc/issues/234#issuecomment-33055444I downloaded 1.8.4 here:https://msysgit.googlecode.com/files/Git-1.8.4-preview20130916.exeIn my case, I update Git to version 1.9 and this issue is fixed.During push/commit, the Git Bash will ask for Github's account & password."
"I just ran into this problem. Luckily, restarting Xcode did the trick for me."
"The problem is that you are using Windows or Mac, which have (more or less) case insensitive file systems.The easiest solution (took it from http://apple.stackexchange.com/a/51619) would be to  rename the file to something completely different, commit, rename the file again to the name you want and commit again, this time amending the old commit.If Android Studio does not support amend commits, you could go with the terminal commands from the answer avove."
"The easiest way to solve the issue with your identity without using Git Bash is to set it in SourceTree directly: -Got to menu: Tools -> OptionsOn the general tab fill in the Full Name and Email address fieldsClick the OK buttonCommit your files :)I got the solution for above mentioned problem, with the help of my friend, Solution isFirst get the Git Bash command line in ur system by installing Git from Download Git for WindowsThen open Git Bash from start manu - Git - Git Bash and run these commands  git config --global user.email ""you@example.com"" git config --global user.name ""Your Name""Now try to commit again, problem will be resolved."
"First, make a backup of your existing repository.  cp -r or something.  That way if your attempts to repair your repository screw it up worse you can restore.Simplest thing to try is replacing that corrupt object file with a working one.  If you have a backup of your repository, use that.  Otherwise do a git clone from your remote repository to get a fresh copy and copy .git/objects/5c/deb9c3a1fe164cb4d2779d1e0d9d9f4ef18c6a into your existing broken one.  See if that fixes it.thanks for replying back. I ran that in the new cloned repo and returned that it unpacked 100% of the objects however they were not in .git/objects/pack of that repo. So, instead and tried something this morning which worked. 1. cloning my github repository into a separate, new directory. 2. copying the locally changed files (that I wanted to commit originally) into my new cloned repository and then pushed them to github. 3. nuked my old local repository and 4. cloned it again to the same file path that I had my old repository.A solution from http://vincesalvino.blogspot.ca/2013/08/git-empty-files-corrupt-objects-and.html allowed me to fix the problem:find .git/objects/ -size 0 -exec rm -f {} \;"
"When you run git commit without specifying a commit message on the command line, it will launch an editor (in your case vim) so that you can enter one.  Those errors that you see are from vim, reporting that you have errors in your .vimrc file.  You should get the same errors if you just launch vim normally.Your vim installation does not have python support. If you run the commandvim --version | grep pythonyou should see +python, otherwise it means python is missing from the vim installation."
"I have seen this error in VS2013 when the file or folder would be ignored by GIT. You can confirm this by trying the add from the command line.For example, the following shows this for the ""bin"" folder of the TestGit project:$ git add binThe following paths are ignored by one of your .gitignore files:TestGit/binUse -f if you really want to add them.fatal: no files addedIf you confirm that is the issue, you will need to check .gitignore, .git/info/exclude, etc. and fix the settings. You can find which file to using git check-ignore as follows:$ git check-ignore -v bin.gitignore:190:bin      binThis example shows that line 190 of the .gitignore file needs is causing the bin folder to be ignored. Fixing this allow will allow that folder (or files in it) to be added.Note: I added ""bin"" to .gitignore for this example; it is not part of the .gitignore file created by Visual Studio.*Update: I didn't even need to add the line. The .gitignore added by Visual Studio already excludes the ""bin"" folder. See github/gitignore/VisualStudio.gitignore for even more detail."
"You are apparently dealing with a submodule, so you should use the submodule workflow :# Modification on RestKit, for instance :cd RestKitgit add .git commit -m ""Support for armv6 & armv7""cd ..# RestKit submodule up-to-date, now update your projectgit add RestKitgit commit -m ""RestKit submodule updated""You can find more information here.Also : Git Book on Submodules"
"You are running git with sudo. In a sudo environment, $HOME and therefore the git configuration will not be present. Run git without sudo.For the interested, here's how to reproduce the problem:$ mkdir repo$ cd repo$ git initInitialized empty Git repository in /home/phihag/repo/.git/$ git config --global user.email ""me@example.com""$ git config --global user.name ""My Name""$ sudo git commit -m first*** Please tell me who you are.Run  git config --global user.email ""you@example.com""  git config --global user.name ""Your Name""to set your account's default identity.Omit --global to set the identity only in this repository.fatal: unable to auto-detect email address (got 'root@t4.(none)')Notice the root@ in the automatically detected email address."
"Notice the first line of output:Reinitialized existing Git repository You already have a git repo in that directory, and it has no uncommitted changes.After doinggit add .you need to commit the changes you just staged:git commit -m ""my first commit""You can view the latest commit using the git show command.Perhaps you previously added and committed when creating the git repository the first time?I was able to reproduce this with:durrantm.../aaa$ git initInitialized empty Git repository in /home/durrantm/play/aaa/.git/durrantm.../aaa$ ltotal 16drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  3 durrantm 4096 Oct 31 22:29 ./drwxrwxr-x  7 durrantm 4096 Oct 31 22:29 .git/durrantm.../aaa$ git status# On branch master## Initial commit## Untracked files:#   (use ""git add <file>..."" to include in what will be committed)##       gggnothing added to commit but untracked files present (use ""git add"" to track)durrantm.../aaa$ git add .durrantm.../aaa$ git status# On branch master## Initial commit## Changes to be committed:#   (use ""git rm --cached <file>..."" to unstage)##       new file:   ggg#durrantm.../aaa$ git commit[master (root-commit) 953c83f] new 1 file changed, 1 insertion(+) create mode 100644 gggdurrantm.../aaa$ ltotal 16drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  3 durrantm 4096 Oct 31 22:29 ./drwxrwxr-x  8 durrantm 4096 Oct 31 22:29 .git/durrantm.../aaa$ git initReinitialized existing Git repository in /home/durrantm/play/aaa/.git/durrantm.../aaa$ ltotal 16drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  3 durrantm 4096 Oct 31 22:29 ./drwxrwxr-x  8 durrantm 4096 Oct 31 22:30 .git/durrantm.../aaa$ git add .durrantm.../aaa$ git status# On branch masternothing to commit (working directory clean)durrantm.../aaa$ durrantm.../aaa$ git commit# On branch masternothing to commit (working directory clean)Notice how there is nothing to commit at the end after a git add . as you are seeing.One 'fix' is to remove the git repository and start again, when you do this you get to commit the final as normal, e.g.:durrantm.../aaa$ rm -rf .git/durrantm.../aaa$ ltotal 12drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  2 durrantm 4096 Oct 31 22:34 ./durrantm.../aaa$ git initInitialized empty Git repository in /home/durrantm/play/aaa/.git/durrantm.../aaa$ ltotal 16drwxrwxr-x 14 durrantm 4096 Oct 31 22:28 ../-rw-rw-r--  1 durrantm   11 Oct 31 22:29 gggdrwxrwxr-x  3 durrantm 4096 Oct 31 22:34 ./drwxrwxr-x  7 durrantm 4096 Oct 31 22:34 .git/durrantm.../aaa$ git add .durrantm.../aaa$ git commit[master (root-commit) 380863a] wewew 1 file changed, 1 insertion(+) create mode 100644 ggg"
"I had this problem today and tried all the suggestions. Finally the solution was very simple:Switch to another branch (e.g. develop).Pull from the remote repositorySwitch back to your new branch and push.With any luck it'll work now."
"In doubt, in your hook, set up explicitly git-dir and work-tree parameters:git --git-dir .git --work-tree . add ...You can even put the full path to be extra-sure:git --git-dir D:/xampp/htdocs/app/application/.git --work-tree D:/xampp/htdocs/app/application/. add ...That way, you rule out any environment issue with those git-dir or work-tree stuck into another path which isn't the one of the repo your are cd'ing into.See ""Calling 'git pull' from a git post-update hook"" for an example of that problem."
"My hunch is you have a symbolic link in the sdapp/app/ directory called www while also having a www directory which I believe is possible.Try :cd sdapp/app/rm www"
"I set-up a test to fail. This is what I got:$ git merge newbranchAuto-merging test.txtCONFLICT (content): Merge conflict in test.txtAutomatic merge failed; fix conflicts and then commit the result.$ echo $?1Git returns 0 when it merges correctly, as expected.In short, no. You're going to see exit code 1 for errors, and 0 for success.From a quick grepping of the source, there are some of the expected 127 and 128 for their specific purposes (command not found, errors already reported), and a few unusual codes in a few places, but for run of the mill errors, it's all exit(1).Running git status on a non-git repo returns 128, not 1, which is helpful in quickly determining whether a git repo exists or not.Error 128, with no error message from git, could be a catch-all for ""unexpected problem"".I was getting this on operations that needed to modify files under .git (e.g. ""git checkout -- myfile"" to revert a modified file) by a different user. (In my case ""chmod -R og+w .git"" fixed it; naturally, don't do that unless you understand the security implications for your case!)"
"I've had the same thing happen, for no apparent reason. Tried several things, such as a clean clone, switching from iTerm2 to Terminal... didn't make any difference. I then ended up just going with plain git commit, after which I manually typed my commit message in the following screen... and that DID solve it. Still not sure what's causing this though, but at least it's solved, sorta.Seems that for some reason a NULL byte is getting it's way into your commit message, and Git doesn't like that. Try to commit from the command-line and see if that works: git commit -m ""My brilliant commit message"""
"You have two options:Provide an empty commit message. If it's a new commit and you haven't yet saved the message, you can simply use :q! (quit without saving). If you‰Ûªve already saved (or you're amending a previous commit), just delete the entire log message and save again. This can be done with ggdG + :wq in Vim.Have the editor exit with a non-zero exit code. In Vim, you can use :cq (quit with an error code).It's worth noting that you can always reset your working copy to the state it was in before the commit with git reset HEAD^.:q! does not work when amending a commit. It does not update thecommit message, but it executes the amendment :-( :cq completely aborts the amendment.To sum up: When creating a new commit (i.e git commit) quit using :q!.When amending (i.e. git commit --amend) remove the commit message (only the first few rows not beginning with a #) for example by holding v and using arrow keys to select it and then pressing Delete. Quit with :wq to apply changes! If you use :q! the changes will be lost and the previous commit message will be used.When using VIM it's ok in both cases to quit with :cq - VIM will quit with an error code and the commit will be aborted."
"It looks like your git editor is not set and vi has a messed up plugin or something on your mac. Try using the -m ""comment here"" paramter on your commit.I would suggest mv ~/.vim ~/.vimbak and try running vi again.This will solve this problem:$ git config --global core.editor /usr/bin/vimFirst off, are you sure you want to be doing git commit . ?  git commit is usually what you want.The error messages are coming from you editor. It looks like git is trying to invoke vi, but there are settings in something like your .vimrc which aren't supported by the command line vi that you are using.What happens when you invoke vi from your command line?If you do not want to use vi as your commit editor, you can use the GIT_EDITOR environment variable to cause git invoke a different editor. You need to make sure that the editor runs as a foreground process, though, so that git knows when you've finished editing your message. Some editors can be invoked with a launcher script to help with this as it's common for editors (especially in Mac OS X) launch as a background process when invoked from a terminal."
"origin/head sounds like it refers to the default branch set in your remote origin repo. For example, when I do git branch -a, I see this show up in the list:remotes/origin/HEAD -> origin/masterYou might be missing this reference in your local repo, or your local repo's reference might be out of date, if the default branch is changed in the remote, and the old default is deleted.Possible SolutionIf this is indeed the cause of your IDE error, then you can manually correct it using git symbolic-ref:git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/<default-branch>Where <default-branch> is the branch that is default in your remote repo.Updated SolutionSo git actually has a more convenient command that can be used to update a local repo's symbolic-ref to the default branch in a remote repo:git remote set-head <remote> --auto# Or shortergit remote set-head <remote> -aDocumentation for git remote set-head.It was introduced in commit bc14fac for git 1.6.3 (May 2009).Sets or deletes the default branch ($GIT_DIR/remotes/<name>/HEAD) for  the named remote.Having a default branch for a remote is not required, but allows the name of the remote to be specified in lieu of a specific branch.  For example, if the default branch for origin is set to master, then origin may be specified wherever you would normally specify origin/master."
You have a commit-msg hook on your system that is enforcing a format on your commit message. This is presumably company policy of some kind.
"I encountered a similar problem today. git status wasn't listing the files which checkout was complaining about. I did a:git checkout -- path/to/fileAnd that undoes any changes to the file.An even easier way to undo all unstaged changes:git checkout -- .As simple as this:git stashgit stash popThe ""errors"" you see when running git stash aren't anything to be concerned about. It's just git recognizing that the file doesn't have any uncommitted changes.Move the offending file to some other location.  Then delete the offending file from your tree.  Pull again.  then diff the changes from your offending file over the file you just pulled.  hack, but it works.I had a similar problem on a fresh clone. I just forced the checkout with the --force (-f) flaggit checkout --force some_branch Probably not the best way of resolving the issue on a repo that you are making changes to, but in my case I was sure I hadn't made any changes, and just wanted to switch branch.It seems that you have untracked files in your working copy, which are tracked on the other branch. Git refuses to checkout the other branch, since your currently untracked local files would be overwritten by the files on the other branch.You can nowAdd those files to your current branch, if those files are relevant for this branchremove those files if they are not needed"
"Unfortunately, Visual Studio Tools for Git do not yet support remote repositories using the SSH protocol, only HTTP and HTTPS.Investigate the .git/config in each repository to ensure that you did not clone one repository with SSH.  If you did, try to switch the remote to an HTTPS endpoint."
"This is not an error message from the remote Git repository, this is a problem with your local files. You probably used git (or rake) as another user (such as root) in this same directory, and it created files which you now can't overwrite.Simply use chown to change the ownership of the files to your current user, for instance:chown --recursive $(id -u) .I solved it by deleting .git/COMMIT_EDITMSG. Weird, I know.If you are working on the bloody Microsoft Windows the error might be due to the fact that you are ""watching"" the hidden files in the file explorer..thatå«s it!another solution for Windows users:if you are using YandexDisk - and your .git folder under syncronisation - YandexDisk set hidden and readonly attributes after syncronisations.So, switch off YandexDisk and make .git folder and all subfolders and files NOT invisible and not readonlychmod 664 the file .git/COMMIT_EDITMSG gives it group write permissions. In my situation the file was owned by another user who was part of my development group. Giving it group write permissions solved it. The .git directory should be in the root of your repository.Command (assuming you are in the .git directory): chmod 664 COMMIT_EDITMSG"
"I was just running into this, and found your question trying to figure it out.  I too assumed it needed escape characters for the spaces and parentheses IN .gitconfig, but apparently not.  This statement worked for me:editor = C:/Program Files (x86)/Notepad++/notepad++.exeWhich was created in my .gitconfig file by the below command:git config --global core.editor /c/Program\ Files\ \(x86\)/Notepad\+\+/notepad\+\+.exeI had to remove the invalid line, before setting it with the above command would work.Unfortunately, git commit still didn't work.  Adding both Quotation marks and single quotes around it finally worked, launching the COMMIT_EDITMSG in my running Notepad++ window:editor = ""'C:/Program Files (x86)/Notepad++/notepad++.exe'""Platform is Windows 8.1 Pro x64, the MINGW64/Bash shell, installed from the https://git-scm.com Windows client.Looks like the prepare-commit-msg hook or the editor option in the gitconfig has a typo. You call c:/Program/ Files/ /(x86/)/Notepad++/notepad++.exe but you should have called c:/Program\ Files\ \(x86\)/Notepad++/notepad++.exe (use backslashes to escape space and bracket, not slash)"
"Found what was wrong. I don't understand how, but .git directory path somehow was changed to other path than I was working in. So then anything I changed was not checked, because git was checking in other place. I noticed it, when I reinitialized it and it showed that it reinitialized entirely different directory. When I cd .. from my current directory and cd to it back again and then reinitialized yet again, then it switched back to correct .git directory and started seeing my changes.For people working in public open source projects, if you face this behaviour, it is most likely that the file you are editing is excluded from the git repository using .gitignore. I faced the same behaviour, and after hours I found that the file I was making the change is excluded in .gitignore because it is a settings file, and every one will have their own local version.For anyone seeing this problem, the simplest solution I found was to just ""git clone"" your repo and delete the old directory. This should set up your pathing correctly by default.Check the location whether it's the right location of the git project."
"cron uses sh by default, so try, as described in ""How to redirect output to a file from within cron?"":no 'bash' with 2>&1 at the endThat is:48 14 * * * /home/erelsgl/git/erel-sites/add-commit-push.bash ""from home"" >> /home/erelsgl/logs/backup_from_home.log 2>&1And put in your bash script a shebang directive:#!/bin/bashDIR=""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" && pwd )""cd $DIR...Another form would be to use a bash command line (as in ""Redirecting the output of a cron job""):48 14 * * *  /bin/bash -l -c '/path/to/script >> ./log/my_log.log 2>&1'After changing the order of redirection as recommended, my log file indeed shows a long error message saying:Please tell me who you are. Run git config --global user.email ""you@example.com""     git config --global user.name ""Your Name"" to set your account's default identityI already did this in my account, but the cron job probably does not find the config file. How can I make it find the correct git config file? The cron job is likely to run with another account (or root): its global git config (~/.gitconfig) won't be the same as the one you set with your user account.One simple solution is to repeat those git config (without --global) inside the target git repo: that will register the user id in the repo itself, instead of relying on a global config which is not shared across accounts."
"NEVER AMEND OR REBASE A COMMIT YOU'VE ALREADY PUBLISHED!If you publish a commit and somebody else fetches it, the commit is there to stay. When you amend or rebase, you create a new commit and forget the old one. But when somebody else already has the old commit, it will not get updated for them. So when they later merge, the two versions of the commit will merge causing havoc.With this error, git is preventing you from pushing amended version of commits you've already published by mistake.There are exceptions to the rule. If you are pushing to a backup that nobody works off, you can push new history there (it's called rewinding). And if there is a branch that is announced as being rewound (for example git's own ""pu"" branch and all topics not yet in ""next""), it's obviously fine to rewind.If you are certain you won't cause problems by this, you can tell git to go ahead and rewind by usinggit push -fIt is also default for remotes configured as mirrors.Note that some repositories can be configured with hook to prohibit rewinding or prohibit rewinding some branches anyway.This happens because the commit was already in the remote repo, so you will have to rewrite history.This means you have to do a force push:git push -fBe careful though, if you are collaborating with others they run into trouble since rewriting history is not a good thing."
"When I run git branch, it only shows *master, not the remaining two branches.git branch doesn't list test_branch, because no such local branch exist in your local repo, yet. When cloning a repo, only one local branch (master, here) is created and checked out in the resulting clone, irrespective of the number of branches that exist in the remote repo that you cloned from. At this stage, test_branch only exist in your repo as a remote-tracking branch, not as a local branch.And when I rungit checkout test-branchI get the following error [...]You must be using an ""old"" version of Git. In more recent versions (from v1.7.0-rc0 onwards), If <branch> is not found but there does exist a tracking branch in  exactly one remote (call it <remote>) with a matching name, treat [git checkout <branch>] as  equivalent to$ git checkout -b <branch> --track <remote>/<branch>Simply run git checkout -b test_branch --track origin/test_branchinstead. Or update to a more recent version of Git.My friend, you need to create those corresponding branches locally first, in order to check-out to those other two branches, using this line of codegit branch test-branch  and  git branch change-the-titlethen only you will be able to do git checkout to those branchesAlso after creating each branch, take latest changes of those particular branches by using git pull origin branch_name   as shown in below codegit branch test-branchgit checkout test-branchgit pull origin test-branchand for other branch named change-the-title  run following code =>git branch change-the-titlegit checkout change-the-titlegit pull origin change-the-titleHappy programming :)"
"Reverting creates new commits that change existing committed files. You've got a merge in progress, which means you can't revert.Most likely, you want to reset: you want to go back to an existing commit and pretend that you haven't done any work. The most common way of doing that is to get rid of all changes and in-progress merges by resetting to HEAD like this:git reset --hard HEADAfterwards, if you want to go back to an even earlier version, you can revert or maybe just checkout the older version. Or you can do both at the same time using the ~ notation: git reset --hard HEAD~3 means undo everything and go back 3 commits."
"Right now you are trying to essentially do a git merge with uncommited changes in your branch (pull is just fetch + merge).  Git is rightfully complaining that such an operation would overwrite the uncommited changes in the branch.  To proceed with the pull operation you need to remove this uncommited changes from the working directory.  There are a couple of ways to do this commit them to your local repository stash them, run the pull operation, and then unstash them on top of the pull commit, fetch, rebase and then merge If you are new to git I would probably start with option #1.When using the Visual Studio Git Provider (VS 2013, VS2015), this situation can also arise in scenarios where a local Commit has been performed, but, when attempting to Pull from the server and merge, the error message:""uncommitted changes would be overwritten by merge""is still displayed, and the Pull action is cancelled.This can occur because locally, there are Untracked Files that were not part of the local Commit, but are part of the remote Pull; the merge resolution cannot deal with this scenario. Typically this occurs when some files such as T4 template outputs are included in a Commit on one workstation, but not on others. Additionally, this can occur in Visual Studio 2015, when working with MVC6 projects (at time of writing), when files in the wwwroot folder have been included in a Commit on one workstation, but not on another (one possible cause of this is that the .gitignore files are different on the workstations attempting to work with the same server repository). To resolve:a) View the Team Explorer > Changes dialogue.b) Verify that any Untracked Files that actually reside in the server branch are to be included in your Commits; to do this, right-click and select Add. Alternatively, if you intend them to be overwritten, you can select Delete. Please observe caution.c) Perform a Commit, and then a Pull, and perform any merge conflict resolution that is required.Visual Studio 2013 seems to be lacking maturity as a GIT UI.  I ran across similar issue even after having committed all my changes locally.  For errors arising from Push & Pull in Visual Studio 2013, I would recommend using Git Bash to do a git pull command.  The command-line pull command is much more powerful than VS UI and will overcome some issues.In response to Walter Schultz, you are getting the error because you seem to be trying to keep binary & assembly files (dll and exe's) in version control.  Binary files are not editable & not mergeable, thus they should not be included in version control.  In order to exclude these files from the GIT repository, you can create a .gitignore file and include following items:--- begin .gitignore file ----------------## Ignore Visual Studio temporary files, build results, and## files generated by popular Visual Studio add-ons.# User-specific files*.suo*.user*.sln.docstates*.cache# Build results[Dd]ebug/[Dd]ebugPublic/[Rr]elease/x64/build/bld/[Bb]in/[Oo]bj/Dev/bin/--- end gitignore file ----------------Once you create the .gitignore file, go into your local repository and delete all files in your /Bin/ folder and other files that you do not wish to keep track of.Then push to local & sync your code to server repository.Hope this helps.Same thing was happening to me, I committed all my changes and get the same error when I try to switch branches. I realized there was one file I chose to ""ignore"" which I left under the ""Excluded Changes"".  Apparently, VS2013 is not properly handling this exclusions well.  So after many tries I came up with a simple solution:I moved the file to ignore from ""Excluded Changes"" to the""Included Changes""; I made a local commit; Switched branch without problem;"
"Add the SHEBANG to the first line of hook, like so:#!/bin/shecho ""executing post-commit""exit 0This had me stumped for a while as well and I saw that adding the shebang fixed it. In SVN world, while in *nix we have a ""pre-commit"" script and in Windows we had ""pre-commit.bat"" and SVN automatically picked up the bat file in Windows. Git doesn't seem to pick up a pre-commit.bat ( or any hook ) and adding the shebang to the hook file worked.If you have the SHEBANG and it still fails, make sure you have  <path_to_git>\bin set in your path environment variable.You'll probably also have <path_to_git>\cmd if you installed it to work from the command-line.This is an old question, but I've been fighting with this exact problem and this SO question popped up, so I thought it worth the effort to record what worked for me.In short: I needed to run Apache as a regular user instead of Local System.  This was on a legacy test VM I was playing with, so it was only running Windows XP, but it appears that at least on that platform (and possibly others), msysgit just doesn't work properly when running under the Local System account (presumably the root filesystem isn't mapped properly).  As a result, no shebang line will work as git-http-backend simply can't execute any msysgit binaries (even with absolute Windows paths).Switching Apache to run as a regular user account fixed this problem completely.  Obviously you need to ensure that the user Apache is running as has permissions to read/write the git repositories, but beyond that, just make sure your shebang line is #!/bin/sh and everything should be copacetic.Lastly, yeah, this is a big hammer.  Ideally you'd be able to use something like suexec on Windows, but a quick googling doesn't indicate an obvious path forward, there.  Of course, if anyone has any ideas, I'd be interested.For now, this works for me, but it doesn't seem ideal.If someone, like me run into a similar problem with accessing git repositories through apache, you should set the PATH in Apache config, like:SetEnv PATH ""c:/Program Files (x86)/Git/bin;"""
"You have to set your username and email for commit attribution:git config --local user.name ""My Name""git config --local user.email myemail@example.comIf you want to configure this for all repositories on that machine, just remove the --local flag. These tokens are tied to commits, so that people can find who did that particular change. You can make them up; however, providing a correct email address and name allows your fellow colleagues to track the changes back to you. Moreover, services like GitHub use email address to link commits to GH users."
"Your pre-commit file has extraneous carriage returns in it. This can happen if you edit the file in Windows and copy the file to a Linux computer.Try these commands:cp .git/hooks/pre-commit /tmp/pre-committr -d '\r' < /tmp/pre-commit > .git/hooks/pre-commitAnd then rerun your git command."
"I'm creating this as a reference for my own future selfNone of the above answers worked for me.This is the only Q on SO (or even google) pertaining to this.What did work, I think, was:Goto Git Repo View in eclipse -> rt click on your repo -> collect garbage then commitPS:This might not have done anything but just documenting itI also was on the git shell (github shell) at the same time running  git status commands (that's all I ran) on the root of the repo. And  surprisingly found that there were no Staged/Unstaged changes,  eventually realizing that the problem was solved.PPS:If the above does not work:Goto Git Repo View in eclipse -> rt click on your repo -> collect garbage -> rt click on your repo -> clean, then commitI manage to solve this problem:I change the problematic folder name to something elseCommitChange the problematic folder name to the old onecommitNot a recommend solution but it`s working now.I had a similar problem.  I was receiving the same error because I was trying to commit files which were not added.  To resolve my issue I had to ""Add To Index"" prior to commit.I had the same problem, it was solved by simply doing a refresh (F5) on the project."
"I had the same issue and believe that it has to do with the size of the repo (edited- or the size of a particular file) you are trying to push.Basically I was able to create new repos and push them to github. But an existing one would not work. The HTTP error code seems to back me up it is a 'Length Required' error. So maybe it is too large to calc or greated that the max. Who knows.EDITI found that the problem may be  files that are large. I had one update  that would not push even though I had  successful pushes up to that point.  There was only one file in the commit  but it happened to be 1.6MSo I added the following config changegit config http.postBuffer 524288000To allow up to the file size 500M and  then my push worked. It may have been  that this was the problem initially  with pushing a big repo over the http  protocol.END EDITthe way I could get it to work (EDIT before I modified postBuffer) was to tar up my repo, copy it to a machine that can do git over ssh, and push it to github. Then when you try to do a push/pull from the original server it should work over https. (since it is a much smaller amount of data than an original push).Hope this helps.Looks like a server issue (i.e. a ""GitHub"" issue).If you look at this thread, it can happen when the git-http-backend gets a corrupted heap.(and since they just put in place  a smart http support...)But whatever the actual cause is, it may also be related with recent sporadic disruption in one of the GitHub fileserver.Do you still see this error message? Because if you do:check your local Git version (and upgrade to the latest one)report this as a GitHub bug.Note: the Smart HTTP Support is a big deal for those of us behind an authenticated-based enterprise firewall proxy!From now on, if you clone a repository over the http:// url and you are using a Git client version 1.6.6 or greater, Git will automatically use the newer, better transport mechanism.  Even more amazing, however, is that you can now push over that protocol and clone private repositories as well. If you access a private repository, or you are a collaborator and want push access, you can put your username in the URL and Git will prompt you for the password when you try to access it.Older clients will also fall back to the older, less efficient way, so nothing should break - just newer clients should work better.So again, make sure to upgrade your Git client first."
"Try run :git checkout spring/50c4ccb1d8f630979e84c03ba14676d1.pidAnd then try merge branches again.git merge filling-in-layoutYour local changes to file spring/50c4ccb1d8f630979e84c03ba14676d1.pid giving this error.There might be some issue with your .gitignore file. Because you already have /spring/*.pid in your gitignore file but it still checking this file. Might be your previous commit have this file.The spring process probably got too big. I had the same problem.you can use pkill -15 -f springand here is more info from https://www.railstutorial.org/book/static_pagesOn Unix-like systems such as Linux and OS X, user and system tasks  each take place within a well-defined container called a process. To  see all the processes on your system, you can use the ps command with  the aux options:$ ps aux To filter the processes by type, you can run the results of  ps through the grep pattern-matcher using a Unix pipe |:$ ps aux | grep spring   ubuntu 12241 0.3 0.5 589960 178416 ? Ssl  Sep20 1:46   spring app | sample_app | started 7 hours ago The result  shown gives some details about the process, but the most important  thing is the first number, which is the process id, or pid. To  eliminate an unwanted process, use the kill command to issue the Unix  kill code (which happens to be 9) to the pid:$ kill -15 12241 This is the technique I recommend for killing  individual processes, such as a rogue Rails server (with the pid found  via ps aux | grep server), but sometimes it‰Ûªs convenient to kill all  the processes matching a particular process name, such as when you  want to kill all the spring processes gunking up your system. In this  particular case, you should first try stopping the processes with the  spring command itself:$ spring stop Sometimes this doesn‰Ûªt work, though, and you can kill  all the processes with name spring using the pkill command as follows:$ pkill -15 -f spring Any time something isn‰Ûªt behaving as expected  or a process appears to be frozen, it‰Ûªs a good idea to run ps aux to  see what‰Ûªs going on, and then run kill -15  or pkill -15 -f   to clear things up."
"Q. What conflict?The conflict from merging the reverse patch of that revision, when later revisions changed the same lines of code: a merge conflictEdit If you are reverting the latest commit, this means that you had local changes (refer to git status). Don't forget that you can have staged and unstaged local changes. To easily see all local changes, use    git diff HEADYou should just open up the unmerged file (git status) to see the conflicted file(s). You'll see the <<<<, =====, >>>>> conflict markers soon enough.You can usegit mergetoolto resolve the conflicts with more user-friendly tools like Meld, KDiff3, Gvim etc."
"Your arguments are in the wrong order. Try git commit -m 'my notes' path/to/my/file.ext, or if you want to be more explicit, git commit -m 'my notes' -- path/to/my/file.ext.Incidentally, git v1.5.2.1 is 4.5 years old. You may want to update to a newer version (1.7.8.3 is the current release).Try:git commit -m 'my notes' path/to/my/file.ext"
"If the problem is with the index as the staging area for commits (i.e. .git/index), you can simply remove the index (make a backup copy if you want), and then restore index to version in the last commit:On OSX/Linux:rm -f .git/indexgit resetOn Windows:del .git\indexgit reset(The reset command above is the same as  git reset --mixed HEAD)You can alternatively use lower level plumbing git read-tree instead of git reset.If the problem is with index for packfile, you can recover it using git index-pack.You may have accidentally corrupted the .git/index file with a sed on your project root (refactoring perhaps?) with something like:sed -ri -e ""s/$SEACHPATTERN/$REPLACEMENTTEXT/g"" $(grep -Elr ""$SEARCHPATERN"" ""$PROJECTROOT"")to avoid this in the future, just ignore binary files with your grep/sed:sed -ri -e ""s/$SEACHPATTERN/$REPLACEMENTTEXT/g"" $(grep -Elr --binary-files=without-match ""$SEARCHPATERN"" ""$PROJECTROOT"")This sounds like a bad clone. You could try the following to get (possibly?) more information:git fsck --fullIn my case it was nested .git folder in web/ckeditor/kcfindergit status  error: bad index file sha1 signature  fatal: index file corrupt  fatal: 'git status --porcelain' failed in submodule web/ckeditor/kcfinder"
"In my case I could not see the Resolve the conflicts option because I had local changes not committed yet and I was trying to sync with the remote changes. As soon as I committed my local changes and then tried a sync again, Resolve the conflicts link appeared.So the point here is: commit your changes first and then try to sync. A merge will start and Visual Studio will allow you to go through each of the conflicts.I have encountered the same issue where ""An error occurred. Detailed message: 1 conflict prevents checkout"" is shown where there's no option to resolve the conflict as shown in Leinel's answer.The reason was due to an untracked file that is the same file that is to be pulled. I just deleted the untracked file and retried the pull.I had the same issue. It turns out that I had an untracked file that needed to be included. Therefore, check in Changes tab for untracked files.I did not have any ""Changes"" (untracked or otherwise) listed on either branch, so the other answers did not work for me.I decided to go command line:Click Sync on both branches.Switch to the branch you want to ""merge into"" (master in my case).In Team Explorer under Manage Branches, do Action -> Open Command Line.In the command line type git merge BRANCH_NAME.  (my work branch / merge ""from"")Now the Resolve the conflicts button is available.If the conflicts during the pull are about end of line charaters:git config --global core.autocrlf falseThat should avoid any automatic eol conversion.You can see more in ""Why does git think each line of an untouched file has changed"" how to detect that situation in the working tree (git diff --word-diff-regex=.)."
"Trust the code editors to manipulate your line endings. Auto crlf should be false. Don't let source control get too smart. If don't need to have your source control tool to change your line endings, don't. This will hurt.To reiterate from an accepted answer: ""Unless you can see specific treatment which must deal with native eol, you are better off leaving autocrlf to false.""Also from the progit book at the end of the section on autocrlf:""If you‰Ûªre a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to false""The only other help I can give is that if you take the other route, get familiar with vim -b which will show special characters such as the CR in MSysGit, and git show HEAD:path/to/your/file.txt which should show you the file in the way that git stored it. Set core.whitespace cr-at-eol to have patches and diffs not highlight CRs as possible problematic whitespace.Not worth the hassle. Store as-is.very new to this so setting core.autocrlf to false didn't make too much sense to me. So for other newbies, go to the config file in you .git folder and add:[core]    autocrlf = falseunder the [core] heading.The problem is probably occurring because you set Git to store files internally with crlf with the core.eol setting. When you add a file, Git is warning you it will change it to the internal format.Git works best with lf line endings, so if possible always work with core.eol = lf.This should explain when to use core.autocrlf, Why should I use core.autocrlf=true in Git?You may also want to use core.safecrlf. Check git config --help for details on the settings.The git autodetection of formats works pretty well. Therefore, core.autocrlf=true is a really good idea on Windows.Saying git config --global core.safecrlf=false says to git: Hey, please convert my wrong line endings (LF only) to Windows line endings (CRLF) and do not bother me with it.Therefore, you should really disable core.safecrlf.Longer answer at: http://stackoverflow.com/a/15471083/873282"
"Tryrm -f ./.git/index.lockIn your repository directory. The error message is rather explicit in what causes it.In windows:command prompt from repo directory:cd .gitdel index.lockTry quitting Xcode - since it's a git client, you have to quit Xcode to avoid problems with git on the command line.I was having the same problem. I triedrm -f ./.git/index.lock and the console gave me an error message. Then, I tried rm -Force ./.git/index.lockand that worked.Good Luck!It just happens that I created the git repository with the root user. I deleted the git repository and created it again without sudo and it works.If you are using one of #intelliJ IDEs and receiving this msg (i'm using #webtorm), please notice that this problem can occur because of hiding one of project folders (inside settings), and this can prevent GITfrom merging."
"It's just a common issue faced if two or more git operations are done by your system and that generates a lock file. All you need to do is:Close XcodeOpen the .git folder in your xcode project folder. The folder is hidden, so you would need to either use terminal to open the directory or the ""Go to Folder"" option in Finder.Then delete the ""index.lock"" file. Either through terminal or Finder.Try and commit again.If it fails again, repeat 1 to 3 but commit first with terminal.If you know what you're doing just typing this command into terminal in the current directory of your project and it should delete the lock file: rm -f .git/index.lockIf anything you can check this Quora question for more details on what you've faced: https://www.quora.com/Why-do-my-git-operations-often-fail-with-a-lock-errorHope that helps you guys, and happy coding!"
"This may be an old reply but I'm hoping this is more useful on next who need this solution.On linux/unix/gitbash/cygwin, tryrm -f .git/index.lockOn Windows Command Prompt, try:del .git\index.lockHope that helps, I found this solution here: Fatal: Unable to create ‰Û÷‰Û_git/index.lock‰Ûª File existscheck if the git still running (ps -ef  | grep git)if not, remove the locked fileif yes, kill the git process at first.On a Windows platform running Visual Studio 2015 RC (v4.6.00057) in combination with SourceTree (v1.6.14.0) will give this error as well. Solution:Assuming you want to use source tree as source code manager, simply disable the source control provider inside Visual Studio like this:Go to: Tools > Options > Source ControlSelect Current source control plug-in as: NoneJust had this issue... Gitbox was at fault. So maybe you had a GUI running that was causing problems.Sometimes Git creates a lock file associated with your repo while you are making any changes or most probably when you are using sub modules. The error message will show you the path of the lock file.Fix: Just manually go to the path in terminal and delete the lock file by $ rm index.lockIt should help.Probably (it has happened to me), ls command is saying it doesn't exist because current user doesn't have permissions to reach that directory or file.Remove the lock and make sure you are executing git with the right user in order to avoid permission problems.If you are in a GNU/Linux box with sudo command: sudo rm project_path/.git/index.lockI had this exact same error, but the issue was not the lock file. Instead the issue was that I had copied the contents of another git repo into this repo, including the .git invisible folder. So, SourceTree was confused about which repo I wanted to stage files to (there being a mismatch between the repo SourceTree thought I was in, and the one that the contents of my embedded .git dir said I should be in).I had this problem with TortoiseGit with Cygwin on Windows. I wasn't able to delete remove ./.git/index.lock even with administrative privileges, I tried both Cygwin and command prompt, it said the file was in use by another process. I found that I had 2 instances of TortoiseProc.exe running. I killed one of them, and closed all of my windows explorer windows, and then was able to delete the file. I don't know if killing an instance of TortoiseProc.exe was the solution or closing windows explorer windows.The solution for me was to delete the .index file and allow Git to rebuild another.I created an empty index.lock file, deleted it using windows command"
"What about naming your hook pre-commit (without any extension) ?EDIT: and add #!/bin/sh on the first lineYou probably don't have the permissions to run the pre-commit fileWrite: chmod +x .git/hooks/pre-commitThanks to @vaughan for giving the idea"
"I can reproduce your problem if I set my core editor in some toy local repository like sogit config core.editor ""/usr/bin/mate -w""and then try to run a command that uses the editor:$ git commit/usr/bin/mate -w: /usr/bin/mate: No such file or directoryerror: There was a problem with the editor '/usr/bin/mate -w'.Please supply the message using either -m or -F option.I'm getting this error because there is no file or directory called /usr/bin/mate on my machine (I don't have TextMate installed).You're getting a similar error for a similar reason: either TextMate is installed on your machine but not at /usr/bin/mate, or it's not installed at all. You should eitheruse a text editor that's already installed on your machine; or,if you insist on using TextMate, make sure that it is actually installed; then rungit config core.editor ""<path_to_mate> -w""Alternatively, add mate to your path and simply rungit config core.editor ""mate -w"""
"You should set vim to not detach from the shell and be in the foreground. You can do this with the following command: git config --global core.editor vim -fFrom the man:   -f          Foreground.  For the GUI version, Vim will not fork and detach from the shell it               was  started in.  On the Amiga, Vim is not restarted to open a new window.  This               option should be used when Vim is executed by a program that will wait  for  the               edit  session  to  finish (e.g. mail).  On the Amiga the "":sh"" and "":!"" commands               will not work."
"If your project was itself a git repo (meaning it has a .git), the presence of the .git could confuse the GitHub Desktop client.It could be seen as a nested git repo (for which only the gitlink is recorded), and the GUI tries to see it as a submodule.Try with command line (unzip PortableGit-2.6.3-64-bit.7z.exe anywhere you want and add it to your %PATH%)cd /your/projectgit remote add origin https://github.com/<username>/<yourrepo>git pushThen reference that same project directory in GitHub Desktop: it will be recognized as a local repo linked to a GitHub one."
"I just got the same problem and just figured out what's cause.Github seems only supports ssh way to read&write the repo, although https way also displayed 'Read&Write'.So you need to change your repo config on your PC to ssh way:edit .git/config file under your repo directoryfind url=entry under section [remote ""origin""]change it from url=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git to    url=ssh://git@github.com/derekerdmann/lunch_call.git. that is, change all the texts before @ symbol to ssh://gitSave config file and quit. now you could use git push origin master to sync your repo on GitHubTo definitely be able to login using https protocol, you should first set your authentication credential to the git Remote URI:git remote set-url origin https://yourusername@github.com/user/repo.gitThen you'll be asked for a password when trying to git push.In fact, this is on the http authentication format. You could set a password too:https://youruser:password@github.com/user/repo.gitYou should be aware that if you do this, your github password will be stored in plaintext in your .git directory, which is obviously undesirable.One small addition to Sean's answer.Instead of editing .git/config file manually, you can use git remote set-url command.In your case it should be:git remote set-url origin ssh://git@github.com/derekerdmann/lunch_call.gitI find it easier and cleaner, than messing around with dot-files.help.github.com: Changing a remote's URLThe other answers that suggest switching to SSH sort of miss the point. HTTPS is supported, but you must log in with you GITHUB password, not your SSH passphrase (which was what was giving me the same exact error). I was having the same problem, but making sure to use my actual GitHub password at the terminal password prompt fixed the solution with no alteration to the config, or resorting to SSH.The reason it is important to note this, is many public institutions (such as my school) will block SSH, but allow HTTPS (which is the only reason I started cloning over HTTPS in the first place).Hope that helps anyone else having the same issue...Edit .git/config file under your repo directoryFind url= entry under section [remote ""origin""]Change it from url=https://github.com/rootux/ms-Dropdown.git to https://USERNAME@github.com/rootux/ms-Dropdown.gitwhere USERNAME is your github user nameI think @deepwaters got the answer correct for older versions. The HTTPS URL needs to have the username. I had git 1.7.0.4 and git push origin master wouldn't even ask for a password till I added it.Upgrade your git. GitHub has answered this question at https://help.github.com/articles/error-the-requested-url-returned-error-403.Figured it out. I cloned over HTTPS. Setting up my public SSH keys, cloning over SSH, and pushing over SSH fixed it.Same error and resolution on Mac OS X.Everything was working fine till I created a new account on GitHub and tried to push$ git push -u origin masterAnd got the error:remote: Permission to NEWUSER/NEWREPO.git denied to OLDUSER. fatal: unable to access ‰Û÷https://github.com/NEWUSER/NEWREPO.git/': The requested URL returned error: 403It should have fixed by setting the user.name either for global or current repo$ git config ‰ÛÒ-global user.name NEWUSER$ git config user.name NEWUSERBut it didn‰Ûªt. I got it fixed by deleting the OLDUSER associated with GitHub from Keychain Access app under Passwords section. Then the push command went successful.$ git push -u origin masterreferenceJust add you username into url like this :https://islam9@github.com/islam9/bootstrap-rtlplease check:http://islamkhalil.wordpress.com/2012/12/06/github-error-pushing-to-git-returning-error-code-403-fatal/A 403 code is ""Forbidden"".  The server saw your request and refused it.  Do you have permission to push to that repository?I actually had a very simple fix to this. All i did was edit the git config file differently after cloning the repository.  The remote origin url is what you need to edit in your default config file. It should look like seen below[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true[remote ""origin""]    fetch = +refs/heads/*:refs/remotes/origin/*    url = https://*username*@github.com/*username*/*repository*.git[branch ""master""]    remote = origin    merge = refs/heads/masterThis works for me -:git remote set-url origin https://username@github.com/user/repo.gitHope it helpsFor anyone curious, my mac machine vs lucid vm ran git 1.7.6 vs 1.7.0.4, and the exact same repo was pushable from my mac (newer git) but not the VMSame curl version. Perhaps some older git versions don't support https pushes?change it fromurl=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git tourl=ssh://git@github.com/derekerdmann/lunch_call.gitIt works! Do not forget the ""git"" before the ""@"".I figured out my own variation of this problem.The issue was not changing the protocol from https to ssl, but instead,setting the Github global username and email! (I was trying to push to a private repository.git config --global user.email ""your_github_email_@email.com""git config --global user.name ""Your full name""I had this problem right now, and it turned out that my server /etc/resolver.conf file had a bad ip address.  Might help others.It could be an accounting issue. The Github account of the upstream (private) repo owner may not be financial. I've seen this where the client's credit card expired.After changing https to http within gitbox app, it worked for me.Sometimes there is nothing wrong with settings, and there are some problems on github servers.https://status.github.com - current status of github :)Github has page dedicated to troubleshooting this error:https://help.github.com/articles/https-cloning-errorsIn my case it turned out that using a new version of git (1.8.5.2) solved this problem.100 % Tested and It Save Your  lot of Time that your Are Finding Solution on NetClick on Your Repository and The Write Hand Side Click On ""Setting "" 2.IN the Left Hand Side Option Panel Click on  ""Collaborators""Add And Person Name You Know In Git Hub  Then Click "" Add Collaborators""After this our ""Push to Git"" work Fine !!Edit .git/config file under your repo directoryFind url= entry under section [remote ""origin""]Change it from url=https://github.com/rootux/ms-Dropdown.git to https://USERNAME@github.com/rootux/ms-Dropdown.gitwhere USERNAME is your github user name=> This solution worked for me."
"Cygwin git appears to be creating new object files using a ""create-temp-file-then-hardlink-to-destination"" method. I think the hard-linking is confusing for cygwin!Bottom line: solved using:git config --add ""core.createobject"" rename(My setup is Cygwin git, working on a .git directory over samba)Use Git for Windows instead. Cygwin's Git started going downhill a while back. My team and I had more and more problems with it as time went on and finally just switched. With a full port of Git to Windows (the msysgit/Git for Windows project) available, why put up with the annoyances and outright brokenness that comes with Cygwin Git? We haven't had a single issue since switching.The problem here is that Git's default method of creating object files just plain doesn't work on Windows shared drives, and (unlike Git for Windows or msysgit), Cygwin's Git has just been using that default.Until today ‰ÛÒ I'm the Git maintainer for Cygwin ‰ÛÒ and I've just rebuilt it to use a different method that does work on shared drives (it has other disadvantages, but there's not a lot we can do about that).  If you run Cygwin's setup-x86[_64].exe again and download the latest version of Git (v2.4.5-3 or later), you should find everything works again.(The new Git build has only just been uploaded, so it may take a little while to reach all the mirrors, but I think that's at most 24 hours, and many mirrors are quicker than that.)"
"Add .idea directory to the list of ignored filesFirst, add it to .gitignore, so it is not accidentally committed by you (or someone else) again:.ideaRemove it from repositorySecond, remove the directory only from the repository, but do not delete it locally. To achieve that, do what is listed here:Git: Remove a file from the repository without deleting it from the local filesystemSend the change to othersThird, commit the .gitignore file and the removal of .idea from the repository. After that push it to the remote(s).SummaryThe full process would look like this:$ echo '.idea' >> .gitignore$ git rm -r --cached .idea$ git add .gitignore$ git commit -m '(some message stating you added .idea to ignored entries)'$ git push(optionally you can replace last line with git push some_remote, where some_remote is the name of the remote you want to push to)You can remove it from the repo and commit the change.git rm .idea/ -r --cachedgit add -u .idea/git commit -m ""Removed the .idea folder""After that, you can push it to the remote and every checkout/clone after that will be ok.You can rewrite git history:$ git reset --soft HEADNow you have your local repo like before the commit. You can $ git reset --soft HEAD~Nwhere N is the number of commit you want to ""reset""."
"The minimal required author format, as hinted to in this SO answer, isName <email>In your case, this means you want to writegit commit --author=""Name <email>"" -m ""whatever""Per Willem D'Haeseleer's comment, if you don't have an email address, you can use <>:git commit --author=""Name <>"" -m ""whatever""As written on the git commit man page that you linked to, if you supply anything less than that, it's used as a search token to search through previous commits, looking for other commits by that author.The specific format is:git commit --author=""John Doe <john@doe.com>"" -m ""Impersonation is evil.""The standard A U Thor <author@example.com> formatSeems to be defined as followed: ( as far as i know, with absolutely no warranty )A U Thor = required usernameThe separation of the characters probably indicates that spaces are allowed, it could also be resembling initials.The username has to be followed by 1 space, extra spaces will be truncated<author@example.com> = optional email addressMust always be between < > signs.The email address format isn't validated, you can pretty much enter whatever you wantOptional, you can omit this explicitly by using <>If you don't use this exact syntax, git will search through the existing commits and use the first commit that contains your provided string.Examples:Only user nameOmit the email address explicitly:git commit --author=""John Doe <>"" -m ""Impersonation is evil.""Only emailTechnically this isn't possible. You can however enter the email address as the username and explicitly omit the email address. This doesn't seem like it's very useful.I think it would make even  more sense to extract the user name from the email address and then use that as the username. But if you have to:git commit --author=""john@doe.com <>"" -m ""Impersonation is evil."" I ran in to this when trying to convert a repository from mercurial to git.I tested the commands on msysgit 1.7.10.FormatA U Thor <author@example.com>simply mean that you should specifyFirstName MiddleName LastName <email@example.com>Looks like middle and last names are optional (maybe the part before email doesn't have a strict format at all). Try, for example, this:git commit --author=""John <john@doe.com>"" -m ""some fix""As the docs say:  --author=<author>       Override the commit author. Specify an explicit author using the standard        A U Thor <author@example.com> format. Otherwise <author> is assumed to        be a pattern and is used to search for an existing commit by that author        (i.e. rev-list --all -i --author=<author>); the commit author is then copied        from the first such commit found.if you don't use this format, git treats provided string as a pattern and tries to find matching name among the authors of other commits.Just supplement•__git commit --author=""john@doe.com "" -m ""Impersonation is evil."" Some cases, commit still fail, but tell you follow message:* Please tell me who you are.Rungit config --global user.email ""you@example.com""   git config --global user.name ""Your Name""to set your account's default identity.  Omit --global to set the identity only in this repository.fatal: unable to auto-detect email address (got  xxxx)OK, just run ""git config"", then ""git commit"""
"IF youå«re running Linux in a VM and you have you local rep lying in a shared folder, Windows seems to always lock the "".git/index"" file. Placing the local repo in a folder which is not shared with my host OS solved the problem for me. Workaround for accessing files with host OS: use a cloud."
"First in the clone folder you can create a Branch (so the master stay untouched)Git Branch [name]After just copy the file you want (in your old folder) to the clone folder.When you are done, just add / commit your change and Merge your branch into the ""master"" branchIt's  will look to something like this.git add .git commit -m ""Comments""git checkout mastergit merge [new_branch]Try this tutorial from GitHubThat's because you are versioning stuff inside /home/mylogin/gitclone and git tracks everything inside that folder. You cannot track other folders outside of this repository.A solution might be create a submodule, or using a symbolic link using ln -sYou'll have to move all the files from /var/www/myapp to /home/mylogin/gitclone and then do a git add . and then git commit -m ""Your message"".To add some files or folder to your repository, they have to be in the folder you created with ""git clone"". So copy/paste your application in your local git folder and then go in it and do ""git add *"" and then you'll be able to commit to the server with ""git commit -m 'message'"" and finally push the changes to the server with ""git push"""
"This has to do with the core.autocrlf global config option.  See this page on github and check out these stackoverflow answers, and more.It sounds like git is replacing your linefeeds (LF) with carriage-return line feeds (CRLF), so it's swapping the end line characters on the repository side while leaving them alone in your current working directory. See this link for a description of newline characters.If you want to avoid seeing that you could just change the newline characters in the New Full Car.mdl - it might do this when you pull from the repository, though if you've already pulled before it looks like it hasn't."
"It looks like what's happening is that you successfully resolved the first merge conflict when applying ""Turned colors to html"" then hit another merge conflict when applying the next commit ""Added last sentences"".Simply do a git status to see what the merge conflicts are, resolve them then continue with git rebase --continue."
"Git is not able to track files outside of the repository, and so when you're doinggit add /Users/dineshkumar/Documents/sampleiosGit tells you just that, literally: the path you're trying to add lies outside of the initialized repository you're in.The term repository is a bit moot so let's make it more clear.Usually you work with Git like this:$ mkdir project; cd project$ git init$ vim upload.php...$ git add upload.php...$ git commitWhen you run git init in a directory (""project"" in our case) Git creates a special subdirectory named "".git"" in it ‰ÛÓ which contains the actual repository data (objects and configuration) ‰ÛÓ and then turns the enclosing directory into a work tree.  The work tree contains the files which you actually edit and submit to Git to build up the next commit.The crucial propety of this design is that only files located in the work tree are managed by Git.  You can't git add a file from somewhere else ‰ÛÓ only from within the work tree.  Consequently, no one calls git add with full paths because this has no sense.I'm not sure where your confusion is rooted.  If you think that the git add command is supposed to copy a file/directory from somewhere into the work tree, you're wrong.  If you were't aware of the work tree and thought that the repository is able to track arbitrary files on a filesystem tree, you're wrong again ‰ÛÓ how would cloning work if this was true?You should make yourself familiar with the idea that git add is not for adding files to the repository, it's rather for adding changes in files into the so-called staging area, from which the next commit is made.  Adding a presently untracked file is just a special case of this ‰ÛÓ this addition is just a whole-file ""change"".Looking at your attempts I might make a guess that you want to turn /Users/dineshkumar/Documents/sampleios into a Git repository.  If this is the case, do$ cd /Users/dineshkumar/Documents/sampleios$ git init$ git add .$ git commitBut before you do that please start with the book as you seem to lack the most basic Git knowledge.assuming your directory /Users/username/Downloads/folder_name/ is within a git-repository (e.g. you are tracking /Users/username/Downloads/), simply do:cd /Users/username/Downloads/git add folder_name/git commitNOTE: i would not recommend tracking the Downloads/ folder, as this is volatile by nature.instead it might make more sense to track Projects/a git workbench repository is a directory that contains a .git folder. to add anything to the repository, it has to be within a repository (that is: in a subdirectory of the repository): you cannot track a folder/file that is outside of a git-repository."
"If you do not have any uncommitted change then do a hard reset from  Team > reset > (select Hard option)do a pull request again. find all the conflicted file(file with red diamond icon) Resolve any conflict (manually edit the file, or use merge tool), then right click on all(one by one ) conflicting files, select ""team"", then select ""Add to Index"". (if every conflict is resolve then there should not be any conflict(red diamond) icon. before trying to commit anything make sure all the conflict is revolved)now you should be able to commit to git againI am not exactly sure what is causing the conflict, but your partner should be able to see which files are conflicting by looking for a red diamond inside the Package Explorer. Resolve any conflict (manually edit the file, or use merge tool), then right click on all conflicting files, select ""team"", then select ""Add to Index"". After that, your partner should be able to commit to git again.I hope this helps!I know this is an old post but I ran into this problem yesterday. I had this Repository State: Conflicts message when I was trying to commit after removing all the conflicts. As I couldn't see anything wrong in Eclipse, I opened GitHub Desktop and it did show me straight away what was wrong. I work on MacOS X and there was a .DS_Store file in the workspace. This was the file where the conflict was. Eclipse wouldn't show it but thanks to GitHub Desktop, I managed to remove the conflict and then I could commit my changes in Eclipse. I hope it helps."
"Does vim on Appa otherwise behave correctly?  That is, do you have the problem whenever you run vim, or only when using git commit?If the former:Are you sure that git commit is running vim?  Many applications default to using vi in the absence of any other configuration, and it's typical for vi to either (a) a very minimal version of vim missing lots of fancy features or (b) something completely different.Try explicitly setting core.editor to vim and see what happens:git config --global core.editor vimAlternatively, you can also set your EDITOR and VISUAL environment variables.Mouse support can be enabled or disabled in specific vim builds. You can look at which features are enabled/disabled using: :version. On the Appa machine you'll probably see -mouse in the list. The only solution is to use a vim that's been built with mouse support,. Unless you control the server this means:compiling it yourself or obtaining a compiled executable for the platform,keeping it in a user-local bin directory, andsetting the EDITOR environment variable to point to your own vim."
"If you are using gvim, you need to make sure that it stays in the foreground, otherwise it will return control to git before you've had a chance to edit and save your message. Specifying the -f switch as part of the editor setting should enable this.gvim -fYou have multiple values set for your core.editor setting which is causing a problem. You need to have just one setting.Try:git config --global --unset-all core.editorgit config --unset-all core.editorgit config --global core.editor ""gvim -f""Are you prefixing the lines in your commit message with #? If you are, Git will treat those as comment lines, ignore them, and find no content in your message.Using gvim -f should be the solution (works for me), but simply setting core.editor may not necessarily cause git to use it. To find out what git is actually using, run git var GIT_EDITOR. It should print gvim -f. If not, check man git-var and jump to the section on the GIT_EDITOR variable to find out what could be overriding your core.editor setting."
"I had the same issue. A very simple solution would be to force the push anyways:git push heroku master -fSince heroku is just being used to deploy your App(and not for source control like origin/master) this should be fine.For some reason your Heroku repo has diverged. You could do:git fetch herokugit merge heroku/mastergit push heroku masterwhich will ""Merge the remote changes before pushing again."" Before you merge, maybe do git diff heroku/master to find out what's actually different."
"Check if your commits have Change-Id: ... in their descriptions. Every commit should have them.If no, use git rebase -i to reword the commit messages and add proper Change-Ids (usually this is a SHA1 of the first version of the reviewed commit).For the future, you should install commit hook, which automatically adds the required Change-Id.Execute scp -p -P 29418 username@your_gerrit_address:hooks/commit-msg .git/hooks/ in the repository directoryor download them from http://your_gerrit_address/tools/hooks/commit-msg and copy to .git/hookstry this:git commit --amendand copy paste the Change-Id: I55862204ef71f69bc88c79fe2259f7cb8365699a at the end of the file.save it and push it again!If you need to add Change-Id to multiple commits, you can download the hook from your Gerrit server and run these commands to add the Change-Ids to all commits that need them at once.  The example below fixes all commits on your current branch that have not yet been pushed to the upstream branch.tmp=$(mktemp)hook=$(readlink -f $(git rev-parse --git-dir))/hooks/commit-msggit filter-branch -f --msg-filter ""cat > $tmp; \""$hook\"" $tmp; cat $tmp"" @{u}..HEADIt is because Gerrit is configured to require Change-Id in the commit messages.http://gerrit.googlecode.com/svn-history/r6114/documentation/2.1.7/error-missing-changeid.htmlYou have  to change the messages of every commit that you are pushing to include the change id ( using git filter-branch ) and only then push."
"Repair PermissionsAfter you have identified and fixed the underlying cause (see below), you'll want to repair the permissions:cd /path/to/repo.gitchgrp -R groupname .chmod -R g+rwX .find . -type d -exec chmod g+s '{}' +If you do not fix the underlying cause, the error will keep coming back and you'll have to keep re-running the above commands over and over again.Underlying CausesThe error could be caused by one of the following:The repository isn't configured to be a shared repository (see core.sharedRepository in git help config).  If the output of:git config core.sharedRepositoryis not group or true or 1 or some mask, try running:git config core.sharedRepository groupand then re-run the recursive chmod and chgrp (see ""Repair Permissions"" above).The operating system doesn't interpret a setgid bit on directories as ""all new files and subdirectories should inherit the group owner"".When core.sharedRepository is true or group, Git relies on a feature of GNU operating systems (e.g., every Linux distribution) to ensure that newly created subdirectories are owned by the correct group (the group that all of the repository's users are in).  This feature is documented in the GNU coreutils documentation:... [If] a directory's set-group-ID bit is set, newly created subfiles inherit the same group as the directory, and newly created subdirectories inherit the set-group-ID bit of the parent directory. ... [This mechanism lets] users share files more easily, by lessening the need to use chmod or chown to share new files.However, not all operating systems have this feature (NetBSD is one example).  For those operating systems, you should make sure that all of your Git users have the same default group.  Alternatively, you can make the repository world-writable by running git config core.sharedRepository world (but be careful‰ÛÓthis is less secure).The file system doesn't support the setgid bit (e.g., FAT).  ext2, ext3, ext4 all support the setgid bit.  As far as I know, the file systems that don't support the setgid bit also don't support the concept of group ownership so all files and directories will be owned by the same group anyway (which group is a mount option).  In this case, make sure all Git users are in the group that owns all the files in the file system.Not all of the Git users are in the same group that owns the repository directories.  Make sure the group owner on the directories is correct and that all users are in that group.For Ubuntu (or any Linux)From project root,cd .git/objectsls -alsudo chown -R yourname:yourgroup *You can tell what yourname and yourgroup should be by looking at the permissions on the majority of the output from that ls -al commandNote: remember the star at the end of the sudo lineA good way to debug this is the next time it happens, SSH into the remote repo, cd into the objects folder and do an ls -al.If you see 2-3 files with different user:group ownership than this is the problem.It's happened to me in the past with some legacy scripts access our git repo and usually means a different (unix) user pushed / modified files last and your user doesn't have permissions to overwrite those files. You should create a shared git group that all git-enabled users are in and then recursively chgrp the objects folder and it's contents so that it's group ownership is the shared git group. You should also add a sticky bit on the folder so that all the files created in the folder will always have the group of git.chmod g+s directory-nameUpdate: I didn't know about core.sharedRepository. Good to know, though it probably just does the above.I just wanted to add my solution. I had a repo on OS X that had ownership of root on some directories and Home (which is my user directory) on others which caused the same error listed above.The solution was simple thankfully. From terminal:sudo chown -R Home projectdirectoryThis can easily happen if you ran git init with a different user from the one you are planning to use when pushing changes.If you blindly follow the instructions on [1] this will happen as you probably created the git-user as root and then immediately moved on to git init without changing user in between.[1] http://git-scm.com/book/en/Git-on-the-Server-Setting-Up-the-ServerSolved for me...just this:sudo chmod 777 -R .git/objectssudo chmod -R ug+w .;This has fixed the issue for me. Basically .git/objects file does not had a write permission, the above line grants permission to all the files and folders in the directory.After you add some stuff... commit them and after all finished push it! BANG!! Start all problems... As you should notice there are some differences in the way both new and existent projects were defined. If some other person tries to add/commit/push same files, or content (git keep both as same objects), we will face the following error:$ git pushCounting objects: 31, done.Delta compression using up to 2 threads.Compressing objects: 100% (17/17), done.Writing objects: 100% (21/21), 2.07 KiB | 0 bytes/s, done.Total 21 (delta 12), reused 0 (delta 0)remote: error: insufficient permission for adding an object to repository database ./objects  remote: fatal: failed to write objectTo solve this problem you have to have something in mind operational system's permissions system as you are restricted by it in this case. Tu understand better the problem, go ahead and check your git object's folder (.git/objects). You will probably see something like that:<your user_name>@<the machine name> objects]$ ls -latotal 200drwxr-xr-x 25 <your user_name> <group_name> 2048 Feb 10 09:28 .drwxr-xr-x  3 <his user_name> <group_name> 1024 Feb  3 15:06 ..drwxr-xr-x  2 <his user_name> <group_name> 1024 Jan 31 13:39 02drwxr-xr-x  2 <his user_name> <group_name> 1024 Feb  3 13:24 08*Note that those file's permissions were granted only for your users, no one will never can changed it... *Level       u   g   oPermission rwx r-x ---Binary     111 101 000Octal       7   5   0SOLVING THE PROBLEMIf you have super user permission, you can go forward and change all permissions by yourself using the step two, in any-other case you will need to ask all users with objects created with their users, use the following command to know who they are:$ ls -la | awk '{print $3}' | sort -u <your user_name><his user_name>Now you and all file's owner users will have to change those files permission, doing:$ chmod -R 774 .After that you will need to add a new property that is equivalent to --shared=group done for the new repository, according to the documentation, this make the repository group-writable, do it executing:$ git config core.sharedRepository grouphttps://coderwall.com/p/8b3ksgFor my case none of the suggestions worked. I'm on Windows and this worked for me:Copy the remote repo into another folderShare the folder and give appropriate permissions.Make sure you can access the folder from your local machine. Add this repo as another remote repo in your local repo. (git remote add foo //SERVERNAME/path/to/copied/git)Push to foo. git push foo master. Did it worked? Great! Now delete not-working repo and rename this into whatever it was before. Make sure permissions and share property remains the same."
"Git has a limit of 4096 characters for a filename, except on windows when git is compiled with msys. It uses an older version of the windows api and there's a limit of 260 characters for a filename.So as far as I understand this, it's a limitation of msys and not of git. You can read the details here:https://github.com/msysgit/git/pull/110You can circumvent this but using an other git-client on windows.You should be able to run the commandgit config --system core.longpaths trueor add it to one of your git config files manually to turn this functionality on, once your are on a supported version of git. It looks like maybe 1.9.0 and after.This might help :git config core.longpaths true"
"An alternative to testing whether the output of git status --porcelain is empty is to test each condition you care about separately.  One might not always care, for example, if there are untracked files in the output of git status.For example, to see if there are any local unstaged changes, you can look at the return code of:git diff --exit-codeTo check if there are any changes that are staged but not committed, you can use the return code of:git diff --cached --exit-codeFinally, if you want to know about whether there are any untracked files in your working tree that aren't ignored, you can test whether the output of the following command is empty:git ls-files --other --exclude-standard --directoryUpdate:  You ask below whether you can change that command to exclude the directories in the output.  You can exclude empty directories by adding --no-empty-directory, but to exclude all directories in that output I think you'll have to filter the output, such as with:git ls-files --other --exclude-standard --directory | egrep -v '/$'The -v to egrep means to only output lines that don't match the pattern, and the pattern matches any line that ends with a /.The return value of git status just tells you the exit code of git status, not if there are any modifications to be committed.If you want a more computer-readable version of the git status output, trygit status --porcelainSee the description of git status for more information about that.Sample use (script simply tests if git status --porcelain gives any output, no parsing needed):if [ -n ""$(git status --porcelain)"" ]; then   echo ""there are changes""; else   echo ""no changes"";fiPlease note that you have to quote the string to test, i.e. the output of git status --porcelain. For more hints about test constructs, refer to the Advanced Bash Scripting Guide (Section string comparison).If you are like me, you want to know if there are: 1) changes to existing files2) newly added files3) deleted filesand specifically do not want to know about 4) untracked files.This should do it:git status --untracked-files=no --porcelainHere's my bash code to exit the script if the repo is clean.  It uses the short version of the untracked files option:[[ -z $(git status -uno --porcelain) ]] && echo ""this branch is clean, no need to push..."" && kill -SIGINT $$;From the git source code there is a sh script which includes the following.require_clean_work_tree () {    git rev-parse --verify HEAD >/dev/null || exit 1    git update-index -q --ignore-submodules --refresh    err=0    if ! git diff-files --quiet --ignore-submodules    then        echo >&2 ""Cannot $1: You have unstaged changes.""        err=1    fi    if ! git diff-index --cached --quiet --ignore-submodules HEAD --    then        if [ $err = 0 ]        then            echo >&2 ""Cannot $1: Your index contains uncommitted changes.""        else            echo >&2 ""Additionally, your index contains uncommitted changes.""        fi        err=1    fi    if [ $err = 1 ]    then        test -n ""$2"" && echo >&2 ""$2""        exit 1    fi}This sniplet shows how its possible to use git diff-files and git diff-index to find out if there are any changes to previously known files. It does not however allow you to find out if a new unknown file has been added to the working tree.It's possible to combine git status --porcelain with a simple grep to perform the test.if git status --porcelain | grep .; then    echo Repo is dirtyelse    echo Repo is cleanfiI use this as a simple one-liner sometimes:# pull from origin if our repo is cleangit status --porcelain | grep . || git pull origin masterAdd -qs to your grep command to make it silent."
"You have to do:git commit -m ""$desc""In the current script, test is going as commit message and commit and script are being treated as next arguments.Here's a merge of the last two answers - chaining together the add -u is awesome, but the embedded read command was causing me troubles. I went with (last line used for my heroku push, change to 'git push origin head' if that's your method):#!/bin/bashread -p ""Commit description: "" descgit add . && \git add -u && \git commit -m ""$desc"" && \git push heroku masterit is helpful to remove from the index the files that have actually been deleted.  git add -u takes care of this.  Also, you may want to consider chaining these commands together like this:git add . && \git add -u && \git commit -m ""$(read -p 'Commit description: ')"" && \git push origin HEADIf any command fails, it will stop evaluating the remaining commands.Just food for thought (untested food).Thanks!"
"The error""Failed to write reference 'refs/heads/master': a reference with that name already exists. (-4).""Can occur if you try switching from a local branch to the remote 'master' branch. Ensure that the 'master' you are switching to is the local one."
"Bus error indicates a memory problem; it could be as simple as a corrupted file on disk, a bug in the git program, or failing memory, memory controller, etc.If you can run a memory testing tool on your computer overnight, that would help rule out failing memory and controller. (You might also spot them with odd SIGBUS or SIGSEGV during large compiles, or random crashes of other programs...)Can you re-create the repository on the server from your laptop's clone, and see if it functions correctly? My guess is the repository is corrupted, and needs to be replaced with a good clone."
"Your Change-Id is missing. Examine your log message and make sure the Change-Id is the last line of your commit message.If you have copied to commit-msg hook, as you mentioned, and have done the git commit --amend the Change-Id should now be present in you commit message.You try to push a merge commit. These are not modified by the gerrit commit msg hook. However, the error message already suggests a valid ChangeId to use.remote: Suggestion for commit message:remote: Merge branch 'master' of ssh://s3.testing.com:29418/testing into masoudremote:remote: Change-Id: I12be02f75b42c4304591835dffe8d7e8aa01f761So, simple do agit commit --amendand insert the Change-Id above as last line in the commit message."
"You need to commit your changes before pulling:git rm -r --cached .git add .git commit -m 'Removed dir/.classpath'git pullDepending on the upstream commits, this could result in a merge conflict. If you get a ""modified/deleted"" merge conflict in dir/.classpath, you will need to remove it again before committing the merge.git rm -r dir/.classpathgit commit # Commit the mergeEdit: Since you already committed your change, all you need to do is remove the untracked directory before pulling. You may want to make a backup first if you need the directory contents.rm -rf dir/.classpathgit pull"
"OK. The problem is your previous pull failed to merge automatically and went to conflict state. And the conflict wasn't resolved properly before the next pull. 1) Undo the merge and pull again.To undo a merge:git merge --abort  [Since git version 1.7.4] git reset --merge  [prior git versions]2) Resolve the conflict.3) Don't forget to add and commit the merge.4) git pull now should work fine.If you are sure that you already resolved all merge conflicts:rm -rf .git/MERGE*And error will disappear.I think it's worth mentioning that there are numerous scenarios in which the message You have not concluded your merge (MERGE_HEAD exists) could occur, because many people have probably arrived at this page after searching for said message. The resolution will depend on how you got there.git status is always a useful starting point.If you've already merged the contents to your satisfaction and are still getting this message, it could be as simple as doinggit add filegit commitBut again, it really depends on the situation. It's a good idea to understand the basics before attempting anything (same link Terence posted):Git - Basic Merge ConflictsBest approach is to undo the merge and perform the merge again. Often you get the order of things messed up. Try and fix the conflicts and get yourself into a mess.So undo do it and merge again.Make sure that you have the appropriate diff tools setup for your environment. I am on a mac and use DIFFMERGE. I think DIFFMERGE is available for all environments. Instructions are here: Install DIFF Merge on a MACI have this helpful resolving my conflicts: Git Basic-Merge-Conflicts"
"After a bit of googling, it turns out that the answer is to run the following:git config --global core.editor /usr/bin/vimThis could be a plugin or something in your .vimrc file. The best way to load vim in a safe mode for editing commit messages is to use:git config --global core.editor '/usr/bin/vim -f -u NONE'"
"Update September 2015 (6 years later)The last release of git-for-Windows (2.5.3) now includes:By configuring git config core.editor notepad, users can now use notepad.exe as their default editor.  Configuring git config format.commitMessageColumns 72 will be picked up by the notepad wrapper and line-wrap the commit message after the user edits it.See commit 69b301b by Johannes Schindelin (dscho).Original answerI just tested it with git version 1.6.2.msysgit.0.186.gf7512 and Notepad++5.3.1I prefer to not have to set an EDITOR variable, so I tried:git config --global core.editor ""\""c:\Program Files\Notepad++\notepad++.exe\""""# orgit config --global core.editor ""\""c:\Program Files\Notepad++\notepad++.exe\"" %*""That always gives:C:\prog\git>git config --global --edit""c:\Program Files\Notepad++\notepad++.exe"" %*: c:\Program Files\Notepad++\notepad++.exe: command not founderror: There was a problem with the editor '""c:\Program Files\Notepad++\notepad++.exe"" %*'.If I define a npp.bat including:""c:\Program Files\Notepad++\notepad++.exe"" %*and I type:C:\prog\git>git config --global core.editor C:\prog\git\npp.batIt just works from the DOS session, but not from the git shell.(not that with the core.editor configuration mechanism, a script with ""start /WAIT..."" in it would not work, but only open a new DOS window)Bennett's answer mentions the possibility to avoid adding a script, but to reference directly the program itself between simple quotes:git config --global core.editor \""'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin""Or if you are in a 64 bit system:git config --global core.editor \""'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin""But I prefer using a script (see below): that way I can play with different paths or different options without having to register again a git config.The actual solution (with a script) was to realize that:what you refer to in the config file is actually a shell (/bin/sh) script, not a DOS script.So what does work is:C:\prog\git>git config --global core.editor C:/prog/git/npp.batwith C:/prog/git/npp.bat:#!/bin/sh""c:/Program Files/Notepad++/notepad++.exe"" -multiInst ""$*""or#!/bin/sh""c:/Program Files/Notepad++/notepad++.exe"" -multiInst -notabbar -nosession -noPlugin ""$*""With that setting, I can do 'git config --global --edit' from DOS or Git Shell, or I can do 'git rebase -i ...' from DOS or Git Shell.Bot commands will trigger a new instance of notepad++ (hence the -multiInst' option), and wait for that instance to be closed before going on.Note that I use only '/', not \'. And I installed msysgit using option 2. (Add the git\bin directory to the PATH environment variable, but without overriding some built-in windows tools)The fact that the notepad++ wrapper is called .bat is not important.It would be better to name it 'npp.sh' and to put it in the [git]\cmd directory though (or in any directory referenced by your PATH environment variable).See also:How do I view ‰Û÷git diff‰Ûª output with visual diff program? for the general theoryHow do I setup DiffMerge with msysgit / gitk? for another example of external tool (DiffMerge, and WinMerge)Building on Darren's answer, to use Notepad++ you can simply do this (all on one line):On 32 bit OS:git config --global core.editor ""'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin""On 64 bit OSgit config --global core.editor ""'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin""Obviously the C:/Program Files/Notepad++/notepad++.exe part should be the path to the Notepad++ executable on your system. For example, on Windows 7 it's likely to be C:/Program Files (x86)/Notepad++/notepad++.exe . Thanks to the commenters for pointing this out.Works like a charm for me.Anyway, I've just been playing around with this and found the following to work nicely for me:git config --global core.editor ""'C:/Program Files/TextPad 5/TextPad.exe' -m""I don't think CMD likes single-quotes so you must use double quotes ""to specify the space embedded string argument"".Cygwin (which I believe is the underlying platform for Git's Bash) on the other hand likes both ' and ""; you can specify a CMD-like paths, using / instead of \, so long as the string is quoted i.e. in this instance, using single-quotes.The -m overrides/indicates the use of multiple editors and there is no need for a %* tacked on the end.Edit: After updating to vim 7.3, I've come to the conclusion that the cleanest and easiest way to do this is:Add Vim's main folder to your path (Right click on My Computer -> Properties -> Advanced -> Environment Variables)Run this:git config --global core.editor ""gvim --nofork '%*'""If you do it this way, then I am fairly sure it will work with cygwin as well. Original answer:Even with a couple of vim-related answers, I was having trouble getting this to work with gvim under Windows (while not using a batch file or %EDITOR% or cygwin).What I eventually arrived at is nice and clean, and draws from a few of the solutions here:git config --global core.editor \""'C:/Program Files/Vim/vim72/gvim.exe' --nofork '%*'""One gotcha that took me a while is these are not the Windows-style backslashes, they are normal forward slashes.Notepad++ works just fine, although I choose to stick with Notepad, -m, or even sometimes the built-in ""edit.""The problem you are encountering using Notepad++ is related to how git is launching the editor executable.  My solution to this is to set EDITOR to a batch file, rather than the actual editor executable, that does the following:start /WAIT ""E:\PortableApps\Notepad++Portable\Notepad++Portable.exe"" %*/WAIT tells the command line session to halt until the application exits, thus you will be able to edit to your heart's content while git happily waits for you.  %* passes all arguments to the batch file through to Notepad++.c:\src>echo %EDITOR%c:\tools\runeditor.batI also use Cygwin on Windows, but with gvim (as opposed to the terminal-based vim).To make this work, I have done the following:Created a one-line batch file (named git_editor.bat) which contains the following:""C:/Program Files/Vim/vim72/gvim.exe"" --nofork ""%*""Placed git_editor.bat on in my PATH.Set GIT_EDITOR=git_editor.batWith this done, git commit, etc. will correctly invoke the gvim executable.NOTE 1: The --nofork option to gvim insures that it blocks until the commit message has been written.NOTE 2: The quotes around the path to gvim is required if you have spaces in the path.NOTE 3: The quotes around ""%*"" are needed just in case git passes a file path with spaces.Wordpad! I'm happy using vim, but since I'm trying to introduce Git to the company I wanted something that we'd all have, and found that Wordpad seems to work okay (i.e. Git does wait until you're finished editing and close the window).git config core.editor '""C:\Program Files\Windows NT\Accessories\wordpad.exe""'That's using Git Bash on msysgit; I've not tried from the Windows command prompt (if that makes any difference).Thanks to the SO community ... and a little research I was able to get my favorite editor,  EditPadPro,to work as the core editor with msysgit 1.7.5.GIT and TortoiseGit v1.7.3.0 over WinXP SP3 ... Following the advice above I added the path to a bash script for the code editor ... git config --global core.editor c:/msysgit/cmd/epp.shHowever after several failed attempts at the above mentioned solutions ... I was finally able to get this working. Per EditPadPro's documentation, adding the '/newinstance' flag would allow the shell to wait for the editor input ....     The '/newinstance' flag was the key in my case  ... #!/bin/sh""C:/Program Files/JGsoft/EditPadPro6/EditPadPro.exe"" //newinstance ""$*""Vim/Gvim works well for me.>echo %EDITOR%c:\Vim\Vim71\vim.exeThis is the 1 symptom of greater issues. Notably that you have something setting TERM=dumb. Other things that don't work properly are the less command which says you don't have a fully functional terminal. It seems like this is most commonly caused by having TERM set to something in your global windows environment variables. For me, the issue came up when I installed Strawberry Perl some info about this is on the msysgit bug for this problem as well as several solutions.The first solution is to fix it in your ~/.bashrc by adding:export TERM=msysYou can do this from the Git BASH prompt like so:echo ""export TERM=msys"" >> ~/.bashrcThe other solution which ultimately is what I did because I don't care about Strawberry Perl's reasons for adding TERM=dumb to my environment settings is to go and remove the TERM=dumb as directed in this comment on the msysgit bug report.Control  Panel/System/Advanced/Environment  Variables... (or similar, depending on  your  version of Windows) is where  sticky environment variables are set  on Windows. By  default, TERM is not  set. If TERM is set in there, then you  (or one of the programs  you have  installed - eg. Strawberry Perl) has  set it. Delete that setting, and you   should be fine.Similarly if you use Strawberry Perl and care about the CPAN client or something like that, you can leave the TERM=dumb alone and use unset TERM in your ~/.bashrc file which will have a similar effect to setting an explicit term as above.Of course all the other solutions are correct that you can use git config --global core.editor $MYFAVORITEEDITOR to make sure that git uses your favorite editor when it needs to launch one for you.I had PortableGit 1.6 working fine but after upgrading to PortableGit-1.7 windows release had problems. Some of the git commands opens up Notepad++.exe fine but some don't, especially git rebase behaves differently. Problem is some commands run windows cmd process some use unix cmd process. I want to give startup attributes to Notepad++ editor so need to have a customized script. My solution is this.1) Create a script to run an appropriate text editor. Script looks weird but handles both windows and unix variation.c:/PortableGit/cmd/git-editor.bat#!/bin/sh#open a new instancefunction doUnix() {  ""c:\program files\notepad++\notepad++.exe"" -multiInst -nosession -notabbar $*  exit}doUnix $*:WINCALL""c:\program files\notepad++\notepad++.exe"" -multiInst -nosession -notabbar %*2) Set global core.editor variableScript was saved to git/cmd folder so its already in a gitconsole path, this is mandatory as full path may not work properly.git config --global core.editor ""git-editor.bat""Now I can run git commit -a and git rebase -i master commands. Give it a try if you have problems in Git windows tool.I use git on multiple platforms, and I like to use the same git settings on all of them. (In fact, I have all my configuration files under release control with git, and put a git repository clone on each machine.) The solution I came up with is this:I set my editor to giteditorgit config --global core.editor giteditorThen I create a symbolic link called giteditor which is in my PATH. (I have a personal bin directory, but anywhere in the PATH works.) That link point to my current editor of choice. On different machines and different platforms, I use different editors, so this means that I don't have to change my universal git configuration (.gitconfig), just the link that giteditor points to.Symbolic links are handled by every operating system I know of, though they may use different commands. For Linux, you use ln -s. For Windows, you use the cmd built-in mklink. They have different syntaxes (which you should look up), but it all works the same way, really.I've had difficulty getting git to cooperate with wordpad, KomodoEdit and pretty much every other editor I give it. Most open for editing, but git clearly doesn't wait for the save/close to happen. As a crutch, I've just been doing i.e.git commit -m ""Fixed the LoadAll method""to keep things moving. Tends to keep my commit messages a little shorter than they probably should be, but clearly there's some work to be done on the Windows version of git.The GitGUI also isn't that bad. It takes a little bit of orientation, but after that, it works fairly well.This is my setup to use Geany as an editor for git:git config --global core.editor C:/path/to/geany.batwith the following content in geany.bat :#!/bin/sh""C:\Program Files\Geany\bin\Geany.exe"" --new-instance ""$*""It works in both DOS console and msysgit.I use Cygwin on Windows, so I use:export EDITOR=""emacs -nw""The -nw is for no-windows, i.e. tell Emacs not to try and use X11.The Emacs keybindings don't work for me from a Windows shell, so I would only use this from a Cygwin shell... (rxvt recommended.)It seems as if Git won't find the editor if there are spaces in the path. So you will have to put the batch file mentioned in Patrick's answer into a non-whitespace path.I prefer to use emacs.  Getting it set up can be a little tricky.Download emacs and unpack it somewhere like c:\emacs.Run c:\emacs\bin\addpm.exe.  You need to right-click and ""Run as Administrator"" if you are using Windows Vista or above. This will put the executables in your path.Add (server-start) somewhere in your .emacs file. See the Emacs Windows FAQ for advice on where to put your .emacs file.git config --global core.editor emacsclientwGit will now open files within an existing emacs process.  You will have to run that existing process manually from c:\emacs\bin\runemacs.exe.I've just had the same problem and found a different solution. I was getting error: There was a problem with the editor 'ec'I've got VISUAL=ec, and a batch file called ec.bat on my path that contains one line:c:\emacs\emacs-23.1\bin\emacsclient.exe %*This lets me edit files from the command line with ec <filename>, and having visual set means most unixy programs pick it up too. Git seems to search the path differently to my other commands though -  when I looked at a git commit in ProcMon I saw it look in every folder on the path for ec and for ec.exe, but not for ec.bat. I added another environment variable  (GIT_EDITOR=ec.bat) and all was fine.I managed to get the environment version working by setting the EDITOR variable using quotes and /:EDITOR=""c:/Program Files (x86)/Notepad++/notepad++.exe""I'm using GitHub for Windows which is a nice visual option. But I also prefer the command line, so to make it work when I open a repo in a Git shell I just set the following:git config --global core.editor vimwhich works great.This works for Powershell and cmder-1.2 (when used with powershell). In ~/.gitconfig[core]    editor = 'c:/program files/sublime text 3/subl.exe' -wHow can I make Sublime Text the default editor for Git?Resurrecting an old thread, but I found a a beautifully simple solution posted here - although there may be a mistake in the path in which you have to copy over the ""subl"" file given by the author. I am running Win 7 x64 and I had to put the ""subl"" file in my /Git/cmd/ folder to make it work. It works like a charm though."
"What is a patch?A patch is little more (see below) than a series of instructions: ""add this here"", ""remove that there"", ""change this third thing to a fourth"".  That's why git tells you:The copy of the patch that failed is found in:c:/.../project2/.git/rebase-apply/patchYou can open that patch in your favorite viewer or editor, open the files-to-be-changed in your favorite editor, and ""hand apply"" the patch, using what you know (and git does not) to figure out how ""add this here"" is to be done when the files-to-be-changed now look little or nothing like what they did when they were changed earlier, with those changes delivered to you as a patch.A little moreA three-way merge introduces that ""little more"" information than the plain ""series of instructions"": it tells you what the original version of the file was as well.  If your repository has the original version, your git can compare what you did to a file, to what the patch says to do to the file.As you saw above, if you request the three-way merge, git can't find the ""original version"" in the other repository, so it can't even attempt the three-way merge.  As a result you get no conflict markers, and you must do the patch-application by hand.Using --rejectWhen you have to apply the patch by hand, it's still possible that git can apply most of the patch for you automatically and leave only a few pieces to the entity with the ability to reason about the code (or whatever it is that needs patching).  Adding --reject tells git to do that, and leave the ""inapplicable"" parts of the patch in rejection files.  If you use this option, you must still hand-apply each failing patch, and figure out what to do with the rejected portions.Once you have made the required changes, you can git add the modified files and use git am --continue to tell git to commit the changes and move on to the next patch.What if there's nothing to do?Since we don't have your code, I can't tell if this is the case, but sometimes, you wind up with one of the patches saying things that amount to, e.g., ""fix the spelling of a word on line 42"" when the spelling there was already fixed.In this particular case, you, having looked at the patch and the current code, should say to yourself: ""aha, this patch should just be skipped entirely!""  That's when you use the other advice git already printed:If you prefer to skip this patch, run ""git am --skip"" instead.If you run git am --skip, git will skip over that patch, so that if there were five patches in the mailbox, it will end up adding just four commits, instead of five (or three instead of five if you skip twice, and so on)."
"There are two types of repositories: bare and non-bareBare repositories do not have a working copy and you can push to them. Those are the types of repositories you get in Github! If you want to create a bare repository, you can usegit init --bareSo, in short, you can't push to a non-bare repository (Edit: Well, you can't push to the currently checked out branch of a repository. With a bare repository, you can push to any branch since none are checked out. Although possible, pushing to non-bare repositories is not common). What you can do, is to fetch and merge from the other repository. This is how the pull request that you can see in Github works. You ask them to pull from you, and you don't force-push into them.Update: Thanks to VonC for pointing this out, in the latest git versions (currently 2.3.0), pushing to the checked out branch of a non-bare repositories is possible. Nevertheless, you still cannot push to a dirty working tree, which is not a safe operation anyway.I solved this problem by first verifying the that remote did not have anything checked out (it really was not supposed to), and then made it bare with:$ git config --bool core.bare trueAfter that git push worked fine.SummaryYou cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. But you can push to any other branch of the same repository.As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.Autopsy of the problemWhen a branch is checked out, committing will add a new commit with the current branch's head as its parent and move the branch's head to be that new commit.SoA ‰ ê B    ‰ Ô[HEAD,branch1]becomesA ‰ ê B ‰ ê C        ‰ Ô    [HEAD,branch1]But if someone could push to that branch inbetween, the user would get itself in what git calls detached head mode:A ‰ ê B ‰ ê X    ‰ Ô   ‰ Ô[HEAD] [branch1]Now the user is not in branch1 anymore, without having explicitly asked to check out another branch. Worse, the user is now outside any branch, and any new commit will just be dangling:      [HEAD]        ‰ Ò        C      ‰ ªA ‰ ê B ‰ ê X        ‰ Ô       [branch1]Hypothetically, if at this point, the user checks out another branch, then this dangling commit becomes fair game for Git's garbage collector.As there's already an existing repository, runninggit config --bool core.bare trueon the remote repository should sufficeFrom the core.bare documentationIf true (bare = true), the repository is assumed to be bare with no working directory associated. If this is the case a number of commands that require a working directory will be disabled, such as git-add or git-merge (but you will be able to push to it).This setting is automatically guessed by git-clone or git-init when the repository is created. By default a repository that ends in ""/.git"" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).TLDRPull & push again: git pull &&& git push.Still a problem? Push into different branch: git push origin master:foo and merge it on remote repo.Alternatively force the push by adding -f (denyCurrentBranch needs to be ignored).Basically the error means that your repository is not up-to-date with the remote code (its index and work tree is inconsistent with what you pushed).Normally you should pull first to get the recent changes and push it again.If won't help, try pushing into different branch, e.g.:git push origin master:foothen merge this branch on the remote repository back with master.If you changed some past commits intentionally via git rebase and you want to override repo with your changes, you probably want to force the push by adding -f/--force parameter (not recommended if you didn't do rebase). If still won't work, you need to set receive.denyCurrentBranch to ignore on remote as suggested by a git message via:git config receive.denyCurrentBranch ignorecd into the repo/directory that you're pushing into on the remote machine and enter$ git config core.bare trueMaybe your remote repo is in the branch which you want to push. You can try to checkout another branch in your remote machine. I did this, than these error disappeared, and I pushed success to my remote repo. Notice that I use ssh to connect my own server instead of github.com."
"Not sure as far as git on the COMMIT_EDITMSG when you're at this state.  As mentioned earlier, you may be able to see if vim saved it.  But my understanding is that vim's default is to delete the backup unless you've explicitly told it to keep them.  In addition, if you didn't want to have these files scattered all over your directories, you can specify a directory to put them in (you may have to manually create the directory first).Try adding the following two lines to your ~/.vimrc file: backup backupdir=~/.vim/backupManually create the ~/.vim/backup directory, then edit a file and exit.  You should see a copy of the file with a ""~"" at the end of the name in your backup dir.On a side note, if you're as lazy as I am, use "":x"" to exit vim instead of "":wq"".  The "":x"" does both a write and a quit."
"It's probably because your SSH key has been compromised. Make a new one and add it to your GitHub account.for me I simply had to add configure my git username and email with the following commands:git config --global user.email ""you@example.com""git config --global user.name ""Your Name""git-bash reports fatal: Unable to create '/.git/index.lock': File exists. Deleting index.lock makes the error go away.If you're running windows 7: I was trying to decide the best way to do this securely, but the lazy way is right-click the parent folder -> click the ""properties"" button -> click the ""security"" tab -> click the ""edit"" button - > click the group that starts with ""Users"" - > click the checkbox that says ""full control"" -> click all the OK's to close the dialogs. I realize this might circumvent windows ""security"" features, but it gets the job done.In my case a folder in my directory named as the git-repository on the server caused the failure.on win7 64:git-gui gives a good answer: a previous git has crashed and left a lock file. Manually remove.In my case, this was in .git/ref/heads/branchname.lock.delete, and error 128 goes away. It surprises that tortoisegit doesn't give such an easy explanation.In my case, it was because of the proxy. A proxy was needed in the corporate network and TortoiseGit / Git does not seems to automatically get information from Windows internet settings. Setting up the proxy address solved the issue.For me, I tried to check out a SVN-project with TortoiseGit. It worked fine if I used TortoiseSVN though. (May seem obvious, but newcomers may stumble on this one)I was having this same issue and I resolved it in the following way...I have the NVIDIA ""Tegra Android Development Pack"" installed and it seems to also have a version of mysysgit.exe with it. TortoiseGit automatically found that installation location (instead of the standard git installation) and auto-populated it in the settings menu.To correct this, go to: ""Settings -> General"" and there is a field for the path to mysysgit.exe. Make sure this is pointing to the correct installation.Deleting index.lock worked for meAn quick solution would be to create a new local directory for example c:\git_2014, In this directory rightklick and choose Git Clone"
"checking it out my colleagues have it instantly in placeThat is not possible: a hook can be put in source control (you simply copy the script in your git repo), but it cannot be ""automatically in place"" (active) on clone/checkout: that would be way too dangerous, depending on what the hook is actually doing.See also ""Git remote/shared pre-commit hook""You would still need to activate it, by adding a symlink (even on Windows) to the pre-commit hook present in the git repo."
"Looks like you have a corrupt tree object. You will need to get that object from someone else. Hopefully they will have an uncorrupted version.You could actually reconstruct it if you can't find a valid version from someone else by guessing at what files should be there. You may want to see if the dates & times of the objects match up to it. Those could be the related blobs. You could infer the structure of the tree object from those objects.Take a look at Scott Chacon's Git Screencasts regarding git internals. This will show you how git works under the hood and how to go about doing this detective work if you are really stuck and can't get that object from someone else.I had the same problem (don't know why).This fix requires access to an uncorrupted remote copy of the repository, and will keep your locally working copy intact, but you will lose the record of any commits that were not pushed, and will have to recommit them.  You will also lose any stashes.Execute these commands from the parent directory above your repo (replace 'foo' with the name of your project folder):Create a backup of the corrupt directory:cp -R foo foo-backupMake a new clone of the remote repository to a new directory:git clone git@www.mydomain.de:foo foo-newcloneDelete the corrupt .git subdirectory:rm -rf foo/.gitMove the newly cloned .git subdirectory into foo:mv foo-newclone/.git fooDelete the rest of the temporary new clone:rm -rf foo-newcloneOn Windows you will need to use:copy instead of cp -R rmdir /S instead of rm -rfmove instead of mvNow foo has its original .git subdirectory back, but all the local changes are still there. git status, commit, pull, push, etc. work again as they should.Your best bet is probably to simply re-clone from the remote repo (ie. Github or other).  Unfortunately you will lose any unpushed commits and stashed changes, however your working copy should remain intact.First make a backup copy of your local files.  Then do this from the root of your working tree:rm -fr .gitgit initgit remote add origin [your-git-remote-url]git fetchgit reset --mixed origin/mastergit branch --set-upstream-to=origin/master master  Then commit any changed files as necessary.Trygit stashThis worked for me.  It stashes anything you haven't committed and that got around the problem.I ran into this problem after my computer crashed while I was writing a commit message. After rebooting, the working tree was as I had left it and I was able to successfully commit my changes.However, when I tried to run git status I got thiserror: object file .git/objects/xx/12345 is emptyfatal: loose object xx12345 (stored in .git/objects/xx/12345 is corruptIn my case, unlike most of the other answers, I wasn't trying to recover any data. I just needed Git to stop complaining about the empty object file.tl;drThe ""object file"" is git's hashed representation of a real file that you care about. Git thinks it should have a hashed version of some/file.whatever stored in .git/object/xx/12345, and fixing the error turned out to be mostly a matter of figuring out which file the ""loose object"" was supposed to represent.DetailsPossible options seemed to beDelete the empty fileGet the file into a state acceptable to GitRestore the entire computer from a backup and redo the work. This would have taken about 90 minutes. In the end, I spent over 2 hours trying out solutions 1 and 2, so maybe that's what I should have done.Approach 1: Remove the object fileThe first thing I tried was just moving the object filemv .git/objects/xx/12345 ..That didn't work - git began complaining about a broken link. On to Approach 2Approach 2: Fix the fileLinus Torvalds has a great writeup of how to recover an object file that solved the problem for me. Key steps are summarized here.$> # Find out which file the blob object refers to$> git fsckbroken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8           to    blob xx12345missing blob xx12345$> git ls-tree 2d926...10064 blob xx12345  your_file.whateverThis tells you what file the empty object is supposed to be a hash of. Now you can repair it.$> git hash-object -w path/to/your_file.whateverAfter doing this I checked .git/objects/xx/12345, it was no longer empty, and git stopped complaining.I got this error after my (windows) machine decided to reboot itself.Thankfully my remote repo was up to date so I just did a fresh git-clone..In answer of @user1055643 missing the last step:$ rm -fr .git$ git init$ git remote add origin your-git-remote-url$ git fetch$ git reset --hard origin/master$ git branch --set-upstream-to=origin/master masterI just experienced this - my machine crashed whilst writing to the Git repo, and it became corrupted. I fixed it as follows.I started with looking at how many commits I had not pushed to the remote repo, thus:gitk &If you don't use this tool it is very handy - available on all operating systems as far as I know. This indicated that my remote was missing two commits. I therefore clicked on the label indicating the latest remote commit (usually this will be /remotes/origin/master) to get the hash (the hash is 40 chars long, but for brevity I am using 10 here - this usually works anyway).Here it is:14c0fcc9b3I then click on the following commit (i.e. the first one that the remote does not have) and get the hash there:04d44c3298I then use both of these to make a patch for this commit:git diff 14c0fcc9b3 04d44c3298 > 1.patchI then did likewise with the other missing commit, i.e. I used the hash of the commit before and the hash of the commit itself:git diff 04d44c3298 fc1d4b0df7 > 2.patchI then moved to a new directory, cloned the repo from the remote:git clone git@github.com:username/repo.gitI then moved the patch files into the new folder, and applied them and committed them with their exact commit messages (these can be pasted from git log or the gitk window):patch -p1 < 1.patchgit commitpatch -p1 < 2.patchgit commitThis restored things for me (and note there's probably a faster way to do it for a large number of commits). However I was keen to see if the tree in the corrupted repo can be repaired, and the answer is it can. With a repaired repo available as above, run this command in the broken folder:git fsck You will get something like this:error: object file .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390d is emptyerror: unable to find ca539ed815fefdbbbfae6e8d0c0b3dbbe093390derror: sha1 mismatch ca539ed815fefdbbbfae6e8d0c0b3dbbe093390dTo do the repair, I would do this in the broken folder:rm .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390dcp ../good-repo/.git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390d .git/objects/ca/539ed815fefdbbbfae6e8d0c0b3dbbe093390di.e. remove the corrupted file and replace it with a good one. You may have to do this several times. Finally there will be a point where you can run fsck without errors. You will probably have ""dangling commit"" and ""dangling blob"" lines in the report, these are a consequence of your rebases and amends in this folder, and are OK. The garbage collector will remove them in due course.Thus (at least in my case) a corrupted tree does not mean unpushed commits are lost.I had this same problem in my bare remote git repo. After much troubleshooting, I figured out one of my coworkers had made a commit in which some files in .git/objects had permissions of 440 (r--r-----) instead of 444 (r--r--r--). After asking the coworker to change the permissions with ""chmod 444 -R objects"" inside the bare git repo, the problem was fixed.Runnning git stash; git stash pop fixed my problemI followed many of the other steps here; Linus' description of how to look at the git tree/objects and find what's missing was especially helpful. git-git recover corrupted blobBut in the end, for me, I had loose/corrupt tree objects caused by a partial disk failure, and tree objects are not so easily recovered/not covered by that doc.In the end, I moved the conflicting objects/<ha>/<hash> out of the way, and used git unpack-objects with a pack file from a reasonably up to date clone. It was able to restore the missing tree objects.Still left me with a lot of dangling blobs, which can be a side effect of unpacking previously archived stuff, and addressed in other questions hereI was getting a corrupt loose object error as well../objects/x/xI successfully fixed it by going into the directory of the corrupt object. I saw that the users assigned to that object was not my git user's. I don't know how it happened, but I ran a chown git:git on that file and then it worked again.This may be a potential fix for some peoples' issues but not necessary all of them."
"git rm or git rm --cached isn't enough to remove that file fir the history stored in your repo.You need to:use BFG Repo Cleaner, as suggested above.bfg --strip-blobs-bigger-than 1M  my-repo.gituse git gc --agrressive --prune=now (after BFG), as detailed in ""Reduce git repository size""git push -f to force the new history on your remote repo.The message contains information about two files. var/log/system.log generates a warning but it would be pushed. var/report/752246136671 is too large and thus prevents the push. You thus have to delete at least the latter file.Before Github will let you push, you'll have to remove the file from all commits you want to push. It is not enough to just delete the file in a later commit after having it added before.According to the article linked in the message, you can perform one of the two recommended operations:If you have added the file in the most recent commit, you can change it to remove the file:git rm --cached var/report/752246136671# Stage our giant file for removal, but leave it on diskgit commit --amend -CHEAD# Amend the previous commit with your change# Simply making a new commit won't work, as you need# to remove the file from the unpushed history as wellgit push# Push our rewritten, smaller commitOr you can use The BFG to filter your repository and remove the file from all commits. This is required if you have added the file in the git history (as opposed to only in your most recent commit), you have to clean your history. Github will not allow to push the large file in any commit even if it is later removed again. This is because in this case, the file will still be part of the history and will thus bloat the repo.You can install The BFG from https://github.com/rtyley/bfg-repo-cleaner/releases/latest.The you can remove any indication of any files larger than 100MB by running this command:cd /path/to/your/git/repojava -jar bfg.jar --strip-blobs-bigger-than 100M# Git history will be cleaned - files in your latest commit will *not* be touchedNote that this will change history of your repository, leading to a potential force-push. You might thus have to coordinate with your fellow developers.Also, if you still need the file, you should make a backup before as you won't be able to restore it from git.The problem at hand is that while you have removed the relevant files using new commits, there are blobs corresponding to the older commits for the same files in you repo, and the size of 2 of these objects is throwing you a warning and an error. To be able to push again, you need to remove the same as well.While bfg-repo should work for most people to rectify the situation here, it requires java to be installed and configured on the system and that is not always available.You have 2 files var/log/system.log and var/report/752246136671 which exceed the limit, so I would suggest using filter-branch for removing them for a git only solution:git filter-branch --index-filter 'git rm --cached --ignore-unmatch var/log/system.log var/report/752246136671' --tag-name-filter cat -- --allYou might need to force push the changes later (using git push -f origin).In general, it is a good practice to ignore the *.log, *.info and other log files from the git repo completely by using a *.log  entry in your .gitignore file. You can similarly ignore the var/reports folder. In case there are files which have already been committed to the repo and pushed earlier, you might need to use git rm --cached ""*.log"" to remove the same and commit those changes to untrack them permanently.PS: This seems like a magento/joomla installation to me, in that case ignore the var folder completely in your .gitignore, you don't want objects from var/cache or var/session etc to be tracked in the repo."
"TL;DRGit doesn't really store history the way you think it does. It calculates history at run-time based on an ancestor chain. If your ancestry is missing blobs, trees, or commits then you may not be able to fully recover your history.Restore Missing Objects from BackupsThe first thing you can try is to restore the missing items from backup. For example, see if you have a backup of the commit stored as .git/objects/98/4c11abfc9c2839b386f29c574d9e03383fa589. If so you can restore it.You may also want to look into git-verify-pack and git-unpack-objects in the event that the commit has already been packed up and you want to return it to a loose object for the purposes of repository surgery.Surgical ResectionIf you can't replace the missing items from a backup, you may be able to excise the missing history. For example, you might examine your history or reflog to find an ancestor of commit 984c11abfc9c2839b386f29c574d9e03383fa589. If you find one intact, then:Copy your Git working directory to a temporary directory somewhere.Do a hard reset to the uncorrupted commit.Copy your current files back into the Git work tree, but make sure you don't copy the .git folder back!Commit the current work tree, and do your best to treat it as a squashed commit of all the missing history.If it works, you will of course lose the intervening history. At this point, if you have a working history log, then it's a good idea to prune your history and reflogs of all unreachable commits and objects.Full Restores and Re-InitializationIf your repository is still broken, then hopefully you have an uncorrupted backup or clone you can restore from. If not, but your current working directory contains valid files, then you can always re-initialize Git. For example:rm -rf .gitgit initgit add .git commit -m 'Re-initialize repository without old history.'It's drastic, but it may be your only option if your repository history is truly unrecoverable. YMMV."
"You can use git mv:git mv -f File fileGit has a configuration setting that tells it whether to be case sensitive or insensitive: core.ignorecase. To tell Git to be case-senstive, simply set this setting to false:git config core.ignorecase falseDocumentationFrom the git config documentation:core.ignorecaseIf true, this option enables various workarounds to enable git to work better on filesystems that are not case sensitive, like FAT. For example, if a directory listing finds makefile when git expects Makefile, git will assume it is really the same file, and continue to remember it as Makefile.The default is false, except git-clone(1) or git-init(1) will probe and set core.ignorecase true if appropriate when the repository is created.Case-insensitive file-systemsThe two most popular operating systems that have case-insensitive file systems that I know of areWindowsOS XThis is what I did on OS X:git mv File file.tmpgit mv file.tmp fileTwo steps because otherwise I got a ‰ÛÏfile exists‰Ûù error. Perhaps it can be done in one step by adding --cached or such.Under OSX, to avoid this issue and avoid other problems with developing on a case-insensitive filesystem, you can use Disk Utility to create a case sensitive virtual drive / disk image.Run disk utility, create new disk image, and use the following settings (or change as you like, but keep it case sensitive):Make sure to tell git it is now on a case sensitive FS:git config core.ignorecase false"
"You've created a new repository and added some files to the index, but you haven't created your first commit yet.  After you've done: git add a_text_file.txt ... do: git commit -m ""Initial commit.""... and those errors should go away.The quick possible answer: When you first successfully clone an empty git repository, the origin has no master branch. So the first time you have a commit to push you must do:git push origin masterWhich will create this new master branch for you. Little things like this are very confusing with git.If this didn't fix your issue then it's probably a gitolite-related issue:Your conf file looks strange. There should have been an example conf file that came with your gitolite. Mine looks like this:repo    phonegap                                                                                                                                                                               RW+     =   myusername otherusername                                                                                                                                               repo    gitolite-admin                                                                                                                                                                             RW+     =   myusername                                                                                                                                                               Please make sure you're setting your conf file correctly.Gitolite actually replaces the gitolite user's account with a modified shell that doesn't accept interactive terminal sessions. You can see if gitolite is working by trying to ssh into your box using the gitolite user account. If it knows who you are it will say something like ""Hi XYZ, you have access to the following repositories: X, Y, Z"" and then close the connection. If it doesn't know you, it will just close the connection.Lastly, after your first git push failed on your local machine you should never resort to creating the repo manually on the server. We need to know why your git push failed initially. You can cause yourself and gitolite more confusion when you don't use gitolite exclusively once you've set it up."
"What you are seeing means that automatic merge could not resolve the conflicts in the files. You need to resolve these conflicts manually. Run git mergetool or git gui.The ""git merge"" command tries to incorporate changes from another branch onto the present branch. If the merge is clean, meaning no conflicts, it will commit. Since your merge did have conflicts, it didn't commit. You need to resolve the conflict.Pulling the copy from the upstream repo is one way to do that - by accepting the upstream repo's version. You can do that within git using ""git checkout --theirs conflicting_file.txt""Editing the file to get it into the shape you want is another way.Once it's fixed, you need to add using ""git add conflicting_file.txt"" then commit. Then your working copy is clean and ready for more hacking. Good luck.In Git  there are cases merge refuses to even start in order to protect your local changes.  This may happen in two cases:You have uncommitted changes in you repository that conflict with merge.  The git will refuse to do a merge with the following message:error: Your local changes to the following files would be overwritten by merge:åÊåÊåÊåÊåÊåÊåÊåÊfooPlease, commit your changes or stash them before you can merge.AbortingThen you have to either commit the changes first (git commit -a or git add + git commit), or stash them away with git stash save.You are in the middle of some unfinished merge-y operation. There was some conflict, for exampleAuto-merging fooCONFLICT (content): Merge conflict in fooAutomatic merge failed; fix conflicts and then commit the result.and you have not finished resolving conflicts (by editing files and marking them as resolved with git add, or using some graphical merge tool via git mergetool) and didn't create a final merge commit with git commit -a, or aborted the merge with git reset --hard (NOTE: this will discard all you changes, and you will loose work done on resolving conflicts!!!).Or you have just run second git merge too fast, or used git merge instead of git commit to create a merge commit.error: 'merge' is not possible because you have unmerged files.hint: Fix them up in the work tree,hint: and then use 'git add/rm ' ashint: appropriate to mark resolution and make a commit,hint: or use 'git commit -a'.fatal: Exiting because of an unresolved conflict.Resolve conflicts as described e.g. in old Fun with completing a merge article by Junio C Hamano and finalize a merge with git commit, or discard a merge, or stash it away.  Then if you meant to create this second merge, you can do it.Sidenote: by default git-aware shell prompt shows if you are in the middle of merge, rebase or applying patches (git am operation).  You can also configure it to show if the working directory is dirty (different from latest version, i.e. HEAD).After you've resolved a merge, you need to use git add to add the files you've changed to the index, and then commit (like the message says). This says to git ""Yes, I really do want to make these changes"".Remember, always use git add before committing (either normally or committing a merge), if you're using the command line interface. Frontends like magit can streamline this for you so you don't have to worry about typing ""git add"" every time."
"Pushing with --no-thin argument works as a workaround for me:git push --no-thin omnigerrit HEAD:refs/for/android-4.4Are you using git > 1.8.4.2 ?I found incompatibility between git 1.8.4.3+ and gerrit 2.6, because ofhttps://github.com/git/git/commit/fbd4a7036dfa71ec89e7c441cef1ac9aaa59a315With this enhancement, if git finds out that the tree sha1 already exists in the server, it wont send it again, but gerrit wants to search the tree sha1 associated with the commit sha1 in the uploaded pack.It looks like I cannot reproduce it with gerrit 2.8-rc3, not with latest version of scm-manager. I would say this has been resolved in jgit, but cannot find which version yet.I just encountered this error as well.For my scenario, I was attempting to push an amended commit where none of the files had changed since the last time the same commit was pushed.  I literally had just amended the commit message for the change, and attempted to push again.  No files as part of the commit changed.My push was rejected with the same error message you posted.It seemed that Gerrit did not like a push with no changes other than the amended commit message.I literally made a one character change to a file, added the file, amended the commit again, and pushed, and the push succeeded.I'm using git == 1.8.4.2my caseI also encounter this problem too, and this take a long time to fix this problem.First, I notice one error info in gerrit log:Internal server error (user newptone account 1) during git-receive-pack                           '/neutron.git' com.google.gerrit.sshd.BaseCommand$Failure: fatal: Unpack error,   check server log......... Missing unknown 613fd2557fba30aff2dbd51c3807cc57561bab08What is 613fd2557fba30aff2dbd51c3807cc57561bab08 object?Then I use git review -l to search all opened patchset for this project neutron:1974  master  Add two interfaces for manipulate forwarding individuallyThen I find this patchset in gerrit dashboard by searching, I click the link and it seems error:613fd2557fba30aff2dbd51c3807cc57561bab08 cannot  foundAha, that's the reason!But why this object missing?The reason is my colleague tell me neutron project will use a new repo to replace the old, I delete the the old repo but didn't close all open patchset in gerrit. The open patchset will disappear in gerrit dashboard, but it still exist in gerrit database.how to fix itLogin in your reviewdb sql and find this record:First, make sure this is the one we want to modify:select * from changes where change_id=1974\G;Then update this record:update changes set open='N',status='A' where change_id=1974;I encountered this issue today and I was not using git > 1.8.4.2. I am on Gerrit 2.7.After around 5 minutes of frustration, I decided to just switch to the local version of the branch I was trying to push to and I did a pull. After that, my pushes started working again but I do not understand why.I just come with this issue just now,and my case is:Some one git init and push a whole new branch (that is to say,this branch is no relation with any revision in origin git in gerrit) to a git project in gerrit.I try many way but fail.In the end I am inspired by the answer of @obuseme ,follow this and fixed:git remote add gerrit GERRIT_GIT_PROJECT_URLgit fetch gerritAnd then upload again."
"As the error message says: git pull before you try to git push. Apparently your local branch is out of sync with your tracking branch.Depending on project rules and your workflow you might also want to use git pull --rebase.Try this: git push -f origin masterI've just received this error.I created a github repository after creating my local git repository so I needed to accept the changes into local before pushing to github. In this case the only change was the readme file created as optional step when creating github repository.git pull https://github.com/*username*/*repository*.git masterrepository URL is got from here on project github page : I then re-initialised (this may not be needed)git initgit add .git commit -m ""update""Then push : git pushIf git pull does not help, then probably you have pushed your changes (A) and after that had used git commit --amend to add some more changes (B). Therefore, git thinks that you can lose the history - it interprets B as a different commit despite it contains all changes from A.             B            /        ---X---AIf nobody changes the repo after A, then you can do git push --force.However, if there are changes after A from other person:             B            /        ---X---A---Cthen you must rebase that persons changes from A to B (C->D).             B---D            /        ---X---A---Cor fix the problem manually. I didn't think how to do that yet.Try this command: ""git pull origin master""It worked for me.Check this link: https://help.github.com/articles/dealing-with-non-fast-forward-errorsi had created new repo in github and i had the same problem, but it also had problem while pulling,  so this worked for me.but this is not advised in repos that already have many codes as this  could mess up everythinggit push origin master --force! [rejected]        master -> master (non-fast-forward)Don‰Ûªt panic, this is extremely easy to fix. All you have to do is issue a pull and your branch will be fast-forward:$ git pull myrepo masterThen retry your push and everything should be fine:$ git push github masterThe only i was able to resolve this issue was to delete the local and git repo and create the same again at both ends. Works fine for now.You need to do git branchif the output is something like:* (no branch)masterthen dogit checkout masterMake sure you do not have any pending commits as checking out will lose all non-committed changes.I had this problem on a development machine. The dev branch was pushing fine but thethe master branch gave me (while git pushing when being on the dev branch):! [rejected]        master -> master (non-fast-forward)So I tried:git checkout mastergit pullWhich gave me:You asked me to pull without telling me which branch youwant to merge with, and 'branch.master.merge' inyour configuration file does not tell me, either.I found out the master branch was missing from .git/config and added:[branch ""master""]    remote = origin    merge = refs/heads/masterAfterwards git push also worked fine on the dev branch."
"When you push to an empty repository you must set on checkbox ""Push current branch to alternative branch"" and choose master as that alternative.It's because master is not created yet (repo is really empty). But doing this way you can pretend to initialize the repository.While that checkbox is off and repository is empty, IDEA can't push, because its interface must be safe and he will not just create new brach if the one in which you pushed last accidentally disappeared (or just not exist). You must force that ""branch creation""I've resolved this with turning on checkbox ""Push current branch to alternative branch"". Not sure, but we need this for first push to new branch as it have status as 'untracked'.In my case, after setting up my remote repository, I simply made a fetch and then the push worked just fine."
"By default git revert refuses to revert a merge commit as what that actually means is ambiguous. I presume that your HEAD is in fact a merge commit.If you want to revert the merge commit, you have to specify which parent of the merge you want to consider to be the main trunk, i.e. what you want to revert to.Often this will be parent number one, for example if you were on master and did git merge unwanted and then decided to revert the merge of unwanted. The first parent would be your pre-merge master branch and the second parent would be the tip of unwanted.In this case you could do:git revert -m 1 HEADSay the other guy created bar on top of foo, but you created baz in the meantime and then merged, giving a history of$ git lola*   2582152 (HEAD, master) Merge branch 'otherguy'|\  | * c7256de (otherguy) bar* | b7e7176 baz|/  * 9968f79 fooNote: git lola is a non-standard but useful alias.No dice with git revert:$ git revert HEADfatal: Commit 2582152... is a merge but no -m option was given.Charles Bailey gave an excellent answer as usual. Using git revert as in$ git revert --no-edit -m 1 HEAD[master e900aad] Revert ""Merge branch 'otherguy'"" 0 files changed, 0 insertions(+), 0 deletions(-) delete mode 100644 bareffectively deletes bar and produces a history of$ git lola* e900aad (HEAD, master) Revert ""Merge branch 'otherguy'""*   2582152 Merge branch 'otherguy'|\  | * c7256de (otherguy) bar* | b7e7176 baz|/  * 9968f79 fooBut I suspect you want to throw away the merge commit:$ git reset --hard HEAD^HEAD is now at b7e7176 baz$ git lola* b7e7176 (HEAD, master) baz| * c7256de (otherguy) bar|/  * 9968f79 fooAs documented in the git rev-parse manual<rev>^, e.g. HEAD^, v1.5.1^0  A suffix ^ to a revision parameter means the first parent of that commit object. ^<n> means the n-th parent (i.e. <rev>^ is equivalent to <rev>^1). As a special rule, <rev>^0 means the commit itself and is used when <rev> is the object name of a tag object that refers to a commit object.so before invoking git reset, HEAD^ (or HEAD^1) was b7e7176 and HEAD^2 was c7256de, i.e., respectively the first and second parents of the merge commit.Be careful with git reset --hard because it can destroy work."
"Every clone has full history. So anyone who worked on that project since the commit was published should have it on their computer. So look whether anyone's working directory knows about the commit. Than add it's the packs and objects (content of the .git/objects directory) to the broken repository (only files that don't exist), fsck again and repack.It's not possible to reconstruct the object if you don't find it anywhere."
"If you enabled two-factor authentication in your Github account you  won't be able to push via HTTPS using your accounts password. Instead  you need to generate a personal access token. This can be done in the  application settings of your Github account. Using this token as your  password should allow you to push to your remote repository via HTTPS.  Use your username as usual.https://help.github.com/articles/https-cloning-errors#provide-access-token-if-2fa-enabledYou may also need to update the origin for your repository if set to https: git remote -v git remote remove origin git remote add origin git@github.com:user/repo.gitFirst, you can make sure to use the proper url:git remote set-url origin https://github.com/zkirkland/Random-Python-Tests.gitThen, if it was working before, and if it wasn't asking for you username, it must be because you had stored your credentials (login/password) in a $HOME/.netrc file, as explained here. You can double-check those settings, and make sure that your proxy, if you have one, hasn't changed.If that still doesn't work, you can switch to an ssh url:git remote set-url origin git@github.com:zkirkland/Random-Python-Tests.gitBut that means you have published your ssh public key in your Account settings.I know this is an old question, but I was having the same annoying issue, and maybe this pinpoints the problem and will help other people. I think that for some reason GitHub is expecting the URL to NOT have subdomain www. When I use (for example)git remote set-url origin https://www.github.com/name/repo.gitit gives the following messages:remote: Anonymous access to name/repo.git deniedfatal: Authentication failed for https://www.github.com/name/repo.gitHowever, if I usegit remote set-url origin https://github.com/name/repo.gitit works perfectly fine. Doesn't make too much sense to me... but I guess remember not to put www in the remote URL for GitHub repositories.Also notice the clone URLs provided on the GitHub repository webpage doesn't include the www.I had the same problem. I set url in that way:git remote set-url origin https://github.com/zkirkland/Random-Python-Tests.gitI also removed from config file this entry: askpass = /bin/echo.Then ""git push"" asked me for username and password and this time it worked.This worked for me, and it also remembers my credentials:Run gitbashPoint to the repo directoryRun git config --global credential.helper wincredI'm not really sure what I did to get this error, but doing:git remote set-url origin https://...didn't work for me. However:git remote set-url origin git@bitbucket.org:user/reposomehow worked."
"Try git fetch so that your local repository gets all the new info from github. It just takes the information about new branches and no actual code. After that the git checkout should work fine.I got this error for a branch that was remote and had no local tracking branch. Even though I'm certain I've checked out remote branches via a simplegit checkout feature/fooin the past, to get around this error I had togit checkout -t -b feature/foo origin/feature/fooI have no idea what I did to get myself into that situation either.I was getting following error when I tried to checkout new brancherror: pathspec 'BRANCH-NAME' did not match any file(s) known to git.When I tried git checkout origin/<BRANCH-NAME> it went to detached HEAD (detached from origin/)Did following to resolve the issuegit remote updategit fetch git checkout --track origin/<BRANCH-NAME>""error: pathspec 'foo' did not match any file(s) known to git.""This happenned to me when the full repo was not fetched.try:$ git fetchGit Windows users beware - without the --icase-pathspecs or GIT_ICASE_PATHSPECS = 1 env var setting, that git pathspecs will be case-sensitive, in which case git checkout origin/FooBranch ""Some/Path/To/File.txt""is not the same as git checkout origin/FooBranch ""some/path/to/file.Txt""I got this when I did the following:Used IntelliJ IDE, connected to gitCreated a new file, and added to gitRenamed the new fileWhen I tried to check in the directory, I got this error.To fix:I opened the repo in git extensions. I saw that the file (with the old name) was staged. But since it didnt exist anymore, it could not be committed.I simply unstaged this file. Then I re-added the file (this time correctly named) into git and committed without errors.If it happens on Windows, it is probably the filename case issue. I had this error today - I've created new file, added to GIT, then I changed one letter in filename from lower to upper and then I couldn't to anything - commit, revert, delete file from repo. The only solution I found was changing the filename again back to exact same case when I added this file to GIT, then doing GIT revert to remove this file from GIT, then changing filename again as I want. After those changes I could commit to repo and then push without any problem.None of these answers solved my issue:Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git log --format=onelineb9cc6a9078312865280fb5432a43e17eff03a5c6 Formatted README288772f36befe6bd60dd41b8185f1e24e0119668 Updated README documentationd2bdbe18f4169358d46fad50eacfb89786df3bf8 Version object v3.0.0-SNAPSHOTa46b1910a3f548b4fa254a6055d25f68d3f217dd VersionFactory is now Platform agnostic24179ae569ec7bd28311389c0a7a85ea7b4f9594 Added internal.Platform abstraction252b684417cf4edd71aed43a15da2c8a59c629a7 Added IPlugin implementation for Spongee3f8d21d6cf61ee4fc806791689c984c149b45e3 Added IPlugin implementation for Bukkitaeb403914310b4b10dee9e980cf64472e2bfda79 Refactored Version.javaef50efcff700c6438d57f70fac30846de2747a7e Refactored TesterFactorya20808065878d4d28657ae362235c837cfa8e625 Added IPlugin abstraction9712a3575a70060d7ecea8b62bb5e888fdc32d07 Heavily refactored Tester02d025788ae740dbfe3ef76a132cea8ca4e47467 Added generic Predicate<T> interface9c565777abea9be6767dfdab4ab94ed1173750dd Minor refactoring of testCompareTo()2ff2a28c221681e256dcff28770782736d3a796a Version object v2.0.1d4b2e2bd830f77cdbc2297112c2e46b6555d4393 Fix compareTo()05fe7e012b07d1a5b8de29804f96d9a6b24229a1 Make compareTo() fail6e85371414357a41c1fc0cec0e75adba92f96832 Fix VersionFactory passing nullc1fd1f032f87d860d5ed9d6f6679c9fa522cff8d Version object v2.062c3a92c008a2ed11f0a4d016080afc3541d0700 Version object v1.2c42e9e617128085e872c51b4d977a04e48d69e8f Deprecated, doc'd, future-proofed getNmNikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 3a796aerror: pathspec '3a796a' did not match any file(s) known to git.I was trying to go back and build the commit for Version object v2.0.1. Luckily, I got the idea to try the whole hash code and it worked ! Which means that I was using the wrong end of the hash code.Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 2ff2aNote: checking out '2ff2a'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example:  git checkout -b new_branch_nameHEAD is now at 2ff2a28... Version object v2.0.1Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version ((2ff2a28...))$As shown above, for partial hash codes, you must supply the front-end, not the back-end.If you deleted a folder and pulled/cloned again your repo, you may need to create your local branch again. Try: git checkout -b yourbranchnameIn my case I had renamed a file changing the case of the file, i.e.   SomeFile.js -> someFile.jsI think that was related to the problem.  Doing a git fetch didn't fix the issue.I moved the files out of my project, did a fetch, and did a push without them.  Then I did a fetch, added them back, and did a push, and it worked.  I don't know if all those steps were needed, but it did ultimately work.in my case I enter submodule directory without doing git submodule init git submodule updateSo git was linked to the parent folder that indeed missed that branch.On Windows OS by default git is instaled with core.ignorecase = trueThis means that git repo files will be case insensitive, to change this you need to execute:\yourLocalRepo> git config core.ignorecase falseyou can find this configuration on .git\config file$ cat .git/refs/heads/feature/user_controlled_site_layouts3af84fcf1508c44013844dcd0998a14e61455034Can you confirm that the following works:$ git show 3af84fcf1508c44013844dcd0998a14e61455034It could be the case that someone has rewritten the history and that this commit no longer exists (for whatever reason really).This can be caused when upstream rewrites history.When this happens, I toss all affected repos, clone them fresh from upstream, and use 'git format-patch' / 'git am' to ferry any work in progress from old world to new.When I have this issue I install a new version of git. If I can't do that from a binary package, I install it from source into my $HOME directory like this:mkdir $HOME/binexport version=1.7.10.3  wget http://git-core.googlecode.com/files/git-$version.tar.gz  tar zxf git-$version.tar.gz  cd git-$version  ./configure --prefix=$HOME  make && make install  echo ""export PATH=$HOME/bin:\$PATH"" >> ~/.bashrc  chmod +x ~/.bashrc      which git      git --versionthe last two lines are to verify.(updated with code from user FractalSpace - thanks!)I had this problem today i was trying to git checkout foo and got error: pathspec 'testing' did not match any file(s) known to git. turns out i was in the wrong repo.. So lesson learned check your repo before freaking out.Happened to me after renaming an uncommitted file in Android Studio.Git seemed to have the old version in its repository, even if it didnå«t exist anymore.fetch, pull, checkout, add all and so on did not help in my case!So I opened the Git GUI of TortoiseGit which showed me the exactly file which caused trouble.Afterwards I deleted the file from the repository withgit rm -r --cached /path/to/affected/fileand the problem was goneI faced a similar issue. What led me into this trouble was:I had multiple remote branches and I deleted the folder that had the code.I did a get pull. : git pull git@git.corp......Then I added remote repository : git remote add upstream git@git.corp.......Then I tried to change branch to some other branch say AAAA and I got errorerror: pathspec 'AAAA' did not match any file(s) known to git.After spending an hour I found a solution.I deleted the source folder again.Then I did a git pull :git pull git@git.corp......Then I changed branch before linking it to remote repository : git checkout AAAthen I added it to remote repositorygit remote add upstream git@git.corp......After this I can easily switch branches.Although this is not a standard way but it worked for me after I tried all of above options.I faced this problem last time, and the thing I have done is remove the folder (or source code) related to that branch.Ex: the branch origin/foo create folder foo at your local, so I just delete it and use git fetch $ checkout to get code back from remote.Or you can do it by create folder at local same as the branch you intended to checkout.Ex: create folder foo at local, after that, use Git command: git branch --set-upstream-to=origin/foo foo, that all. Use git pull to get code."
"It looks, that someone pushed new commits between your last git fetch and git push. In this case you need to repeat your steps and rebase my_feature_branch one more time.git fetchgit rebase feature/my_feature_branchgit push origin feature/my_feature_branchAfter the git fetch I recommend to examine situation with gitk --all.Probably you did not fetch the remote changes before the rebase or someone pushed new changes (while you were rebasing and trying to push). Try these steps:#fetching remote 'feature/my_feature_branch' branch to the 'tmp' local branch git fetch origin feature/my_feature_branch:tmp#rebasing on local 'tmp' branchgit rebase tmp#pushing local changes to the remotegit push origin HEAD:feature/my_feature_branch#removing temporary created 'tmp' branchgit branch -D tmp"
"If you are looking for suggestions on how to recover from this, see this thread: How do you restore a corrupted object in a git repository (for newbies)?Actually what you did with a new clone is probably the recommended way to fix it.  No sense doing something complex if you don't have to.  Those howtos are more for if you don't have the right version already in your working tree and don't have another clean copy.Anyway, I think you wanted to reset to your last commit before the power outage, move the corrupted object out of your .git/objects, and try again.  It looks like your tree might have been corrupted, which is why the howtos geared towards recovering blobs didn't help."
"I had the same problem when I stashed some work I was doing in order to do some last minute, urgent bug fixing.In order to overcome this situation, I did the following in Eclipse (note that I used Luna version):Right click on the Eclipse project -> Team -> Show in Repositories ViewFind the ""References"" folder in the Repositories View, right click it, then select the ""New Branch..."" option.Create a new branch with the stashed changes.Checkout the original branch on which you want to apply the stashMerge both branches and resolve conflicts the usual way."
"Okay, so. We can see from the second error message that the corrupt object which you moved was a commit. (HEAD was pointing to it!) Unfortunately, this means that it's hard to manually repair it. (By ""hard"" I mean likely impossible unless you can remember exactly what the commit message was and what time you made the commit.) Fortunately, this does mean that it's easy to resurrect a new commit with the same file contents - you'll just have to write a new message for it.Before you start, have a look at the contents of .git/HEAD - if it's a branch name, remember that for later.First, we need to figure out what the parent of this commit should've been. You can use git reflog to look at the reflog of HEAD, and find the SHA1 of where HEAD was just before you made commit 016660b. It should look something like this:016660b HEAD@{n}: commit: <subject of commit>1234abc HEAD@{n-1}: ...You can copy the SHA1 of the previous position of HEAD, and check out that commit:git checkout 1234abcThen you can read in the tree that your corrupted commit had:git read-tree 2c1033501b82e301d47dbf53ba0a199003af25a8And then commit!git commitNow, there's some question here about what should've happened to your branches. If HEAD was pointing to a branch (say master) which in turn pointed to the corrupted commit, we definitely want to fix that up:git branch -d master       # remove the original master branchgit checkout -b master     # recreate it hereIf there are other branches which contained the corrupted commit, you'll have to do some restoration on them too - let me know if you need help with that.I had the same problem. However, my problem was resolved with changing permissions of the .git/objects folders and subfolders (recursively) on server. Something like:chmod -R 770 .git/objectsI think that isn't your problem, but in my case it was resolved."
"As far as I can tell, GitHub does not provide shell access, so I'm curious about how you managed to log in in the first place.$ ssh -T git@github.comHi username! You've successfully authenticated, but GitHub does not provideshell access.You have to clone your repository locally, make the change there, and push the change to GitHub.$ git clone git@github.com:username/reponame.git$ cd reponame$ git mv README README.md$ git commit -m ""renamed""$ git push origin masterNote that, from March 15th, 2013, you can move or rename a file directly from GitHub:(you don't even need to  clone that repo, git mv xx and git push back to GitHub!)You can also move files to entirely new locations using just the filename field.  To navigate down into a folder, just type the name of the folder you want to move the file into followed by /.  The folder can be one that‰Ûªs already part of your repository, or it can even be a brand-new folder that doesn‰Ûªt exist yet!You can rename a file using git's mv command:$ git mv file_from file_toExample:$ git mv helo.txt hello.txt$ git status# On branch master# Changes to be committed:#   (use ""git reset HEAD <file>..."" to unstage)##   renamed:    helo.txt -> hello.txt#$ git commit -m ""renamed helo.txt to hello.txt""[master 14c8c4f] renamed helo.txt to hello.txt 1 files changed, 0 insertions(+), 0 deletions(-) rename helo.txt => hello.txt (100%)Do a git status to find out if your file is actually in your index or the commit. It is easy as a beginner to misunderstand the index/staging area. I view it as a 'progress pinboard'. I therefore have to add the file to the pinboard before I can commit it (i.e. a copy of the complete pinboard), I have to update the pinboard when required, and I also have to deliberately remove files from it when I've finished with them - simply creating, editing or deleting a file doesn't affect the pinboard. It's like 'storyboarding'.Edit: As others noted, You should do the edits locally and then push the updated repo, rather than attempt to edit directly on github.You've got ""Bad Status"" its because the target file cannot find or not present, like for example you call README file which is not in the current directory.I had a similar problem going through a tutorial.# git mv README README.markdownfatal: bad source, source=README, destination=README.markdownI included the filetype in the source file:# git mv README.rdoc README.markdownand it worked perfectly.  Don't forget to commit the changes with i.e.: # git commit -a -m ""Improved the README""Sometimes it is simple little things like that, that piss us off.  LOL"
"Thanks to Chris I was able to fix this by running the following:git filter-branch -f --index-filter 'git rm --cached --ignore-unmatch  pi/data/node-login.0'  git filter-branch -f --index-filter 'git rm --cached --ignore-unmatch  pi/data/node-login.1'git filter-branch -f --index-filter 'git rm --cached --ignore-unmatch  pi/data/local.0'git filter-branch -f --index-filter ""git rm -rf --cached --ignore-unmatch FOLDERNAME"" -- --allreplace FOLDERNAME with the file or folder you wish to remove from the given git repository."
"When you see this error outside of github, here's a remedy.Got this from:http://mapopa.blogspot.com/2009/10/git-insufficient-permission-for-adding.htmlssh me@myservercd repository/.gitsudo chmod -R g+ws *sudo chgrp -R mygroup *git config core.sharedRepository trueAfter this the git daemon should use the group file permissions when writing to .git/objects.Usually this problem is caused by wrong user and group permissions on your Git servers file-system. The git repository has to be owned by the user and also his group.Example:If your user is called ""git"", his group ""gitgroup"", and the location of the Git repo is: git@mygitserverxyz.com:path/to/repo.gitthen do a: sudo chown -R git:gitgroup path/to/repo.git/This fixed the git insufficient permission error for me.sudo chmod 777 -R .git/objectsNothing of the above worked for me. A couple of hours later I found the reason for the problem:I used a repo url of the typessh://git@example.com/~git/repo.gitUnfortunately I stored a putty session with the name example.com which was configured to login as user myOtherUser. So, while I thought git connects to the host example.com with the User 'git', Git/TortoiseGit has connected to the putty session example.com which uses the User myOtherUser. This leads to the exact same ..insufficient permission.. error (cause both users are in different groups).Solution: Rename the putty session example.com to myOtherUse@example.comchmod should be chown, so the correct line is:sudo chown -R gituser.gituser objectsOddly enough, I had this issue on one clone of the repo I had, but not another I had.  Aside from re-cloning the repo (which a coworker did to successfully get around this issue), I managed to do a ""git reset"" to the commit I had before the failures started.  Then I re-committed the changes, and I was able to push successfully after that.  So despite all the indications there was a problem on the server, in this case it apparently was indicative of some oddity in the local repo.This works:sudo chmod -R gituser.gituser objectsIf you still get this error later after setting the permissions you may need to modify your creation mask. We found our new commits (folders under objects) were still being created with no group write permission, hence only the person who committed them could push into the repository.We fixed this by setting the umask of the SSH users to 002 with an appropriate group shared by all users.e.g. umask 002where the middle 0 is allowing group write by default.After you add some stuff... commit them and after all finished push it! BANG!! Start all problems... As you should notice there are some differences in the way both new and existent projects were defined. If some other person tries to add/commit/push same files, or content (git keep both as same objects), we will face the following error:$ git pushCounting objects: 31, done.Delta compression using up to 2 threads.Compressing objects: 100% (17/17), done.Writing objects: 100% (21/21), 2.07 KiB | 0 bytes/s, done.Total 21 (delta 12), reused 0 (delta 0)remote: error: insufficient permission for adding an object to repository database ./objects  remote: fatal: failed to write objectTo solve this problem you have to have something in mind operational system's permissions system as you are restricted by it in this case. Tu understand better the problem, go ahead and check your git object's folder (.git/objects). You will probably see something like that:<your user_name>@<the machine name> objects]$ ls -latotal 200drwxr-xr-x 25 <your user_name> <group_name> 2048 Feb 10 09:28 .drwxr-xr-x  3 <his user_name> <group_name> 1024 Feb  3 15:06 ..drwxr-xr-x  2 <his user_name> <group_name> 1024 Jan 31 13:39 02drwxr-xr-x  2 <his user_name> <group_name> 1024 Feb  3 13:24 08*Note that those file's permissions were granted only for your users, no one will never can changed it... *Level       u   g   oPermission rwx r-x ---Binary     111 101 000Octal       7   5   0SOLVING THE PROBLEMIf you have super user permission, you can go forward and change all permissions by yourself using the step two, in any-other case you will need to ask all users with objects created with their users, use the following command to know who they are:$ ls -la | awk '{print $3}' | sort -u <your user_name><his user_name>Now you and all file's owner users will have to change those files permission, doing:$ chmod -R 774 .After that you will need to add a new property that is equivalent to --shared=group done for the new repository, according to the documentation, this make the repository group-writable, do it executing:$ git config core.sharedRepository grouphttps://coderwall.com/p/8b3ksgsudo su rootchown -R user:group dirThe dir is your git repo.Then do:git pull origin masterYou'll see changes about commits by others."
"You might want to set core.safecrlf to ""warn"", if you want only warning and not a fatal error.From ""git config"" mange page:core.safecrlfIf true, makes git check if converting CRLF is reversible when end-of-line conversion is active. Git will verify if a command modifies a file in the work tree either directly or indirectly.  For example, committing a file followed by checking out the same file should yield the original file in the work tree. If this is not the case for the current setting of core.autocrlf, git will reject the file.  The variable can be set to ""warn"", in which case git will only warn about an irreversible conversion but continue the operation.CRLF conversion bears a slight chance of corrupting data.  When it is enabled, git will convert CRLF to LF during commit and LF to CRLF during checkout.A file that contains a mixture of LF and CRLF before the commit cannot be recreated by git.  For text files this is the right thing to do: it corrects line endings such that we have only LF line endings in the repository.But for binary files that are accidentally classified as text the conversion can corrupt data.If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in .gitattributes.  Right after committing you still have the original file in your work tree and this file is not yet corrupted. You can explicitly tell git that this file is binary and git will handle the file appropriately.Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished.  In both cases CRLFs are removed in an irreversible way. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data.I prefer identifying the exact files or types of file I want to force the eol with .gitattributes files only (with core.eol settings, which you have), and leave autocrlf to false.In case of text fiels with mixed eol, this blog post suggests, for instance, to:If you have Notepad++ installed in your computer, simply follow these steps.Open the file that is having the Fatal issue.Click Edit -> EOL Conversion then select Windows Format or to any that you‰Ûªre having an issue committing.git config --global core.safecrlf false"
"So I solved this problem by creating another origin with exactly the same details as the first origin:git remote add origin2 git@github.com:manuweg/manuweg.github.com.gitI solved the error by deleting the origin and re-adding it. hope this helps.you should replace  and  with your information.git remote rm origingit remote add origin git@github.com:<username>/<applicationname>.git"
"It is possible that you are pushing several commits, one of them including a large file, and another more recent one removing that file.In any case, you can try, as explained in ""Fixing the ‰ÛÏthis exceeds GitHub‰Ûªs file size limit of 100 MB‰Ûù error"", a filter-branch (if you know the name/path of the large file that you can't see)git filter-branch --index-filter 'git rm --cached --ignore-unmatch e3384023be667de7529538b11c12ec68.201307290946.sql.gz' merge-point..HEADOr, if you don't know but want to get rid of any large file (say > 90MB), you can use the BFG repo cleanerbfg --strip-blobs-bigger-than 90M  my-repo.gitThat will track for you that elusive large file in your repo history and remove it.Note that you will have to do a git push --force after that, because the history of the more recent commits will have been modified.If others already cloned your repo before, a bit of communication is in order to warn them.In my case I fixed it with this link:http://git.io/iEPt8gNotice where it says giant_file (I didn't notice that)$ git filter-branch --force --index-filter \  'git rm --cached --ignore-unmatch giant_file' \  --prune-empty --tag-name-filter cat -- --all$ git commit --amend -CHEAD$ git push"
"Use MSysGit on the command line. For day to day use, IDE Git integration is overrated. You will have a history of what you did (no need to remember what menu item you chose or what button you pressed in the toolbar), piping, scriptability and tab completion. You get none of those benefits out of an ide integrated SCM tool.Also, using Git the way it was intended to be used, from the command line, you will find more help on line than you will for some other way."
"I just ran into this issue as well. I had been added to an existing project. I cloned it and committed a local change. I went to push and got the ERROR: Repository not found. error message. I realized that the person who added me only gave me read-only access to the repo. A quick email to him and I'm able to push. Check to see if you have read-write access.Good luck!I was getting the same errorERROR: Repository not found.   fatal: The remote end hung up unexpectedlyand I had created the repository on Github and cloned it locally.I was able to solve by opening .git/config and removing the [remote ""origin""] section.[remote ""origin""]      url = git@github.com:alexagui/my_project.git     fetch = +refs/heads/*:refs/remotes/origin/*then I ran the following (again)git remote add origin git@github.com:alexagui/my_project.git  git push -u origin masterand this time I was able to push to the repository.I ran into the same issue and I solved it by including my username and password in the repo url:git clone https://myusername:mypassword@github.com/path_to/myRepo.gitI got this error (but before was working). My problem was the missing ssh key binded with the Github account. You can check you current ssh keys with ssh-add -l.If your key is missing, you can add it with ssh-add ~/.ssh/your_keygit remote rm origingit remote add origin <remote url>Had similar issue. The root of the problem was that I followed some online tutorial about adding a new repository to Github. Just go to Github, create a new repo, it will ask you to add a README, don't add it. Create it, and you'll get instructions on how to push.It's similar to the next two lines:git remote add origin https://github.com/YOUR_USER/your-repo.gitgit push -u origin masterIf you belong to a group in Github check that you have Write Access.If you include your username and the repo name we can reasonably help you, at the moment we have no reason to think the repo does actually exist.Additionally, if the repo is private and you don't have access to it, github returns ""Does not exist"" to avoid disclosing the existance of private repos.EDIT: If you're not able to clone it because it's saying it doesn't exist and it's private, it's because you're not sending authentication. Ensure that your public key is added to your keyring, or use HTTP basic auth for the time being.Changing the content of the .git/config file helps as Alex said above. I experienced the same problem and I think it was because I changed my Github username. The local files could not be updated with the changes. So perhaps anytime you change your username you might consider running git remote add origin your_ssh_link_from_githubI hope this helps ;)I had the same problem. My issue was misunderstanding that I had to first create the empty repo on github before pushing to it. Doh! Including this here for anyone else who doesn't realize.You need to check your SSH access as the following: ssh -T git@github.comthis issue was because i don't add the person response on SSH in repository, read more about SSH link-1, link-2.Have experienced the same problem. Everything was working fine for years and then suddenly this error.The problem turns out was that I added a deploy key for another repo to my SSH agent before my user's github SSH key (which I always used to access the repo in question). SSH agent tried the deploy key for another repo first, and GitHub for some totally unexplainable reason was sayingERROR: Repository not found.Once I've removed the deploy key from SSH agent, everything was back to normal.I had this issue and realized I was using a different account from the one whose repo it was. Logging in as the original user resolved the issue.I had a similar problem.  The incorrect credentials were cached in OS X's key-chain.Check out: https://help.github.com/articles/updating-credentials-from-the-osx-keychain"
"Note Wording changed in response to the commments. Thanks @slekseThat is not an error, it is a warning. It means the branch you are about to delete contains commits that are not reachable from any of: its upstream branch, or HEAD (currently checked out revision). In other words, when you might lose commitså_.In practice it means that you probably amended, rebased or filtered commits and they don't seem identical. Therefore you could avoid the warning by checking out a branch that does contain the commits that you're about un-reference by deleting that other branch.å_ You will want to verify that you in fact aren't missing any vital commits:git log --graph --left-right --cherry-pick --oneline master...experimentThis will give you a list of any nonshared between the branches. In case you are curious, there might be a difference without --cherry-pick and this difference could well be the reason for the warning you get:--cherry-pick Omit any commit that introduces the same change as another commit on the ""other side"" when the set of commits are limited with symmetric difference. For example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with --left-right, like the example above in the description of that option. It however shows the commits that were cherry-picked from the other branch (for example, ""3rd on b"" may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output.å_ they're really only garbage collected after a while, by default. Also, the git-branch command does not check the revision tree of all branches. The warning is there to avoid obvious mistakes.å_ (My preference here is to just force the deletion instead, but you might want to have the extra reassurance).As Drew Taylor pointed out, branch deletion with -d only considers the current HEAD in determining if the branch is ""fully merged"".  It will complain even if the branch is merged with some other branch.  The error message could definitely be clearer in this regard...You can either checkout the merged branch before deleting, or just use git branch -D.  The capital -D will override the check entirely.I had this happen to me today, as I was merging my very first feature branch back into master. As some said in a thread elsewhere on SO, the trick was switching back to master before trying to delete the branch. Once in back in master, git was happy to delete the branch without any warnings.I tried sehe's answer and it did not work.To find the commits that have not been merged simply use:git log oldbranch ^newbranch --no-mergesGit is warning that you might lose history by deleting this branch. Even though it would not actually delete any commits right away, some or all of the commits on the branch would become unreachable if they are not part of some other branch as well.For the branch experiment to be ‰ÛÏfully merged‰Ûù into another branch, its tip commit must be an ancestor of the other branch‰Ûªs tip, making the commits in experiment a subset of the other branch. This makes it safe to delete experiment, since all its commits will remain part of the repository history via the other branch. It must be ‰ÛÏfully‰Ûù merged, because it may have been merged several times already, but now have commits added since the last merge that are not contained in the other branch.Git doesn‰Ûªt check every other branch in the repository, though; just two:The current branch (HEAD)The upstream branch, if there is oneThe ‰ÛÏupstream branch‰Ûù for experiment, as in your case, is probably origin/experiment. If experiment is fully merged in the current branch, then Git deletes it with no complaint. If it is not, but it is fully merged in its upstream branch, then Git proceeds with a warning seeming like:warning: deleting branch 'experiment' that has been mergedto 'refs/remotes/origin/experiment', but not yet merged toHEAD.Deleted branch experiment (was xxxxxxxx).Where xxxxxxxx indicates a commit id. Being fully merged in its upstream indicates that the commits in experiment have been pushed to the origin repository, so that even if you lose them here, they may at least be saved elsewhere.Since Git doesn‰Ûªt check other branches, it may be safe to delete a branch because you know it is fully merged into another one; you can do this with the -D option as indicated, or switch to that branch first and let Git confirm the fully merged status for you."
"When you ask to push tags, git push --tags sends (along with any commits and other objects needed and any other ref updates from the push settings) to the remote an update request of the form new-sha1 refs/tags/name.  (Well, it sends however many: one of those for each tag.)The update request is modified by the remote to add an old-sha1 (or again, one for each tag), then delivered to the pre-receive and/or update hooks (whichever hooks exist on the remote).  Those hooks can decide whether to allow or reject the tag create/delete/update.The old-sha1 value is the all-zeros ""null"" SHA-1 if the tag is being created.  The new-sha1 is the null SHA-1 if the tag is being deleted.  Otherwise both SHA-1 values are real, valid values.Even with no hooks, there's a sort of ""built-in hook"" that is also run: the remote will refuse to move a tag unless you use the ""force"" flag (though the ""built-in hook"" is always OK with both ""add"" and ""delete"").  The rejection message you're seeing is coming from this built-in hook.  (Incidentally, this same built-in hook also rejects branch updates that are not fast-forwards.)1But‰ÛÓhere's one of the keys to understanding what's going on‰ÛÓthe git push step has no idea whether the remote has that tag now, and if so, what SHA-1 value it has.  It only says ""here's my complete list of tags, along with their SHA-1 values"".  The remote compares the values and if there are additions and/or changes, runs the hooks on those.  (For tags that are the same, it does nothing at all.  For tags you don't have that they do, it also does nothing!)If you delete the tag locally, then push, your push simply does not transfer the tag.  The remote assumes no change should be made.If you delete the tag locally, then create it pointing to a new place, then push, your push transfers the tag, and the remote sees this as a tag-change and rejects the change, unless it's a force-push.Thus, you have two options:do a force-push, ordelete the tag on the remote.The latter is possible via git push2 even though deleting the tag locally and pushing has no effect.  Assuming the name of the remote is origin, and the tag you want it to delete is dev:git push origin :refs/tags/devThis asks the remote to delete the tag.  The presence or absence of the tag dev in your local repository is irrelevant; this kind of push, with :remoteref as a refspec, is a pure-delete push.The remote may or may not allow tag deletion (depending on any extra hooks added).  If it allows the deletion, then the tag will be gone, and a second git push --tags, when you have a local dev tag pointing to some commit or annotated tag repo object, send your new dev tag.  On the remote, dev will now be a newly created tag, so the remote will probably allow the push (again this depends on any extra hooks added).The force-push is simpler.  If you want to be sure not to update anything other than the tag, just tell git push to push only that one refspec:git push --force origin refs/tags/dev:refs/tags/dev(note: you don't need --tags if you're explicitly pushing just one tag ref-spec).1Of course, the reason for this built-in hook is to help enforce the behavior that other users of that same remote-repo expect: that branches are not rewound, and tags do not move.  If you force-push, you should let the other users know you are doing this, so that they can correct for it.  Note that ""tags don't move at all"" is newly enforced by git 1.8.2; previous versions would allow the tag to ""move forward"" in the commit graph, much like branch names.  See the git 1.8.2 release notes.2It's trivial if you can log in on the remote.  Just go to the git repository there and run git tag -d dev.  Note that either way‰ÛÓdeleting the tag on the remote, or using git push to delete it‰ÛÓthere's a period of time when anyone who accesses the remote will find that the dev tag is missing.In Mac SourceTree only deselect the Push all tags checkbox:The reason you are getting rejected is that your tag lost sync with the remote version. This is the same behaviour with branches.sync with the tag from the remote via git pull --rebase <repo_url> +refs/tags/<TAG> and after you sync, you need to manage conflicts.If you have a diftool installed (ex. meld) git mergetool meld use it to sync remote and keep your changes.The reason you're pulling with --rebase flag is that you want to put your work on top of the remote one so you could avoid other conflicts.Also, what I don't understand is why would you delete the dev tag and re-create it??? Tags are used for specifying software versions or milestones. Example of git tags v0.1dev, v0.0.1alpha, v2.3-cr(cr - candidate release) and so on..Another way you can solve this is issue a git reflog and go to the moment you pushed the dev tag on remote. Copy the commit id and git reset --mixed <commmit_id_from_reflog> this way you know your tag was in sync with the remote at the moment you pushed it and no conflicts will arise."
"Yes, the problem is that there are no commits in ""bare"".  This is a problem with the first commit only, if you create the repos in the order (bare,alice).  Try doing git push --set-upstream origin master.  This would only be required the first time.  Afterwards it should work normally.As Chris Johnsen pointed out, you would not have this problem if your push.default was customized.  I like upstream/tracking.If you: git push origin masterit will push to the bare repo.It sounds like your alice repo isn't tracking correctly.cat .git/configThis will show the default remote and branch.If you git push -u origin masterYou should start tracking that remote and branch. I'm not sure if that option has always been in git.git push --allis the canonical way to push everything to a new bare repository.Another way to do the same thing is to create your new, non-bare repository and then make a bare clone withgit clone --barethen usegit remote add origin <new-remote-repo>in the original (non-bare) repository.This related question's answer provided the solution for me... it was just a dumb mistake: Remember to commit first!http://stackoverflow.com/a/7572252If you have not yet committed to your local repo, there is nothing to push, but the Git error message you get back doesn't help you too much.Try this in your alice repository (before pushing):git config push.default trackingOr, configure it as the default for your user with git config --global ‰Û_.git push does default to the origin repository (which is normally the repository from which you cloned the current repository), but it does not default to pushing the current branch‰ÛÓit defaults to pushing only branches that exist in both the source repository and the destination repository.The push.default configuration variable (see git-config(1)) controls what git push will push when it is not given any ‰ÛÏrefspec‰Ûù arguments (i.e. something after a repository name). The default value gives the behavior described above.Here are possible values for push.default:nothingThis forces you to supply a ‰ÛÏrefspec‰Ûù.matching (the default)This pushes all branches that exist in both the source repository and the destination repository.This is completely independent of the branch that is currently checked out.upstream or tracking(Both values mean the same thing. The later was deprecated to avoid confusion with ‰ÛÏremote-tracking‰Ûù branches. The former was introduced in 1.7.4.2, so you will have to use the latter if you are using Git 1.7.3.1.)These push the current branch to the branch specified by its ‰ÛÏupstream‰Ûù configuration.  currentThis pushes the current branch to the branch of the same name at the destination repository.  These last two end up being the same for common cases (e.g. working on local master which uses origin/master as its upstream), but they are different when the local branch has a different name from its ‰ÛÏupstream‰Ûù branch:git checkout master# hack, commit, hack, commit# bug report comes in, we want a fix on master without the above commitsgit checkout -b quickfix origin/master  # ""upstream"" is master on origin# fix, commitgit pushWith push.default equal to upstream (or tracking), the push would go to origin‰Ûªs master branch. When it is equal to current, the push would go to origin‰Ûªs quickfix branch.The matching setting will update bare‰Ûªs master in your scenario once it has been established. To establish it, you could use git push origin master once.However, the upstream setting (or maybe current) seems like it might be a better match for what you expect to happen, so you might want to try it:# try it once (in Git 1.7.2 and later)git -c push.default=upstream push# configure it for only this repositorygit config push.default upstream# configure it for all repositories that do not override it themselvesgit config --global push.default upstream(Again, if you are still using a Git before 1.7.4.2, you will need to use tracking instead of upstream)."
"If git status reported the working directory clean, I'd bet you have an ignored file in your working directory that somebody else added to the remote repo. You could confirm that with git diff --stat your-branch remote-name/remote-branch and git ls-files -i --exclude-standard.The solution would be to remove the file from the ignore file (so git status shows it as an untracked file), stash it with the --include-untracked option, pull the changes from your remote, and apply the stash to merge your changes back in."
"Assuming the submodule's repository does contain a commit you want to use (unlike the commit that is referenced from current state of the super-project), there are two ways to do it.The first requires you to already know the commit from the submodule that you want to use. It works from the ‰ÛÏinside, out‰Ûù by directly adjusting the submodule then updating the super-project. The second works from the ‰ÛÏoutside, in‰Ûù by finding the super-project's commit that modified the submodule and then reseting the super-project's index to refer to a different submodule commit.Inside, OutIf you already know which commit you want the submodule to use, cd to the submodule, check out the commit you want, then git add and git commit it back in the super-project.Example:$ git submodule updatefatal: reference is not a tree: e47c0a16d5909d8cb3db47c81896b8b885ae1556Unable to checkout 'e47c0a16d5909d8cb3db47c81896b8b885ae1556' in submodule path 'sub'Oops, someone made a super-project commit that refers to an unpublished commit in the submodule sub. Somehow, we already know that we want the submodule to be at commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6c. Go there and check it out directly.Checkout in the Submodule$ cd sub$ git checkout 5d5a3ee314476701a20f2c6ec4a53f88d651df6cNote: moving to '5d5a3ee314476701a20f2c6ec4a53f88d651df6c' which isn't a local branchIf you want to create a new branch from this checkout, you may do so(now or later) by using -b with the checkout command again. Example:  git checkout -b <new_branch_name>HEAD is now at 5d5a3ee... quux$ cd ..Since we are checking out a commit, this produces a detached HEAD in the submodule. If you want to make sure that the submodule is using a branch, then use git checkout -b newbranch <commit> to create and checkout a branch at the commit or checkout the branch that you want (e.g. one with the desired commit at the tip).Update the Super-projectA checkout in the submodule is reflected in the super-project as a change to the working tree. So we need to stage the change in the super-project's index and verify the results.$ git add subCheck the Results$ git submodule update$ git diff$ git diff --cacheddiff --git c/sub i/subindex e47c0a1..5d5a3ee 160000--- c/sub+++ i/sub@@ -1 +1 @@-Subproject commit e47c0a16d5909d8cb3db47c81896b8b885ae1556+Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6cThe submodule update was silent because the submodule is already at the specified commit. The first diff shows that the index and worktree are the same. The third diff shows that the only staged change is moving the sub submodule to a different commit.Commitgit commitThis commits the fixed-up submodule entry.Outside, InIf you are not sure which commit you should use from the submodule, you can look at the history in the superproject to guide you. You can also manage the reset directly from the super-project.$ git submodule updatefatal: reference is not a tree: e47c0a16d5909d8cb3db47c81896b8b885ae1556Unable to checkout 'e47c0a16d5909d8cb3db47c81896b8b885ae1556' in submodule path 'sub'This is the same situation as above. But this time we will focus on fixing it from the super-project instead of dipping into the submodule.Find the Super-project's Errant Commit$ git log --oneline -p -- subce5d37c local change in subdiff --git a/sub b/subindex 5d5a3ee..e47c0a1 160000--- a/sub+++ b/sub@@ -1 +1 @@-Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6c+Subproject commit e47c0a16d5909d8cb3db47c81896b8b885ae1556bca4663 added subdiff --git a/sub b/subnew file mode 160000index 0000000..5d5a3ee--- /dev/null+++ b/sub@@ -0,0 +1 @@+Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6cOK, it looks like it went bad in ce5d37c, so we will restore the submodule from its parent (ce5d37c~).Alternatively, you can take the submodule's commit from the patch text (5d5a3ee314476701a20f2c6ec4a53f88d651df6c) and use the above ‰ÛÏinside, out‰Ûù process instead.Checkout in the Super-project$ git checkout ce5d37c~ -- subThis reset the submodule entry for sub to what it was at commit ce5d37c~ in the super-project.Update the Submodule$ git submodule updateSubmodule path 'sub': checked out '5d5a3ee314476701a20f2c6ec4a53f88d651df6c'The submodule update went OK (it indicates a detached HEAD).Check the Results$ git diff ce5d37c~ -- sub$ git diff$ git diff --cacheddiff --git c/sub i/subindex e47c0a1..5d5a3ee 160000--- c/sub+++ i/sub@@ -1 +1 @@-Subproject commit e47c0a16d5909d8cb3db47c81896b8b885ae1556+Subproject commit 5d5a3ee314476701a20f2c6ec4a53f88d651df6cThe first diff shows that sub is now the same in ce5d37c~. The second diff shows that the index and worktree are the same. The third diff shows the only staged change is moving the sub submodule to a different commit.Commitgit commitThis commits the fixed-up submodule entry.try this:git submodule syncgit submodule updateThis error can mean that a commit is missing in the submodule.  That is, the repository (A) has a submodule (B).  A wants to load B so that it is pointing to a certain commit (in B).  If that commit is somehow missing, you'll get that error.  Once possible cause: the reference to the commit was pushed in A, but the actual commit was not pushed from B.  So I'd start there.Less likely, there's a permissions problem, and the commit cannot be pulled (possible if you're using git+ssh).Make sure the submodule paths look ok in .git/config and .gitmodules.One last thing to try - inside the submodule directory: git reset HEAD --hardThis may also happen when you have a submodule pointing to a repository that was rebased and the given commit is ""gone"". While the commit may still be in the remote repository, it is not in a branch. If you can't create a new branch (e.g. not your repository), you're stuck with having to update the super project to point to a new commit. Alternatively you can push one of your copies of the submodules elsewhere and then update the super-project to point to that repository instead.I got this error when I did:$ git submodule update --init --depth 1but the commit in the parent project was pointing at an earlier commit.Deleting the submodule folder and running$ git submodule update --initdid NOT solve the problem. I deleted the repo and tried again without the depth flag and it worked.Possible causeThis can happens when: Submodule(s) have been edited in placeSubmodule(s) committed, which updating the hash of the submodule being pointed toSubmodule(s) not pushed.e.g. something like this happened:$ cd submodule$ emacs my_source_file  # edit some file(s)$ git commit -am ""Making some changes but will forget to push!""Should have submodule pushed at this point.$ cd .. # back to parent repository$ git commit -am ""updates to parent repository""$ git push origin masterAs a result, the missing commits could not possibly be found by the remote user because they are still on the local disk.SolutionInforma the person who modified the submodule to push, i.e.$ cd submodule$ git pushJust to be sure, try updating your git binaries.GitHub for Windows has the version git version 1.8.4.msysgit.0 which in my case was the problem. Updating solved it."
"For git revert to ""back out"" a change, it needs to figure out what the change was.In the case of most ordinary commits, the change is easy to compute.  Consider for instance this git commit graph fragment:... - G - H ...    <-- HEAD=masterHere you're on branch master which has commits G, H, and then some more.If you ask git to revert commit H, it simply needs to see what changed between ""everything in revision G"" and ""everything in revision H"".  Git can do this the same way you can, by comparing G and H:$ git diff <sha1-of-G> <sha1-of-H>If this says that in commit H, you added one line to file readme.txt and removed file x.h entirely, then git can undo this by removing that one line from readme.txt and restoring file x.h from commit G.Merge commits are more complex, though.  Let's fill in some more of that commit graph:              I - J            /       \... - G - H           M - N - O  <-- HEAD=master            \       /              K - LIf you ask git to revert the merge commit M, what changes should it back out?There's one set of changes in going from J to M:$ git diff <sha1-of-J> <sha1-of-M>(these changes are, in fact, the changes brought in via commit L as compared to commit H, which will be the changes from commits K and L combined).There's another, likely quite different, set of changes going from L to M:$ git diff <sha1-of-L> <sha1-of-M>(these changes are actually those in I and J, by similar logic).You must tell git which set of changes to undo, and which to keep.  Git has you do this by specifying the ""main line"".  This also relies on the fact that the parent IDs stored in a merge commit are in a specific order.Let's say you were on commit J, which was master, when you made the merge:$ git checkout master   # i.e., commit J$ git merge branch      # i.e., commit LNow you are on commit O, which is still master.  The branch name branch may no longer exist (or might point to some commit other than L), but you want to discard the changes in both K and L‰ÛÓi.e., the ones that were on branch branch when you did the merge.The first parent of M is J, because you merged branch into master, which git records by making J the first parent and L the second parent.  Thus, to discard the changes from commits K and L, you could now use:$ git revert -m 1 HEAD~2(here HEAD~2 backs up two commits, from O to N and then to M).  Git can then diff M^1 (J) against M, which finds the changes introduced by merging in branch branch as noted above; and then reversing those changes results in backing out the changes introduced by the merge.Note that this makes a new commit, resulting in a graph that looks like this:              I - J            /       \... - G - H           M - N - O - P   <-- HEAD=master            \       /              K - Lwhere comparing commits O and P produces essentially the same thing as comparing M and J (in that order, i.e., the reverse of the ""normal"" compare from J to M).  As far as later operations in git are concerned, though, you might as well have done this by hand-editing the tree for O and making the new commit P: it does not record (except in the commit message text) that P is essentially a revert of both K and L.Incidentally, it's worth noting that in this particular case, you could simply revert L first, then revert K, to (probably) get the same effect (with two separate extra commits):$ L=$(git rev-parse HEAD~2^2)   # get sha-1 ID of commit L$ git revert $L                 # make new commit P that reverts L$ git revert $L^                # make new commit Q that reverts L^ = KWith a big merge, though, reverting each individual change is a lot of work; reverting the merge commit itself is much easier (both to do, and to understand later, if properly documented).  (Also, the ""probably"" above is because the merge handles identical changes made on ""both sides"" of the branch, and reverting the merge avoids undoing changes in K and L that were not brought forward into M because they also occurred in I and/or J.  However, this is somewhat rare, especially in tiny branching structures like this.)Just read the fine manpage :-):Usually you cannot revert a merge because you do not know which side  of the merge should be considered the mainline.  This option specifies the parent number   (starting from 1) of the mainline and allows revert to reverse the change relative to   the specified parent. [...]Reverting a merge commit declares that you will never want the tree  changes brought in by the merge. As a result, later merges will only  bring in tree changes introduced by commits that are not ancestors of  the previously reverted merge. This may or may not be what you want.The problem is that a merge commit is a more complicated thing than a regular commit - it does not only change files, it also links two branches together. When reverting it, you must decide (and tell git) whether you only want to roll back the file changes it introduces, or also the linking of the branches.If you want to roll back the changes, but keep the linking of the branches, use option -m to git merge as explained in the manpage.If you want to completely undo the merge, you must rewrite history (using a combination of git rebase, git reset and git cherry-pick), with all the complications that can bring.What you need depends on why you are reverting the commit."
"The errors are saying that your repo has changes that you don't have yet, because you added the README to the remote one when you set it up. If you've already got local changes or a local repo, you need to initialise an empty repository on Github, and then you can push. You'll have to add the remote though, something like git remote add https://github.com/username/repo.git.Downloading the README manually and adding and committing will probably produce a different commit ID, and put it at a different point in the commit history, which is why it's not detected as the same one.1) Why does it not work to initialize a remote repository on github with a README, and then try to connect the github repo with a previously existing existing local repo?When Github adds the README it commits it, and then this is the first commit. If you have a local repo, the first commit locally will be different, so they won't match up.2) Why could I not pull when I tried to fix this error? Probably because of the above, or the remote reference didn't add in properly, depending on how you added it.Generally, if you're creating locally first, you would go:# Set up the Git repo locally, with no commits in it.git init   # Add a new file.git add file1# Commit the change.git commit# Tell Git where your remote is.git remote add origin https://github.com/user/repo.git # Push the default 'master' branch to the above remote called 'origin'.git push origin master Or if it already exists on Github or a different remote server: # Download the existing repo, with all of the history.git clone https://bitbucket.org/user/repo.git# Add a new file or modified file.git add file1# Commit the change.git commit# Push to the remote that you downloaded from with clone on branch master.git push origin master3) Why could I still not push and initialize the connection to my github remote after I added the README from github to my local repository manually?That's not how the changes work with Git; they're a big list of sequential commits in a chain. Each commit has one or two parent commits, and the commit IDs aren't sequential either.See the Git website for some diagrams on the branching and commits here: http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is4) How do I create a github repo with an initialized README and connect it to a local repo WITHOUT causing the errors below?If you have an existing local repo you shouldn't create one with the initialised README. If it's blank on Github when you create it, you can push up your existing repository with no errors. If it has the README, you have to git clone the Github repo, and then add your changes to that folder, commit the changes, and then push. Adding the README is for when you have a new project and you're creating the Github repo first, and then you clone the project and start working in that location. If you have an existing repository locally don't use that option.Let's say you have a local repository:$ git log --oneline8e7e8d4 hello.txtThe local repository has a single file:$ lshello.txtNow you create a new repository via the GitHub web interface and initialize it with a README file.  At this point, your two repositories have divergent histories.  You can add the remote repository to your local repository:$ git remote add origin git@github.com:larsks/samplerepo.gitBut attempting to pull from this repository will yield an error:$ git pullwarning: no common commitsremote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From github.com:larsks/samplerepo * [new branch]      master     -> origin/masterThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for detailsThe important part of this error message is:There is no tracking information for the current branch.Please specify which branch you want to merge with.This is git telling you that while your current branch in your local repository is not associated with any branch in the remote repository, so it doesn't know what to do.  You can provide it with a remote branch name explicitly:$ git pull origin masterThis will create a merge commit (and will probably prompt you for a commit message).  Once the commit is complete, you can see that the local history now contains both our local commit as well as the commits from the GitHub repository:$ git log --oneline7f1231a Merge branch 'master' of github.com:larsks/samplerepo5f0d62e Initial commit8e7e8d4 hello.txtAnd our working directory now has a merged set of files:$ lshello.txt  README.mdAnd we can push this to our remote repository.  Just typing git push will result in an error similar to what we saw earlier:$ git pushfatal: The current branch master has no upstream branch.To push the current branch and set the remote as upstream, use    git push --set-upstream origin masterSo:$ git push --set-upstream origin masterCounting objects: 6, done.Delta compression using up to 8 threads.Compressing objects: 100% (3/3), done.Writing objects: 100% (5/5), 543 bytes | 0 bytes/s, done.Total 5 (delta 0), reused 0 (delta 0)To git@github.com:larsks/samplerepo.git   5f0d62e..7f1231a  master -> masterBranch master set up to track remote branch master from origin.And now we're all in sync.Update: Regarding your questions about --set-upstream:When you checkout a local branch that matches the name of a remote branch, git will set up the upstream association for you automatically.  For example, if the remote repository in this example also had a branch ""development"", and I did this after adding the remote:$ git checkout developmentI would see:Branch development set up to track remote branch development from origin.Switched to a new branch 'development'On the other hand, if you already have a branch checked out when you add the remote, as in the first part of this example, you need to use --set-upstream to tell git that you want your local branch to track the remote branch.As an aside, note that there's no requirement that your local branch match the name of a remote branch.  You are free to do something like:git checkout mastergit push --set-upstream origin patchesSo that from this point on, git push on your master branch will push to the remote patches branch."
"Those settings (core.whitespace and apply.whitespace) are not there to remove trailing whitespace but to:core.whitespace: detect them, and raise errors apply.whitespace: and strip them, but only during patch, not ""always automatically""I believe the git hook pre-commit would do a better job for that (includes removing trailing whitespace)Note that at any given time you can choose to not run  the pre-commit hook:temporarily: git commit --no-verify .permanently: cd .git/hooks/ ; chmod -x pre-commitWarning: by default, a pre-commit script (like this one), has not a ""remove trailing"" feature"", but a ""warning"" feature like:if (/\s$/) {    bad_line(""trailing whitespace"", $_);}You could however build a better pre-commit hook, especially when you consider that:Committing in git with only some changes added to the staging area still results in an ‰ÛÏatomic‰Ûù revision that may never have existed as a working copy and may not work.For instance, oldman proposes in another answer a pre-commit hook which detects and remove whitespace.Since that hook get the file name of each file, I would recommend to be careful for certain type of files: you don't want to remove trailing whitespace in .md (markdown) files!I found a git pre-commit hook that removes trailing whitespace.  #!/bin/sh  if git-rev-parse --verify HEAD >/dev/null 2>&1 ; then     against=HEAD  else     # Initial commit: diff against an empty tree object     against=4b825dc642cb6eb9a060e54bf8d69288fbee4904  fi  # Find files with trailing whitespace  for FILE in `exec git diff-index --check --cached $against -- | sed '/^[+-]/d' | sed -r 's/:[0-9]+:.*//' | uniq` ; do     # Fix them!     sed -i 's/[[:space:]]*$//' ""$FILE""     git add ""$FILE""  done  exitYou can trick Git into fixing the whitespace for you, by tricking Git into treating your changes as a patch. In contrast to the ""pre-commit hook"" solutions, these solutions add whitespace-fixing commands to Git.Yes, these are hacks.Robust solutionsThe following Git aliases are taken from my ~/.gitconfig.By ""robust"" I mean that these aliases run without error, doingthe right thing, regardless of whether the tree or index are dirty. However, they don't work if an interactive git rebase -i is already in progress; see my ~/.gitconfig for additional checks if you care about this corner case, where the git add -e trick described at the end should work.If you want to run them directly in the shell, without creating a Gitalias, just copy and paste everything between the double quotes(assuming your shell is Bash like).Fix the index but not the treeThe following fixws Git alias fixes all whitespace errors in the index,if any, but doesn't touch the tree:# Logic:## The 'git stash save' fails if the tree is clean (instead of# creating an empty stash :P). So, we only 'stash' and 'pop' if# the tree is dirty.## The 'git rebase --whitespace=fix HEAD~' throws away the commit# if it's empty, and adding '--keep-empty' prevents the whitespace# from being fixed. So, we first check that the index is dirty.## Also:# - '(! git diff-index --quiet --cached HEAD)' is true (zero) if#   the index is dirty# - '(! git diff-files --quiet .)' is true if the tree is dirty## The 'rebase --whitespace=fix' trick is from here:# http://stackoverflow.com/a/19156679/470844fixws = !""\  if (! git diff-files --quiet .) && \     (! git diff-index --quiet --cached HEAD) ; then \    git commit -m FIXWS_SAVE_INDEX && \    git stash save FIXWS_SAVE_TREE && \    git rebase --whitespace=fix HEAD~ && \    git stash pop && \    git reset --soft HEAD~ ; \  elif (! git diff-index --quiet --cached HEAD) ; then \    git commit -m FIXWS_SAVE_INDEX && \    git rebase --whitespace=fix HEAD~ && \    git reset --soft HEAD~ ; \  fi""The idea is to run git fixws before git commit if you havewhitespace errors in the index.Fix the index and the treeThe following fixws-global-tree-and-index Git alias fixes all whitespaceerrors in the index and the tree, if any:# The different cases are:# - dirty tree and dirty index# - dirty tree and clean index# - clean tree and dirty index## We have to consider separate cases because the 'git rebase# --whitespace=fix' is not compatible with empty commits (adding# '--keep-empty' makes Git not fix the whitespace :P).fixws-global-tree-and-index = !""\  if (! git diff-files --quiet .) && \     (! git diff-index --quiet --cached HEAD) ; then \    git commit -m FIXWS_SAVE_INDEX && \    git add -u :/ && \    git commit -m FIXWS_SAVE_TREE && \    git rebase --whitespace=fix HEAD~2 && \    git reset HEAD~ && \    git reset --soft HEAD~ ; \  elif (! git diff-files --quiet .) ; then \    git add -u :/ && \    git commit -m FIXWS_SAVE_TREE && \    git rebase --whitespace=fix HEAD~ && \    git reset HEAD~ ; \  elif (! git diff-index --quiet --cached HEAD) ; then \    git commit -m FIXWS_SAVE_INDEX && \    git rebase --whitespace=fix HEAD~ && \    git reset --soft HEAD~ ; \  fi""To also fix whitespace in unversioned files, dogit add --intent-to-add <unversioned files> && git fixws-global-tree-and-indexSimple but not robust solutionsThese versions are easier to copy and paste, but they don't do theright thing if their side conditions are not met.Fix the sub-tree rooted at the current directory (but resets the index if it's not empty)Using git add -e to ""edit"" the patches with the identity editor ::(export GIT_EDITOR=: && git -c apply.whitespace=fix add -ue .) && git checkout . && git resetFix and preserve the index (but fails if the tree is dirty or the index is empty)git commit -m TEMP && git rebase --whitespace=fix HEAD~ && git reset --soft HEAD~Fix the tree and the index (but resets the index if it's not empty)git add -u :/ && git commit -m TEMP && git rebase --whitespace=fix HEAD~ && git reset HEAD~Explanation of the export GIT_EDITOR=: && git -c apply.whitespace=fix add -ue . trickBefore I learned about the git rebase --whitespace=fix trick from this answer I was using the more complicated git add trick everywhere.If we did it manually:Set apply.whitespace to fix (you only have to do this once):git config apply.whitespace fixThis tells Git to fix whitespace in patches.Convince Git to treat your changes as a patch:git add -up .Hit a+enterto select all changes for each file.  You'll get a warning about Git fixing your whitespace errors.(git -c color.ui=auto diff at this point reveals that your non-indexed changes are exactly the whitespace errors).Remove the whitespace errors from your working copy:git checkout .Bring back your changes (if you aren't ready to commit them):git resetThe GIT_EDITOR=: means to use : as the editor, and as a command: is the identity.On Mac OS (or, likely, any BSD), the sed command parameters have to be slightly different. Try this:#!/bin/shif git-rev-parse --verify HEAD >/dev/null 2>&1 ; then   against=HEADelse   # Initial commit: diff against an empty tree object   against=4b825dc642cb6eb9a060e54bf8d69288fbee4904fi# Find files with trailing whitespacefor FILE in `exec git diff-index --check --cached $against -- | sed '/^[+-]/d' | sed -E 's/:[0-9]+:.*//' | uniq` ; do    # Fix them!    sed -i '' -E 's/[[:space:]]*$//' ""$FILE""    git add ""$FILE""doneSave this file as .git/hooks/pre-commit -- or look for the one that's already there, and paste the bottom chunk somewhere inside it. And remember to chmod a+x it too.Or for global use (via Git commit hooks - global settings) you can put it in $GIT_PREFIX/git-core/templates/hooks (where GIT_PREFIX is /usr or /usr/local or /usr/share or /opt/local/share) and run git init inside your existing repos. According to git help init: Running git init in an existing repository is safe. It will not overwrite things that are already there. The primary reason for rerunning git init is to pick up newly added templates.I wrote this pre-commit hook, which only removes the trailing white-space from the lines which you've changed/added, since the previous suggestions tend to create unreadable commits if the target files have too much trailing white-space.#!/bin/shif git rev-parse --verify HEAD >/dev/null 2>&1 ; then   against=HEADelse   # Initial commit: diff against an empty tree object   against=4b825dc642cb6eb9a060e54bf8d69288fbee4904fiIFS=''files=$(git diff-index --check --cached $against -- | sed '/^[+-]/d' | perl -pe 's/:[0-9]+:.*//' | uniq)for file in $files ; do    diff=$(git diff --cached $file)    if test ""$(git config diff.noprefix)"" = ""true""; then        prefix=0    else        prefix=1    fi    echo ""$diff"" | patch -R -p$prefix    diff=$(echo ""$diff"" | perl -pe 's/[ \t]+$// if m{^\+}')    out=$(echo ""$diff"" | patch -p$prefix -f -s -t -o -)    if [ $? -eq 0 ]; then        echo ""$diff"" | patch -p$prefix -f -t -s    fi    git add $filedoneI'd rather leave this task to your favorite editor.Just set a command to remove trailing spaces when saving.Here is an ubuntu+mac os x compatible version:#!/bin/sh## A git hook script to find and fix trailing whitespace# in your commits. Bypass it with the --no-verify option# to git-commit#if git-rev-parse --verify HEAD >/dev/null 2>&1 ; then  against=HEADelse  # Initial commit: diff against an empty tree object  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904fi# Find files with trailing whitespacefor FILE in `exec git diff-index --check --cached $against -- | sed '/^[+-]/d' | (sed -r 's/:[0-9]+:.*//' > /dev/null 2>&1 || sed -E 's/:[0-9]+:.*//') | uniq` ; do  # Fix them!  (sed -i 's/[[:space:]]*$//' ""$FILE"" > /dev/null 2>&1 || sed -i '' -E 's/[[:space:]]*$//' ""$FILE"")  git add ""$FILE""done# Now we can commitexitHave funPlease try my pre-commit hooks, it can auto detect trailing-whitespace and remove it. Thank you!it can work under GitBash(windows), Mac OS X and Linux!Snapshot:$ git commit -am ""test""auto remove trailing whitespace in foobar/main.m!auto remove trailing whitespace in foobar/AppDelegate.m![master 80c11fe] test1 file changed, 2 insertions(+), 2 deletions(-)Was thinking about this today. This is all I ended up doing for a java project: egrep -rl ' $' --include *.java *  | xargs sed -i 's/\s\+$//g'Using git attributes, and filters setup with git configOK, this is a new tack on solving this problem‰Û_ My approach is to not use any hooks, but rather use filters and git attributes. What this allows you to do, is setup, on each machine you develop on, a set of filters that will strip extra trailing white space and extra blank lines at the end of files before committing them. Then setup a .gitattributes file that says which types of files the filter should be applied to. The filters have two phases, clean which is applied when adding files to the index, and smudge which is applied when adding them to the working directory.Tell your git to look for a global attributes fileFirst, tell your global config to use a global attributes file:git config --global core.attributesfile ~/.gitattributes_globalCreate global filtersNow, create the filter:git config --global filter.fix-eol-eof.clean fixup-eol-eof %fgit config --global filter.fix-eol-eof.smudge catgit config --global filter.fix-eol-eof.required trueAdd the sed scripting magicFinally, put the fixup-eol-eof script somewhere on your path, and make it executable. The script uses sed to do some on the fly editing (remove spaces and blanks at the end of lines, and extraneous blank lines at the end of the file)fixup-eol-eof should look like this:#!/bin/bashsed -e ‰Ûªs/[  ]*$//‰Û÷ -e :a -e '/^\n*$/{$d;N;ba' -e '}' $1my gist of thisTell git which file types to apply your newly created filter toLastly, create or open ~/.gitattributes_global in your favorite editor and add lines like:pattern attr1 [attr2 [attr3 [‰Û_]]]So if we want to fix the whitespace issue, for all of our c source files we would add a line that looks like this:*.c filter=fix-eol-eofDiscussion of the filterThe filter has two phases, the clean phase which is applied when things are added to the index or checked in, and the smudge phase when git puts stuff into your working directory. Here, our smudge is just running the contents through the cat command which should leave them unchanged, with the exception of possibly adding a trailing newline character if there wasn‰Ûªt one at the end of the file. The clean command is the whitespace filtering which I cobbled together from notes at http://sed.sourceforge.net/sed1line.txt. It seems that it must be put into a shell script, I couldn‰Ûªt figure out how to inject the sed command, including the sanitation of the extraneous extra lines at the end of the file directly into the git-config file. (You CAN get rid of trailing blanks, however, without the need of a separate sed script, just set the filter.fix-eol-eofto something like sed 's/[ \t]*$//' %f where the \t is an actual tab, by pressing tab.)The require = true causes an error to be raised if something goes wrong, to keep you out of trouble.Please forgive me if my language concerning git is imprecise. I think I have a fairly good grasp of the concepts but am still learning the terminology.the for-loop for files uses the $IFS shell variable.in the given script, filenames with a character in them that also is in the $IFS-variable will be seen as two different files in the for-loop. This script fixes it:multiline-mode modifier as given sed-manual doesn't seem to work by default on my ubuntu box, so i sought for a different implemenation and found this with an iterating label, essentially it will only start substitution on the last line of the file if i've understood it correctly.#!/bin/sh## A git hook script to find and fix trailing whitespace# in your commits. Bypass it with the --no-verify option# to git-commit#if git rev-parse --verify HEAD >/dev/null 2>&1then    against=HEADelse    # Initial commit: diff against an empty tree object    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904fiSAVEIFS=""$IFS""# only use new-line character as seperator, introduces EOL-bug?IFS=''# Find files with trailing whitespacefor FILE in $(    git diff-index --check --cached $against -- \    | sed '/^[+-]/d' \    | ( sed -r 's/:[0-9]+:.*//' || sed -E 's/:[0-9]+:.*//' ) \    | uniq \)do# replace whitespace-characters with nothing# if first execution of sed-command fails, try second one( MacOSx-version)    (        sed -i ':a;N;$!ba;s/\n\+$//' ""$FILE"" > /dev/null 2>&1 \        || \        sed -i '' -E ':a;N;$!ba;s/\n\+$//' ""$FILE"" \    ) \    && \# (re-)add files that have been altered to git commit-tree#   when change was a [:space:]-character @EOL|EOF git-history becomes weird...    git add ""$FILE""done# restore $IFSIFS=""$SAVEIFS""# exit script with the exit-code of git's check for whitespace-charactersexec git diff-index --check --cached $against --[1] sed-subsition pattern: SED: How can I replace a newline (\n)? .For Sublime Text users.Set following properly in you Setting-User configuration.""trim_trailing_white_space_on_save"": true"
"This is likely because you or someone on your team has changes in your submodule that are unpublished (committed, but not pushed to the remote server). They then published the superproject with references to the git commit in the submodule which does not exist on the git server. So git is trying to pull down a specific submodule git commit ID that it can't find.This would be the case if the changes are in a repository elsewhere on your machine or on another machine.To resolve, go to that repository that references that commit and publish (push) the submodule changes to the server. Or change the submodule to point to a different commit ID.I also received this error using TortoiseGit while trying to update submodules that aren't in the index.  That is, they exist in .gitmodules but have not been correctly added to the repository.The solution is to manually re-add them using the paths specified in .gitmodules.  You can use the TortoiseGit UI or run this on the command line for each module...git submodule add <url> <path>(I realise this is probably not the solution for the original poster, but hopefully it helps others Googling this.)In order to get new submodules into other repositories, I believe you need to run git submodule init once before starting to run git submodule update; this will register the new submodule from .gitmodules in .git/config."
"You should have created a local branch, and done the work on that, then when you get back, you update the master, rebase to the local branch, merge back to master then dcommit.So I'd try copying out the changes, to back them up.Create a local branch from the has svn sync point, merge your changes in there. Then back out the changes in the master branch, fetch, rebase to the branch, merge in from the local branch, fix any conflicts, then dcommit.$ git checkout -b backup    # create a local backup branch with all your work$ git checkout master   $ git checkout -b backup2   # 2nd copy just to be safe$ git checkout master$ git reset --hard <this is the revision of the last svn-id> # clean up master to make the svn merge easier$ git svn fetch    # this should update to the current version on the svn server$ git rebase master backup  # may get a conflict here, fix and commit... # after conflict is fixed and commited$ git checkout master $ git merge backup --ff  # merge in your local commits$ git svn dcommit        # push back to the svnYou can get additional info hereAnother answer you might be interested in.git-svn workflow articlesArticleWith much appreciation for VonC and sfassen's extraordinary patience with me, the solution sort of worked itself out. I don't know how or why, but maybe my initial rebase didn't work. To fix it I ended up rebasing again. From my local trunk branch:$ git co -b backup  # backup the commits to my local trunk$ git co trunk      # return to the local trunk$ git svn rebase    # rebase the trunk from the Svn server$ git br -d backup  # delete the backup branchThe key, of course, was that the rebase worked this time. I have no idea why it didn't work when I first did it, but I can't roll the clock back so I won't dwell on it.Thanks again for everyone's suggestions and patience with a newbie.To complete sfossen's excellent answer, here is some details:With git-svn, you get by default a local branch named master. You should not do any work on it, only keep it up-to-date with the svn trunk branch with:git svn fetch to get the history from the svn trunk branch on your local trunk branch: it will not apply those modifications on your working directory  git checkout master  to switch on trunk branch (only if you were on another branch)git rebase trunk to synchronize master with trunk.However, all your modifications should be done on another local branch (lets call it local-devel).  git branch local-devel git checkout local-develIf you have an urgent fix to do:git checkout master : swith on master(), git svn fetch && git rebase trunk to update it with svn trunkgit branch fastfix && git checkout fastfix, branch itfix the bug, compile, test, git commit -a: local commit, git svn dcommit update the modification to the distant svn repogit checkout master && git rebase trunk: update master againgit branch -D fastfix: remove hotfix branchgit checkout local-devel && git rebase master: get back to dev, with the updated history done on master replayed on your dev branchIt is a bit of an hassle at first, but way more comfortable than an svn diff in a file to be applied later.I had a similar situation. I was doing an git svn dcommit over a bad network connection and it failed at some point. I've discovered that the problem was caused by the fact that Subversion repository already had a new commit, but local git-svn counterpart considered that a commit was not in SVN yet. Solutions from other answers here did not help, however this did:git svn reset -r <last_svn_commit_git_was_aware_of>git svn fetchgit svn rebaseAfter this I was finally able to do git svn dcommit without any errors.I was going to comment, but thought this deserved more visibility...git svn rebase is supposed to re-write your commits. From the description and comments, I get the impression that after you rebased, you forced your old commits back on top. The commits have to be replaced with newer versions that don't conflict.To avoid having to dig through the reflog, you might want to get in the habit of making a quick tag before doing your git svn dcommit. After the dcommit succeeds, delete the tag. If the tag fails, you can do a git reset --hard followed by a git merge <tag>. Re-run your rebase to get your history back in order, re-tag and re-dcommit again.Several places I've read that it is bad practice when using git svn to use a separate branch. Something pertaining to git commits not showing up in svn the way you would expect.The following answer from http://progit.org/book/ch8-1.html appears to be the cleanest way:git svn rebasegit svn dcommitI also tried the most popular option above but it didn't always work for me, as the git rebase doens't roll back the to match the svn upstream but just back to last git commit."
"Usually you do not invoke git merge without arguments (at least I don't know anyone who does). If you want that merge defaults to the tracking branch, you need to set merge.defaultToUpstream to true: git config merge.defaultToUpstream true. Your master branch has to track origin/master in this case: git branch --set-upstream master origin/master. This is done automagically if origin/master was already present when you cloned.Personally, I do git fetch and then git merge origin/master or git pull if I have no local commits.Edit: As VonC mentioned merge.defaultToUpstream defaults to true since Git 2.0.Read Pro Git, it's a very good way to get to know Git.It will tell you that your merge, done with no branch created and with no branch set as merge source, makes no sense.It will also tell you the difference between git fetch and git pull which is important.Fetching changes does not move your branch, but pulling does.Note: if your master branch is already tracking origin/master (you can see that with git branch -avvv, or a longer alias), then a git merge will not display anymore:fatal: No commit specified and merge.defaultToUpstream not set.The next Git 2.ÌÊ.x (Q3 2014) will remove that error message:see commit a01f7f2 by Felipe Contreras (felipec):merge: enable defaulttoupstream by defaultThere's no point in this:% git mergefatal: No commit specified and merge.defaultToUpstream not set.We know the most likely scenario is that the user wants to merge the upstream, and if not, he can set merge.defaultToUpstream to false.That means you won't need anymore to do a:git config merge.defaultToUpstream true"
"As this thread illustrates, this is usually a disk space issue:$ git statusfatal: unable to write new_index fileOne cause of this that I found was that my file system had run out of space.  Finding large directories with something like the following helped clean up some log files that had run wild :$ du -h / | grep ^[0-9.]*GNote: you can also see it fora resource issue with msysgit and Egit (Git for Eclipse):Problem still remained so I ran File Monitor from Sysinternals Suite.  It seems that Eclipse is accessing index file constantly and blocks command line gitfor a classic anti-virus issue:Yeah, looks like Windows Defender strikes again. I always forget to disable that damn thing. I can't believe how broken it is. Destroys Blu-ray playback at home, breaks Git at work...If you are using TortoiseGit, this error (or more recently: error: Unable to write index.) is very likely caused by having TortoiseGit icon overlays enabled. To disable icon overlays, go to: TortoiseGit > Settings > Icon Overlays and set Status cache to None. This may be fixed in a future version of TortoiseGit, but for now it seems to be common.I was getting the same error while I was merging a git repo that was sshfs mounted. There was no shortage of space anywhere.In my case the solution was to add an -o workaround=rename option to the sshfs mount command.Like so:sshfs -o idmap=user -o uid=[lokal uid] -o gid=[lokal gid] -o workaround=rename [host]: [mountpoint]I have followed every solution here and none of them worked. I have no shortage of disk space, I have disabled Windows Defender, disabled icon overlays and whatnot. I had tons of files to import and maybe this was causing the problem (I had boost libraries among other things).I simply opened ""Git Bash"" and issued a number of git add and a git commit and all went well. This has something to do with TortoiseGit but I am not sure what. It seems to choke on a large number of files or large directory depth.I got this error using Cygwin and git-svn. The solution that worked for me was to do garbage collection (odd as it seemed at the time):$ git gcI have found solution. Just need to free some disk space.I was having this issue, but I was able to commit with msysgit.  I updated tortoisegit, and also noticed that my msysgit version was not in sync with tortoise git.  I'm not sure if the latest version fixed it, or if it was due to having different versions of tortoise and msysgit.  Anyway, another thing to check.  It all started working after updating them both to TortoiseGit 1.7.10.0 git version 1.7.10.msysgit.1I had same problem. In my case above solutions didn't work.The reason behind this error is that the file .git/index was corrupted for some unknown reason. I just renamed the file to something else and run the  'git add .' command from git bash and it worked.Hope this helps someone."
"As rlb.usa noted, Github has added a file size limit that prevents you from pushing files > 100MB. You tried to remove the file in a new commit and tried to push that. That fails, because you are not just pushing that last commit, but also three others. Those three commits contain versions of cron_log that are 141MB and 126MB in size. They cause your push to fail.To fix that, you have two options:Run git rebase -i origin/master, set every commit to edit and remove the file in each with git commit --amend. Use the BFG Repo-Cleaner to clean all your history.Hi you could solve easily in this way:git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch FILENAME.TAR'  --prune-empty --tag-name-filter cat -- --alllink: https://help.github.com/articles/remove-sensitive-dataAccording to GitHub's new file size limit (also: working with large files), instituted only hours ago, GitHub now has new policies of a 1GB filesize repository, warnings for pushes of files over 50 MB and complete rejection for fileuploads of 100MB.GitHub warns you when you push a file larger than 50 MB. We'll reject  pushes containing files larger than 100 MB. We do this for a few  reasons.You have a few options, but not many:Upload your 100 MB+ files to a different service and share with that insteadReduce the filesize of problematic filesFind a new repository"
"In my case, there was already a .git directory from another imported third-party git repository. I had to removed it, anything worked well.I had the same problem. There was an existing .git repository at the location i wanted to create the new one. I deleted it and created a new one. Now committing works as expected.If you aren't sure if there might be an existing .git at the target location of your repository, do this (on a Unix machine):$> cd <path>$> ls -aef This should show you the hidden files (like .git). Now you have two options: either delete the .git directory$> sudo rm -R .gitor change the owner rights.This is a weird error.It seems to be a permissions error as indicated by git (command line), but persists even if permissions are 777.What worked for me was going into terminal, cding into the directory, and manually adding it to the index.So you would do:cd <WHEREVER-YOUR-PROJECT-IS>/laravel-master/sudo git add vendor/illuminate/remote/Illuminate/Remote/sudo git add vendor/anahkiasen/rocketeer/And then try the GitHub utility again.Let me know if it works!This was annoying me for weeks! I had to keep going into terminal and adding each file and committing from the terminal which isnt as nice as using the app. I finally contacted GitHub support and they advised me that they were aware of the issue and are releasing a fix soon. Open up your terminal or shell and navigate to the repository and enter:git config --local core.safecrlf falseThis will disable the core.safeclrf property for the repository which is causing the issue.That should work :)Note: I am using the Mac version of the GitHub app (A New Hope (180))My silly way to resolve this is to copy every files I needed and deleted the folder, then created a new folder with the same name and copied them back. It actually worked for me. I'm new to github and don't know how to find out the previously existing git file (though I did know it was probably caused by conflict between old and new config files). It's better to learn how github works to use it as a tool better. But for now, if you want to have a quick solution, mine might work for you."
"You've lost your HEAD so you'll need to recreate it. The simplest thing to do is this.echo ref: refs/heads/master >.git/HEADNow you should be able to run other git commands and see where you're at.(Although, in theory, you could attempt to do git symbolic-ref HEAD refs/heads/master newer git versions don't recognize a .git as a git repository unless it already contains a HEAD so this won't work to create a new one.)HEAD is usually a reference to a particular branch; in your case, it seems the branch pointers have gone missing, so the HEAD reference cannot be resolved.You can use git fsck --lost-found to scan the object cache for unreachable objects; specifically, you are interested in commits, which can then be found below .git/lost-found/commit/; these are pointers to your branches, all you need to do then is find out which is which, and create new references using git branch.I think this answer maybe helpful for someone.I resolved this problem nearly.First what I did was, like Charles Bailey wrote, use echo ref: refs/heads/master >.git/HEADThen my branch changed to master. I commited changes and was able to switch to my main branch. The problem was that I wasn`t able to use any of my local branches. Especially I wanted to work on branch 812. So I found last commit to branch 812 (create message when commit is very helpful ;)) and switched to it. Next I created branch 812 based on the one I switched to. Unfortunately some files were missing. Luckily I had them on the broken repo which I copied before 'echo'For me the problem was that on Mac OS X either the 'uchg' or 'uappnd' flag was set, locking some git files regardless of the perms.  I reset the chflags like this and it solved it for me:sudo chflags -R 0000 ."
"This just happened to me. I had deleted a folder with contents from the project folder.  Xcode didn't handle that well.What worked to fix it was to recreate an empty folder with the same name.  No need to recreate its contents.In your case I think you just need to create a new empty ""MA Mobile"" folder in the same location the old one was. Then commit. It worked for me.After the first commit I deleted the new folder, then committed again.  It seems that Xcode is missing the logic to handle the deletion of a whole folder with contents.If you'd like to simply commit all changes you made, doing so through the Terminal should fix the problem.Open the Terminal App and cd into your project directory, once there type in the following command:git commit -aEnter your commit message by pressing 'i' and typing it in, then press 'Esc', then ':', and type 'wq'All done, you're problem should be fixed.Assuming that you are using GIT - run the following in your command line;cd ""/Users/charlesbutler/xCode/MA Mobile""git rm -r ""MA MobileTests""Jader Feijo's answer solve my problem.Just want to suggest an easier way to add comment, without all this additional Vi steps, by simply adding -m parameter:git commit -a -m ""Commit Message"""
"If you want remove all local changes from your working copy, simply stash them:git stash save --keep-indexIf you don't need them anymore, you now can drop that stash:git stash dropIf you want to overwrite only specific parts of your local changes, there are two possibilities:Commit everything you don't want to overwrite and use the method above for the rest.Use git checkout path/to/file/to/revert for the changes you wish to overwrite. Make sure that file is not staged via git reset HEAD path/to/file/to/revert.Alright with the help of the other two answers I've come up with a direct solution:git checkout HEAD^ file/to/overwritegit pullHere is a solution that throws away changes:git reset file/to/overwritegit checkout file/to/overwriteYou can either commit your changes before you do the merge, or you stash them:git stashgit merge origin/mastergit stash popMy solution to solve this issue was:git checkout -- <file>Then I could overwrite the file just using:git pullThis works for me to override all local changes and does not require an identity:git reset --hardgit pullIf your repo contains few files which is removed from master:git checkout mastergit fetch origingit reset --hard origin/mastergit checkout -b newbranchIf you want to overwrite specific changes, you need some way of telling it which ones you want to forget.You could try selectively stashing the changes you want to abandon using git stash --patch and then dropping that stash with git stash drop. You can then pull in the remote changes and merge them as normal.You can use this for overwrite filegit checkout file_to_overwriteSometimes, none of these work.  Annoyingly, due to the LF thing I think, what will work is deleting the files, then pulling.  Not that I recommend this solution, but if the file doesn't exist, git won't uselessly inform you that your changes (which may not even be changes) will get overridden, and will let you continue.Use at your own risk."
You can manually delete .git/MERGE_HEAD and Git won't be able to tell that you were just doing a merge. It will let you amend the previous commit with the changes in your index just like normal.Do a git commit -a once you have resolved the conflicts. This is the last step when you are merging conflicts.
"I do not know what github for Mac rollback does, but it seems that you would be better off using command line to resolve the issue at hand:git cherry-pick --abort - to stop any cherry-picking in progressgit branch -va - will show you where are your pointers right nowmake sure your working directory is clean:git status - should not show any modified or staged filesgit stash - if anything modified still presentgit reset --hard your_local_branch github/remote_branch - make local branch reflect the  state as it is on the remote side. obviously you don't need to do a reset if your current branch will point to the same commit as the remote. If you're in detached HEAD state (git status will tell you about it) then to come back to the normal state just checkout your local branch.Now decide what you actually want to achieve:I. get rid of the faulty commit? Use interactive rebase and remove the line with faulty commit, then force push to the remote repo on github (say faulty commit happened 10 commits ago)git rebase -i HEAD~11II. revert faulty commit? - wouldn't recommend to do that after some other commits, unless you're absolutely sure that the following commits didn't touch the same piece of code. This will effectively create a reverse commit (if line was added by faulty commit it will be removed by revert and vice versa)git revert {commit-sha1}III. Amend faulty commit? use interactive rebase, but instruct it to stop at faulty commit for amending. When it does stop edit the change and continue rebasing, then force push to the remote branch (use rebase command from the solution I )After you're done if anything was stashed use git stash pop to bring the changes back.hope that helps!"
"Rather than cloning the empty repository from Stash, try creating a new repository locally (in a new directory) with:git init .Add your files and make your first commit. The freshly init'd repository should have a proper HEAD and master branch:git add file1.txtgit add file2.txtgit commitThen, add your empty Stash repo as a remote and push master there:git remote add origin http://me@myrepo/my/repo.gitgit push -u origin masterActually you guessed it right, this is something totally into your (and actually our, as I'm in charge of them) company hooks.The error:ERROR: Unable to determine active branch in current context !     ERROR: GITLib::Branch::get_current died at line 41occurs when we try to find the name of the current branch. Currently we are using ""git branch --list"" to find it, but in case of empty repo this returns an empty result.The solution would need to go to something else, probably ""get symbolic-ref"" as suggested here: http://stackoverflow.com/a/2111099(issue is we have to support clients still in Git 1.7.9)Phil."
"I can't tell you what's wrong, but you might trygit reset app/models/disclosure_even.rbgit add app/models/disclosure_even.rband then commit.I had exactly the same situation today on branches merging (not rebasing).I spot, that file it errors on, in your case:U      app/models/disclosure_event.rbwas absent in git status. But is could be seen as unmerged in gitk GUI. It also was absent in working copy (moved to another place in my case).I tried git rm, and it solved the problem:git rm app/models/disclosure_event.rbI encountered such situation before with rebase. Git determines that you leave some files as they were before merge and thinks you still didn't merge them. That time I googled and find out many suggestions to do just git rebase --skip. It worked for me.More detailed description of such case: http://git.661346.n2.nabble.com/BUG-git-rebase-is-confuse-if-conflict-resolution-doesn-t-produce-diff-td726597.htmlSimilar problem: Git rebase: conflicts keep blocking progressI'm not sure it is your case if you have merge, though.I tried the 2 suggestions without any luck. And I couldn't get it to reset back to HEAD, so I just re-cloned the repository and did the entire merge over and didn't have any issues. For what it's worth, I now highly recommend p4merge over vimdiff..."
"It is best to initiate a revert with a clean index and working tree.Otherwise, doing a second revert (on top of a new commit) while a previous revert was in progress leads to that error message.Since you are still at commit 3, you could:git cherry-pick --quit (which, from this thread, tells revert to leave HEAD alone and get out of the way.), examine your index and working tree (git status), make any adjustment to get a clean status (like a new commit), and then re-do your git revert.(you can see other options at ""Rollback to Previous Commit - Github for MAC (a revert is already in progress)"")Don't forget git reset if you simply want to forget about those three commits (although that would make you force a push: git push --force, in order to publish your history for that branch. If other collaborators already pulled from that same branch, your approach, using git revert, is a better one)"
"When you deleted your file, that will be a change and that is the unstaged change that git is complaining about.  If you do a git status you should see the file listed as removed/deleted.  To undo this change you should git checkout -- <filename>.  Then the file will be back and your branch should be clean.  You can also git reset --hard this will bring your repo back to the status where you made your commit.I am assuming that it is the last commit that has the very large file that you want to remove.  You can do a git reset HEAD~  Then you can redo the commit (not adding the large file).  Then you should be able to git push without a problem. Since the file is not in the last commit then you can do the final steps without a problem.  You just need to get your changes either committed or removed.http://git-scm.com/book/en/Git-Tools-Rewriting-HistoryIt seems your only problem is having unstaged changes.  You didn't give any detail as to what was actually out of sync, so it's a shot in the dark, but assuming you simple-rmd the file in step 4, you'd bring it back from the index with:git checkout large_fileIf not, you're on your own.  Your goal is to make sure both your index and your working tree are in the same state.  This shows as git status reporting nothing to commit, working directory clean.The nuclear option to ensure a clean tree would be git reset --hard.  If you want to try that, do backup your tree+repo beforehand.Once your working copy is clean, you can proceed with your steps 5 and 6.The github solution is pretty neat. I did a few commits before pushing, so it's harder to undo. Githubs solution is :Removing the file added in an older commitIf the large file was added in an earlier commit, you will need to remove it from your repository history. The quickest way to do this is with The BFG (a faster, simpler alternative to git-filter-branch):bfg --strip-blobs-bigger-than 50M# Git history will be cleaned - files in your latest commit will *not* be touchedhttps://help.github.com/articles/working-with-large-files/https://rtyley.github.io/bfg-repo-cleaner/"
"I was able to diagnose the issue when I added capture=False to the declaration:local('git rm fabfile.py', capture=False)local('git add settings.py', capture=False)This allowed the error to be displayed more verbosely.Apparently, the maintainer of Fabric will to revert local's behavior back to not capturing by default, in 1.0.Is this a python-related issue like the one described in this thread?The main problem with this is that the stdout/stderr capturing is per-run/sudo invocation and not per-task.It would be wonderful if you could explain me how I could  collect outputand error by only modifying the file called fabfile_runner.py.  Idealy the fabric task itself could be unmodified, this would allow to upload the the factory the same file that you have tested manually.Check out the Fabric source and look in the 'tests' folder, specifically tests/utils.py. It contains a single decorator, @mock_streams, which is capable of wrapping a function (any function in any Python code -- it's not Fabric specific, as I mentioned) and redirecting sys.stdout and/or sys.stderr for capture/examination.It's designed for use around functions, being a decorator, so you could use it directly by modifying your fabfile_runner.py like so:*fabfile_runner.py*from StringIO import StringIOimport sysfrom test_fabfile import hello_worlddef execute(task):    output = StringIO()    error = StringIO()    sys.stdout = output    sys.stderr = error    task()    sys.stdout = sys.__stdout__    sys.stderr = sys.__stderr__    return (output.getvalue(), error.getvalue())output, error = execute(hello_world)print ""output : %s"" %outputprint ""error : %s"" %error"
"If you are running git under a file system that is not case sensitive (Windows or OS X) this will occur if there are two branches with the same name but different capitalisation, e.g. user_model_changes and User_model_changes as both of the remote branches will match the same tracking ref.Delete the wrong remote branch (you shouldn't have branches that differ only by case) and then git remote prune origin and everything should workPermanent Fixgit update-ref -d resolved my instance of this error, e.g.git update-ref -d refs/remotes/origin/userNote that this doesn't impact remote.In my case, a subsequent git fetch fetched that branch again, and following git fetches/pulls no longer gave the error ""remote ref is at but expected"".If that doesn't work, a temporary fix:Note also that if you don't care about the branch in question (e.g. you just want to update master, not origin/user), a git pull workaround is to fetch then just merge the particular branch you care about, e.g.git fetch # may give an error for a particular branch, but other branches will still be successfully fetchedgit merge origin/master"
"Your error appears when you have modified file, and branch that you switching to have changes for this file too (from latest merge point).Your options, as I see it, are - commit, and then amend this commit with extra changes (you can modify commits in git, as long as they're not pushed); or - use stash:git stash save your-file-namegit checkout master# do whatever you had to do with mastergit checkout staginggit stash popgit stash save will create stash that contains your changes, but it isn't associated with any commit or even branch. git stash pop will apply latest stash entry to your current branch, restoring saved changes and removing it from stash.I encountered the same problem and solved it bygit checkout -f branchand its specification is rather clear-f, --forceWhen switching branches, proceed even if the index or the working             tree differs from HEAD. This is used to throw away local changes.When checking out paths from the index, do not fail upon unmerged             entries; instead, unmerged entries are ignored."
"This should only be the case if you're amending an already-pushed commit. Generally you should never do that as you're then modifying published history. In your case however, you should be able to get away with push -f, which will overwrite the remote commit with your amended revision.you amended the pulled commit as ingit pull origin mastergit commit -a --amend -m ""...""git pushyou can solve the issue by reverting the amended commit:git reset --mixed origin/masterand then making it again as a full fledged commitYup, you should not do that (pushing a commit, then changing it and trying to push it again).Instead, do the following:> git reset --mixed origin/master> git add .> git commit -m ""This is a new commit for what I originally planned to be an amendmend""> git push origin masterthis will create a new commit with the changes you were about to amend."
"I think you might've forgotten the step$ git add .gitignorebefore trying to commit, or then you mistyped, when you shoud've given$ git commit -m ""Add credentials.yml to .gitignore""Process advised is highly dangerous [for the repo contents], so one must be really careful to follow all the steps in detail."
"You are trying to revert a merge commit, and git doesn't know which parent to revert to. The -m allows us to choose which parent to choose. See the merge commit and note down which parent you want to go to. The parent information can be seen in git log, for example:commit d02ee0f2179def10277f30c71c5d6f59ded3c595 Merge: dd3a24c 2462a52and run:git revert <hash> -m 1where 1 indicates parent number 1.If you are trying to revert to that commit, do:git reset --hard <hash>Understand the difference between git revert and git reset from the docs and decide which one you want. git revert is the safer option, but doesn't really do what you want. It just reverts the changes of a (set of) commit. git reset makes you move to a particular commit in history, and will rewrite your history.I want to revert back to ...Then you don't want git revert, at least not like this. git revert is for reverting the specific changes made in that commit. What you're looking for is to revert or undo all the changes made after that commit.git reset is the command to use here.git reset --hard c14609d74eec3ccebafc73fa875ec58445471765 completely resets your branch, index and work tree to that specific commit.Note that the usual precautions apply: if anyone else has fetched later commits already, removing them from the history like this complicates matters for them. If you instead want to create a new commit, which simply restores the state to that of commit c14609d74eec3ccebafc73fa875ec58445471765, you can use git rm and git checkout:git rm -r .git checkout c14609d74eec3ccebafc73fa875ec58445471765 .(The rm is needed to make sure newly added files also get removed.)This lets you then create a new commit, on top of your local history, which undoes every change since c14609d74eec3ccebafc73fa875ec58445471765."
"Do you know what branch HEAD was supposed to point to? Was it master? Run git symbolic-ref HEAD refs/heads/master.Basically, the symbolic reference with the name HEAD is corrupted somehow. You (or software you ran) must have gone poking around the .git dir. If I were you I would check to make sure nothing else in your repo is damaged. You can verify your object database by running git fsck."
"Do git status, this will show you what files have changed.  Since you stated that you don't want to keep the changes you can do git checkout -- <file name> or git reset --hard to get rid of the changes.For the most part, git will tell you what to do about changes. For example, your error message said to git stash your changes. This would be if you wanted to keep them. After pulling, you would then do git stash pop and your changes would be reapplied.git status also has how to get rid of changes depending on if the file is staged for commit or not.First start with agit statusSee if you have any pending changes.To discard them, rungit reset --hardPulling with rebase is a good practice in general.However you cannot do that if your index is not clean, i.e. you have made changes that have not been committed.You can do this to work around, assuming you want to keep your changes:stash your changes with: git stashpull from master with rebasereapply the changes you stashed in (1) with: git stash apply stash@{0} or the simpler git stash popYou can always dogit fetch && git merge --ff-only origin/masterand you will either get (a) no change if you have uncommitted changes that conflict with upstream changes or (b) the same effect as stash/pull/apply: a rebase to put you on the latest changes from HEAD and your uncommitted changes left as is."
"You are just fetching upstream/develop, while you want to fetch origin to have origin/mac8 available.git fetchgit checkout ""new brach"" git pull ""new branch"" git merge ""new branch""This is worked for me"
"Try: git reset README.mdI had a similar issue and this was the only thing that solved it.Do this:git merge --abortgit pull (to be sure you're up-to-date)Now replace the contents of the README.md file with what you want it to say.  If you don't want it at all, do git rm README.mdThen if you replaced the contents, commit and push those contents with:    git add README.md    git commit -m ""comment""    git push"
"At server side, do this:git config receive.denyCurrentBranch ignoreThen you can push at local.As I pointed out in this post http://stackoverflow.com/questions/3217969/heroku-like-git-setuppushing to working repositories is a bit dangerous as any work in progress is not taken into account by the push, and it is quite easy to subsequently lose any uncommitted changes (basically the working HEAD can get out of step with the working branch HEAD). Git now has a warning to inform you of this - the, gory, details are in the following link:git push to a non-bare repositoryIt is recommended that your published repository should be a bare repo which does not have a checked out tree. Bare repos are created using the ""git clone --bare"" option.Pushing to a non-bare repo is now possible (Git 2.3.0 February 2015).And it is possible when you are pushing the branch currently checked out at the remote repo!See commit 1404bcb by Johannes Schindelin (dscho):receive-pack: add another option for receive.denyCurrentBranchWhen synchronizing between working directories, it can be handy to update the current branch via 'push' rather than 'pull', e.g. when pushing a fix from inside a VM, or when pushing a fix made on a user's machine (where the developer is not at liberty to install an ssh daemon let alone know the user's password).The common workaround ‰ÛÒ pushing into a temporary branch and then merging on the other machine ‰ÛÒ is no longer necessary with this patch.The new option is:updateInsteadUpdate the working tree accordingly, but refuse to do so if there are any uncommitted changes.This should help: http://stackoverflow.com/questions/3191400/pushing-to-a-git-repository-does-not-work/3191584#3191584"
"Try renaming it to some temporary name, and then to the name you want:git mv hashpq.py _hashpq.pygit mv _hashpq.py HashPQ.pygit commitThis is the same behaviour as the regular mv command when the file system is case-insensitive.You shouldn't need -f anymore, with git 2.0.1 (June 25yh, 2014).A git mv hashpq.py HashPQ.py will just work on case insensitive OS, as detailed in commit baa37bf by David Turner (dturner-tw)mv: allow renaming to fix case on case insensitive filesystems""git mv hello.txt Hello.txt"" on a case insensitive filesystem always triggers ""destination already exists"" error, because these two names refer to the same path from the filesystem's point of view, and requires the user to give ""--force"" when correcting the case of the path recorded in the index and in the next commit.Detect this case and allow it without requiring ""--force""."
"You can use git checkout <file> to check out the committed version of the file (thus discarding your changes), or git reset --hard HEAD to throw away any uncommitted changes for all files.git fetch origingit reset --hard origin/mastergit pullExplanation:Fetch will download everything from another repository, in this case, the one marked as ""origin"". Reset will discard changes and revert to the mentioned branch, ""master"" in repository ""origin"". Pull will just get everything from a remote repository and integrate. See documentation at http://git-scm.com/docs.I've tried both these and still get failure due to conflicts. At the end of my patience, I cloned master in another location, copied everything into the other branch and committed it. which let me continue.The ""-X theirs"" option should have done this for me, but it did not.git merge -s recursive -X theirs mastererror: 'merge' is not possible  because you have unmerged files. hint: Fix them up in the work tree,  hint: and then use 'git add/rm ' as hint: appropriate to mark  resolution and make a commit,  hint: or use 'git commit -a'. fatal:  Exiting because of an unresolved conflict."
"I found that adding ""-i"" to the commit command fixes this problem for me. The -i basically tells it to stage additional files before committing.That is:git commit -i myfile.phpgit commit -am 'Conflicts resolved'This worked for me. You can try this also.You can use git commit -i for most cases but in case  it doesn't work You need to do  `git commit -m ""your_merge_message"". During a merge conflict you cannot merge one single file so you need to Stage only the conflicted file git commit -m ""your_merge_message""You probably got a conflict in something that you haven't staged for commit.  git won't let you commit things independently (because it's all part of the merge, I guess), so you need to git add that file and then git commit -m ""Merge conflict resolution"".  The -i flag for git commit does the add for you.If you just want to ditch the whole cherry-picking and commit files in whatever sets you want, git reset --soft <ID-OF-THE-LAST-COMMIT>gets you there.I got this when I did forgot the -m in my git commit when resolving a git merge conflict.git commit ""commit message"" should be git commit -m ""commit message""Your merge stopped in the middle of the action.You should add your files, and then 'git commit':git add file_1.php file_2.php file_3.phpgit commitCheersDuring a merge Git wants to keep track of the parent branches for all sorts of reasons.  What you want to do is not a merge as git sees it.  You will likely want to do a rebase or cherry-pick manually.For myself this happened in SourceTree when I tried to commit a merge before resolving all of the files. I then marked the last file resolved and yet it still gave me this error when trying to commit. I closed SourceTree and reopened it, and then it committed fine."
"It seems like you want the files ignored but they have already been commited. .gitignore has no effect on files that are already in the repo so they need to be removed with git rm --cached. The --cached will prevent it from having any effect on your working copy and it will just mark as removed the next time you commit. After the files are removed from the repo then the .gitignore will prevent them from being added again.But you have another problem with your .gitignore, you are excessively using wildcards and its causing it to match less than you expect it to. Instead lets change the .gitignore and try this..bundle.DS_Storedb/*.sqlite3log/*.logtmp/public/system/images/public/system/avatars/WARNING: it will delete untracked files, so it's not a great answer to the question being posed. I hit this message as well. In my case, I didn't want to keep the files, so this worked for me:git clean  -d  -fx """"http://www.kernel.org/pub/software/scm/git/docs/git-clean.html-x means ignored files are also removed as well as files unknown to git.-d means remove untracked directories in addition to untracked files. -f is required to force it to run.Just force it : git checkout -f another-branchIf you're on OS X, it may be because a file's name has had certain characters change case. Try setting the following config option:git config core.ignorecase trueGit is telling you that it wants to create files (named public/system/images/9/... etc), but you already have existing files in that directory that aren't tracked by Git. Perhaps somebody else added those files to the Git repository, and this is the first time you have switched to that branch?There's probably a reason why those files in your develop branch but not in your current branch. You may have to ask your collaborators why that is.how do I get this working so I can switch branches without deleting those files?You can't do it without making the files disappear somehow. You could rename public to my_public or something for now.if I came back to this branch afterwards would everything be perfect as up to my latest commit?If you commit your changes, Git won't lose them. If you don't commit your changes, then Git will try really hard not to overwrite work that you have done. That's what Git is warning you about in the first instance here (when you tried to switch branches).Unfortunately neither git rm --cached or git clean  -d  -fx """" did it for me.My solution ended up being pushing my branch to remote, cloning a new repo, then doing my merge in the new repo. Other people accessing the repo had to do the same.Moral of the story: use a .gitignore file from inception.This happened to me on a Windows 8 system, using Git from the command prompt.  The rest of my team uses TFS, and I use Microsoft's git-tf to push/pull between TFS and my local Git repository.The problem arose due to some files that had been renamed only to change their case.  What appears to have happened was this:The files were checked in with mixed casing in their names.In a later commit, the file names were changed to all lower-case.git-tf initially got the files in mixed case.When the files were renamed to lower-case, git-tf didn't get the files because to Windows 8 those file names are equivalent.Since Git is case-sensitive, it complained that I had the mixed-case files that weren't in source control.  But using git status, I couldn't see any changes, since in the command prompt those file names are equivalent.The simplest solution for me was:git checkout a previous version of the project, well before those files were ever added.Then git checkout the latest version of the project, with the correct file casing.In my case git rm --cached didn't work.But i got it with a git rebaseI had the same problem when checking out to a branch based on an earlier commit. Git refused to checkout because of untracked files.I've found a solution and I hope it will help you too.Adding the affected directories to .gitignore and issuing $ git rm -r --cached on them is apparently not enough. Assume you want to make a branch based an earlier commit K to test some stuff and come back to the current version. I would do it in the following steps:Setup the untracked files: edit the .gitignore and apply $ git rm -r --cached on the files and directories you want the git to ignore. Add also the file .gitignore itself to .gitignoreand don't forget to issue $ git rm -r --cached .gitignore. This will ensure the the ignore behavior of git leaves the same in the earlier commits.Commit the changes you just made:$ git add -A$ git commitSave the current log, otherwise you may get problems coming back to the current version$ git log > ../git.logHard reset to the commit K $ git reset --hard version_kCreate a branch based on the commit K$ git branch commit_k_branchCheckout into that branch$ git checkout commit_k_branch Do your stuff and commit itCheckout back into master again$ git checkout masterReset to the current Version again$ git reset current_version or $ git reset ORIG_HEADNow you can reset hard to the HEADgit reset --hard HEADNOTE!Do not skip the next-to-last step (like e. g. $ git reset --hard ORIG_HEAD) otherwise the untracked files git complained above will get lost.I also made sure the files git complained about were not deleted. I copied them to a text-file and issued the command $ for i in $(cat ../test.txt); do ls -ahl $i; doneIf you checkout to the branch mentioned above again, do not forget to issue $ git status to ensure no unwanted changes appear.I was also facing a similar issue and i tried all the solutions posted above but it didn't workThe issue was caused when i renamed my onMusicUpdateListener.java to OnMusicUpdateListener.java in develop branch. Now master had onMusicUpdateListener.javaand develop had the same file as OnMusicUpdateListener.javaNow whenever i switched to master it gave me an errorThe following untracked working tree files would be overwritten by checkoutand then it aborted.In order to solve this, i forcefully checked out master branchand then renamed my onMusicUpdateListener.java to OnMusicUpdateListener.java, committed it and then merged it with develop branch.Then i updated my develop branch by merging it into master and now everything is back to normal and problem is solved.This could be a permission issue,change the ownership,sudo chown -v -R usr-name:group-name folder-name"
"Try this:git add ""user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003(2).JPG""Otherwise, bash will try to do something with that (2) in the file name.If you removed the file and want to remove it also from Git, you have to call rm instead:git rm ""user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003(2).JPG""Or you can also use git add -u to update files Git already knows about (which will remove the file too).You could also do this:git add user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003\(2\).JPG.  It's the parentheses that are causing problems."
"To manually clean up whitespace from your last 3 commits, you can do this:git rebase --whitespace=fix HEAD~3When I work on a topic branch, I track the upstream branch (usually by creating it like this)git checkout -b topic -tWhich allows me to drop the last argument from git rebase. So once I'm done & ready to merge, I can clean the whole topic branch quickly with:git ws   # aliased to rebase --whitespace=fixNote that, unlike the HEAD~3 example, this will actually rebase your changes upon the upstream branch if it's changed! (But that's also what I want, in my workflow.)Simple fixThe command you quoted(export GIT_EDITOR=: && git -c apply.whitespace=fix add -ue .) && git checkout . && git resetworks if you first add the files you want to fix with git add -N <files you want to fix>.  The add -N essentially tells Git to pretend you'd previously committed empty versions of the files.Error you gotI don't understand why you get fatal: Empty patch. Aborted. error with add -Ae, but it looks like a bug, since doing plain git add -A . && git diff --cached shows that the patch should not actually be empty.Better whitespace fixerI recently updatedmy answer that you linked towith a better Git alias for fixing whitespace. Here's a rewrite of that aliasusingLuke's rebase trick anda less redundant control flow:fixws =!""\  if (! git diff-index --quiet --cached HEAD); then \    \    git diff-files --quiet `git rev-parse --show-toplevel` ; \    export NEED_TO_STASH=$? ; \    \    git commit -m FIXWS_SAVE_INDEX && \    if [ 1 = $NEED_TO_STASH ] ; then git stash save FIXWS_SAVE_TREE; fi && \    git rebase --whitespace=fix HEAD~ && \    git reset --soft HEAD~ && \    if [ 1 = $NEED_TO_STASH ] ; then git stash pop; fi ; \  fi""This fixes whitespace in the index, while preserving the index, andleaving the tree untouched.  With this alias, you can fix unversionedfiles in the repo withgit add --all :/ && git fixws && git resetBut, it also handles the more common case of fixing up whitespace in acommit you're working on. It's complicated because it works even whenthe index or tree are clean.I like Luke's answer, except for the limitation that you need to either manually specify the base commit, or use a rebase-style workflow, where your history is linearized.  I propose a modification that doesn't need an extra argument and doesn't change the topology of your commit graph.  As a shell command:git rebase --whitespace=fix --onto $(git merge-base HEAD @{u})Or as a ~/.gitconfig alias:ws = ""!git rebase --whitespace=fix --onto $(git merge-base HEAD @{u})""I prefer this because sometimes I want to rebase my changes, but if I think think there might be a merge conflict I prefer to merge, so that both my original change and the conflict resolution will be recorded in the history.  That way I can later second-guess the conflict resolution and redo it if necessary.Given that I don't always rebase, I prefer not to mix whitespace-fixing with rebasing; hence this modification to Luke's answer.In addition, I enable the default pre-commit hook which aborts on whitespace errors:cp .git/hooks/pre-commit.sample .git/hooks/pre-commitThis gives the following workflow, which I like because it's manual enough that I know what's going on but automated enough not to get in the way:hack hack hack, introduce whitespace errorattempt to commitcommit fails with whitespace error due to pre-commit hookgit commit --no-verify to commit anywaygit ws use the alias to fixNote on the usage of --onto: It's not necessary here, but I find it easier to reason about how the rebase works this way.  In Luke's version, HEAD~3 is the <upstream> in the man page, while in my version <upstream> keeps its default value of the real upstream of the branch.  You wind up with the same result either way though."
"Well, the message is pretty much self-explanatory. You did not tell git what your name and email address is.Open a command line and type:git config --global user.email ""you@example.com""git config --global user.name ""Your Name""Of course you should enter your real name and email.Afterwards git knows who you are and is able to insert this information in your commits.Seems like smartgit does not add the git binary to your path. You have to add its path to the PATH environment variable or first change to the corresponding directory. You can find a screencast here: http://blog.dragndream.com/?p=97If you are using sourcetree:Repository -> Repository Settings --> Advanced --> uncheck ""Use global user settings"" boxworked great for me.You can solve the problem with the global solution, but firstly I want to describe the solution for each project individually, cause of trustfully compatibility with most of Git clients and other implemented Git environments:Individual SolutionGo to the following location:Local/repo/location/.git/open ""config"" file there, and set your parameters like the example (add to the end of the file):[user]    name = YOUR-NAME    email = YOUR-EMAIL-ADDRESSGlobal SolutionOpen a command line and type:git config --global user.email ""YOU@EXAMPLE.COM""git config --global user.name ""YOUR NAME"""
"Sublime Text 2 (Build 2181)The latest build 2181 just added support for the -w (wait) command line argument. The following configuration will allow ST2 to work as your default git editor on Windows. This will allow git to open ST2 for commit messages and such.git config --global core.editor ""'c:/program files/sublime text 2/sublime_text.exe' -w""Sublime Text 3 (Build 3065)Sublime Text 3 (Build 3065) added the subl.exe command line helper. Use subl.exe -h for the options available to you. I have hot_exit: true and remember_open_files: true set in my Sublime Text user settings. I have found the following to git config to work well for me.git config --global core.editor ""'c:/program files/sublime text 3/subl.exe' -w""With this git config the a new tab is opened in my editor. I edit my commit message, save the tab and close it (CTRL+w). Git will wait until the tab is closed to continue its work.You can use this command on Macgit config --global core.editor ""subl -n -w""Here is the command for Mac users:git config --global core.editor ""subl -n -w""From: https://help.github.com/articles/using-sublime-text-2-as-your-default-editorAs mac, linux works fine with:git config --global core.editor ""subl -n -w""I just successfully made it with the help of PowerShell (command line tools for windows, which is also be use as the default command line on GithubforWindows)Just make a folder ""WindowsPowerShell"" on ""C:\Users\%username%\My Documents"".Then, create a file called ""profile.ps1"".Make sure that you have the correct file extension, .ps1 and not .txt.inside the profile.ps1, put this line to set an alias command:Set-Alias subl 'c:\program files\sublime text 2\sublime_text.exe'Make sure the sublime directory on your machine is correct.You can also see the configuration details in here.Now, I can edit files with Sublime Text 2 via PowerShell command just by typing:subl filenameHopefully this is usefull...what worked for me in cygwin/zsh:in /usr/local/bin create subl_git file#!/bin/bash/cygdrive/c/Program\ Files/Sublime\ Text\ 2/sublime_text.exe -w -n `cygpath -w $@`in gitconfig: editor = /usr/local/bin/subl_gitWith Sublime Text 2 and the following configuration, if nothing happens when you close the git commit's comment file :git config --global core.editor ""'c:/program files/sublime text 2/sublime_text.exe' -w""If the git commit doesn't finish when you close the COMMIT_EDITMSG comment file in Sublime, I've found this is probably because you are running CMD in administrator mode (and have a Sublime Text already opened in non admin mode). I had the same problem and it worked for me when I started my CMD in normal mode. Ps : just wanted to answer to the problem @david pointed out in the accepted answer's comments, but I couldn't post comment since I'm new here... so I've made a new answer, because I think this can be useful to some people encountering the problem.I've faced the same problem with git editor in Windows this evening, and finally I've got it.You'll need to set your editor path with the bash syntax and using the DOS 8.3 format to avoid spaces:This doesn't work (for me):git config --global core.editor ""C://Program files/Sublime Text/sublime_text.exe""This do:git config --global core.editor /C/PROGRA~1/SUBLIME~1/sublime_text.exeYou can get the DOS 8.3 name for a directory with dir /x"
"Bad idea. git add or even better git add -p is a great opportunity to review what you did once again before committing.Anyway, to execute your git alias in a shell you need to use this syntax:c = !git add -A && git commit -mOr you could just use git commit -a which seems to be what you want. This will not automatically commit new files but do you really want to commit every single untracked file? Remember that you might have temporary stuff around which is not on gitignore. While it would be easy to undo/amend a commit that accidentally adds this kind of crap, it's better not to commit it in the first place!"
"Git failed to merge automatically. Try git mergetool and resolve conflicts, then continue your rebase with git rebase --continue"
"I understand that you want to use your GitHub for Mac GUI, but if you were to commit your changes through the terminal instead, here is what you would do:# Get the status of your working copy:$ git status# On branch Integrating-a-recommendations-textbox# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   assets/app/scripts/templates/popups/recommend.hbs#   modified:   web/wgwt/models.py#   modified:   web/wgwt/views.py## Add each file you want to commit individually:$ git add web/wgwt/models.py# Or add them all at once:$ git add ""*""# Make your commit$ git commit# You can also use the `--all` or `-a` flags during the commit# to add all **tracked/modified** files (but not untracked files)$ git commit -a# To push the new commits to a remote repo, use the following:$ git push <remote-name> head"
"Some other student in your class pushed some revisions since your last checkout / pull.As hd1 pointed out, your best bet is to either git pull, which will likely create a merge commit, after which you might have to explicitly git commit the merge.  I prefer git pull --rebase to linearaize the changes before running git pushRun a git log --graph from the command line to get a good visualization of the current state of your local repository.Do a git fetch to pull down the remote branch without trying to merge or rebase your current changes.  This will allow you to inspect the state of the remote repository with git log --graph origin/masterYour history has diverged from the history of the remote branch. Probably somebody has pushed commits to the remote branch since your last git pull. The solution is either:git pullorgit pull --rebaseThe later tries to rewrite your commits so that they appear at the tip of the branch, rebased on top of the history of the remote branch. The former does a simple merge between your history of the history of the remote branch."
"You can see a similar error message in ""Git stash pop- needs merge, unable to refresh index"".In your case, you would need to resolve the merge (fixing merge conflicts) in order for the stash to proceed.To reset a merged file, the OP used:git reset HEAD -- filename"
"This can cause the remote repository to lose commits; use it with care.If you do not wish to merge the remote branch into your local branch (see differences with git diff), and want to do a force push, use the push command with -fgit push -f origin <branch>where origin is the name of your remote repo.Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. This can cause the remote repository to lose commits; use it with care.As the message tells you,Merge the remote changes (e.g. 'git pull')Use git pull to pull the latest changes from the remote repository to your local repository. In this case, pulling changes will require a merge because you have made changes to your local repository. I'll provide an example and a picture to explain. Let's assume your last pull from origin/branch was at Commit B. You have completed and committed some work (Commit C). At the same time, someone else has completed their work and pushed it to origin/branch (Commit D). There will need to be a merge between these two branches.local branch:                         --- Commit C                                     /                                   /                                  /origin/branch: Commit A ------ Commit B ---- Commit DBecause you are the one that wants to push, Git forces you to perform the merge. To do so, you must first pull the changes from origin/branch.local branch:                         --- Commit C -- Commit E                                    /               /                                              /               /                                               /               /               origin/branch: Commit A ------ Commit B ---- Commit D After completing the merge, you will now be allowed to fast-forward origin/branch to Commit E by pushing your changes.         Git requires that you handle merges yourself, because a merge may lead to conflicts.Have you updated your code before pushing?Use git pull origin master before you push anything.I assume that you are using origin as a name for your remote.You need to pull before push, to make your local repository up-to-date before you push something (just in case someone else has already updated code on github.com). This helps in resolving conflicts locally.This normally happens when you git commit and try to git push changes before git pulling on that branch x.The normal flow would be as below, STEP 1: git stash your local changes on that branch.STEP 2: git pull origin branch_name -v to pull and merge to locally commited changes on that branch, give the merge some message, and fix conflicts if any.STEP 3: git stash pop the stashed changes.STEP 4: git push origin branch_name -v the merged changes.Replace branch_name with master (for master branch).Some of you may be getting this error because Git doesn't know which branch you're trying to push.If your error message also includeserror: failed to push some refs to 'git@github.com:jkubicek/my_proj.git'hint: Updates were rejected because a pushed branch tip is behind its remotehint: counterpart. If you did not intend to push that branch, you may want tohint: specify branches to push or set the 'push.default' configurationhint: variable to 'current' or 'upstream' to push only the current branch.then you may want to follow the handy tips from Jim Kubicek, Configure Git to Only Push Current Branch, to set the default branch to current.git config --global push.default currentSometimes we forgot the pulling and did lots of works in the local environment.If someone want to push without pull,git push --forceis working. This is not recommended when working with other people, but when your work is a simple thing or a personal toy project, it will be a quick solution.I mentioned this in my tutorial, How To Use GitHub: A tutorial for beginners.When you create a new repository on GitHub, GitHub may ask you to create a readme file. If you create a readme file directly on GitHub, then you will need to first make a ‰Û÷pull‰Ûª request before the ‰Û÷push‰Ûª request will be successful.These commands will ‰Û÷pull‰Ûª the remote repository, merge it with your current files, and then ‰Û÷push‰Ûª all the files back to GitHub:git pull https://github.com/thomas07vt/MyFirstRepo.git mastergit push https://github.com/thomas07vt/MyFirstRepo.git masterI was getting a similar error while pushing the latest changes to a bare Git repository which I use for gitweb. In my case I didn't make any changes in the bare repository, so I simply deleted my bare repository and cloned again:git clone --bare <source repo path> <target bare repo path>Just had the same issue but in my case I had typed the wrong branch on the remote.  So, it seems that is another source of this issue... double check you're pushing to the correct branch.I experienced the very same problem and it turned out I was on a different (local) branch than I thought I was AND the correct local branch was behind in commits from remote.My solution: checkout the correct branch, cherry-pick the commit from the other local branch, git pull and git pushIs your branch name the same as the remote branch name?If no, you should checkout a new branch with the same name as the remote branch and try push it again.Assume the remote branch you want to push is [testing] and your local branch is named as [test].If you`re not in test branch, first switch to it.git checkout testThen open a new branch and name it testing.git checkout -b testingNow, it`s time to push it:git push [remote repo] testingIn my case, I had ""mybranch"" checked out, and had done git pull, so I couldn't figure out why the push wasn't working. Eventually, I realized that I was pushing the wrong branch. I was typing git push origin master instead of git push origin mybranch.So if you've already done git pull and still getting this message, make sure you're pushing the correct branch.Another solution is to advance the head of the remote by making another commit if you can. After you pull this advanced head into the local subtree then you will be able to push from it again."
"click fork button on original github project pageclone your forked repository instead originalpush to itpress Pull Requests button on your repositorycreate itwait for original author to accept itSee the github help on cloning URL. With HTTPS, if you are not authorized to push, you would basically have a read-only access. So yes, you need to ask the author to give you permission.If the author doesn't give you permission, you can always fork (clone) his repository and work on your own. Once you made a nice and tested feature, you can then send a pull request to the original author.For some reason my push and pull origin was changed to HTTPS-url in stead of SSH-url (probably a copy-paste error on my end), but trying to push would give me the following error after trying to login:Username for 'https://github.com': xxxPassword for 'https://xxx@github.com': remote: Invalid username or password.Editing the [remote ""origin""] url in the .git/config file to point the SSH url, there was no problem:[remote ""origin""]    url = git@github.com:<username>/<repo>.gitHope this helps!"
"I was able to resolve the issue myself.What tipped me off is running ""git status"" did not show that file.Instead of using the common solution:cd $(brew --repository)git reset --hard FETCH_HEADI had to do:cd [directory of the file in question]git reset --hard FETCH_HEADThat resolved the problem.This fixed it for me:http://stackoverflow.com/a/20138806cd `brew --prefix`git fetch origingit reset --hard origin/masterI had this problem after manually correcting a URL in the numpy formula.  I was able to correct this later by:cd /usr/local/Library/Taps/homebrew/homebrew-pythongit checkout -- numpy.rbbrew update"
"There are no files to commit, so git is returning a non-zero error code. This leads fabric to believe that the previous command failed, so it aborts. To be honest, unless you're absolutely certain that git is mistaken, and there are changes to commit, then I'm tempted to believe that your script is not actually malfunctioning at all.If you're certain there are files to commit, you should investigate why the changes aren't being picked up.If you'd like fabric to exit in a more friendly way, you can try something like this:from fabric.api import settingsimport sysdef deploy():    process = test()    os.chdir('\\Documents and Settings\markw\GitTest')    with cd('\\Documents and Settings\markw\GitTest'):        with settings(warn_only=True):            local('git reset --soft HEAD')            local('git pull origin master')            local('git add -A')            commit = local('git commit -a -m ""Latest Selenium screenshots for %s""' % (process))            if commit.failed:                print 'Nothing to commit, exiting...'                sys.exit(0)            else:                local('git push -u origin master')I've also added a -a to your git commit line, so it's also committing changes as well as added files.Also, I'm not sure of the point of your os.chdir() line."
"You need a clean state to change branches. The branch checkout will only be allowed if it does not affect the 'dirty files' (as Charles Bailey remarks in the comments).Otherwise, you should either:stash your current change orreset --hard HEAD  (if you do not mind losing those minor changes) orcheckout -f (When switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes. )If you want to discard the changes,git checkout -- <file>git checkout branchIf you want to keep the changes,git stash savegit checkout branchgit stash popwell, it should begit stash savegit checkout branch// do somethinggit checkout oldbranchgit stash popFollow, $: git checkout -f$: git checkout next_branchIf you have made changes to files that Git also needs to change when switching branches, it won't let you. To discard working changes, use:git reset --hard HEADThen, you will be able to switch branches.Note that if you've merged remote branches or have local commits and want to go back to the remote HEAD you must do:git reset --hard origin/HEADHEAD alone will only refer to the local commit/merge -- several times I have forgotten that when resetting and end up with ""your repository is X commits ahead.."" when I fully intended to nuke ALL changes/commits and return to the remote branch."
"Most probably, the situation that happened is the following:you've made some modifications to the file and staged them to the index.you've deleted the file.when you call commit, PyCharm automatically calls ""git add"" on all modified files, and ""git rm"" on all deleted files.The latter command produced the error. By this message Git warns you that you are about to delete a file, which you have not only changed, but even have staged the changes.To solve the problem just call git rm -f <file> from the command line.The reason why PyCharm doesn't handle this situation properly is because it doesn't understand Git staging area in the implementation. Feel free to vote for IDEA-63391 (general problem) and IDEA-85948 (probably the same issue as you've faced).Btw, my version of Git reports a more clear message, so you must be using some older one:error: 'dir with spaces/newfile.txt' has changes staged in the index(use --cached to keep the file, or -f to force removal)"
"Just do:git push origin master --forceor if you have a specific repo:git push https://git.... --forceThis will delete your previous commit(s) and push your current one.It may not be proper, but if anyone stumbles upon this page, thought they might want a simple solution...Short flagAlso note that -f is short for --force, sogit push origin master -fwill also work.And if push --force doesn't work you can do push --delete. Look at 2nd line on this instance:git reset --hard HEAD~3  # reset current branch to 3 commits agogit push origin master --delete  # do a very very bad bad thinggit push origin master  # regular pushBut beware...Never ever go back on a public git history!In other words:Don't ever force push on a public repository.Don't do this or anything that can break someone's pull.Don't ever reset or rewrite history in a repo someone might have already pulled.Of course there are exceptionally rare exceptions even to this rule, but in most cases it's not needed to do it and it will generate problems to everyone else.Do a revert instead.And always be careful with what you push to a public repo. Reverting:git revert -n HEAD~3..HEAD  # prepare a new commit reverting last 3 commitsgit commit -m ""sorry - revert last 3 commits because I was not careful""git push origin master  # regular pushIn effect, both origin HEADs (from the revert and from the evil reset) will contain the same files.edit to add updated info and more arguments around push --forceConsider pushing force with lease instead of push, but still prefer revertAnother problem push --force may bring is when someone push anything before you do, but after you've already fetched. If you push force your rebased version now you will replace work from others.git push --force-with-lease introduced in the latest 1.8.5 git release (thanks to @VonC comment on the question) tries to address this specific issue. Basically, it will bring an error and not push if the remote was modified since your latest fetch.This is good if you're really sure a push --force is needed, but still want to prevent more problems. I'd go as far to say it should be the default push --force behaviour. But it's still far from being an excuse to force a push. People who fetched before your rebase will still have lots of troubles, which could be easily avoided if you had reverted instead.And since we're talking about git --push instances...Why would anyone want to force push?@linquize brought a good push force example on the comments: sensitive data. You've wrongly leaked data that shouldn't be pushed. If you're fast enough, you can ""fix""* it by forcing a push on top.* The data will still be on the remote unless you also do a garbage collect, or clean it somehow. There is also the obvious potential for it to be spread by others who'd fetched it already, but you get the idea.First of all, I would not make any changes directly in the ""main"" repo. If you really want to have a ""main"" repo, then you should only push to it, never change it directly.Regarding the error you are getting, have you tried git pull from your local repo, and then git push to the main repo? What you are currently doing (if I understood it well) is forcing the push and then losing your changes in the ""main"" repo. You should merge the changes locally first.I would really recommend to:push only to the main repomake sure that main repo is a bare repo, in order to never have any problem with the main repo working tree being not in sync with its .git base. See ""How to push a local git repository to another computer?""If you do have to make modification in the main (bare) repo, clone it (on the main server), do your modification and push back to itIn other words, keep a bare repo accessible both from the main server and the local computer, in order to have a single upstream repo from/to which to pull/pull.If I'm on my local branch A, and I want to force push local branch B to the origin branch C I can use the following syntax:git push --force origin B:C"
"First, you don't have a master branch after cloning your repo.git clone details:--branch <name>-b <name>Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository's HEAD, point to <name> branch instead.  In a non-bare repository, this is the branch that will be checked out.--branch can also take tags and detaches the HEAD at that commit in the resulting repository.So in your case, if you want to create and track the local website branch to origin, you need to:git push -u origin website(after that, a simple git push will be enough: more on the push policies in ""git - push current vs. push upstream (tracking)"")Your other remote 'upstream' will also only track upstream/website branch:The git remote documentation does mention:With -t <branch> option, instead of the default glob refspec for the remote to track all branches under the refs/remotes/<name>/ namespace, a refspec to track only <branch> is created.  You can give more than one -t <branch> to track multiple branches without grabbing all branches. In your case, you are only tracking upstream/website (+refs/heads/website:refs/remotes/upstream/website) instead of the default refspec (+refs/heads/*:refs/remotes/upstream/*).Try git push origin websiteMay be you configured your master branch under this name. Try and let me know."
"To solve the problem, I removed the file from git, then re-added it by doing the following:git rm ""myPathToAFile""git add .git commit -am 'my commit'Hope this helps someone else!I had the same issue. I'm using Windows 7 and my problem was the ""Maximum Path Length Limitation"" (max 260 characters for the path) (see http://msdn.microsoft.com/en-us/library/aa365247%28VS.85%29.aspx#maxpath for more details).My workaround was to shorten the classname a little bit."
"Short answer:git push -u origin masterLonger answer:You're most likely trying to push commits to a branch that wasn't created yet - for example, on a newly created Github repository without the README file automatically created. By calling git push -u origin master, you specify both the remote that you need to push to (origin, which is usually the git default) and the branch (master, also default in typical cases). According to the git documentation:-u, --set-upstream         For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less git-pull(1) and  other commands. For more         information, see branch..merge in git-config(1).This means that after a successful run of this command, from then on you'll be able to just use git push and git pull and it will default to origin master (with some exceptions).Before you commit a change, you must add it to the index first:git add myfilegit commit -m ""test""Alternatively, you can work in a more SVN-like style and commit everything that is changed:git commit -a -m ""test""Or you can just add-and-commit a single file:git commit myfile -m ""test""Did you do a git add . before you committed?It's always wise to do a git status before either git add or git commit to see what's changed and staged, as well.It's also very handy to do git diff to see the specific changes you are about to commit.Here's what git status shows if you have added a file and then renamed it.me@home:~$ git status# On branch master# Changes to be committed:#   (use ""git reset HEAD <file>..."" to unstage)##   new file:   foo.txt## Changed but not updated:#   (use ""git add/rm <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   deleted:    foo.txt## Untracked files:#   (use ""git add <file>..."" to include in what will be committed)##   bar.txtAt this point you can just do git add . and then git status will give you more information, perhaps pointing out that you still have a new file and a deleted file called foo.txt. To fix this you need to manually git rm foo.txt before doing git commit`In the future if you have files in a git repo that you want to move you should use git mv.One other thing to note, git add adds the content of those files to the index at the time when you run it.  If you run git add and then change the files, the new changes will not show up in the index."
"When it says that, just open the shell and do git status. That will give you a decent idea of what could be wrong and the state of your repo.I can't give you a specific error for this as it happens for many reasons in Github for Windows, like say some problem in updating submodules etc.This error comes because of a merge conflict in files. I faced it after I had updated my Maven Project's pom.xml but didn't commit it. Using git statuserror: Your local changes to the following files would be overwritten by merge:<my project>/pom.xmlPlease, commit your changes or stash them before you can merge.Abortingas the above post suggested helped finding any conflicting changes and you can decide to discard or commit.I had the same problem. It happened to me because of some conflicting changes. I removed the local repository of my project from my desktop and then cloned it again from the github website (using clone option in my account), the error was gone.I had this problem and found it was to do with the proxy. I fixed the problem using this command:  git config --global http.proxy %HTTP_PROXY%This is probably an edge case, but every time I've got this specific error it is because I've recently mapped a drive in Windows, and powershell cannot find it.A computer restart (of all things) fixes the error for me, as powershell can now pick up the newly mapped drive. Just make sure you connect to the mapped drive BEFORE opening the github client.I had the same problem. In my case git could not find the global variable %HTTP_PROXY%, simply because Windows was not providing/using it.I solved it by excluding the variable from the git config file (located in %USERPROFILE%\.gitconfig):[http]#   proxy = %HTTP_PROXY%Have you changed your Windows password recently, or at least the one you use to connect to your proxy?This was my problem, and git status couldn't help me. I had to change my login credentials in the "".git/config"" file to get past this error.This error also occurs if the branch you're trying to sync has been deleted. git status won't tell you that, but you'll get a ""no such ref was fetched"" message if you try git pull."
"As mentioned in this answer, your git repo would need the full history for any remote (pull/fetch) command to work properly.A git log --full-history should show that commit.The simplest solution would be to re-clone the repo and import it in your NetBeans workspace."
"I googled this error and found your page, in my case the problem was that I had done:git clone --depth 1 https://github.com/example/nifty.gitbut months later, forgetting that I had only grabbed the latest commits, when I tried to push it to another remote it complained. It took me a little while to figure out that it wasn't a damaged repo but just the fact that I never had the parent commits! Hopefully that helps someone.This fixed it for my case:git fetch --unshallow""Dangling"" objects may not be a problem. It could just mean that you've done some resetting, rebasing, and/or deleted branches that weren't fully merged. ""Missing"", on the other hand, is more serious, I believe. Take a look at this article on repairing a damaged repo. That might help you out. You could also try upgrading git if you're out of date. A newer version might be a little smarter."
"For me the problem was the execution of clone via sudo.If you clone to a directory where you have user permission ( /home/user/git) it will work fine.(Explanation: Running a command a superuser will not work with the same public key as running a command as user. Therefore github refused the connection.) This solutionr requires a SSH key already to be set up: https://help.github.com/articles/generating-ssh-keysI had to add my public key to github. https://help.github.com/articles/generating-ssh-keysYes, It's a public key Problem.I'm a windows user,and the page below help me resolve this problem.http://help.github.com/win-set-up-git/more precisely this link should be helpful https://help.github.com/articles/error-permission-denied-publickeyType the following command using your username and repository name:git clone https://github.com/{user name}/{repo name}in Ubuntu this works perfectly.I got a solution after a long time in tutorials.I followed the github tutorial on this link -> https://help.github.com/articles/error-permission-denied-publickey and I was able to connect in every step.But when I was trying to git push -u origin master I got this error:Permission denied (publickey). fatal: Could not read from remote  repository.Please make sure you have the correct access rightsThats how I`ve fixed it!!Go to the project directory using the Terminal and check it out$git remote -vYou will get something like this:origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (fetch)origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (push)If you are using anything different then git@github.com, open the config file on git directory by typing the command:vi .git/configAnd configure the line[remote ""origin""]url = ssh://git@github.com/yourGithubUserName/yourRepo.gitfetch = +refs/heads/*:refs/remotes/origin/In my case, I had to setup the public key for another user, as I already had one for my main user. once I switched users and performed the commands in the link above I was able to perform the setup for my test server without a problem.after you created the RSA key pair, you must to add it to SSH using:ssh-add ~/.ssh/id_rsaor wherever you created your rsa key pair.I had this problem, but none of the solutions above worked. I could clone and fetch but couldn't push. Eventually, I figured out the problem was in the url in my .git/config, it should be:git@github.com:<username>/<project>(not ssh://github.com/<username>/<project>.git or https://github.com/<username>/<project>.git).A good one if you have installed git on your computer:http://help.github.com/mac-set-up-git/Given that none of the answers here worked for me, I finally tracked down my issue connecting to Bitbucket (or Github, doesn't matter in this case) with ssh -vT git@bitbucket.org.In my case, the failure was due to using a DSA key instead of RSA, and apparently my SSH client no longer allows that.debug1: Skipping ssh-dss key /c/Users/USER/.ssh/id_dsa for not in PubkeyAcceptedKeyTypesThe solution was to add this to .ssh/config:Host *    PubkeyAcceptedKeyTypes +ssh-dssThis elegantly appends the ssh-dss key type to all existing accepted public key types and after this was done, git can now ssh into Bitbucket no problem.I faced a similar issue when running SSH or Git Clone in Windows. Following findings helps to solve my problem:When you run ‰ÛÏrhc setup‰Ûù or other ssh methods to generate ssh key, it will create the private key file id_rsa in .ssh folder in your home folder, default is C:\User\UserIDGit for windows has its own .ssh folder in its installation directory. When you run git/ssh, it will look for private key file id_rsa in this folderSolved the problem by copying id_rsa from the home folder .ssh folder to the .ssh folder in the git installation directoryAlso, I think there  a way to ‰ÛÏtell‰Ûù git to use the default .ssh folder in home folder but still need to figure out how."
"Use:git reset--mixedinstead of git reset --hard. You will not lose any changes.I used: git reset --hardI lost some changes, but this is ok.To follow up on malat's response, you can avoid losing changes by creating a patch and reapply it at a later time.git diff --no-prefix > patch.txtpatch -p0 < patch.txtStore your patch outside the repository folder for safety.This worked for me:Do $ git statusAnd check if you have Unmerged paths# Unmerged paths:#   (use ""git reset HEAD <file>..."" to unstage)#   (use ""git add <file>..."" to mark resolution)##   both modified:      app/assets/images/logo.png#   both modified:      app/models/laundry.rbFix them with git add to each of them and try git stash again.git add app/assets/images/logo.pngmaybe there are some unmerged paths in your git repository that you have to resolve before stashing."
"Use regular quotes (double quotes "", or quotes '), fellow :) å¬ is too exotic for bash so it splits down your message into tokens by whitespaces and pass these tokens separately to git.In unix-like systems, unlike MS Windows cmd.exe, (well, MinGW and Cygwin are unix-like too :) ) splitting command line into tokens is peformed by a shell, be it a sh- or csh-compatible shell (bash, zsh, ash, sash, ksh, tcsh and so on and so forth). A program receives a ready to use array of arguments. So if a user wants to pass a line with spaces, escape-sequences and so on, she should quote or escape that line properly."
"You did it the wrong way around. You are meant to reset first, to unstage the file, then checkout, to revert local changes.Try this:$ git reset foo/bar.txt$ git checkout foo/bar.txtThis worked perfectly for me:$ git reset -- foo/bar.txt$ git checkout foo/bar.txtgit checkout origin/[branch] .git status// Note dot (.) at the end. And all will be good"
"Get back to where you started with$ git rebase --abortSay your history is$ git log --pretty=onelinea931ac7c808e2471b22b5bd20f0cad046b1c5d0d cb76d157d507e819d7511132bdb5a80dd421d854f bdf239176e1a2ffac927d8b496ea00d5488481db5 aThat is, a was the first commit, then b, and finally c.Running git rebase --interactive HEAD~2 gives you an editor withpick b76d157 bpick a931ac7 c# Rebase df23917..a931ac7 onto df23917## Commands:#  p, pick = use commit#  r, reword = use commit, but edit the commit message#  e, edit = use commit, but stop for amending#  s, squash = use commit, but meld into previous commit#  f, fixup = like ""squash"", but discard this commit's log message## If you remove a line here THAT COMMIT WILL BE LOST.# However, if you remove everything, the rebase will be aborted.#Changing b's pick to squash will result in the error you saw, but if instead you squash c into b by changing the text topick b76d157 bs a931ac7 cand save-quitting your editor, you'll get another editor whose contents are# This is a combination of 2 commits.# The first commit's message is:b# This is the 2nd commit message:cWhen you save and quit, the contents of the edited file become commit message of the new combined commit:$ git log --pretty=oneline18fd73d3ce748f2a58d1b566c03dd9dafe0b6b4f b and cdf239176e1a2ffac927d8b496ea00d5488481db5 aIf there are multiple commits, you can use git rebase -i to squash two commits into one.If there are only two commits you want to merge, and they are the ""most recent two"", the following commands can be used to combine the two commits into one:git reset --soft ""HEAD^""git commit --amendFirst you should check how many commits you have:git logThere are two status:One is that there are only two commits:For example:commit Acommit B(In this case, you can't use git rebase to do) you need to do following. $ git reset --soft HEAD^1$ git commit --amendAnother is that there are more than two commits; you want to merge commit C and D.For example:commit Acommit Bcommit Ccommit D(under this condition, you can use git rebase)git rebase -i BAnd than use ""squash"" to do. The rest thins is very easy. If you still don't know, please read http://zerodie.github.io/blog/2012/01/19/git-rebase-i/you can cancel the rebase withgit rebase --abortand when you run the interactive rebase command again the 'squash; commit must be below the pick commit in the listI often use git reset --mixed to revert a base version before multiple commits which you want to merge, then I make a new commit, that way could let your commit newest, assure your version is HEAD after you push to server.commit ac72a4308ba70cc42aace47509a5eAuthor: <me@me.com>Date:   Tue Jun 11 10:23:07 2013 +0500    Added algorithms for Cosine-similaritycommit 77df2a40e53136c7a2d58fd847372Author: <me@me.com>Date:   Tue Jun 11 13:02:14 2013 -0700    Set stage for similar objectscommit 249cf9392da197573a17c8426c282Author: Ralph <ralph@me.com>Date:   Thu Jun 13 16:44:12 2013 -0700    Fixed a bug in space world automationIf I want to merge head two commits into one, first I use : git reset --mixed 249cf9392da197573a17c8426c282""249cf9392da197573a17c8426c282"" was third version, also is your base version before you merge, after that, I make a new commit :git add .git commit -m 'some commit message'It's all, hope is another way for everybody.FYI, from git reset --help: --mixed     Resets the index but not the working tree (i.e., the changed files are     preserved but not marked for commit) and reports what has not been     updated. This is the default action.Assuming you were in your own topic branch.  If you want to merge the last 2 commits into one and look like a hero, branch off the commit just before you made the last two commits.  git checkout -b temp_branch HEAD^2Then squash commit the other branch in this new branch: git merge branch_with_two_commits --squashThat will bring in the changes but not commit them.  So just commit them and you're done.git commit -m ""my message""Now you can merge this new topic branch back into your main branch."
"The ^ character means ""find the first parent of the commit with this ref/hash"". Therefore, fe4e3fc^ means ""find the parent of the commit with hash fe4e3fc"". Since that is the initial commit for the repo, this is naturally impossible, because there are no commits prior to that one.Also worth knowing about is the ~ character, which is similarly used to specify the parent (or grandparent, etc.) of a commit. See this question for some detail on how ^ and ~ work. In this case, you could use HEAD~2 and be referring to the same commit, fe4e3fc, because it is two ""generations"" back from HEAD.If your goal is to modify the initial commit in some way, see this question."
"You simply need to remove the origin remote that has the incorrect reference with:$ git remote rm originThen restart the add, and push, and you should be good to go.$ git remote add origin git@github.com:christineh/Hello-World.git$ git push -u origin master"
"If git status does indicate that you do have an active master branch (since you did make a first commit after all), check if you made any typo when defining your remote: see ""Push origin master error on new repository"":git remote rm originThen I recreated the origin, making sure the name of my origin was typed EXACTLY the same way my origin was spelled.git remote add origin git@....You can simplify with:git remote set-url origin git@....Then you can establish a tracking link between the local branch and the remote tracking branch:git push -u origin masterYou can also push it to a different branch on origin:git push -u origin master:anotherBranchuse git branch -m to rename your local repository to have the same name you want to push to the remoteYou need to make sure that the branch name is the same locally and remotely. So it's not enough to have master branch on remote. You also need this branch locally."
"git push -f origin myBranch should work (provided you are aware this can be dangerous if MyBranch was already fetched by others in their own repo)Note: if your remote repo ('origin') has its config set withreceive.denyNonFastForwards trueit will deny any non fast-forward push (even when forced).See ""Is there a way to configure git repository to reject 'git push --force'?"".The OP user654019 reportsI managed to solve the problem this time by setting denyNonFastForwards to false and using -f to force the pushIf the OP didn't have access to the repo, he/she would have to:reset the local HEAD to its original position (see ""Recover from git reset --hard?""):git reset HEAD@{1}make a new commit which cancel your merge, as described in the ProGit book, with git revert:git revert -m 1 HEAD~ (in your case)By example:$ git revert -m 1 [sha_of_C8]Finished one revert.[master 88edd6d] Revert ""Merge branch 'jk/post-checkout'"" 1 files changed, 0 insertions(+), 2 deletions(-)A complete discussion on how to revert a merge can be found here.The idea remains to generate only new commits, including one reverting the changes introduced by the merge commit.You then can push that new commit, as a fast-forward change."
"By giving everything under the .git directory full (777) permissions, you have enabled all of the example scripts that ship with Git in .git/hooks, normally with their execute bits off. When you try to commit the now executable sample pre-commit script tries to run to format the commit as a patch. Unless this is what you are trying to do, I suggest you chmod /git/hooks/* to 644, so that the hook scripts do not execute.Edit -- Resetting the hook permissions gets you back the condition where you had the problem first. Next try the commit with the --no-verify flag, which is supposed to bypass the pre-commit hook (and also some minor checks on the commit message).  This may be a workaround, but I still don't see why you had the initial problem. The code looks very straightforward -- I don't see how it could try to execute that hook if it's not enabled.If that fails in the same way, then I would think that the ExpanDrive/MacFuse system is not handling permissions properly (but that's pretty unlikely).I ended up setting up a local development environment on my laptop, I'm giving up on trying to use git through ExpanDrive. After spending some more time with it it seems like these tools just weren't meant to work together.I believe recent versions of git use a different mechanism than permissions to enable hooks. So if you are using a recent version, you might remove everything from the .git/hooks directory (or move it somewhere else), and see if that is the problem."
"If there is nothing to push git returns exit status 1. Execute shell build step is marked as failed respectively. You can use OR statement || (double pipe).git commit -m 'some messasge' || echo 'Commit failed. There is probably nothing to commit.'That means, execute second argument if first failed (returned exit status > 0). Second command always returns 0. When there is nothing to push (exit status 1 -> execute second command) echo will return 0 and build step continues.To mark build as unstable you can use post-build step Jenkins Text Finder. It can go through console output, match pattern (your echo) and mark build as unstable.Jenkins is executing shell build steps using /bin/sh -xe by default. -x means to print every command executed. -e means to exit with failure if any of the commands in the script failed.So I think what happened in your case is your git command exit with 1, and because of the default -e param, the shell picks up the non-0 exit code, ignores the rest of the script and marks the step as a failure. We can confirm this if you can post your build step script here.If that's the case, you can try to put #!/bin/sh so that the script will be executed without option; or do a set +e or anything similar on top of the build step to override this behavior. Edited: Another thing to note is that, if the last command in your shell script returns non-0 code, the whole build step will still be marked as fail even with this setup. In this case, you can simply put a echo command at the end to avoid that. Another related questionTo stop further execution when command fails:command || exit 0To continue execution when command fails:command || trueJenkins determines the success/failure of a step by the return value of the step.  For the case of a shell, it should be the return of the last value.  For both Windows CMD and (POSIX) Bash shells, you should be able to set the return value manually by using exit 0 as the last command.You can use the Text-finder Plugin. It will allow you to check the output console for an expression of your choice then mark the build as Unstable.On the (more general) question in title - to prevent Jenkins from failing you can prevent it from seeing exit code 1. Example for ping:bash -c ""ping 1.2.3.9999 -c 1; exit 0""And now you can e.g. get output of ping:output=`bash -c ""ping 1.2.3.9999 -c 1; exit 0""`Of course instead of ping ... You can use any command(s) - including git commit.I was able to get this working using the answer found here:How to git commit nothing without an error?git diff --quiet --exit-code --cached || git commit -m 'bla'The following works for mercurial by only committing if there are changes.  So the build only fails if the commit fails.hg id | grep ""+"" || exit 0hg commit -m ""scheduled commit""There is another way smooth to tell Jenkins not to fail. You can isolate your commit in a build step and set the shell to not fail:set +egit commit -m ""bla"""
"I got the same message. And it was because I have managed to get the same Change-Id for two commits. Maybe due to some cherry-picking or similar between my local branches. Solved by removing the Change-Id from the commit message, a new Id then was added by the commit hook.I found the following page which details exactly why you're unable to push your changes to the origin due to the change XXXXX closed error: https://git.eclipse.org/r/Documentation/error-change-closed.htmlCheers!The change 14823 closed message does not come from vanilla git. It indicates that whoever maintains that repository has an update or post-update hook that is evaluating your push and rejecting it due to local policy (I'm guessing you're adding additional commits to an issue that has already been marked as completed/closed). You'll need to find out what those policies are, and whether you need to somehow get the change re-opened so you can add commits to it, or if you need to create a new change request and (probably) rebase your work against it.You're pushing to gerrit, which is a code review tool, as indicated by both the url (ssh://xxxxx@gerrit.dev.xxxxx.net:29418/xxxxxx) and the ""HEAD -> refs/for/master"" message. You need to consult with whoever maintains the repository you're trying to push to in order to figure out why the change is being rejected."
"Use git add --ignore-errors .This will still give an error for the unreadable file(s), but not a fatal one. The other files will be added.Would it help if you added that file to your .gitignore file?  So all other files would be versioned and that file would get ignored (unless you need it).Just exclude the file. You can add .mysql_history to a .gitignore file, or add it to .git/info/exclude.Adding an entry to .gitignore will propagate the setting with the repo (since .gitignore is stored with the repo); adding it to .git/info/exclude makes it ""personal"" because this file is not propagated with the repo. Either way, .mysql_history will be ignored by git-add and friends.You can read more about ignoring files with Git on this man page.sudo chown $(whoami): .git/objects/ -R; git add --ignore-errors .fixed it for me. The first half fixed ownership, (someone checked-in as root, naughty) and the second half makes errors non-fatal. The second half on its own helped me track down which directory was owned by root."
"Detached head means you are no longer on a branch, you have checked out a single commit in the history (in this case the commit previous to HEAD, i.e. HEAD^).You only need to checkout the branch you were on, e.g. git checkout masterNext time you have changed a file and want to restore it to the state it is in the index, don't delete the file first, just dogit checkout -- path/to/fooThis will restore the file foo to the state it is in the index.If you have changed files you don't want to lose, you can push them. I have committed them in the detached mode and after that you can move to a temporary branch to integrate later in master.git commit -m "".....""git branch my-temporary-workgit checkout mastergit merge my-temporary-workExtracted from: What to do with commit made in a detached headWhen you check out a specific commit in git, you end up in a detached head state...that is, your working copy no longer reflects the state of a named reference (like ""master"").  This is useful for examining the past state of the repository, but not what you want if you're actually trying to revert changes.If you have made changes to a particular file and you simply want to discard them, you can use the checkout command like this:git checkout myfileThis will discard any uncommitted changes and revert the file to whatever state it has in the head of your current branch.  If you want to discard changes that you have already committed, you may want to use the reset command.  For example, this will reset the repository to the state of the previous commit, discarding any subsequent changes:git reset --hard HEAD^However, if you are sharing the repository with other people, a git reset can be disruptive (because it erases a portion of the repository history).  If you have already shared changes with other people, you generally want to look at git revert instead, which generates an ""anticommit"" -- that is, it creates a new commit that ""undoes"" the changes in question.The Git Book has more details.How to exit (‰ÛÏfix‰Ûù) detached HEAD state when you already changed something in this mode and want to save your changes. (That part is optional though.)Commit changes you want to keep. If you want to take over any of the changes you made in detached HEAD state, commit them. Like:git commit -a -m ""your commit message""Discard changes you do not want to keep. The hard reset will discard any uncommitted changes that you made in detached HEAD state:git reset --hard(Without this, step 3 would fail, complaining about modified uncommitted files in the detached HEAD.)Check out your branch. Exit detached HEAD state by checking out the branch you worked on before, for example:git checkout masterTake over your commits. You can now take over the commits you made in detached HEAD state by cherry-picking, as shown in my answer to another question.git refloggit cherry-pick <hash1> <hash2> <hash3> ‰Û_Here's what I just did after I realized I was on a detached head and had already made some changes.I committed the changes.$ git commit -m ""...""[detached HEAD 1fe56ad] ...I remembered the hash (1fe56ad) of the commit. Then I checked out the branch I should have been on.$ git checkout masterSwitched to branch 'master'Finally I applied the changes of the commit to the branch.$ git cherry-pick 1fe56ad[master 0b05f1e] ...I think this is a bit easier than creating a temporary branch.If you have made some changes and then realized that you are on a detached head, there is a simple solution for that: stash -> checkout master -> stash pop:git stashgit checkout master   # Fix the detached head stategit stash pop         # ... or for extra safety use 'stash apply' then later                       # after fixing everything do 'stash drop'You will have your uncommited changes and normal ""attached"" HEAD, like nothing happened."
"You probably did some history rewriting? Your local branch diverged from the one on the server. Run this command to get a better understanding of what happened:gitk HEAD @{u}I would strongly recommend you try to understand where this error is coming from. To fix it, simply run:git push -fThe -f makes this a ‰ÛÏforced push‰Ûù and overwrites the branch on the server. That is very dangerous when you are working in team. Butsince you are on your own and sure that your local state is correctthis should be fine. You risk losing commit history if that is not the case.This happened to me when I was trying to push the develop branch (I am using git flow). Someone had push updates to master. to fix it I did:git co mastergit pullWhich fetched those changes. Then,git co developgit pullWhich didn't do anything. I think the develop branch already pushed despite the error message. Everything is up to date now and no errors."
"I've only ever seen this error on Windows and what it seems to mean is that something blocked git from modifying a file at the moment when it tried to a apply a patch.Windows tends to give processes exclusive access to files when it shouldn't really be necessary, in the past virus checkers have been one source of suspicion but I've never proved this conclusively.Probably the easiest thing to do is to abort and try again, hoping that it doesn't happen the next time.git rebase --abortYou can attempt to use git apply and knowledge of what commit git was actually trying to do before doing a git rebase --continue but in all honesty I wouldn't recommend this. Most of the times I've seen this tried there's been a better than evens chance that something gets accidentally missed or messed up.Try closing any programs that have the folder open, such as editors, explorer windows, command prompts, and FTP programs. This always fixes the issue for me on Windows.Just close VISUAL STUDIO. It might workWhen I see this on my machine, it's worse than just a ""some process has the file open"".  The actual ownership of the file gets jacked up to the point where I (running as administrator) can only access it after rebooting.Nearest I can tell, IIS is part of the problem.  If I switch between two major branches that require a lot of files to modify, git will delete a file or directory (usually DLLs) while IIS is trying to do something or another with it.  At this point, the IIS process automatically overwrites the file on disk with a version that's locked and appears to be owned by nobody.Stopping IIS at this point doesn't do it.  Best I've found out to do is to reboot, and remember to stop IIS before changing across major branches in the future.I know that doesn't really answer the question, but might be helpful to others.On Windows, it can be a TortoiseGIT process that blocks those files. Open task manager and end process TGitCache.exe.This can also happen when you're using SublimeText and the popup window asking you to buy the program is not closed.I had a similar problem. But it was very simple to resolve. On a Windows machine, my file explorer had a folder open that existed in one branch but not in the other I checked out. Closing the File explorer resolved the problem.If the IDE you use(in case you use one) might have been getting in the way as well. That's what happened to me when using QtCreator.My encounter with this problem was caused by my editor, Intellij.  As part of its internal version controls, it had gone through and locked all hidden git files.  (For various reasons, I was not using the git plugin that comes with Intellij...)  So I opened a normal dos window as Administrator, changed to the directory, and executedattrib -R /SThat removed the lock on the files and everything worked after that and I could sync my changes using the GitHub windows client.I agree with the above ""Close Visual Studio"" answers. However, an additional step I had to do even after I'd closed Visual Studio was to manually kill the ""devenv.exe"" Visual Studio process in Task Explorer.After I had done this I was able to again run in gitbash:git pulland the ""cannot stat filename"" error disappeared. It is perhaps due to a Visual Studio extension keeping the process open for longer even after closing."
"Since you have already edited the conflict file, you just need git add mod/assign/locallib.phpthen git cherry-pick --continueYou attempted to do a merge (via either git merge or git pull) and have files that have conflicts that are not resolved.  If you do git status, you will likely see file(s) listed as being 'changed by both'.  You need to take care of this before you do anything else.  Do git mergetool and it will bring up the files one at a time.  Fix the file so that the conflicts are resolved and then you should be able to proceed."
"The way a cherry-pick works is by taking the diff a changeset represents (the difference between the working tree at that point and the working tree of its parent), and applying it to your current branch.So, if a commit has two or more parents, it also represents two or more diffs - which one should be applied?You're trying to cherry pick fd9f578, which was a merge with two parents. So you need to tell the cherry-pick command which one against which the diff should be calculated, by using the -m option. For example, git cherry-pick -m 1 fd9f578 to use parent 1 as the base.I can't say for sure for your particular situation, but using git merge instead of git cherry-pick is generally advisable. When you cherry-pick a merge commit, it collapses all the changes made in the parent you didn't specify to -m into that one commit. You lose all their history, and glom together all their diffs. Your call."
"It looks like Git tried to remove the .git/rebase-merge directory but wasn't able to remove it completely. Have you tried copying that folder away? Also copy away the .git/rebase-apply folder if that is present.I had a similar problem due to a zombie vim.exe process. Killing it in Task Manager, followed by a git rebase --abort fixed it.Had same problem in Eclipse. Could not Rebase=>abort from Eclipse.Executing git rebase --abort from Git Bash Worked for me.On Windows, if you are unwilling or unable to restart the machine see below.Install Process Explorer: https://technet.microsoft.com/en-us/sysinternals/bb896653.aspxIn Process Explorer, Find > File Handle or DLL ...Type in the file name mentioned in the error (for my error it was 'git-rebase-todo' but in the question above, 'done').Process Explorer will highlight the process holding a lock on the file (for me it was 'grep').Kill the process and you will be able to abort the git action in the standard way.In my case it was because I had opened SmartGit's Log in the respective Git project and Total Commander in the respective project directory. When I closed both I was able to rebase without any problem.The more I think about it, the more I suspect Total Commander, i.e. Windows having a lock on opened directory the git rebase was trying to something with.Friendly advice: When you try to fix something, always do one change at a time. ;)"
"Your repo is yours, what goes on in it is entirely your business until you push or (allow a) fetch or clone. When you deleted your windows repo -- that folder didn't represent your local repo, it was your actual local repo, you deleted everything done in it that was never pushed, fetched or cloned.edit:"
"I had this problem too. I don't know why the first letter was missing, it may have been a second glitch. The real problem was solved by clicking the ""Add to Git Index"" button. Once I did the Add to Index, my Commit worked fine. No idea why the first letter was missing on the error.This really worked to me!1) Copy your project to somewhere else;2) Delete your damaged project from eclipse;3) Create a new project with the same name;4) Add this project to your branch;5) Copy from your original project, the src, test, build.xml or whatever specific files you need, do not copy project related files;6) synchronized and commit again.Thats it!"
"Sublime Text needs to be launched with the subl line instead of sublime, and will need to be in your PATH.You can check if it's present by running the commands which subl (to show you the path of the file on the computer) or subl -n (to launch a new window in Sublime Text).To fix your git editor you can run git config --global core.editor ""subl""Source: https://www.sublimetext.com/docs/3/osx_command_line.htmlProbably Git is configured to use sublime as editor and it is not able to find it.If you really want to use Sublime as editor check if it is really installed and it is in your  PATH.Alternatively, you can change the editor git uses with this command (replace vim with your preferred editor: emacs, nano, etc):git config --global core.editor ""vim""Edit: Also the correct command to launch Sublime Text in terminal is subl (thanks  QuantumPhi)"
"You can just delete and re-checkout the offending files from the index like this:rm <files>git checkout -- <files>Or, if they are the only modified files (be careful with this command), you can script it like this:git diff --name-only --diff-filter=M | xargs rm --git checkout -- .On a GNU system you can use a slightly safer pipe, but you don't appear to have spaces or other delimiting characters in your filenames in any case.git diff -z --name-only --diff-filter=M | xargs -0 rm --This might happen if you change core.autocrlf config variable (if I understand your problem correctly).If you are at clean state, i.e. just after commit, and you don't have uncomitted changes, forced re-checkout and removing index should do the trick:$ rm .git/index$ git reset --hard HEADThat, I think, would sync both working area files, and the index (staging area) to follow crlf settings.I had this problem when creating new Xcode project. My solution for this problem:In terminal write$: git config --global --editThen in git config file change safecrlf to false. My settings:[core]    autocrlf = input    safecrlf = falseI know git have cmd line tools for this but they don't work for me.And then Xcode create git repos without any problem.Only thing I can think of is to check if core.safecrlf is set to warn.git config --get core.safecrlfI think possible values are true, false, and warn. I believe that setting to false will resolve the warning, though it may not be a good idea.Try this, it worked for me:cd src/au/policy/daodos2unixIf there are other files in that folder, then you'll want to break it up into the following (otherwise it will try to do it on every file in any subdirectories, which may take a while):cd src/au/policy/daodos2unix EmailQueue.javados2unix EmailQueueFactory.javados2unix PolicyPublisher.javaIt ran really quick on my machine and fixed all of the line endings, and it's a little simpler and easier than some of these other fixes."
"Update July 2012 (git 1.7.12+)You now can rebase all commits up to root, and select the second commit Y to be squashed with the first X.git rebase -i --root masterpick sha1 Xsquash sha1 Ypick sha1 Zgit rebase [-i] --root $tipThis command can now be used to rewrite all the history leading from ""$tip"" down to the root commit.See commit df5df20c1308f936ea542c86df1e9c6974168472 on GitHub from Chris Webb (arachsys).Original answer (February 2009)I believe you will find different recipes for that in the SO question ""How do I combine the first two commits of a git repository?""Charles Bailey provided there the most detailed answer, reminding us that a commit is a full tree (not just diffs from a previous states).And here the old commit (the ""initial commit"") and the new commit (result of the squashing) will have no common ancestor.That mean you can not ""commit --amend"" the initial commit into new one, and then rebase onto the new initial commit the history of the previous initial commit (lots of conflicts)(That last sentence is no longer true with git rebase -i --root <aBranch>)Rather (with A the original ""initial commit"", and B a subsequent commit needed to be squashed into the initial one):Go back to the last commit that we want to form the initial commit (detach HEAD):git checkout <sha1_for_B>Reset the branch pointer to the initial commit, but leaving the index and working tree intact:git reset --soft <sha1_for_A>Amend the initial tree using the tree from 'B':git commit --amendTemporarily tag this new initial commit (or you could remember the new commit sha1 manually):git tag tmpGo back to the original branch (assume master for this example):git checkout masterReplay all the commits after B onto the new initial commit:git rebase --onto tmp <sha1_for_B>Remove the temporary tag:git tag -d tmpThat way, the ""rebase --onto"" does not introduce conflicts during the merge, since it rebases history made after the last commit (B) to be squashed into the initial one (which was A) to tmp (representing the squashed new initial commit): trivial fast-forward merges only.  That works for ""A-B"", but also ""A-...-...-...-B"" (any number of commits can be squashed into the initial one this way)I've reworked VonC's script to do everything automatically and not ask me for anything. You give it two commit SHA1s and it will squash everything between them into one commit named ""squashed history"":#!/bin/sh# Go back to the last commit that we want# to form the initial commit (detach HEAD)git checkout $2# reset the branch pointer to the initial commit (= $1),# but leaving the index and working tree intact.git reset --soft $1# amend the initial tree using the tree from $2git commit --amend -m ""squashed history""# remember the new commit sha1TARGET=`git rev-list HEAD --max-count=1`# go back to the original branch (assume master for this example)git checkout master# Replay all the commits after $2 onto the new initial commitgit rebase --onto $TARGET $2For what it's worth, I avoid this problem by always creating a ""no-op"" first commit, in which the only thing in the repository is an empty .gitignore:https://github.com/DarwinAwardWinner/git-custom-commands/blob/master/bin/git-myinitThat way, there's never any reason to mess with the first commit.This will squash second commit into the first one:A-B-C-... -> AB-C-...git filter-branch --commit-filter '    if [ ""$GIT_COMMIT"" = <sha1ofA> ];    then        skip_commit ""$@"";    else        git commit-tree ""$@"";    fi' HEADCommit message for AB will be taken from B (although I'd prefer from A).Has the same effect as Uwe Kleine-KÌ_nig's answer, but works for non-initial A as well.Squashing the first and second commit would result in the first commit being rewritten. If you have more than one branch that is based off the first commit, you'd cut off that branch.Consider the following example:a---b---HEAD \  \   '---dSquashing a and b into a new commit ""ab"" would result in two distinct trees which in most cases is not desirable since git-merge and git-rebase will no longer work across the two branches.ab---HEADa---dIf you really want this, it can be done. Have a look at git-filter-branch for a powerful (and dangerous) tool for history rewriting.You could use rebase interactive to modify the last two commits before they've been pushed to a remotegit rebase HEAD^^ -iIf you simply want to squash all commits into a single, initial commit, just reset the repository and amend the first commit:git reset hash-of-first-commitgit add -Agit commit --amendGit reset will leave the working tree intact, so everything is still there. So just add the files using git add commands, and amend the first commit with these changes. Compared to rebase -i you'll lose the ability to merge the git comments though.You can use git filter-branch for that.  e.g.git filter-branch --parent-filter \'if test $GIT_COMMIT != <sha1ofB>; then cat; fi'This results in AB-C throwing away the commit log of A."
"It's very unfortunate that SourceTree doesn't make it easy for you to revertmerge commits (at least in Windows SourceTree 1.5.2.0). However, reverting themerge can easily be accomplished from the command line, but do you want torevert the merge by adding another commit that is the reverse of theresults of the merge commit, or do you want to just remove the merge commit fromhistory altogether?If you're not sharing your master branch with other people, the simplest thingto do would be to simply do a hard reset to remove the merge commit fromhistory. However, if other people already have a copy of that merge commit, thenyou'll create extra work for them as they try to re-sync their copies ofmaster with the rewritten version of yours.So you need to figure out which option you want to use. I will give the stepsfor both, using the command line:Remove Commit from Historygit checkout mastergit push origin master --forceThat will overwrite the merge commit on origin/master with the current stateof your local master branch, thus removing the merge commit.Revert Commit with another Reverse Commitgit checkout mastergit merge origin/mastergit revert -m 1 HEADThat will bring your local master branch in-sync with origin/master, andthen you can add a reverse commit by telling git revert that the1st parent is the one that should be considered the ""mainline""parent, and it will create the reverse commit relative to the changes brought infrom the other parent commit.If later on you decide that you want to bring in the changes from the otherparent again, then you'll need to add another reversion commit that reverts thereversion commit that you just made (a technique known as ""reverting therevert"").See also:Undo a Git merge?.How do I ‰ÛÏun-revert‰Ûù a reverted Git commit?.git-revert(1) Manual Page.How to revert a faulty merge.This method is based on history deletion so not the best if others are also working on the project:Check out the branch you  made the mistake onRight click on the commit you want to reset the branch toClick ""Reset current branch to this commit""Select ""Hard"" mode and click ""OK""Unfortunately you need terminal to do this bit. Type git push origin name_of_branch --force into terminal (you may need to enter your git repo username and password for it to accept the command)If a message pops up later down the line asking if you would like to abort the rebase or continue. Click ""continue"". If you abort, the merge will appear on your local copy again.This is probably the easiest way to do it so if others are working on the project, make sure to let them all know what you are doing and check you aren't going to screw anyone up."
"Create a branch where you are, then switch to master and merge it:git branch my-temporary-workgit checkout mastergit merge my-temporary-workYou could do something like this.# Create temporary branch for your detached headgit branch tmp# Go to mastergit checkout master# Merge in commits from previously detached headgit merge tmp# Delete temproary branchgit branch -d tmpEven simpler would begit checkout mastergit merge HEAD@{1}but this has the slight danger that if you do make a mistake it can be a little harder to recover the commits made on the detached head.You can just do git merge <commit-number> or git cherry-pick <commit> <commit> ...As suggested by Ryan Stewart you may also create a branch from the current HEAD:git branch brand-nameOr just a tag:git tag tag-nameThis is what I did:Basically, think of the detached HEAD as a new branch, without name. You can commit into this branch just like any other branch. Once you are done committing, you want to push it to the remote.So the first thing you need to do is give this detached HEAD a name. You can easily do it like, while being on this detached HEAD:git checkout -b some-new-nameNow you can push it to remote like any other branch.In my case, I also wanted to fast-forward this branch to master along with the commits I made in the detached HEAD (now some-new-branch). All I did was git checkout mastergit pull # To make sure my local copy of master is up to dategit checkout some-new-branchgit merge master // This added current state of master to my changesOf course, I merged it later to master. That's about it."
"Turns out it was a remote tag with the same name, as suggested by VonC in the comment. This was likely created by some previously aborted release.Although I found the remote tag by manually inspecting the refs/tags directory on the remote repository,  git ls-remote --tags will show them as well and the git push --verbose will also show more about the problem in general.To fix this, first retrieve the remote tags with git fetch --tags.One way to perform the next step is then to simply bypass that release tag by updating the pom.xml to have a higher -SNAPSHOT version (including any references in the same project by other modules to that snapshot), check these in, and do mvn release:clean; mvn release:prepare over again."
"It sounds like you have file in the git repo owned by root.  Since you're ssh'ing in as 'username' to do the push, the files must be writable by username.  The easiest thing is probably to create the repo as the user, and use the same user to do your pushes.  Another option is to create a group, make everything writable by the group, and make your user a member of that group.Ok, I figured it out. The issue was that I didn't have the correct permissions set for myrepo.git and the parent directory git. As root I logged into the server and used:$ chown username /home/username/gitThis then returns drwxrwxr-x 4 username root 4096 2012-10-30 15:51 /home/username/git with the following:$ ls -ld /home/username/gitI then make a new directory for myrepo.git inside git:$ mkdir myrepo.git$ ls -ld myrepo.git/drwxr-xr-x 2 root root 4096 2012-10-30 18:41 myrepo.git/but it has the user set to root, so I change it to username the same way as before.$ chown username myrepo.git/$ ls -ld myrepo.git/drwxr-xr-x 2 username root 4096 2012-10-30 18:41 myrepo.git/I then sign out of root and sign into server as username:Inside git directory:$ cd myrepo.git/$ git --bare initInitialized empty Git repository in /home/username/git/myrepo.git/On local machine:$ git remote add origin      ssh://username@server.com/home/username/git/myrepo.git$ git push origin masterSUCCESS!Hopefully this comes in handy for anyone else that runs into the same issue in the future!Resourceshttp://www.cyberciti.biz/tips/unix-or-linux-commands-for-changing-user-rights.htmlhttp://www.cyberciti.biz/faq/how-to-use-chmod-and-chown-command/It would seem like your user doesn't have permission to write to that directory on the server. Please make sure that the permissions are correct. The user will need write permissions on that directory."
"This looks like you ran git as root locally, thus changing ownership on some of the files tracking the location of the origin branch.Fix the file ownership, and you should be fine:# run this from the root of the git working treesudo chown -R ""${USER:-$(id -un)}"" .Please first give the permissions from root account like belowchmod -R 777 foldernameafter that run the commit command"
"It is possible that you have committed the .class files in the repository already. In which case git will keep tracking them even if you put *.class in the .gitignore file. Run git ls-tree -r master | grep .class. If that gives any output you have committed .class files. If so, try running git rm **/*.class and commit the change.You are not supposed to run git push origin/master you need to specify a remote and then (optionally) a branch. Now git will try to parse origin/master as a remote. Use git push origin master instead (use a space not a /). origin/master is a branch that you should not be changing yourself anyway.Besides you have *.class multiple times in your .gitignore. Multiple occurrences will not change the behavior of git.You first need to push the commits to your local repository and THEN push the commits to the remote one. This allows you to do very easy merges with the remote repository as every commit has a unique SHA id which is used to tell where your repository is in relationship to the remote repo.do the following:git add .git commit -m ""your commit message""git push origin master    (NOT git push origin/master)EDITDid you by chance change the name of the github repository? This SO question should shed some light."
"In some previous backups, your bad objects may have been packed in different files or may be loose objects yet. So your objects may be recovered.It seems there are a few bad objects in your database. So you could do it the manual way.Because of git hash-object, git mktree and git commit-tree do not write the objects because they are found in the pack, then start doing this:mv .git/objects/pack/* <somewhere>for i in <somewhere>/*.pack; do  git unpack-objects -r < $idonerm <somewhere>/*(Your packs are moved out from the repository, and unpacked again in it; only the good objects are now in the database)You can do:git cat-file -t 6c8cae4994b5ec7891ccb1527d30634997a978eeand check the type of the object.If the type is blob: retrieve the contents of the file from previous backups (with git show or git cat-file or git unpack-file; then you may git hash-object -w to rewrite the object in your current repository.If the type is tree: you could use git ls-tree to recover the tree from previous backups; then git mktree to write it again in your current repository.If the type is commit: the same with git show, git cat-file and git commit-tree.Of course, I would backup your original working copy before starting this process.Also, take a look at How to Recover Corrupted Blob Object.Banengusk was putting me on the right track. For further reference, I want to post the steps I took to fix my repository corruption. I was lucky enough to find all needed objects either in older packs or in repository backups.# Unpack last non-corrupted pack$ mv .git/objects/pack .git/objects/pack.old$ git unpack-objects -r < .git/objects/pack.old/pack-012066c998b2d171913aeb5bf0719fd4655fa7d0.pack$ git logfatal: bad object HEAD$ cat .git/HEAD ref: refs/heads/master$ ls .git/refs/heads/$ cat .git/packed-refs # pack-refs with: peeled aa268a069add6d71e162c4e2455c1b690079c8c1 refs/heads/master$ git fsck --full error: HEAD: invalid sha1 pointer aa268a069add6d71e162c4e2455c1b690079c8c1error: refs/heads/master does not point to a valid object!missing blob 75405ef0e6f66e48c1ff836786ff110efa33a919missing blob 27c4611ffbc3c32712a395910a96052a3de67c9bdangling tree 30473f109d87f4bcde612a2b9a204c3e322cb0dc# Copy HEAD object from backup of repository$ cp repobackup/.git/objects/aa/268a069add6d71e162c4e2455c1b690079c8c1 .git/objects/aa# Now copy all missing objects from backup of repository and run ""git fsck --full"" afterwards# Repeat until git fsck --full only reports dangling objects# Now garbage collect repo$ git gcwarning: reflog of 'HEAD' references pruned commitswarning: reflog of 'refs/heads/master' references pruned commitsCounting objects: 3992, done.Delta compression using 2 threads.fatal: object bf1c4953c0ea4a045bf0975a916b53d247e7ca94 inconsistent object length (6093 vs 415232)error: failed to run repack# Check reflogs...$ git reflog# ...then clean$ git reflog expire --expire=0 --all# Now garbage collect again$ git gc       Counting objects: 3992, done.Delta compression using 2 threads.Compressing objects: 100% (3970/3970), done.Writing objects: 100% (3992/3992), done.Total 3992 (delta 2060), reused 0 (delta 0)Removing duplicate objects: 100% (256/256), done.# Done!Try the following commands at first (re-run again if needed):$ git fsck --full$ git gc$ git gc --prune=today$ git fetch --all$ git pull --rebaseAnd then you you still have the problems, try can:remove all the corrupt objects, e.g.fatal: loose object 91c5...51e5 (stored in .git/objects/06/91c5...51e5) is corrupt$ rm -v .git/objects/06/91c5...51e5remove all the empty objects, e.g.error: object file .git/objects/06/91c5...51e5 is empty$ find .git/objects/ -size 0 -exec rm -vf ""{}"" \;check a ""broken link"" message by:git ls-tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8This will tells you what file the corrupt blob came from!to recover file, you might be really lucky, and it may be the version that you already have checked out in your working tree:git hash-object -w my-magic-fileagain, and if it outputs the missing SHA1 (4b945..) you're now all done!assuming that it was some older version that was broken, the easiest way to do it is to do:git log --raw --all --full-history -- subdirectory/my-magic-fileand that will show you the whole log for that file (please realize that the tree you had may not be the top-level tree, so you need to figure out which subdirectory it was in on your own), then you can now recreate the missing object with hash-object again.to get a list of all refs with missing commits, trees or blobs:$ git for-each-ref --format='%(refname)' | while read ref; do git rev-list --objects $ref >/dev/null || echo ""in $ref""; doneIt may not be possible to remove some of those refs using the regular branch -d or tag -d commands, since they will die if git notices the corruption. So use the plumbing command git update-ref -d $ref instead. Note that in case of local branches, this command may leave stale branch configuration behind in .git/config. It can be deleted manually (look for the [branch ""$ref""] section).After all refs are clean, there may still be broken commits in the reflog. You can clear all reflogs using git reflog expire --expire=now --all. If you do not want to lose all of your reflogs, you can search the individual refs for broken reflogs:$ (echo HEAD; git for-each-ref --format='%(refname)') | while read ref; do git rev-list -g --objects $ref >/dev/null || echo ""in $ref""; done(Note the added -g option to git rev-list.) Then, use git reflog expire --expire=now $ref on each of those.When all broken refs and reflogs are gone, run git fsck --full in order to check that the repository is clean. Dangling objects are Ok.Below you can find advanced usage of commands which potentially can cause lost of your data in your git repository if not used wisely, so make a backup before you accidentally do further damages to your git. Try on your own risk if you know what you're doing.To pull the current branch on top of the upstream branch after fetching:$ git pull --rebaseYou also may try to checkout new branch and delete the old one:$ git checkout -b new_master origin/masterTo find the corrupted object in git for removal, try the following command:while [ true ]; do f=`git fsck --full 2>&1|awk '{print $3}'|sed -r 's/(^..)(.*)/objects\/\1\/\2/'`; if [ ! -f ""$f"" ]; then break; fi; echo delete $f; rm -f ""$f""; doneFor OSX, use sed -E instead of sed -r.Other idea is to unpack all objects from pack files to regenerate all objects inside .git/objects, so try to run the following commands within your repository:$ cp -fr .git/objects/pack .git/objects/pack.bak$ for i in .git/objects/pack.bak/*.pack; do git unpack-objects -r < $i; done$ rm -frv .git/objects/pack.bakIf above doesn't help, you may try to rsync or copy the git objects from another repo, e.g.$ rsync -varu git_server:/path/to/git/.git local_git_repo/$ rsync -varu /local/path/to/other-working/git/.git local_git_repo/$ cp -frv ../other_repo/.git/objects .git/objectsTo fix the broken branch when trying to checkout as follows:$ git checkout -f masterfatal: unable to read tree 5ace24d474a9535ddd5e6a6c6a1ef480aecf2625Try to remove it and checkout from upstream again:$ git branch -D master$ git checkout -b master github/masterIn case if git get you into detached state, checkout the master and merge into it the detached branch.Another idea is to rebase the existing master recursively:$ git reset HEAD --hard$ git rebase -s recursive -X theirs origin/masterSee also:Some tricks to reconstruct blob objects in order to fix a corrupted repository.How to fix a broken repository?How to remove all broken refs from a repository?How to fix corrupted git repository? (seeques)How to fix corrupted git repository? (qnundrum)Error when using SourceTree with Git: 'Summary' failed with code 128: fatal: unable to read treeRecover A Corrupt Git Bare RepositoryRecovering a damaged git repositoryHow to fix git error: object is empy / corruptHow to diagnose and fix git fatal: unable to read treeHow to deal with this git errorHow to fix corrupted git repository?GIT: How to 'overwrite', rather than 'merge', a branch on another branchHow to replace master branch in git, entirely, from another branch?Git: ""Corrupt loose object""Git reset = fatal: unable to read treeGit checkout can actually pick out individual files from a revision. Just give it the commit hash and the file name. More detailed info here.I guess the easiest way to fix this safely is to revert to the newest uncommited backup and then selectively pick out uncorrupted files from newer commits. Good luck!Here are the steps I followed to recover from a corrupt blob object.1) Identify corrupt blobgit fsck --full  error: inflate: data stream error (incorrect data check)  error: sha1 mismatch 241091723c324aed77b2d35f97a05e856b319efd  error: 241091723c324aed77b2d35f97a05e856b319efd: object corrupt or missing  ...Corrupt blob is 241091723c324aed77b2d35f97a05e856b319efd2) Move corrupt blob to a safe place (just in case)mv .git/objects/24/1091723c324aed77b2d35f97a05e856b319efd ../24/3) Get parent of corrupt blobgit fsck --full  Checking object directories: 100% (256/256), done.  Checking objects: 100% (70321/70321), done.  broken link from    tree 0716831e1a6c8d3e6b2b541d21c4748cc0ce7180              to    blob 241091723c324aed77b2d35f97a05e856b319efdParent hash is 0716831e1a6c8d3e6b2b541d21c4748cc0ce7180.4) Get file name corresponding to corrupt blobgit ls-tree 0716831e1a6c8d3e6b2b541d21c4748cc0ce7180  ...  100644 blob 241091723c324aed77b2d35f97a05e856b319efd    dump.tar.gz  ...Find this particular file in a backup or in the upstream git repository (in my case it is dump.tar.gz). Then copy it somewhere inside your local repository. 5) Add previously corrupted file in the git object databasegit hash-object -w dump.tar.gz6) Celebrate!git gc  Counting objects: 75197, done.  Compressing objects: 100% (21805/21805), done.  Writing objects: 100% (75197/75197), done.  Total 75197 (delta 52999), reused 69857 (delta 49296)"
"The index is a gateway channel between the git object database and the working directory. It's used when crafting a commit (ie. staging, unstaging, ..) or when checking out files. Thus performing those operations concurrently may raise such kind of errors as both operations will race to gain access to the index.Some work in being done at the libgit2 level to make usage of the index a better experience for threaded read operations (See libgit2/libgit2#2108 for instance).However, depending on the kind of read/write operations that you perform, you may not need to go through the index:For instance, navigating a Commit, a Tree or retrieving the content of a Blob won't leverage the index. You may also create Blobs, Trees and Commits without going through the index, by directly inserting objects in the object databases (See this StackOverflow answer for a quick start).If a LibGit2Sharp developer sees this: There is a Spelling mistake in the error message: concuRRRent.Good catch! Would you feel like opening a Pull request to help us fix this? ;-)Dropbox can interfere with git operations too. I pause dropbox syncing before any git sync."
"The direct reason for the error is that yes, it's impossible to use git-add with a bare repository. A bare repository, by definition, has no work tree. git-add takes files from the work tree and adds them to the index, in preparation for committing.You may need to put a bit of thought into your setup here, though. GIT_DIR is the repository directory used for all git commands. Are you really trying to create a single repository for everything you track, maybe things all over your system? A git repository by nature tracks the contents of a single directory. You'll need to set GIT_WORK_TREE to a path containing everything you want to track, and then you'll need a .gitignore to block out everything you're not interested in tracking.Maybe you're trying to create a repository which will track just c:\www? Then you should put it in c:\www (don't set GIT_DIR). This is the normal usage of git, with the repository in the .git directory of the top-level directory of your ""module"".Unless you have a really good reason, I'd recommend sticking with the way git likes to work. If you have several things to track, you probably want several repositories!Also, you are probably inside the .git subfolder, move up one folder to your project root.Explicitly setting the GIT_DIR environment variable forces git to use the given directory as the git repository. It is never needed during normal use.In your example, because have specified a GIT_DIR and it isn't named .git (the leading dot is important) and you haven't provided a --work-tree option or set the GIT_WORK_TREE environment variable, that you want a bare repository when you said git init.Because a bare repository has no working tree a large selection of commands don't make sense with a bare repository. git add is just one.Is there a particular reason that you need to use a non-standard location for your git repository, rather than in a .git subfolder under the working tree root? While it's possible to arrange this it tends to be more work and more liable to user mistakes.Just clone the same project in another folder and copy the .git/ folder to your project.ExampleCreate temp folder: mkdir tempswitch to temp folder cd temp/clone the same project in the temp folder: git clone [-b branchName] git@path_to_your_git_repositorycopy .git folder to your projet: cp -R .git/  path/to/your/project/switch to your project and run git statusdelete the temp folder if your are finished.hope this will help someoneJust in case what happened to me is happening to somebody else, I need to say this:I was in my .git directory within my project when I was getting this error. I searched and scoured for answers, but nothing worked.  All I had to do was get back to the right directory. It was kind of a face-palm moment for me.In case there's anyone else out there as silly as me, I hope you found this answer helpful."
"Just answered my own question with the help of the above comments... to switch to TextWrangler as the default for Git, you must open TextWrangler, click on TextWrangler in the tool bar and select ""install command line tools"" from the drop down. Then go into command line and type:git config --global core.editor ""edit -w""Edit is the command that is understood in the command line which means to open a textWrangler file.Are you on a Mac ?  If you run TextWrangler from the command line (Terminal.app) does TextWrangler open?  My guess is that git is expecting you to pass it the name of an executable that is in your PATH ... I would also guess that TextWrangler is not (this is just a guess, no experience with it).  Try changing core.editor to vim and see if you still get the error.Also - check out this thread (it may help).Follow-up to @thornomadCommand for changing editor in Git is (one of possibilities)git config --global core.editor ""mate -w"", there string inside quotes marks is full command-line for invoking editor from terminal"
"There are changes in the central repository that you must pull before you can push.Do git add -Agit commit -m ""my local changes"" git pullResolve any conflicts. Then dogit pushAlternatively, if you have no valuable modifications locally, you can create a new clone of your repo, and start working from there:git clone https://johnsproject@bitbucket.org/johnsproject/proj.git new_repo_dirTry doinggit pull origin mastergit add -Agit commit -m ""modified code""git push origin masterYour local repository is likely out of sync with the remote repository."
"This error means that the master branch on Heroku contains commits that are not in your local branch.You can either pull the missing commits from Heroku and merge them into your local copy:git pull heroku masterOr, if you don't care about the missing commits you can force push to Heroku. This will overwrite the remote repo on Heroku with your local commits.git push --force heroku masterMake sure you really don't care about them as you will lose them from Heroku by doing this. Normally this doesn't matter as Heroku is not normally the canonical repo, somewhere else such as GitHub is."
"git stash is perfectly legitimate, though as Greg said, for some reason fixing the conflicts can get strange. But they are still fixable, you won't actually fubar anything. The command as I know to re-apply the stash is git stash apply, though pop may be an alternative that I'm not aware of (or it could do something different, I don't know, so you probably want to use apply.) Is there a reason you don't want to commit those changes before merging? Generally that's the right thing to do. Another option is:git stashgit checkout -b newworkgit stash applygit commit ...This creates a new branch, which will allow you to get your master up to date without conflicts, (checkout master again, then pull or fetch + merge).  Then you can merge your branch back with (while still on master)  git merge newwork. You can resolve the conflicts on master, while still retaining the work on newwork without any conflicts.  This is a bit safer if you are worried about conflicts really screwing things up, but generally, conflicts are just part of the process, so don't worry too much about them.It's good practice to always commit any local changes before pulling (merging) new code. If you don't commit, then Git doesn't know how you want to manage your local changes. Merge only with a clean working tree.There may be conflicts in the merge, due to the same files being changed locally and by somebody else. In my experience, resolving conflicts from an actual merge operation is slightly simpler than resolving the same conflict from a stash pop operation.First you should: git checkout -- public_html/sites/filegit checkout -- public_html/sites/file1.txtgit checkout -- public_html/sites/file2.txtNext step: git pull origin masterI have another solution:git reset --hard FETCH_HEADIt works in almost cases."
"The file in question is likely .git/index.lock and it should be safe to just remove it if you have no other git processes running.  Make sure a git-svn command isn't hanging.PS  My usual approach to fixing git-svn problems is to make a fresh pull of the repository.  Time consuming, but you can do it in parallel with trying to fix the problem. Have a little race between you and git. Of course, this only works if you didn't have unpushed commits.Removing the index.lock file like Schwern stated will solve this  problem.You can remove it by running    rm -f ./.git/index.lockThe rm command is used to remove (delete) files and directories.The -f stands for force which tells your computer to remove the files without prompting for confirmationFor ""GUI"" user like meOpen Git Extension and choose repository (if more than one)Choose ""Settings"" from top menu then ""Git Maintenance"" and then click on ""Delete Index Lock""Git Extensions: Settings->Git Maintenance->Delete Index LockYou have already opened a commit in another tab in the terminal"
"GitHub isn't able to authenticate you.  So, either you aren't setup with an SSH key, because you haven't set one up on your machine, or your key isn't associated with your GitHub account.You can also use the HTTPS URL instead of the SSH/git URL to avoid having to deal with SSH keys.  This is GitHub's recommended method.Further, GitHub has a help page specifically for that error message, and explains in more detail everything you could check.You need to generate an SSH key (if you don't have one) and associate the public key with your Github account.  See Github's own documentation.This happened to me. For some reason my origin got messed up without my realizing it: Check if your settings are still correct git remote -vthe url needs to be something like ssh://git@github.com/YourDirectory/YourProject.git; if you don't see git@github.com, usegit remote set-url origin git://github.com/YourDirectory/YourProject.gitto set it right. Or you could use the github app to check and set the Primary Remote Repository url in the settings panel of your particular repository.Did you create a config file in your ~/.ssh directory?  It should have contents like these:Host github.com  IdentityFile ~/.ssh/github_rsaAssuming that you created an ssh key named github_rsaand uploaded it to GitHub...First, we need to check for existing ssh keys on your computer. Open up Terminal and run:cd ~/.sshls# Lists the files in your .ssh directoryAnd finally depending on what you see (in my case was): github_rsa  github_rsa.pub known_hostsJust try setting up your RSA and hopefully that will solve your ""git push origin"" issues$ ssh-keygen -lf ~/.ssh/github_rsa.pubMake sure ssh-add -l shows a fingerprint of an SSH key that's present in the list of SSH keys in your Github account.If the output is empty, but you know you have a private SSH key that works with your github account, run ssh-add on this key (found in ~/.ssh. It's named id_rsa by default, so you'll likely run ssh-add id_rsa).Else, follow these instructions to generate an SSH key pair .If you are using the GitHub for Mac UI, check preferences to make sure you're logged in.I know this problem. After add ssh key, add you ssh key to ssh agent too (from oficial docs https://help.github.com/articles/generating-ssh-keys/)ssh-agent -sssh-add ~/.ssh/id_rsaAfter it, all work fine, git can view proper key, before coudn't.you can use Https url to logini guess you are trying to login with ssh url when you say git push if it as asking only password consider you are connecting through ssh.better you use http url.I was using github earlier for one of my php project. While using github, I was using ssh instead of https. I had my machine set up like that and every time I used to commit and push the code, it would ask me my rsa key password.After some days, I stopped working on the php project and forgot my rsa password. Recently, I started working on a java project and moved to bitbucket. Since, I had forgotten the password and there is no way to recover it I guess, I decided to use the https(recommended) protocol for the new project and got the same error asked in the question.How I solved it?Ran this command to tell my git to use https instead of ssh:git config --global url.""https://"".insteadOf git://Remove any remote if any git remote rm originRedo everything from git init to git push and it works!PS: I also un-installed ssh from my machine during the debug process thinking that, removing it will fix the problem. Yes I know!! :)In case you are not accessing your own repository, or cloning inside a cloned repository (using some ""git submodule... "" commands):In the home directory of your repository:$ ls -a1. Open "".gitmodules"", and you will find something like this:[submodule ""XXX""]    path = XXX    url = git@github.com:YYY/XXX.gitChange the last line to be the HTTPS of the repository you need to pull:[submodule ""XXX""]    path = XXX    https://github.com/YYY/XXX.gitSave "".gitmodules"", and run the command for submodules, and "".git"" will be updated.2. Open "".git"", go to ""config"" file, and you will find something like this:[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true    precomposeunicode = true[remote ""origin""]    url = https://github.com/YYY/XXX.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch ""master""]    remote = origin    merge = refs/heads/master[submodule ""XXX""]    url = git@github.com:YYY/XXX.gitChange the last line to be the HTTPS of the repository you need to pull:    url = https://github.com/YYY/XXX.gitSo, in this case, the main problem is simply with the url. HTTPS of any repository can be found now on top of the repository page."
"The error is that somebody else has pushed in the master branch and you would overwrite their change if git allowed you to push (this is what non-fast forward error means). So you need to merge your local master branch with the remote master branch.This can happen if you did the git pull while the local branch was not the master branch. If you only want to push the branch you are working on and not the master branch, you need to tell it to git using the complete form of git-push:$ git push remote local-branch:remote-branchThe best possible answer is on Git help hereDealing with non-fast-forward errorsFrom time to time, you may encounter this error while pushing commits (git push origin master) to GitHub:To https://github.com/user/repo.git   ! [rejected]        master -> master (non-fast-forward)  error: failed to push some refs to 'https://github.com/user/repo.git'  To prevent you from losing history, non-fast-forward updates were rejected  Merge the remote changes (e.g. 'git pull') before pushing again.  See the  'Note about fast-forwards' section of 'git push --help' for details.This error can be a bit overwhelming at first; do not fear!Simply put, Git can't make the change on the remote without losing commits, so it refuses the push. Usually, this is caused by another user pushing to the same branch.You can remedy this by fetching and merging the remote branch:git fetch origingit merge origin masterOr, you can simply use git pull to perform both commands at once:git pull origin masterIn some cases, this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase. While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do. Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don't force-push.Be sure to verify that the pull actually worked.  It is possible the merge (which is part of a pull) failed.When I had this error message I failed to notice the pull failed.  The pull failed due to some uncommitted file changes (unrelated to the files I was trying to push) which caused the merge to fail. I reverted those file changes (because they were not important) and then did a pull again.  After the successful pull, the push worked."
"Yes, this is due to a bug in flake8 2.1.0.  To work around this, create an empty setup.cfg or tox.ini file in your project directory.  I just created a bug ticket for this: https://bitbucket.org/tarek/flake8/issue/133/git_hook-broken-when-setupcfg-and-toxiniThere was a similar bug on a previous flake8 version (issue 68, fixed by commit 8fe9bfb)But a very recent version of flake8 might have re-introduced that bug again (tweet, 6:02 PM - 20 Nov 13):I'm not sure what happened to flake8 after update.  My old trusty pre-commit hook now returns, ""flake8: error: input not specified"".The OP dlutxx reports in the comments:until they fixed this bug, I'll just append the source directory to sys.argv within the pre-commit file.  Ugly, but [it] works."
"If you get this message after doing a git pull remote branch, try following it up with a git fetch. (Optionally, run git fetch -p to prune deleted branches from the repo)Fetch seems to update the local representation of the remote branch, which doesn't necessarily happen when you do a git pull remote branch.I think you‰Ûªre misreading the message ‰ÛÓ your branch isn‰Ûªt ahead of master, it is master. It‰Ûªs ahead of origin/master, which is a remote tracking branch that records the status of the remote repository from your last push, pull, or fetch. It‰Ûªs telling you exactly what you did; you got ahead of the remote and it‰Ûªs reminding you to push.Usegit pull --rebaseThe --rebase option means that git will move your local commit aside, synchronise with the remote and then try to apply your commits from the new state.Someone said you might be misreading your message, you aren't. This issue actually has to do with your <project>/.git/config file. In it will be a section similar to this:[remote ""origin""]    url = <url>    fetch = +refs/heads/*:refs/remotes/origin/*If you remove the fetch line from your project's .git/config file you'll stop the ""Your branch is ahead of 'origin/master' by N commits."" annoyance from occurring.Or so I hope. :)I had this same problem on a Windows machine. When I ran a git pull origin master command, I would get the ""ahead of 'origin/master' by X commits"" warning. I found that if I instead ran git pull origin and did NOT specify the branch, then I would no longer receive the warning.It just reminds you the differences between the current branch and the branch which does the current track. Please provide more info, including what branch is printed in the message and where do you push/pull the current branch.I actually had this happening when I was doing a switch/checkout with TortiseGIT.My problem was that I had created the branch based on another local branch. It created a ""merge"" entry in /.git/config that looked something like this:[branch ""web""]    merge = refs/heads/develop    remote = gitserverWhere whenever I switched to the ""web"" branch, it was telling me I was 100+ commits ahead of develop. Well, I was no longer committing to develop so that was true. I was able to simply remove this entry and it seems to be functioning as expected. It is properly tracking with the remote ref instead of complaining about being behind the develop branch.As Vikram said, this Stack Overflow thread is the top result in Google when searching for this problem so I thought I'd share my situation and solution."
"You should ask whoever maintains the repo at git@mycogit/cit_pplus.git.Your commits were rejected by the pre-receive hook of that repo (that's a user-configurable script that is intended to analyze incoming commits and decide if they are good enough to be accepted into the repo). It is also a good idea to ask that person to update the hook, so it would print the reasons for the rejection.If the maintainer is you yourself, then it looks like you've got a problem with your setup on the server-side. Please share more information then.I'd bet that you are trying a non-fast-forward push and the hook blocks it. If that's the case, simply run git pull --rebase before pushing to rebase your local changes on the newest codebase."
"Unless you need .git/.COMMIT_EDITMSG.swp for some other purpose, you can use:git rm .git/.COMMIT_EDITMSG.swpto remove the file from the repository."
"It is because one of the very common uses for Git is sending patch series via email. Trailing spaces cause trouble in email, and are thus usually stripped out, which means any trailing spaces will be lost in the process of sending the patch via email and applying it. This in turn means that if there are trailing spaces on lines in the repo, but not in the patch being applied, you may get spurious conflicts, or extra changes that weren't intended, when applying a patch.This pre-commit hook used to be enabled by default, but is no longer. It seems I have misremembered; it was never deliberately enabled by default. As others have pointed out, this has always been a sample pre-commit hook; it used to be disabled by not giving it the execute bit, but that's something that can get screwed up fairly easily (for instance, running under Cygwin on Windows), so in newer versions of Git (since over a year ago) the samples have been disabled by being named pre-commit.sample. You can delete or move your .git/hooks/pre-commit to prevent this hook from executing if you don't like the behavior. You should also update your Git to something more recent, as this has been fixed for quite a while.Git doesn't care at all. The example pre-commit hook does a whitespace check as a demonstration of how to write a hook, but it's not enabled by default; you have to make it executable for it to do anything.Why? Because trailing whitespace is easily lost, leading to spurious changes and to not applied patches (because of whitespace change).  It is a matter of conforming to programming style.That said it is a question of pre-commit hook: you can edit it, or disable it, or configure trailing whitespace (perhaps for some kinds of files only) to be not considered an error.The pre-commit hook should be disabled by default, but older versions (pre 1.6.0) used to install them turned off by having executable permissions turned off, which might not work on non-UNIX filesystems like FAT; from 1.6.0 they are installed turned off (disabled) by having '.sample' suffix appended.As hobbs wrote, the sample pre-commit hook may be doing a check for trailing whitespace. To disable it, look in .git/hooks and make sure the files there are not executable.One possible way that the hooks may have gotten enabled is that the executable bit may have gotten set if you were moving your repo around on a FAT-formatted flash drive."
"You will need to take a look at what object this is. You need to determine if it's a blob, tree, commit or (unlikely) a signed or messaged tag. Git has low level manipulation commands to do this.Take a look at this post.I would recommend doing a filter-branch or rebase -i --preserve-merges to clean up the history so all sha-1s resolve to proper objects.Trygit stashThis worked for me.  It stashes anything you haven't committed and that got around the problem."
"According to the githooks man page,[The post-commit hook] is invoked by git-commit.  It takes no parameter, and is invoked  after    a commit is made.It takes no parameters. In Python, that means sys.argv[1:] will be an empty list.The man page doesn't say what, if anything, is sent to stdin, but presumably nothing.Let's check that.I made a little git directory and put this in .git/hooks/post-commit:#!/usr/bin/env python import sysdef handle_ref(old, new, ref):    with open('/tmp/out','w') as f:        f.write(old,new,ref)if __name__ == '__main__':    with open('/tmp/out','w') as f:        f.write('post-commit running')    for line in sys.stdin:        handle_ref(*line.split())        with open('/tmp/out','w') as f:            f.write('Got here')and made it executable.When I make a commit I see the /tmp/out file has been created, but its only contents arepost-commit runningSo the script ran, but the for line in sys.stdin: loop does nothing since nothing is sent to sys.stdin. You're going to need to generate the arguments to send to handle_ref in some other way, perhaps through a subprocess call to some git command."
"By adding the following to the core section in ~/.gitconfig[core]    editor = mateUpdate:Ok if it's already there then the issue is probably with textmate and not git.Textmate 2:In preferences there is a terminal tab and an install buttonWhen you click on install mate will be in /usr/local/bin/mate and everything should work.Textmate 1:You need to create a symbolic linkhttp://manual.macromates.com/en/using_textmate_from_terminal.html I have textmate 1 (I use vim now :)ls -l `which mate`lrwxr-xr-x  1 jameskyburz  staff  66 Jul  1  2011 /usr/local/bin/mate -> /Applications/TextMate.app/Contents/SharedSupln -s /Applications/TextMate.app/Contents/Resources/mate /usr/local/bin/mateThe editor used to edit the commit log message will be chosen from the  GIT_EDITOR environment variable, the core.editor configuration  variable, the VISUAL environment variable, or the EDITOR environment  variable (in that order).Easy way to configure this, assuming the mate path is correct, is to rungit config --global core.editor ""/usr/local/bin/mate -w""Assuming, of course, that you can run /usr/local/bin/mate -w. Check that by running /usr/local/bin/mate -w with your local user. If it isn't found, you can use which mate to find it if it exists in your path at all - if it doesn't, I'd think you need to use the form you have in your alias (open -a TextMate.app -w).Edit: incorporated comments into the answer."
"Since ""zebra"" is a remote branch, I was thinking I don't have its data  locally.You are correct that you don't have the right data, but tried to resolve it in the wrong way. To collect data locally from a remote source, you need to use git fetch. When you did git checkout zebra you switched to whatever the state of that branch was the last time you fetched. So fetch from the remote first:# fetch just the one remotegit fetch <remote># or fetch from all remotesgit fetch --all# make sure you're back on the branch you want to cherry-pick togit cherry-pick xyzNeed to pull both branch data on your local drive first.What is happening is your trying to cherry-pick from branch-a to branch-b, where in you are currently on branch-b, but the local copy of branch-a is not updated yet (you need to perform a git pull on both branches first).steps:- git checkout branch-a- git pull origin branch-a- git checkout branch-b- git pull origin branch-b- git cherry-pick <hash>output:[branch-b <hash>] log data Author: Author <Author 1 file changed, 1 insertion(+), 3 deletions(-)"
"It's not a Git error message, it's the editor as git uses your default editor.  To solve this:press ""i"" write your merge message press ""esc"" write "":wq""then press enterActually it's not an error! It means you should enter some message to mark this merge. My OS is Ubuntu 14.04.If you use the same OS ,you just need to do this as follows:type some message""Ctrl+C+O""type the file name(such as ""Merge_feature01"") and press Enter""Ctrl+X"" to exitNow if you go to .git and you will find the file ""Merge_feature01"", that's the merge log actually."
"I guess you solved this problem already but i had this to and could fix it simply by run git pullThis has resulted into a working condition. eventough your files are intact you should backup your local git directory and then run the git pull. after that you should be back in business.If there are files deleted (it should not happen) you can copy them back over a working checkout and commit them from there.This happened to me when I accidentally added my bin/ folder in an Eclipse Java project.Using 'git pull' did not work for me.I fixed it by:closing Eclipserm -rf bingit rm binThen I was able to 'git commit' and continue normally.If your .git/HEAD is corrupted or points to a corrupted object, you can change it manually or by git checkout."
"Try to do$ git pull --rebaseTo pull remote changes before yours, and then commit. And see if it works.If this does not work, try this instead:$ git stash$ git pull --rebase$ git stash popTo save your changes on the stash, apply remote commits inside your work-repository, and then apply your changes (saved into stash) inside your work-repository again.First, I think if you were to git add then git commit, your local repo would be clean enough to do a git pull.However, if there may be changes you don't want to commit until you see what happened on the upstream, you can use git stash. It will temporarily clean up your working directory and save your changes, so you can pull (I would recommend git pull --rebase to avoid merge points - but it is a personal taste issue). Once you have upstream changes pulled, you can get your local modifications back using git stash pop. After you clean up conflicts and get rid of unnecessary changes, you can add, commit, then finally push.You're getting yourself confused with the commands.git commit saves changes into git's databasegit pull brings remote commits into your repoYou're trying to pull with uncommitted changes, so git is asking you to commit those first (or git stash them away) so that it can merge your local changes with the remote ones."
"You aren't setting up any remotes when you initialize an empty repository and issue a git pull.If you want to use any/all of the remote branches in your repository, you should be using git clone <remote> to create a local clone of the repo, rather than git init; git pull <remote> which simply gives you a copy of the default branch from the remote.Once you've properly cloned the repository, assuming there is a remote branch origin/mybranch, you can check out a local copy which will track the remote through your command:git checkout mybranchIf you're creating a new brach, use eithergit checkout -b rvm-upgradeAlso, there's no need to put the branch name in quotes.If you expect the branch to already exist, run    git branch -aand it should be in the list.  If it's not in the list, it doesn't exist yet."
"If you attempt to push a large set of changes to a Git repository with HTTP or HTTPS, you may get an error message such as error: RPC failed; result=22, HTTP code = 411. This is caused by a Git configuration default which limits certain HTTP operations to 1 megabyte.To change this limit run within your local repositorygit config http.postBuffer *bytes*where bytes is the maximum number of bytes permitted. For exmaple:git config http.postBuffer 524288000For 500MB (thanks @Hengjie)You can also do this globally - git config --global http.postBuffer 524288000That will allow all local repos to push up to 500MB of data.If you are using TortoiseGit for Windows, the easiest way is using the integrated configuration.In a file explorer press left mouse button, select TortoiseGit -> Settings. Accept the info message. Now, you can choose if you want to configure the property only for the current project or system whide. For systemwide configuration press ""edit systemwide gitconfig"" and add the next line to the section [http]:postBuffer = 524288000(it the section [http] doesn't exist, create it)None of the solutions provided worked for us.  We had to switch to ssh to make this work instead of the HTTPS solution."
"rm .DS_Storegit add -Agit commit -m ""Added .gitignore file""You'll also want to expressly add .DS_Store to your .gitignore so that when .DS_Storeis inevitably created in the future, it won't get in the way of your commits.You probably don't care about .DS_Store.So, try to move it to .DS_Store.bak and pull again"
"The only case I saw where the git-commit command output was empty was on issue 556, where the following solution was proposed:I had exactly the same problem as you; and:removing the release.properties and putting back my pom version to a SNAPSHOT (it was previously changed by the plugin) version resolved the problem; the process ended successfully.Like it's being said in the other answer, restoring is done either by doing  mvn release:cleanbut since this doesn't always work, so the solution would be to remove release.properties, and runningmvn versions:set -DnewVersion={version with snapshot}(This is not necessary if you reset your git repostiory to the state prior to running the release plugin.)You might also have to remove the commits made by the release plugin, withgit reset --hard HEAD~1It usually makes two commits, to remove both either run the above command twice, or change the ~1 with ~2.To decouple the git stuff from the maven stuff (so that the mvn build doesn't break upon a git error, you could add this to your pom.xml:<plugin>    <groupId>org.apache.maven.plugins</groupId>    <artifactId>maven-release-plugin</artifactId>    <configuration>        <pushChanges>false</pushChanges>    </configuration></plugin>Setting push-changes to false lets you control the git push yourself. (Remember that you also have to push tags, git push --tags."
"This looks similar to How do I get github to default to ssh and not https for new repositories.Probably it's worth trying to switch from http protocol to ssh:$ git remote add origin git@github.com:username/project.gitThe problem is due to git/https buffer settings.In order to solve it (taken from Git fails when pushing commit to github)git config http.postBuffer 524288000And run the command againCause : The default file post size for Git has been exceeded.Solution : Navigate to repo.Run the following command to increase the buffer to 500MB after navigating to the repository:git config http.postBuffer 524288000You might get an error like this error: could not lock config file .git/config: No such file or  directorythat is because you dont have a local .git/config file You can get it working by this commandgit config --global http.postBuffer 524288000Just to add this (because this was the first entry when I googled):This error can also be thrown by missing writing access for the repository.In my case I created the repo with the root account of my server and actually forgot about that later so the git user couldn't write the pushes into the directory.In our case, the problem was a clone that wrote a .git/config file which contained a url entry that was a read only access method.  Changing the url from the :// method to the @ method fixed the problem. Running git remote -v illuminated the issue some.Another addition, since I encountered this error a different way and Google took me here.My problem was a mismatch of case; one camelCase and one not. Apparently, GIT stops you doing this without telling you why. So if your branches are different from the remote only in the capitalization, try changing them to be identical.See:Git: 'Master cannot be resolved to branch' after merge"
"Check status (git status) of your repository. Every unmerged file (after you resolve conficts by yourself) should be added (git add), and if there is no unmerged file you should git commitNote and update:Since Git1.7.4 (January 2011), you have git merge --abort, synonymous to ""git reset --merge"" when a merge is in progress.But if you want to complete the merge, while somehow nothing remains to be added, then a crude rm -rf .git/MERGE* can be enough for Git to forget about the current merge."
"This error means that the upstream repository has made commits that would be lost if you were to push. First do a ""git pull"" to merge, and then push again.I'm the only person working on my app and only work on it from my desktop, so the possibility that I managed to get the heroku repository above dev didn't make sense. BUT! I recently had a Heroku support rep look into my heroku account for a cache issue involving gem installs and he had changed something that caused heroku to return the same error as the one listed above. A git pull heroku master was all it took. Then I found the reps minor change and reverted it myself.Execute this:$ rake assets:precompile$ git add .$ git commit -m ""Add precompiled assets for Heroku""$ git push heroku masterSource: http://ruby.railstutorial.org/ruby-on-rails-tutorial-bookIt would appear that you are not fully up-to-date. You would need to do a git pull and either ""--rebase"" or let it merge into your set.After this, you should then be able to push, since it would be a 'fast-forward' change that wouldn't remove history."
"Use git push --no-thin instead of git push. From Git docs: A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is --thin.Back it up... back it up right this second before you try anything.Now, that sounds unfortunate. It's also a shame that it doesn't sound like you have a regular backup to go to. There is good news to be had, though: I bet your developers have this file, though it may be in a pack file. Try the following in somebody else's .git directory. Note that git uses the first two characters of the hash for the directory name.find . -name d62f0ed4385e3f68f226ac133fa9932a9c65c9If that shows up, copy that file to the same relative path on your server, and life should move on nicely. If not, then try this:find . -name \*.idx -exec cat {} \; | git show-index | grep 14d62f0ed4385e3f68f226ac133fa9932a9c65c9That won't show you which pack file it is (you can quickly script this or do it manually), but it will tell you its there. Find the right pack file and expand it...git unpack-objects $FILEFrom there, copy the file to the same relative path on your server. If that doesn't solve it, further work is needed. Swapping a developer's up-to-date-enough repository might fix things. You may also want to explore https://git.wiki.kernel.org/index.php/GitFaq#How_to_fix_a_broken_repository.3F, or post update comments and wait for me to get back around to this.Try a git pull --rebase.I saved the diff (git show > ~/mychanges.txt, took out the commit msg at the top of the file). The checked out a new branch (git checkout -b newbranch) applied the changes (git apply ~/mychanges.txt), and then did a git pull --rebase. Then everything worked.I am getting this same error on my tortiuse git. I finally get the root cause of this error.The steps which causes this error;Create a new branch on head.Do some modifications on new branchsSomebody also make modifications on head branchTry to push your branchThis error will occur if a local branch is created and not pushed until some modifications ara made in head branch. This is a normal thing, since remote head branch do not now anything about your local branch until a push action.To solve this error, switch the head branch get a full pull action. Then switch your branch and try a push.If not on master branch, you can simply delete the remote branch by:git push --delete origin <branch_name>And then push your branch back to the remote:git push -u origin <branch_name>"
"Did you init a local Git repository, into which this remote is supposed to be added?Does your local directory have a .git folder?Try git init.You'll get this error if you try to use a Git command when your current working directory is not within a Git repository. That is because, by default, Git will look for a .git repository directory (inside of the project root?), as pointed out by my answer to ""Git won't show log unless I am in the project directory"":According to the official Linux Kernel Git documentation,  GIT_DIR is [an environment variable] set to look for a .git directory (in the current  working directory?) by default:If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the base of the    repository.You'll either need to cd into the repository/working copy, or you didn't initialize or clone a repository in the first place, in which case you need to initialize a repo in the directory where you want to place the repo:git initor clone a repositorygit clone <remote-url>cd <repository>In command line/CLI, you will get this error if your current directory is NOT the repository. So, you have to first CD into the repo.NOTE: this does not answer to the common problem, which was OP‰Ûªs problem, but to different problem where this error message may come up. I didn‰Ûªt feel like doing new question just to write this answer down, tell me if I should do that instead :PI got to situation, most likely due to some corruption of certain crash I had, that I got this error even when .git did exist.smar@aaeru ~/P/Nominatim> git statusfatal: Not a git repository (or any of the parent directories): .gitsmar@aaeru ~/P/Nominatim [128]> ls .gitCOMMIT_EDITMSG  config*  FETCH_HEAD  HEAD  index  logs/  modules/  objects/  ORIG_HEAD packed-refsSince I didn‰Ûªt have anything that really needed preserving, I just went with dummy way, and did...smar@aaeru ~/P/Nominatim [128]> git initReinitialized existing Git repository in /home/smar/Projektit/Nominatim/.git/Still not working though, as for example git log returns fatal: bad default revision 'HEAD'. Remotes were there though, so I did git fetch --all and then just git reset --hard origin/master to get myself to the state the repo was previously.Note that if there is some uncommitted changes, you can see them with git status, git diff and so on. Then just git diff yourfile > patch before running the reset.At least for me reflog (git reflog) disappeared completely. Hence, if you do the reset, and there was some changes you wanted to prevent, I‰Ûªm not sure you can get them back after reset anymore. So, make sure that you have all changes you can‰Ûªt lose backed up, ultimately by just copying the clone before trying this.This issue occurred to me after I moved the location of a git project on the filesystem. When I ran some git commands the error occurred, e.g.:$ git statusfatal: Not a git repository: /home/rospasta/path_old/gitprojecta/.git/modules/.travisI found in /home/rospasta/path_old/gitprojecta/.travis/.git the absolute path of the old location of the project was written. Manually updating this path of the new location resolved the problem for me.So my issue may or may not be a git problem, but HTH."
"By this message, git tells you that your local commit tree is ahead of repo in github.com.Repo in github               Your local                                 Y    <-+                                 |      |  ahead of 2 commits                                 Z    <-+                                 |commit  A    <---------------->  A        | \                      | \          B  D                     B  D        | /                      | /        C                        C        |                        |"
"If you only want to amend the second to last commit (eg. not long ago, especially not before many branches and merges), then I use this procedure:git checkout -b tmp bad-commitfix the filesgit commit --amendgit rebase tmp masterIf you have merges in between, you may wanna try rebase -i -p, but the results may vary.It looks like:a filter-branch (complex command which could do what you want)and amend and rebase as described by jpalecek. You will find the same solution slightly more detailed in this other related question.You can find an example of rebase interactive in this comment: you could then avoid the temporary branch, but again, it is more complex.I also rebase often to clean up the history of development so that changes are correct and grouped properly. A made-up example:  I rename function foo to bar and commit it with a comment that says, ""renamed foo to bar"".  Then I move on to the next feature or fix, and commit that, and move on to the next.   Halfway through that, I find that I missed an instance of foo!I commit my work in progress (or use git-stash), fix the missing 'foo' and commit that, then use git-rebase --interactive to merge the all the foo fixes together into one clean commit.  If I didn't use git-stash, then I'll use git-commit --amend (another form of rebasing) when I finally finish the feature that was in progress.When my patches are pushed for review, all the pieces are correct and tell a coherent story. Sometimes I use git-rebase --interactive just to make adjacent temporally-separated changes which affect the same bits, so that changes are in context."
"*.opensdf is a temporary file opened only while .vcxproj/.sln is loaded to Visual Studio IDE.  It should be added to your .gitignore file.See the accepted answer on this question: What should be contained in a global Subversion ignore pattern for Visual Studio 2010?"
"Thanks for the pointer to the ^M^M .gitignore solution. To clear these entries from your working repo, without going through the process of creating a new repository, just do 'git commit -a'. This should delete the ""/Icon\r"" entries out of your git index."
"In general, fixing corrupt objects can be pretty difficult. However, in this case, we're confident that the problem is an aborted transfer, meaning that the object is in a remote repository, so we should be able to safely remove our copy and let git get it from the remote, correctly this time.The temporary object file, with zero size, can obviously just be removed. It's not going to do us any good. The corrupt object which refers to it, d4a0e75..., is our real problem. It can be found in .git/objects/d4/a0e75.... As I said above, it's going to be safe to remove, but just in case, back it up first.At this point, a fresh git pull should succeed....assuming it was going to succeed in the first place. In this case, it appears that some local modifications prevented the attempted merge, so a stash, pull, stash pop was in order. This could happen with any merge, though, and didn't have anything to do with the corrupted object. (Unless there was some index cleanup necessary, and the stash did that in the process... but I don't believe so.)Recovering from Repository Corruption is the official answer.the really short answer is: find uncorrupted objects and copy them.you can use ""find"" to remove all files in /objects folder with 0 size with command find .git/objects/ -size 0 -delete. Backup is recommended."
"Let's suppose that the remote that refers to the remote repository is called origin.  In that case, first update all your remote-tracking branches with:git fetch originNow you can use the useful --contains option to git branch to find out which of the remote branches contains that commit:git branch -r --contains xyz(The -r means to only show remote-tracking branches.)  If the commit xyz is contained in one or more of your remote-tracking branches, you'll see output like:  origin/test-suite  origin/HEAD -> origin/master  origin/masterIf it's contained in your local repository, but not one of the remote-tracking branches, the output will be empty.  However, if that commit isn't known in your repository at all, you'll get the error malformed object name and a usage message - perhaps a bit confusing if you're not expecting it...Like Mark said, git branch -a --contains commitishHowever, beware for branches that contain a cherry-picked/rebased/merged version of the commit.This could come in handy git log --cherry-pick --left-right <commitish> ^remote/branchnameIt will list the commit ONLY if it doesn't exist (as a cherrypick) in the remote branch. See the man page for log for an explanation on how --cherry-pick identifies equivalent commitsOf course merges/rebases with conflict resolutions or squashes cannot be automatically detected like this"
"Looking at the Git source code (sha1_file.c, function move_temp_to_file()) it looks like Git is failing to rename a temporary file named /opt/www/.git/objects/3f/tmp_obj_XXXXXX (where XXXXXX is six random characters) to /opt/www/.git/objects/3f/ce3587c54a8be14c69b08c6b01f94949b11b47.  This can happen if you don't have permission to delete files in /opt/www/.git/objects/3f.Some things to try:If multiple users accessing the Git repository, you may need to run something like git config core.sharedRepository 0664 (see git help config for details) to ensure that newly created directories and files have proper permissions for all users of the repository.Try running rm -f /opt/www/.git/objects/3f/tmp_obj_* and see if that makes the problem go away.See if you can reproduce the problem outside of Git by doing the following:mkdir -p /opt/www/.git/objects/3fcd /opt/www/.git/objects/3frm -f tmp_obj_* ce3587c54a8be14c69b08c6b01f94949b11b47echo ""testing"" >tmp_obj_abcdefgmv tmp_obj_abcdef ce3587c54a8be14c69b08c6b01f94949b11b47rm -f tmp_obj_abcdefgBe sure to run the above commands the same user that experienced the error.Try recursively chowning and chmoding the objects directory.git add --ignore-errors might be helpfulFrom here:can't add all files to git due to permissionsYou don't have permission to write in /opt/www/.git/objects/3f.The quickest solution is to use the sudo command to execute your command with root privileges.sudo <Your git command>Solved it for me.If you are using visual studio or something similar that is generating the mdf file, simply close VS & retry your git command again. This time it should work."
"git reset --hard <tag/branch/commit id>Notes:"
"You can try git push --force to force the push.--forceUsually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check.  This can cause the remote repository to lose commits; use it with care.So if lots of people have already pulled the same branch from origin, that can cause some rebase issue on their side.That operation can be blocked at the server side, like ebneter points out (in the comments):Depending on how the remote is configured, though, this may not work  -- all of my central repos are configured with receive.denyNonFastForwards = true and receive.denyDeletes = true, in which case any such surgery has to be done on the remote server. However, in the case of GitHub, such settings are not readily available for the user managing its GitHub repo.So if you git push --force by mistake, all you are left is opening a case to the GitHub support, for them to check their local (i.e. ""GitHub"") reflogs and see if they can restore old commits.(Since reflogs are local, like I have been remembered recently. So commits which are replaced by new ones during a push --force are only still visible, if no 'git gc' or 'git prune' already took place, at the GitHub server side)So Marco Ceppi insists (in the comments):this could really mess up other contributors local repos if you force pushes - though are times that it is just a necessary evil (I've maybe had to do this two times in my lifespan of using Git)To add to my previous answer, and to address the fact that a forced git push can really mess up other contributors' local repos, git 1.8.5 (upcoming Q4 2013) will see a new option:git push --force-with-leaseSee the origin of that option in this thread:if something happens at 'origin' to the branch you are forcing or deleting since you fetched to inspect it, you may end up losing other people's work.Somebody who is unaware of the decision to rewind and rebuild the branch may attempt to push to the branch between the time you fetched to rebase it and the time you pushed to replace it with the result of the rebasing.We can make these pushes safer by optionally allowing the user to tell ""git push"" this:I am forcing/deleting, based on the assumption that the value of 'branch' is still at this object.  If that assumption no longer holds, i.e. if something happened to the branch since I started preparing for this push, please do not proceed and fail this push.You can see the full documentation of --force-with-lease in commit 28f5d17--force-with-lease will protect all remote refs that are going to be updated by requiring their current value to be the same as some reasonable default, unless otherwise specified;For now, ""some reasonable default"" is tentatively defined as ""the value of the remote-tracking branch we have for the ref of the remote being updated"", and it is an error if we do not have such a remote-tracking branch.That explain the ""lease"" part of that option:""force-with-lease"":  You assume you took the lease on the ref when you fetched to decide what the rebased history should be, and you can push back only if the lease has not been broken.This is already being tested, and mentioned in the ""What's cooking in git.git (Aug 2013, #07; Wed, 28)"":By the way, the push that overrides the usual ""must fast-forward"" was done using the ""force-with-lease"" option that has been cooking in next, like so:$ git fetch ko next$ anchor=$(git rev-parse --verify FETCH_HEAD)$ for remote in ko repo gph github2  do    git push --force-with-lease=refs/heads/next:$anchor $remote next  doneNote: ""git push --force-with-lease"" has been taught to report if the pushneeded to force (or fast-forwarded).So this command is more detailed in its output with git 2.8 (March 2016)push: fix ref status reporting for --force-with-leaseThe --force--with-lease push option leads to less detailed status information than --force.  In particular, the output indicates that a reference was fast-forwarded,  even when it was force-updated."
"When there is a conflict during a merge, you have to finish the merge commit manually. It sounds like you've done the first two steps, to edit the files that conflicted and then run git add on them to mark them as resolved. Finally, you need to actually commit the merge with git commit. At that point you will be able to switch branches again.In case you ever get stuck during a merge/rebase you can alwaysgit reset --hardto restore your working to the state of the last commit. This will lose your changes from the working tree so if you had local modifications before the merge they will be gone after this‰ÛÓwhich is why it‰Ûªs advisable to not start a merge when you have local modifications. :)The next steps after resolving the conflicts manually are:-git add .git status (this will show you which commands are necessary to continue automatic merge procedure)[command git suggests, e.g. git merge --continue, git cherry-pick --continue, git rebase --continue]"
"Sign-off is a requirement for getting patches into the Linux kernel and a few other projects, but most projects don't actually use it.It was introduced in the wake of the SCO lawsuit, (and other accusations of copyright infringement from SCO, most of which they never actually took to court), as a Developers Certificate of Origin. It is used to say that you certify that you have created the patch in question, or that you certify that to the best of your knowledge, it was created under an appropriate open-source license, or that it has been provided to you by someone else under those terms. This can help establish a chain of people who take responsibility for the copyright status of the code in question, to help ensure that copyrighted code not released under an appropriate free software (open source) license is not included in the kernel.Sign-off is a line at the end of the commit message which certifies who is the author of the commit. Its main purpose is to improve tracking of who did what, especially with patches.Example:Made an update to xyz.Signed-off-by: Super Developer <super.dev@gmail.com>It should contain the user real name if used for an open-source project.If branch maintainer need to slightly modify patches in order to merge them, he could ask the submitter to rediff, but it would be counter-productive. He can adjust the code and put his sign-off at the end so the author still gets credit for the patch and not the introduced bugs.Made an update to xyz.Signed-off-by: Super Developer <super.dev@gmail.com>[uber.dev@gmail.com: renamed methods according to naming conventions.]Signed-off-by: Uber Developer <uber.dev@gmail.com>Source: http://gerrit.googlecode.com/svn/documentation/2.0/user-signedoffby.htmlgit 2.7.1 (February 2016) clarifies that in commit b2c150d (05 Jan 2016) by David A. Wheeler (david-a-wheeler).(Merged by Junio C Hamano -- gitster -- in commit 7aae9ba, 05 Feb 2016) git commit man page now includes:-s::--signoff::Add Signed-off-by line by the committer at the end of the commit log message.  The meaning of a signoff depends on the project, but it typically certifies that committer has the rights to submit this work under the same license and agrees to a Developer Certificate of Origin (see http://developercertificate.org/ for more information).Expand documentation describing --signoffModify various document (man page) files to explain in more detail what --signoff means.This was inspired by ""lwn article 'Bottomley: A modest proposal on the DCO'"" (Developer Certificate of Origin) where paulj noted:The issue I have with DCO is that there adding a ""-s"" argument to git commit doesn't really mean you have even heard of the DCO (the git commit man page makes no mention of the DCO anywhere), never mind actually seen it. So how can the presence of ""signed-off-by"" in any way imply the sender is agreeing to and committing to the DCO? Combined with fact I've seen replies on lists to patches without SOBs that say nothing more than ""Resend this with signed-off-by so I can commit it"".Extending git's documentation will make it easier to argue that developers understood --signoff when they use it."
"(no quiero que tengan la fecha original del commit)Me parece que hay un error de concepto aquÌ_. Cuando ""pusheas"" no estÌÁs ""enviando al repositorio"", simplemente estÌÁs sincronizando (tal vez parcialmente) el repositorio remoto con el local. GIT (a diferencia de CVS o Subversion) es distribuido, lo cual significa que en realidad existe un solo repositorio, que estÌÁ espejado (tal vez parcialmente) en distintos lugares. Por lo tanto, simplemente no puedes pushear un commit con datos diferentes (en este caso la fecha). El repositorio es el mismo, el commit es el mismo.Lo que sÌ_ puedes hacer es cambiar la fecha del commit (local), y luego pushearlo:git filter-branch --env-filter \    'if [ ""$GIT_COMMIT"" == ""6489982f81797b71534357fa5a442a2604c61eff"" ]         then                  export GIT_AUTHOR_DATE=""2016-03-20T05:57:12-03:00""                  export GIT_COMMITTER_DATE=""2016-03-20T05:57:12-03:00""     fi'(copiado de aquÌ_: http://stackoverflow.com/a/454750/277304) (cambia el commit hash y la fecha-hora)Con respecto a pushear solo algunos commits, la sintaxis es:   git push <remoto> <SHA del commit>:<branch>"
"Let's make some order in your question.Before we start lets have some terminology TerminologyWhat is HEAD in depthHEAD    = Current commit ../ ... = Commit range (from ... to)revert  = Undo the given changegit revert -n master~5..master~2Revert the changes done by commits from the fifth last commit in master (included) to the third last commit in master (included)You are using range. The range is from...to, in your case from 5 to 2 (not including).git revert HEAD~1..HEAD  The last commit is removed instead of the previous one.You are telling git this: Please revert the content in the range of the previous commit up to the last one so its undo the changes from the previous commit [not included] HEAD~1 up to the current commit HEADOther example: git revert HEAD reverts last commit - this is okIn this case you are giving a single SHA-1 (HEAD) so its reverting the given commit. Its the same as reverting any other commit in the history.# revert commit XYZgit revert XYX# revert the current commit (git will extract the HEAD SHA-1)# (Again read the linked post above to fully understand what is HEAD)git revert HEAD But git revert HEAD.. says that given list is emptyAs explained above .. stands for a range. You supplied the only one side of the list (missing from/ to depends how you look on it)If we will go back to this: git revert -n master~5..master~2 what that happening behind the scenes is something like this: for (index=first SHA-1 to index= last SHA-1)     git revert SHA-1  git revert -n master~5..master~2 ->     git revert -master~5     git revert -master~4     git revert -master~3"
"Kubernetes documentation for docker is outdated for now. Some elements need to be added.This kubernetes issue is the one to follow.You can find at this comment the answer to setup. It's working for me with DNS/Dashboard addons. I have not done a complete test of all the features but complexe application are running on it (understand not helloworld application).If you are interested, you can find some project that try to solve this setup that is not so trivial if you don't have time:hivekmachineNote I don't put any setup here as it will certainly be outdated soon ... Kubernetes documentation is the good place (and for now the issue I pointed you to ^^)"
"If I understand correctly, your problem is that once you push your commits to the OpenShift repo, the OpenShift server automatically starts a fresh installation and you loose all your configurations and data?This is OpenShift's way of enforcing a correct deployment process. You shouldn't try to bypass it; rather, you should adapt your installation to it. If your deployment process can work well with OpenShift, you can easily deploy multiple environments and keep them up-to-date, which can be a life-saver once you hit production.I also faced this problem, and this is what I did:The key is the app-root/data folder. This folder does not get deleted when you push, so you can use it to store data files that shouldn't change when you deploy. I also used it to store my configuration files. I put the configuration files in the .gitignore, so they don't get checked out into the OpenShift repo. Then, I used the build hook (though maybe I should have used pre_build...) to copy those files from the data folder to their true location, before I started building.What you need to remember is that every file needed for the build should be either versioned by git, copied from data, downloaded from the internet (by a dependency manager or by wget \ curl) or created during the build process. You can't have files that just stay there (like you have in the local working copy on your development machine), so if you have a file that isn't versioned and isn't created during the build process - make sure you set a hook to download it or copy it from data.If you need a reference, you can take a peek at my project. The relevant parts are the action hooks and this instructions document."
"Here are the steps to edit the commit message of a previous commit (which isnot the most recent commit) using SourceTree for Windows version 1.5.2.0:Step 1Select the commit immediately before the commit that you want to edit.For example, if I want to edit the commit with message ""FOOBAR!"" then I needto select the commit that comes right before it:Step 2Right-click on the selected commit and click Rebase children...interactively:Step 3Select the commit that you want to edit, then click Edit Message at thebottom. In this case, I'm selecting the commit with the message ""FOOBAR!"":Step 4Edit the commit message, and then click OK. In my example, I've added""SHAZBOT! SKADOOSH!""Step 5When you return to interactive rebase window, click on OK to finish therebase:Step 6At this point, you'll need to force-push your new changes since you've rebasedcommits that you've already pushed. However, the current 1.5.2.0 version ofSourceTree for Windows does not allow you to force-push through the GUI, soyou'll need to use Git from the command line anyways in order to do that.Click Terminal from the GUI to open up a terminal.Step 7From the terminal force-push with the following command,git push origin <branch> -fwhere <branch> is the name of the branch that you want to push, and -f meansto force the push. The force push will overwrite your commits on yourremote repo, but that's OK in your case since you said that you're not sharingyour repo with other people.That's it! You're done!UpdateNote: this answer was originally written with regard to older versions of SourceTree for Windows, and is now out-of-date.See my new answer for the current version of SourceTree for Windows, 1.5.2.0. I'm leaving this answer behind for historical purposes.Original Answeras I'm on Windows I don't have a command line tool nor do I know how to use one :( Is it the only way to get that sorted out? The GUI doesn't cover all the git's functions? ‰ÛÓ Original PosterRegarding Git GUIs, no, they don't cover all of Git's functions. They don't even come close. I suggest you check out one of the answers in How do I edit an incorrect commit message in Git?, Git is flexible enough that there are multiple solutions...from the command line.SourceTree might actually come with the msysgit bash shell already, or it might be able to use the standard Windows command shell.  Either way, you open it up form SourceTree by clicking the Terminal button:You set which terminal SourceTree uses (bash or Windows) here:One way to solve the problem in SourceTreeThat being said, here's one way you can do it in SourceTree. Since you mentioned in the comments that you don't mind ""reverting back to the faulty commit"" (by which I assume you actually mean resetting, which is a different operation in Git), then here are the steps:Do a hard reset in SourceTree to the bad commit by right-clicking on it and selecting Reset current branch to this commit, and selecting the hard reset option from the drop down. Click the Commit button, thenClick on the checkbox at the bottom that says ""Amend latest commit"". Make the changes you want to the message, then click Commit again. Voila!Regarding this comment:if it's not possible because it's already pushed to Bitbucket, I would not mind creating a new repository and starting over.Does this mean that you're the only person working on the repo? This is important because it's not trivial to change the history of a repo (like by amending a commit) without causing problems for your collaborators.  However, assuming that you're the only person working on the repo, then the next thing you would want to do is force push your changed history to the remote.Be aware, though, that because you did a hard reset to the faulty commit, then force pushing causes you to lose all work that come after it previously.  If that's okay, then you might need to use the following command at the command line to do the force push, because I couldn't find an option to do it in SourceTree:git push remote-repo head -fThis also assumes that BitBucket will allow you to force push to a repo.You should really learn how to use Git from the command line anyways though, it'll make you more proficient in Git. #ProTip, use msysgit and turn on Quick Edit mode on in the terminal properties, so that you can double click to highlight a line of text, right click to copy, and right click again to paste. It's pretty quick."
"It could be related to a control access issue.This usually happen when the repo hasn't been set to be exported (by git-daemon or gitweb): GitStack could rely on a similar mechanism.See this thread for instance/I created an 'empty' file with the name ""git-daemon-export-ok' inside one of my repositories.  I can now clone / push / pull to this repository without issues.That file should be created directly under the xxx.git root directory of your bare repo on the server.I looked into C:/GitStack/apache/logs/error.log and found that GitStack was looking for the repository in the wrong location although its settings said D:/Repositories (my custom location), GitStack looked for the repositories in its default location. So I simply went and saved the settings again from GitStack admin page. It solved the problem."
"You are correct Add /node_modules to .gitignore. Add dependencies to your packages.json and let Azure install them at deploy (only one-time install for each new/updated package).PS: Since you already pushed /node_modules folder to the version control you gonna have to remove it first."
"This is just a hunch, but was your remote a bare repo or a working directory? If it was a working directory rather than a bare repo, the file.php file on the remote had uncommitted changes. Your git push command was trying to advance the HEAD at the remote which was causing conflicts due to the uncommitted changes.This is why you usually git pull to update a working directory, and use git push on bare repos. FYI, to setup a bare repo for use as something similar to a central CVS/SVN/etc repo, do the following on the remote:$ mkdir my-git-repo$ cd my-git-repo$ git init --bareThen in your local repo:$ cd my-git-repo.git$ git remote add origin user@host:/path/to/my-git-repo/$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master$ git push origin masterNow you have a bare repo to push/pull into/from that contains your master branch. You can repeat the last three local steps with any additional local branches you want to put on the remote. Cloning is the same as before and you don't need to use git config as remotes are set automatically and remote merging refs are set when you use tracking branches. Hope that helps.Try doing a git checkout file.php then git push again.Update:git pull tells the branch is up-to-date?git status doesn't show any unmerged file?git commit works?If you answered yes to all above, and your git push keeps failing even after a clean copy of the remote repository (read git clone), it's very likely the remote repository has an index problem.I would cut and paste my file.php locally out of the working folder. To your desktop lets say.Then do a pull, then git should fetch the lastest file.php from the server. Then just paste in your copy of file.php and overwrite the pulled one or open up both versions and just paste in your changes.I hope that does the trick.Try to do a git status and check if you've got any non commited changes to 'file.php'. You need to commit all the changes on the same files, or git could change your non-commited file.Try to make another commit after the pull, and then try to pull again, review any possible merge and push the data.If you want just to overwrite your local copy, checkout the file file.php  (git checkout HEAD^ file.php to checked version previous to last one) to a previous version, and then pull from the repository."
"The algorithm that Git uses when calculating diff's to be reverted requires thatthe lines being reverted are not modified by any later commits, andthat there not be any other ""adjacent"" commits later in the history.The definition of ""adjacent"" is based on the default number of lines from a context diff, which is 3.  So if 'myfile' was constructed like this:$ cat >myfile <<EOFline 1junkjunkjunkjunkline 2junkjunkjunkjunkline 3EOF$ git add myfile$ git commit -m ""initial check-in"" 1 files changed, 11 insertions(+), 0 deletions(-) create mode 100644 myfile$ perl -p -i -e 's/line 2/this is the second line/;' myfile$ git commit -am ""changed line 2 to second line""[master d6cbb19] changed line 2 1 files changed, 1 insertions(+), 1 deletions(-)$ perl -p -i -e 's/line 3/this is the third line/;' myfile$ git commit -am ""changed line 3 to third line""[master dd054fe] changed line 3 1 files changed, 1 insertions(+), 1 deletions(-)$ git revert d6cbb19Finished one revert.[master 2db5c47] Revert ""changed line 2"" 1 files changed, 1 insertions(+), 1 deletions(-)Then it all works as expected.The second answer was very interesting.  There is a feature which has not yet been officially released (though it is available in Git v1.7.2-rc2) called Revert Strategy.  You can invoke git like this:git revert --strategy resolve <commit>and it should do a better job figuring out what you meant.  I do not know what the list of available strategies is, nor do I know the definition of any strategy.There are four ways of doing so:Clean way, reverting but keep in log the revert:git revert --strategy resolve <commit>Harsh way, remove altogether only the last commit:git reset --soft ""HEAD^""Rebase (show the log of the last 5 commits and delete the lines you don't want, or reorder, or squash multiple commits in one, or do anything else you want, this is a very versatile tool):git rebase -i HEAD~5And if a mistake is done:git rebase --abortQuick rebase: remove only a specific commit using its id:git rebase --onto commit-id^ commit-idAlternatives: you could also try:git cherry-pick commit-idYet another alternative:git revert --no-commitAs a last resort, if you need full freedom of history editing (eg, because git don't allow you to edit what you want to), you can use this very fast open source application: reposurgeon.Note: of course, all these changes are done locally, you should git push afterwards to apply the changes to the remote. And in case your repo doesn't want to remove the commit (""no fast-forward allowed"", which happens when you want to remove a commit you already pushed), you can use git push -f to force push the changes.Note2: if working on a branch and you need to force push, you should absolutely avoid git push --force because this may overwrite other branches (if you have done changes in them, even if your current checkout is on another branch). Prefer to always specify the remote branch when you force push: git push --force origin your_branch.Your choice is between keeping the error and introducing a fix and removing the error and changing the history. You should choose (1) if the erroneous change has been picked up by anybody else and (2) if the error is limited to a private un-pushed branch. Git revert is an automated tool to do (1), it creates a new commit undoing some previous commit. You'll see the error and removal in the project history but people who pull from your repository won't run into problems when they update. It's not working in an automated manner in your example so you need to edit 'myfile' (to remove line 2), do git add myfile and git commit to deal with the conflict. You will then end up with four commits in your history, with commit 4 reverting commit 2.If nobody cares that your history changes, you can rewrite it and remove commit 2 (choice 2). The easy way to do this is to use git rebase -i 8230fa3. This will drop you into an editor and you can choose not to include the erroneous commit by removing the commit (and keeping ""pick"" next to the other commit messages. Do read up on the consequences of doing this.You can remove unwanted commits with git rebase.Say you included some commits from a coworker's topic branch into your topic branch, but later decide you don't want those commits.git checkout -b tmp-branch my-topic-branch  # Use a temporary branch to be safe.git rebase -i master  # Interactively rebase against master branch.At this point your text editor will open the interactive rebase view. For exampleRemove the commits you don't want by deleting their linesSave and quitIf the rebase wasn't successful, delete the temporary branch and try another strategy. Otherwise continue with the following instructions.git checkout my-topic-branchgit reset --hard tmp-branch  # Overwrite your topic branch with the temp branch.git branch -d tmp-branch  # Delete the temporary branch.If you're pushing your topic branch to a remote, you may need to force push since the commit history has changed. If others are working on the same branch, give them a heads up.So it sounds like the bad commit was incorporated in a merge commit at some point. Has your merge commit been pulled yet? If yes, then you'll want to use git revert; you'll have to grit your teeth and work through the conflicts. If no, then you could conceivably either rebase or revert, but you can do so before the merge commit, then redo the merge.There's not much help we can give you for the first case, really. After trying the revert, and finding that the automatic one failed, you have to examine the conflicts and fix them appropriately. This is exactly the same process as fixing merge conflicts; you can use git status to see where the conflicts are, edit the unmerged files, find the conflicted hunks, figure out how to resolve them, add the conflicted files, and finally commit. If you use git commit by itself (no -m <message>), the message that pops up in your editor should be the template message created by git revert; you can add a note about how you fixed the conflicts, then save and quit to commit.For the second case, fixing the problem before your merge, there are two subcases, depending on whether you've done more work since the merge. If you haven't, you can simply git reset --hard HEAD^ to knock off the merge, do the revert, then redo the merge. But I'm guessing you have. So, you'll end up doing something like this:create a temporary branch just before the merge, and check it outdo the revert (or use git rebase -i <something before the bad commit> <temporary branch> to remove the bad commit)redo the mergerebase your subsequent work back on: git rebase --onto <temporary branch> <old merge commit> <real branch>remove the temporary branchFrom other answers here, I was kind of confused with how git rebase -i could be used to remove a commit, so I hope it's OK to jot down my test case here (very similar to the OP).Here is a bash script that you can paste in to create a test repository in the /tmp folder:set -xrm -rf /tmp/myrepo*cd /tmpmkdir myrepo_gitcd myrepo_gitgit initgit config user.name megit config user.email me@myself.commkdir folderecho aaaa >> folder/file.txtgit add folder/file.txtgit commit -m ""1st git commit""echo bbbb >> folder/file.txtgit add folder/file.txtgit commit -m ""2nd git commit""echo cccc >> folder/file.txtgit add folder/file.txtgit commit -m ""3rd git commit""echo dddd >> folder/file.txtgit add folder/file.txtgit commit -m ""4th git commit""echo eeee >> folder/file.txtgit add folder/file.txtgit commit -m ""5th git commit""At this point, we have a file.txt with these contents:aaaabbbbccccddddeeeeAt this point, HEAD is at the 5th commit, HEAD~1 would be the 4th - and HEAD~4 would be the 1st commit (so HEAD~5 wouldn't exist). Let's say we want to remove the 3rd commit - we can issue this command in the myrepo_git directory:git rebase -i HEAD~4(Note that git rebase -i HEAD~5 results with ""fatal: Needed a single revision; invalid upstream HEAD~5"".) A text editor (see screenshot in @Dennis' answer) will open with these contents:pick 5978582 2nd git commitpick 448c212 3rd git commitpick b50213c 4th git commitpick a9c8fa1 5th git commit# Rebase b916e7f..a9c8fa1 onto b916e7f# ...So we get all commits since (but not including) our requested HEAD~4. Delete the line pick 448c212 3rd git commit and save the file; you'll get this response from git rebase:error: could not apply b50213c... 4th git commitWhen you have resolved this problem run ""git rebase --continue"".If you would prefer to skip this patch, instead run ""git rebase --skip"".To check out the original branch and stop rebasing run ""git rebase --abort"".Could not apply b50213c... 4th git commitAt this point open myrepo_git/folder/file.txt in a text editor; you'll see it has been modified:aaaabbbb<<<<<<< HEAD=======ccccdddd>>>>>>> b50213c... 4th git commitBasically, git sees that when HEAD got to 2nd commit, there was content of aaaa + bbbb; and then it has a patch of added cccc+dddd which it doesn't know how to append to the existing content.So here git cannot decide for you - it is you who has to make a decision: by removing the 3rd commit, you either keep the changes introduced by it (here, the line cccc) -- or you don't. If you don't, simply remove the extra lines - including the cccc - in folder/file.txt using a text editor, so it looks like this:aaaabbbbdddd... and then save folder/file.txt. Now you can issue the following commands in myrepo_git directory:$ nano folder/file.txt  # text editor - edit, save$ git rebase --continuefolder/file.txt: needs mergeYou must edit all merge conflicts and thenmark them as resolved using git addAh - so in order to mark that we've solved the conflict, we must git add the folder/file.txt, before doing git rebase --continue:$ git add folder/file.txt$ git rebase --continueHere a text editor opens again, showing the line 4th git commit - here we have a chance to change the commit message (which in this case could be meaningfully changed to 4th (and removed 3rd) commit or similar). Let's say you don't want to - so just exit the text editor without saving; once you do that, you'll get:$ git rebase --continue[detached HEAD b8275fc] 4th git commit 1 file changed, 1 insertion(+)Successfully rebased and updated refs/heads/master.At this point, now you have a history like this (which you could also inspect with say gitk . or other tools) of the contents of folder/file.txt (with, apparently, unchanged timestamps of the original commits):1st git commit  |  +aaaa----------------------------------------------2nd git commit  |   aaaa                |  +bbbb----------------------------------------------4th git commit  |   aaaa                |   bbbb                |  +dddd----------------------------------------------5th git commit  |   aaaa                |   bbbb                |   dddd                |  +eeeeAnd if previously, we decided to keep the line cccc (the contents of the 3rd git commit that we removed), we would have had:1st git commit  |  +aaaa----------------------------------------------2nd git commit  |   aaaa                |  +bbbb----------------------------------------------4th git commit  |   aaaa                |   bbbb                |  +cccc                |  +dddd----------------------------------------------5th git commit  |   aaaa                |   bbbb                |   cccc                |   dddd                |  +eeeeWell, this was the kind of reading I hoped I'd have found, to start grokking how git rebase works in terms of deleting commits/revisions; so hope it might help others too..."
"I used the proxy-approach to make the python script work under windows (with msysgit). The complete script (with description on how I did it) might be found here: https://gist.github.com/1839424Here is the important part about making it work under WindowsIf you're working with Windows (and ""msysgit""), it's a little more complicated. Since ""msysgit"" seems to have a problem handling the SHEBANG, you'll have to use a little trick to make the script executable (further information on this problem can be found here).In order to make the script work, you'll want to remove the SHEBANG from the Python script (""pre-commit.py"") and use a wrapper bash-script to call the interpreter. This script should look something like this:#!/bin/shpython .git/hooks/pre-commit.pyStore this script as a file called ""pre-commit"" (no file-ending). This assumes that you have Python in your PATH. If you don't, you can also specify the full path to your interpreter-executable.This script will be called by ""git commit"" and call the python-script to check for the huge files. The path after the SHEBANG should not be changed, as ""msysgit"" will remap it automatically. You must specify a path relative to the repo-root for the Python script to be executed (because thats from where the script is called).Afterwards you'll want to copy both the wrapper-file (""pre-commit"") and the Python-script (""pre-commit.py"") to your repos "".git/hooks""-directory, personalize the Python-script (""max_file_size"" and ""git_binary_path"") and mark the ""pre-commit""-file executable."
"You won't lose commits by closing the terminal.ctrl+c will exit the prompt >What happened was you opened up a string with the odd number of ' characters.Bash expects more input for your string, and allows you to enter it after the > prompt.Try typing ' and hit return, you will get the same thing. If you close the string by typing '`' again, you will be back to your normal bash prompt."
"If the GitHub repo has seen new commits pushed to it, while you were working locally, I would advice for:git pull --rebasegit pushThe full syntax is:git pull --rebase origin mastergit push origin masterThat way, you would replay (the --rebase part) your local commits on top of the newly updated origin/master (or origin/yourBranch: git pull origin yourBranch).See a more complete example in the chapter 6 Pull with rebase of the Git Pocket Book.I would recommend a:git push -u origin masterThat would establish a tracking relationship between your local master branch and its upstream branch.After that, any future push for that branch can be done with a simple:git pushSee ""Why do I need to explicitly push a new branch?"".Since the OP already reset and redone its commit on top of origin/master:git reset --mixed origin/mastergit add .git commit -m ""This is a new commit for what I originally planned to be amended""git push origin masterThere is no need to pull --rebase.Note: git reset --mixed origin/master can also be written git reset origin/master, since the --mixed option is the default one when using git reset.If you just used git init and have added your files with git add . or something similar and have added your remote branch it might be that you just haven't committed (git commit -m 'commit message') anything locally to push to the remote... I just had this error and that was my issue.I find the solution to this problem in github help.You can see it from:Dealing with non-fast-forward errorsIt says:You can fix this by fetching and merging the changes made on the remote branch with the changes that you have made locally:  $ git fetch origin# Fetches updates made to an online repository$ git merge origin branch# Merges updates made online with your local workOr, you can simply use git pull to perform both commands at once:$ git pull origin branch# Grabs online updates and merges them with your local work"
"git push -f if you have permission, but that will screw up anyone else who pulls from that repo, so be careful.If that is denied, and you have access to the server, as canzar says below, you can allow this on the server withgit config receive.denyNonFastForwards falseIf you are the only the person working on the project, what you can do is: git checkout master git push origin +HEADThis will set the tip of origin/master to the same commit as master (and so delete the commits between 41651df and origin/master)Just dogit pull origin [branch]and then you should be able to push.'remote: error: denying non-fast-forward refs/heads/master (you should  pull first)'That message suggests that there is a hook on the server that is rejecting fast forward pushes. Yes, it is usually not recommended and is a good guard, but since you are the only person using it and you want to do the force push, contact the administrator of the repo to allow to do the non-fastforward push by temporarily removing the hook or giving you the permission in the hook to do so."
"The error is that somebody else has pushed in the master branch and you would overwrite their change if git allowed you to push (this is what non-fast forward error means). So you need to merge your local master branch with the remote master branch.This can happen if you did the git pull while the local branch was not the master branch. If you only want to push the branch you are working on and not the master branch, you need to tell it to git using the complete form of git-push:$ git push remote local-branch:remote-branchThe best possible answer is on Git help hereDealing with non-fast-forward errorsFrom time to time, you may encounter this error while pushing commits (git push origin master) to GitHub:To https://github.com/user/repo.git   ! [rejected]        master -> master (non-fast-forward)  error: failed to push some refs to 'https://github.com/user/repo.git'  To prevent you from losing history, non-fast-forward updates were rejected  Merge the remote changes (e.g. 'git pull') before pushing again.  See the  'Note about fast-forwards' section of 'git push --help' for details.This error can be a bit overwhelming at first; do not fear!Simply put, Git can't make the change on the remote without losing commits, so it refuses the push. Usually, this is caused by another user pushing to the same branch.You can remedy this by fetching and merging the remote branch:git fetch origingit merge origin masterOr, you can simply use git pull to perform both commands at once:git pull origin masterIn some cases, this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase. While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do. Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don't force-push.Be sure to verify that the pull actually worked.  It is possible the merge (which is part of a pull) failed.When I had this error message I failed to notice the pull failed.  The pull failed due to some uncommitted file changes (unrelated to the files I was trying to push) which caused the merge to fail. I reverted those file changes (because they were not important) and then did a pull again.  After the successful pull, the push worked."
"Somebody has already committed to production branch.As @user1281385 said you shouldgit pull origin master:prooduction or better before review changes on production branch in other way.try git help pull to read more.remote changes are done on the repository. as the error messages says:Merge the remote changes (e.g. 'git pull') before pushing again.pull first, then push."
"What you should be doing is creating the remote repository as a bare repository. A bare repository is just the git repo, without a current checkout (that is, it is like just the contents of the .git dir in a regular Git repo, so it contains objects and refs, but it doesn't have an index or working copy of the file hierarchy). If you try pushing to a non-bare repository, the working copy will get out of sync with what is committed, and cause the kinds of problems you are seeing here.You can create a bare repository using git init --bare repo.git. Or you can clone an existing repository as a bare repo using git clone --bare original-repo new-repo.git.If you want to have a checked out copy of the repository on your server, you will need to create a new, non-bare repo on the server, and then pull into that repo from the bare repo that you push to."
"It can happen intermittently when the server kills a long running process or there is some network issue. Also there might be a permission on server where some files on the repo are owned by a different use.This error may occur if you forgot to create first commit and started push. So you need to create first commit.git add .git add -ugit commit -m ""First commit""git pushI had a similar problem. For some reason I was missing a [branch ""master""] in my .git/config file. Adding that line fixed the problem."
"Git doesn't push individual files one at a time, it pushes complete commit trees, as in, ""here is how the entire project looked at one commit, and then it looked like that at another, and now finally it looks like this"".Drawn as a graph of commits, this is, e.g., the very linear:...--D--E--F--G    <-- masterWhat's being ""rejected"" is that the ""finally"" you're supplying is not ""forward progress"" from the ""finally"" the remote had before, i.e., you're missing some ""forward progress"" that someone else put in.  You had:...--D             <-- masterand then you added commits E, F, and G.  But while you were doing that, someone else picked up the series of commits ending in D and added his or her own commit H:...--D--H          <-- masterYou're proposing to throw away H and make the commit sequence look like your sequence: D is followed by E-through-G and that's the end of everything.Git tells you the branch name that has the progress you're proposing to throw away, in this case, master.  It's up to you to git fetch the progress and then retain it, perhaps by git merge creating a merge commit M:       H------      /       \...--D         M   <-- master      \       /       E--F--Gor perhaps by ""rebasing"" your series of commits on top of H:...--D--H-E'-F'-G' <-- master(where E', F', and G' are versions of ""what changed in E, F, and G"" with just enough changed to make them apply on top of H instead‰ÛÓquite often that's just commit parentage, occasionally there's a bit more work involved).Do a git pull, then try to push, that's what the message is saying."
"This error means that the upstream repository has made commits that would be lost if you were to push. First do a ""git pull"" to merge, and then push again.I'm the only person working on my app and only work on it from my desktop, so the possibility that I managed to get the heroku repository above dev didn't make sense. BUT! I recently had a Heroku support rep look into my heroku account for a cache issue involving gem installs and he had changed something that caused heroku to return the same error as the one listed above. A git pull heroku master was all it took. Then I found the reps minor change and reverted it myself.Execute this:$ rake assets:precompile$ git add .$ git commit -m ""Add precompiled assets for Heroku""$ git push heroku masterSource: http://ruby.railstutorial.org/ruby-on-rails-tutorial-bookIt would appear that you are not fully up-to-date. You would need to do a git pull and either ""--rebase"" or let it merge into your set.After this, you should then be able to push, since it would be a 'fast-forward' change that wouldn't remove history."
"Your origin repository is ahead of your local repository. You'll need to pull down changes from the origin repository as follows before you can push. This can be executed between your commit and push.git pull origin developmentdevelopment refers to the branch you want to pull from.If you want to pull from master branch then type this one.git pull origin masteryou can write in your console: git pull originthen press TAB and write your ""master"" repositoryIn my case git push was trying to push more that just the current branch, therefore, I got this error since the other branches were not in sync.To fix that you could use: git config --global push.default simpleThat will make git to only push the current branch.This will only work on more recent versions of git. i.e.: won't work on 1.7.9.5"
You have to either pull changes first or push -f the changes.
"Solution:I saw that in bitbucket the branches develop, feature/new-design and release-1.7 werenå«t there, only branch master.Directly before finishing a release I pushed to origin and selected every branch (master, develop, new-design and release) so the branches were added by bitbucket. When finishing the release everything worked like a charm then and dploy automatically did the incremental deployment."
"See the 'non-fast forward' section of 'git push --help' for details.You can perform ""git pull"", resolve potential conflicts, and ""git push"" the result. A ""git pull"" will create a merge commit C between commits A and B.Alternatively, you can rebase your change between X and B on top of A, with ""git pull --rebase"", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A.You can also force a push by adding the + symbol before your branch name.git push origin +some_branchYou probably have changes on github that you never merged. Try git pull to fetch and merge the changes, then you should be able to push. Sorry if I misunderstood your question.If you ""git pull"" and it says ""Already up-to-date."", and still get this error, it might be because one of your other branches isn't up to date.  Try switching to another branch and making sure that one is also up-to-date before trying to ""git push"" again:Switch to branch ""foo"" and update it:$ git checkout foo$ git pullYou can see the branches you've got by issuing command:$ git branchYou can force it to push, but please do this ONLY when you're quite sure what you are doing.The command is:git push -fThis problem can also occur when you have conflicting tags. If your local version and remote version use same tag name for different commits, you can end up here.You can solve it my deleting the local tag:$ git tag --delete foo_tagWhen I got this error, I backed up my entire project folder.  Then I did something like$ git config branch.master.remote origin$ git config branch.master.merge refs/heads/master...depending on your branch name (if it's not master).Then I did git pull --rebase.  After that, I replaced the pulled files with my backed-up project's files.  Now I am ready to commit my changes again and push."
"It turned out the actual message is:git 'lfs' is not a git command.error: failed to push some refsAs mentioned in this issue:Sorry for the trouble, you should be able to fix your pushes by removing the .git/hooks/pre-push file from your repository. This is where git is trying to run git lfs when you push.You can also make sure lfs is completely uninstalled.Original answer:The complete message should include an Hint about ""non-fast-forward updates were rejected"".It is possible that you have:created a repo on GitHub with  a README (one commit done there)created an empty repo locally (0 commit, then your own commit), add a remote and tried to push.In that case, you would have two different history.Try a git pull --rebase, then git push."
"It looks like you are operating from the 'develop' branch instead of your master, which isn't allowing you to 'push origin master'. Being you are operating within a branch, you can merge it to your master in github, or possibly even 'cd ..' to your master repo and then try to ''git push origin master'' again. Also a noob, so hope this helps!"
"The answer is there, git is telling you to fetch first.Probably somebody else has pushed to master already, and your commit is behind. Therefore you have to fetch, merge the changeset, and then you'll be able to push again.If you don't (or even worse, if you force it by using the --force option), you can mess up the commit history.EDIT: I get into more detail about the last point, since a guy here just gave the Very Bad Advice of using the --force option.As git is a DVCS, ideally many other developers are working on the same project as you, using the same repository (or a fork of it). If you overwrite forcefully with your changeset, your repository will mismatch other people's, because ""you rewrote history"". You will make other people unhappy and the repository will suffer. Probably a kitten in the world will cry, too.TL;DRIf you want to solve, fetch first.If you want to hack, use the --force option. You asked for the former, though. Go for 1) always, even if you will always use git by yourself, because it is a good practice.You should use  git pull, thatå«s command do a git fetch and next do the git merge.If you use a git push origin master --force command, you may have problems in the future.Try this git commandgit push origin master --forceor short of force -fgit push origin master -f"
"As commented by jcm, the easiest solution would be for project1 and 2 to be sotred in their own repos.But if they are in the same repo, then:User2 still need to rebase his/her work on top of an updated repo.git pull --rebaseCompared to git pull alone, this allows you to replay your local commits on top of the updated remote tracking branch.x--x--x--x--y--y--y (master): y means Project2 commits         |  (origin/master)git pull --rebase = git fetch + git rebasegit fetch means:x--x--x--x'--x' (origin/master)       \        y--y--ygit rebase means:x--x--x--x'--x'--y'--y'--y' (master)             |      (origin/master)Now a git push will be a trivial one, adding your local commits on top of origin master.Since User2's work was separate from User1's, the rebase will trivially replay User2's commit on top of origin/master, and will allow the (fast-forward) push.Since both projects are in the same repo, that situation will arise if they are modified on the same branch.A good workaround would be to create two branches, one for each project.If you need both project, then you need to pull --rebase before pushing.You can consider making the rebase automatic on a git pull.Multiple git pull alone would introduce merge commits which are not needed here (since the modifications are done on two separate sets of files)x--x--x--x'----x' (origin/master)       \        \        y--y--y--m (master)Then the next pull:x--x--x--x'----x'--x'---x' (origin/master)       \        \        \        y--y--y--m--y--y--m (master"
"If you are sure of what you're doing you can force the push to heroku:git push --force heroku masterThat means you have code in your repository newer than the code in your local repository.You have to merge your changes locally :git pull heroku masterthen you push :git push heroku masterEDIT (following your edit) :try git fetch origingit pull --rebasepush again"
"It seems like you indeed have merge conflicts with the upstream. I suggest the following:1. run git fetch origin2. run git log ..origin/master to see what's new in the original that you still don't have. Note that 'git push -f' will override these commits if you attempt it...3. run git pull --rebase (this might again fail with merge conflicts). After a successful pull and rebase your push should work. I would, however, pay close attention to those merge conflicts since it seems in your case they stem from a garbled history (maybe a previous merge/rebase gone awry?)4. If all else fails, create a new branch, pointing at the origin/master (git checkout -b new_master origin/master), and then, using git-log and git-cherry-pick - fish out the only commits that are truly new in relation to origin/master. Then push this new branch and archive the old master.Assuming the above four ways all fail, there might be a problem on the remote repository."
"At first glance it looks like you have got your master and Heroku parameters round the wrong way because the first parameter to git push should be the name of the remote repository, the second is refspec (normally a branch). You are more likely to have a branch called master and a remote called Heroku. But I would expect you to get a different error message if that were the case, something like:fatal: 'master' does not appear to be a git repositoryfatal: Could not read from remote repository.The error message you are seeing implies that there is no local master branch. That would be the case if you haven't made any commits yet because git doesn't create the branch until the first commit. You can check this by running:git show-refYou should see a line containing refs/heads/master if you have a master branch. If not then try running:git commit -m 'Initial commit'You can also find out what remotes you have available with:git remote -vIf you have a remote called Heroku you should see something like:Heroku  git@heroku.youraccount:yourproject.git (fetch)Heroku  git@heroku.youraccount:yourproject.git (push)This is work for me:-git push heroku HEAD:master"
"For creating and pushing a new branch to the remote repository, you should :git checkout -b [new_branch_name]git push -u origin [new_branch_name]For resolving the error you are facing : [remote rejected] Newbranch -> Newbranch (prohibited by Gerrit) error: failed to push some refs to 'remote repository URL'you should check your user credentials with the system administrator, since he should first grant the permission to create a new branch, to your   user account.The permission configurarion for Gerrit is completely explained in the documentations."
"Someone else (or you on some other machine) has pushed a changeset to the remote repository. You, on your local machine dont have those changes yet. So to solve the situation you first have to git pulland then git pushHowever, you wont be able to git pull while you have changes in your working tree, so before you pull/push, you first have to commit or stash your local changes. This, potentialy, might bring up a merge situation if remote changes overlap with your local ones."
"This is where you went wrong:git rebase origin/sprint_branch1You should not rebase published branches. This command should have been agit merge origin/sprint_branch1In general you should be careful with git rebase ‰ÛÒ there seems to be some kind of religion around it, even though it is a very dangerous tool.How can you proceed?If you are absolutely sure nobody else is going to touch the feature branch again and nobody did any changes to it since your last pull, you can just dogit push -fThat will overwrite the HEAD on the server with your HEAD.If you are sure that there were no changes since your last pull, but other people use your branch, you can do the above and tell everybody with a copy of your branch that they need to rungit fetch origingit checkout feature_branchgit reset --hard origin/feature_branchThat will erase all their local changes since their last push though.The safest way would be for you to rename your local feature_branch to somethengi else, find the commits you added, branch of the current origin/feature_branch and cherry-pick all your changes.Run gitk feature_branch origin/feature_branch to get an understanding of what is going on.Git says hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')hint: before pushing again.You might just need to use the rebase workflow to pull rebase from the remote branch after you have made the commit, then push to remote.git commit -m 'add another date again'git pull --rebaseThis may lead to rebase conflicts which you would have to solve and then continue rebase. This is primarily cause the version of tree in the sprint_branch1 is behind the feature_branch.You should make sure the right commits are going in as well. In a general sense when you are merging with the sprint_branch1, its better to do agit checkout feature_branchgit merge sprint_branch1This instead of rebase, since rebase rewrites your commits which could cause issues.After you merge if you just push it should work fine.EDIT 1: If you need to rebase and still avoid this error, you can usegit push --force origin feature_branchHowever this is not recommended especially in distributed teams, as it will rewrite the remote branch with your local branch irrespective of any changes others might have pushed to it."
"See the ""pushing a branch"" section from GitHub help page:Dealing with ‰ÛÏnon-fast-forward‰Ûù errorsFrom time to time you may encounter this error while pushing:$ git push origin masterTo ../remote/ ! [rejected]        master -> master (non-fast forward)error: failed to push some refs to '../remote/'To prevent you from losing history, non-fast-forward updates were rejectedMerge the remote changes before pushing again.  See the 'non-fast forward'section of 'git push --help' for details.This error can be a bit overwhelming at first, do not fear.  Simply put, git cannot make the change on the remote without losing commits, so it refuses the push. Usually this is caused by another user pushing to the same branch.  You can remedy this by fetching and merging the remote branch, or using pull to perform both at once.In other cases this error is a result of destructive changes made locally by using commands like git commit --amend or git rebase.  While you can override the remote by adding --force to the push command, you should only do so if you are absolutely certain this is what you want to do. Force-pushes can cause issues for other users that have fetched the remote branch, and is considered bad practice. When in doubt, don‰Ûªt force-push.Mode details on the ""Note about fast-forwards"" of git push, as mentioned by Michael Mrozek in the comments.In addition to VonC's answer,In case you, intend to override the remote changes with your local,  $git push --forcewill do.Quite important: this can also occur if name of the branch you are on (and want to merge) and the branch upstream are not the same. Then work flow could look like this:git pull --rebase             # to retrieve upstream changes, replay yours on topgit push --dry-run --verbose origin HEAD:master   # always good idea: dry-runs..git push origin HEAD:master   # actually push current branch head (non-master) to upstream masterIf you are getting this error and your .git/config file is just fine then go through these steps (this is a common problem with a submodule in git repos - again do this from the submodule dir)git checkout mastergit pull(merge happens in background)git push"
"You should be able to force the push with (assuming you have bitbucket set up as the remote ""origin""):git checkout developgit push -f origin developNote that before you do that you may need to reset your local develop branch (if it's now pointing at your pulled/merged commit):git checkout developgit reset --hard new_hash_of_abcd3git push -f origin develop"
"One classic root cause for this message is:when the repo has been initialized (git init lis4368/assignments), but no commit has ever been madeIe, if you don't have added and committed at least once, there won't be a local master branch to push to.See ""Why do I need to explicitly push a new branch?"" for more.It doesn't recognize that you have a master branch, but I found a way to get around it. I found out that there's nothing special about a master branch, you can just create another branch and call it master branch and that's what I did.To create a master branch:git checkout -b masterAnd you can work off of that."
"It seems that what you are trying to do isgit push heroku masteror, meaning the same if you are currently on branchnamegit push heroku branchname:masterFrom manpage:git push [repository [refspec...]]refspec...   Specify what destination ref to update with what source object. The format of a <refspec> parameter is an optional   plus +, followed by the source object <src>, followed by a colon :, followed by the destination ref <dst>."
"I had this problem because I had master as a protected branchOnce I unprotected the branch I was able to push fine"
"The error message leads to the conclusion that you do not have a master branch in your local repository. Either push your main development branch (git push origin my-local-master:master which will rename it to master on github) or make a commit first. You can not push a completely empty repository.I was having the same issue and then smacked myself in the head because I hadn't actually added my project files.git add -Agit commit -am ""message""git push origin masterI had the same issue. I deleted the .git folder then followed the following commands$ git init$ git add .$ git remote add origin git@gitorious.org:project/project.git$ git commit -m ""Initial version""$ git push origin masterI just had the same problem while creating my first Git repository ever. I had a typo in the Git origin remote creation - turns out I didn't capitalize the name of my repository. git remote add origin git@github.com:Odd-engineFirst I removed the old remote using git remote rm originThen I recreated the origin, making sure the name of my origin was typed EXACTLY the same way my origin was spelled. git remote add origin git@github.com:Odd-EngineNo more error! :)I have same issue . it's solved my problem . €¡f you init your git . you have to do on Terminal 1) git add .2)git commit -m ""first commit""For send to bitbucket 3) git push -u origin --all # pushes up the repo and its refs for the first timeI had the same error, as Bombe said I had no local branch named master in my config, although git branch did list a branch named master...To fix it just add this to your .git/config[branch ""master""]    remote = origin    merge = refs/heads/masterKinda hacky but does the jobmake sure you are on a branch, at least in master branchtype:git branchyou should see:ubuntu-user:~/git/turmeric-releng$ git branch* (no branch)masterthen type:git checkout masterthen all your changes will fit in master branch (or the branch u choose)i fixed my problem....not sure what the problem was but using the gitx interface to commit my staged files, then...$ git push origin masterworked...i am having the same problem...created a new folder added in the bort template files...$ git commit -m 'first commit'$ git remote add origin git@github.com:eltonstewart/band-of-strangers.git$ git push origin masterthen i get the same error...error: src refspec master does not match any.  fatal: The remote end hung up unexpectedly  error: failed to push some refs to 'git@github.com:eltonstewart/band-of-strangers.git'error: failed to push some refs to 'git@github.com:{username}/{projectname}.git'Unless you're generalizing the error message, it looks like you literally put git@github.com:{username}/{projectname}.git as your remote Git repo. You should fill in {username} with your GitHub username, and {projectname} with your project's name.To actually resolve the issue I used the following command to stage all my files to the commit.$ git add .$ git commit -m 'Your message here'$ git push origin masterThe problem I had was that the -u command in git add didn't actually add the new files and the git add -A command wasn't supported on my installation of git. Thus as mentioned in this thread the commit I was trying to stage was empty.cd  app git init git status touch  test git add . git commit  -a  -m""message to log "" git commit  -a  -m ""message to log"" git remote add origin  git remote add origin git@git.google.net:cherry git push origin master:refs/heads/mastergit clone git@git.google.net:cherry test1I had same issue. I had mistakenly created directory in machine in lower case. Once changed the case , the problem solved(but wasted my 1.5 hrs :( )Check it out your directory name and remote repo name is same.It looks like this question has a number of answers already, but I'll weigh in with mine since I haven't seen any that address the issue I had.I had this error as well on a brand new github repository. It turns out the user I was pushing from did not have push access. For some reason, this results in an ""ERROR: repository not found"" error instead of some sort of access error.Anyway, I hope this helps the poor soul who runs into the same issue."
"The syntax you're using for git push includes a refspec (new_branch:new_branch).  Refspecs are always in the form source:destination, so the error is telling you that something's wrong with the source part of your refspec.I was able to reproduce this error by trying to push a branch that doesn't exist (git push origin fake:fake).  I know this seems like a painfully stupid question, but are you sure you're spelling your branch name correctly?  Keep in mind that branch names are case-sensitive.  What do you see when you type git branch?"
"As the error message says: git pull before you try to git push. Apparently your local branch is out of sync with your tracking branch.Depending on project rules and your workflow you might also want to use git pull --rebase.Try this: git push -f origin masterI've just received this error.I created a github repository after creating my local git repository so I needed to accept the changes into local before pushing to github. In this case the only change was the readme file created as optional step when creating github repository.git pull https://github.com/*username*/*repository*.git masterrepository URL is got from here on project github page : I then re-initialised (this may not be needed)git initgit add .git commit -m ""update""Then push : git pushIf git pull does not help, then probably you have pushed your changes (A) and after that had used git commit --amend to add some more changes (B). Therefore, git thinks that you can lose the history - it interprets B as a different commit despite it contains all changes from A.             B            /        ---X---AIf nobody changes the repo after A, then you can do git push --force.However, if there are changes after A from other person:             B            /        ---X---A---Cthen you must rebase that persons changes from A to B (C->D).             B---D            /        ---X---A---Cor fix the problem manually. I didn't think how to do that yet.Try this command: ""git pull origin master""It worked for me.Check this link: https://help.github.com/articles/dealing-with-non-fast-forward-errorsi had created new repo in github and i had the same problem, but it also had problem while pulling,  so this worked for me.but this is not advised in repos that already have many codes as this  could mess up everythinggit push origin master --force! [rejected]        master -> master (non-fast-forward)Don‰Ûªt panic, this is extremely easy to fix. All you have to do is issue a pull and your branch will be fast-forward:$ git pull myrepo masterThen retry your push and everything should be fine:$ git push github masterThe only i was able to resolve this issue was to delete the local and git repo and create the same again at both ends. Works fine for now.You need to do git branchif the output is something like:* (no branch)masterthen dogit checkout masterMake sure you do not have any pending commits as checking out will lose all non-committed changes.I had this problem on a development machine. The dev branch was pushing fine but thethe master branch gave me (while git pushing when being on the dev branch):! [rejected]        master -> master (non-fast-forward)So I tried:git checkout mastergit pullWhich gave me:You asked me to pull without telling me which branch youwant to merge with, and 'branch.master.merge' inyour configuration file does not tell me, either.I found out the master branch was missing from .git/config and added:[branch ""master""]    remote = origin    merge = refs/heads/masterAfterwards git push also worked fine on the dev branch."
"t5538-push-shallow.sh shows that this error message shoould only be seen after a git clone --depth x.Try again the sequence:git clone git@github.com/myuser/myproject.gitcd myproject// edit a filegit add .git commit -m ""First modif""git push"
"Since this is the master branch, i.e., the one running your generated pages, you need to drop into the _deploy directory, then do the git pull origin master. Somehow your deploy directory has gotten out of sync. Do you have more than one local repo you write to and deploy from? (Say on different machines...) If you do, then you should always make sure to sync your the sources on the various repos as well.docd _deploygit reset --hard origin/mastercd ..and try againrake generaterake deployTry:git checkout sourcerake gen_deploy"
"Since it is an error on the remote side (GitHub), it should be linked to some issue GitHub is having those last few hours.See GitHub Status historySome Pages sites for users that use apex domains are currently unavailable. We're working to resolve the problem as quickliy [sic] as possible.Check if the issue persists (and if it does contact the GitHub support)Note: for the very first push, try a:git push -u origin masterSee ""Why do I need to explicitly push a new branch?"".The OP ColdFusion actually comments:Something went wrong during the creation of the repository;  GitHub support suggested I delete it and try again.  Issue resolved"
"From my experience you need the following group permissions to import an entire repository to gerrit -- basically permissions to push everything to the gerrit repo:refs/heads/*create referenceforge author identityforge committer identitypushpush merge commitpush annotated tagrefs/tags/*create reference"
"Try git fetch so that your local repository gets all the new info from github. It just takes the information about new branches and no actual code. After that the git checkout should work fine.I got this error for a branch that was remote and had no local tracking branch. Even though I'm certain I've checked out remote branches via a simplegit checkout feature/fooin the past, to get around this error I had togit checkout -t -b feature/foo origin/feature/fooI have no idea what I did to get myself into that situation either.I was getting following error when I tried to checkout new brancherror: pathspec 'BRANCH-NAME' did not match any file(s) known to git.When I tried git checkout origin/<BRANCH-NAME> it went to detached HEAD (detached from origin/)Did following to resolve the issuegit remote updategit fetch git checkout --track origin/<BRANCH-NAME>""error: pathspec 'foo' did not match any file(s) known to git.""This happenned to me when the full repo was not fetched.try:$ git fetchGit Windows users beware - without the --icase-pathspecs or GIT_ICASE_PATHSPECS = 1 env var setting, that git pathspecs will be case-sensitive, in which case git checkout origin/FooBranch ""Some/Path/To/File.txt""is not the same as git checkout origin/FooBranch ""some/path/to/file.Txt""I got this when I did the following:Used IntelliJ IDE, connected to gitCreated a new file, and added to gitRenamed the new fileWhen I tried to check in the directory, I got this error.To fix:I opened the repo in git extensions. I saw that the file (with the old name) was staged. But since it didnt exist anymore, it could not be committed.I simply unstaged this file. Then I re-added the file (this time correctly named) into git and committed without errors.If it happens on Windows, it is probably the filename case issue. I had this error today - I've created new file, added to GIT, then I changed one letter in filename from lower to upper and then I couldn't to anything - commit, revert, delete file from repo. The only solution I found was changing the filename again back to exact same case when I added this file to GIT, then doing GIT revert to remove this file from GIT, then changing filename again as I want. After those changes I could commit to repo and then push without any problem.None of these answers solved my issue:Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git log --format=onelineb9cc6a9078312865280fb5432a43e17eff03a5c6 Formatted README288772f36befe6bd60dd41b8185f1e24e0119668 Updated README documentationd2bdbe18f4169358d46fad50eacfb89786df3bf8 Version object v3.0.0-SNAPSHOTa46b1910a3f548b4fa254a6055d25f68d3f217dd VersionFactory is now Platform agnostic24179ae569ec7bd28311389c0a7a85ea7b4f9594 Added internal.Platform abstraction252b684417cf4edd71aed43a15da2c8a59c629a7 Added IPlugin implementation for Spongee3f8d21d6cf61ee4fc806791689c984c149b45e3 Added IPlugin implementation for Bukkitaeb403914310b4b10dee9e980cf64472e2bfda79 Refactored Version.javaef50efcff700c6438d57f70fac30846de2747a7e Refactored TesterFactorya20808065878d4d28657ae362235c837cfa8e625 Added IPlugin abstraction9712a3575a70060d7ecea8b62bb5e888fdc32d07 Heavily refactored Tester02d025788ae740dbfe3ef76a132cea8ca4e47467 Added generic Predicate<T> interface9c565777abea9be6767dfdab4ab94ed1173750dd Minor refactoring of testCompareTo()2ff2a28c221681e256dcff28770782736d3a796a Version object v2.0.1d4b2e2bd830f77cdbc2297112c2e46b6555d4393 Fix compareTo()05fe7e012b07d1a5b8de29804f96d9a6b24229a1 Make compareTo() fail6e85371414357a41c1fc0cec0e75adba92f96832 Fix VersionFactory passing nullc1fd1f032f87d860d5ed9d6f6679c9fa522cff8d Version object v2.062c3a92c008a2ed11f0a4d016080afc3541d0700 Version object v1.2c42e9e617128085e872c51b4d977a04e48d69e8f Deprecated, doc'd, future-proofed getNmNikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 3a796aerror: pathspec '3a796a' did not match any file(s) known to git.I was trying to go back and build the commit for Version object v2.0.1. Luckily, I got the idea to try the whole hash code and it worked ! Which means that I was using the wrong end of the hash code.Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version (master)$ git checkout 2ff2aNote: checking out '2ff2a'.You are in 'detached HEAD' state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example:  git checkout -b new_branch_nameHEAD is now at 2ff2a28... Version object v2.0.1Nikolai@CALIGARI-7 ~/Documents/NetBeansProjects/Version ((2ff2a28...))$As shown above, for partial hash codes, you must supply the front-end, not the back-end.If you deleted a folder and pulled/cloned again your repo, you may need to create your local branch again. Try: git checkout -b yourbranchnameIn my case I had renamed a file changing the case of the file, i.e.   SomeFile.js -> someFile.jsI think that was related to the problem.  Doing a git fetch didn't fix the issue.I moved the files out of my project, did a fetch, and did a push without them.  Then I did a fetch, added them back, and did a push, and it worked.  I don't know if all those steps were needed, but it did ultimately work.in my case I enter submodule directory without doing git submodule init git submodule updateSo git was linked to the parent folder that indeed missed that branch.On Windows OS by default git is instaled with core.ignorecase = trueThis means that git repo files will be case insensitive, to change this you need to execute:\yourLocalRepo> git config core.ignorecase falseyou can find this configuration on .git\config file$ cat .git/refs/heads/feature/user_controlled_site_layouts3af84fcf1508c44013844dcd0998a14e61455034Can you confirm that the following works:$ git show 3af84fcf1508c44013844dcd0998a14e61455034It could be the case that someone has rewritten the history and that this commit no longer exists (for whatever reason really).This can be caused when upstream rewrites history.When this happens, I toss all affected repos, clone them fresh from upstream, and use 'git format-patch' / 'git am' to ferry any work in progress from old world to new.When I have this issue I install a new version of git. If I can't do that from a binary package, I install it from source into my $HOME directory like this:mkdir $HOME/binexport version=1.7.10.3  wget http://git-core.googlecode.com/files/git-$version.tar.gz  tar zxf git-$version.tar.gz  cd git-$version  ./configure --prefix=$HOME  make && make install  echo ""export PATH=$HOME/bin:\$PATH"" >> ~/.bashrc  chmod +x ~/.bashrc      which git      git --versionthe last two lines are to verify.(updated with code from user FractalSpace - thanks!)I had this problem today i was trying to git checkout foo and got error: pathspec 'testing' did not match any file(s) known to git. turns out i was in the wrong repo.. So lesson learned check your repo before freaking out.Happened to me after renaming an uncommitted file in Android Studio.Git seemed to have the old version in its repository, even if it didnå«t exist anymore.fetch, pull, checkout, add all and so on did not help in my case!So I opened the Git GUI of TortoiseGit which showed me the exactly file which caused trouble.Afterwards I deleted the file from the repository withgit rm -r --cached /path/to/affected/fileand the problem was goneI faced a similar issue. What led me into this trouble was:I had multiple remote branches and I deleted the folder that had the code.I did a get pull. : git pull git@git.corp......Then I added remote repository : git remote add upstream git@git.corp.......Then I tried to change branch to some other branch say AAAA and I got errorerror: pathspec 'AAAA' did not match any file(s) known to git.After spending an hour I found a solution.I deleted the source folder again.Then I did a git pull :git pull git@git.corp......Then I changed branch before linking it to remote repository : git checkout AAAthen I added it to remote repositorygit remote add upstream git@git.corp......After this I can easily switch branches.Although this is not a standard way but it worked for me after I tried all of above options.I faced this problem last time, and the thing I have done is remove the folder (or source code) related to that branch.Ex: the branch origin/foo create folder foo at your local, so I just delete it and use git fetch $ checkout to get code back from remote.Or you can do it by create folder at local same as the branch you intended to checkout.Ex: create folder foo at local, after that, use Git command: git branch --set-upstream-to=origin/foo foo, that all. Use git pull to get code."
"When I run git branch, it only shows *master, not the remaining two branches.git branch doesn't list test_branch, because no such local branch exist in your local repo, yet. When cloning a repo, only one local branch (master, here) is created and checked out in the resulting clone, irrespective of the number of branches that exist in the remote repo that you cloned from. At this stage, test_branch only exist in your repo as a remote-tracking branch, not as a local branch.And when I rungit checkout test-branchI get the following error [...]You must be using an ""old"" version of Git. In more recent versions (from v1.7.0-rc0 onwards), If <branch> is not found but there does exist a tracking branch in  exactly one remote (call it <remote>) with a matching name, treat [git checkout <branch>] as  equivalent to$ git checkout -b <branch> --track <remote>/<branch>Simply run git checkout -b test_branch --track origin/test_branchinstead. Or update to a more recent version of Git.My friend, you need to create those corresponding branches locally first, in order to check-out to those other two branches, using this line of codegit branch test-branch  and  git branch change-the-titlethen only you will be able to do git checkout to those branchesAlso after creating each branch, take latest changes of those particular branches by using git pull origin branch_name   as shown in below codegit branch test-branchgit checkout test-branchgit pull origin test-branchand for other branch named change-the-title  run following code =>git branch change-the-titlegit checkout change-the-titlegit pull origin change-the-titleHappy programming :)"
"This is the error you get when you attempt to rungit commit <file>but <file> hasn't been staged yet; in other words, Git hasn't been told about it, yet. This is most likely what's happening here. Rungit add application/libraries/Funder.phpthen try to commit.The reason why this error happens is pointed in this post: http://stackoverflow.com/a/29485441/2769415Solution:Rename the file back to the original one, then rename it to a different name, then back to the one with the correct capitalization. Git will not throw the bug anymore.Example:Created FOOBar class.Renamed it to FooBar and then got the error.Rename it back to FOOBar.Rename to FooBarTest.Rename to FooBar.Git works now.I had the same problem in Android Studio after renaming some activities. I tried adding (git add) and moving (git mv) the files but never helped and I was getting the same message again and again.Finally I decided to backup the classes in the package that had the problematic file in a separate folder in my HDD, then I removed the files from the original folder and in the terminal I did:rm app/src/main/java/com/path/to/package/with/problematic/files/Then recreated the deleted package via Android Studio and copied and pasted my classes back there. After that I was able to commit without any issues.I had this failing commit scenario due to a renamed directory.This was the originally created directory with a capitalization mistake:application/Templates/lists/index.htmlWithin the IDE, I had agreed to add this file to the existing git repo.In later testing, I discovered I had a case-sensitive path issue with the capitalization of ""Templates"".  Within the IDE, I simply renamed the directory to ""templates"" (changed to lower-case).  I did not record the actual sequence of events around this, but later when my commit failed with the following message, I had a hunch this was this issue.  Apparently, the IDE did not fully handle this case of renaming a directory.The IDE commit error message:  Commit failed with error: pathspec  ""application/templates/lists/index.html"" did not match any file(s)  known to git.After doing some reading, my strategy was to take the file back out and then add it again.  I unstaged the suspect filegit reset HEAD lists/Templates/lists/index.htmlNote, git status only showed the directory here... Not the file.Untracked files:  (use ""git add <file>..."" to include in what will be committed)    lists/templates/Then, I added back with the corrected directory name (I only used the path for the add, following the lead from git status).git add lists/templates/After this, my commit succeeded.  I'm not sure if this was the ideal technique, but it resolved the commit error in my case.Here's a concise answer on the quickest way to resolve this issue. Similar to @cmbind55 post but to the point.Problem: I have added a file that I later renamed.Solution:Un-add the old file namegit reset HEAD oldFileName.fileNow, add the new file namegit add newFileName.fileCommit and be happyi had the same issue with the word ""certificate"" as a package name... when i rename the Package to ""certificates"" it just work... strange .."
"As genisage noted in a comment, you're asking git explicitly to check out the file databaseName.tmp, as if you'd typed in:git checkout -- databaseName.tmpThis is because the * you typed in is handled by the shell, before git ever has a chance to see your command.  The shell replaces * with all the file names in your current working directory,1 and then having done that, then runs git, without any indication that the actual command you entered had * in it, rather than all those names.Again, git has no idea that you used the asterisk * character, all it sees is a list of file names, including any top-level ignored files that are not being stored in git.Confusingly, if you manage somehow2 to pass a literal asterisk * to git, git will expand the *, but with a different set of file names: those known to git.  That would do what you want.There's an easier way, though: git will check out directories recursively by checking out all the files it knows about in that directory.  So, instead of using *, simply use . to ask git to check out the current directory:git checkout -- .If git knows about ./a and ./b but not ./databaseName.tmp, this will check out ./a and ./b and not attempt to do anything with ./databaseName.tmp.31More accurately, files whose names do not start with a leading dot ..2And in fact, it's quite easy to manage, e.g., simply insert a backslash \ in front of the asterisk: git checkout -- \*.  Or, use single or double quotes, both of which protect against shell globbing.  Single quotes also inhibit shell variable expansion, while double quotes permit variable expansion but inhibit globbing.3It's worth pointing out a subtle difference here: * expands to file names that do not start with ., while asking git to check out . causes it to check out all files in the directory, including those whose names start with ..  Hence both git checkout -- \* and git checkout -- * will not undo changes to a file named .secret, for instance, while git checkout -- . will undo such changes."
"I removed .xcdatamodel file, committed, added it and committed again. Not clean, but worked.The chosen answer is too specific to his own question and gives zero insight on the actual cause. The problem is indeed, as mentioned before the changing of a filename's case. For me personally this is because of my Macbook/OSX. Apparently Windows has the same 'thing'. Cause: git isn't able to recognise a change from 'filename' to 'FileName'.Here's a list of solutions for anyone stumbling upon this. All should be run at the project root:The Permanent fix that will work on current and future projectsChange the git case setting. The file should be committed afterwardsgit config core.ignorecase false --globalThe Project only fixgit config core.ignorecase falseThe just give me a line of code so I can move on fix - credit to Brucegit commit -a -m ""pathspec did not match any file(s) known to git fix""The I get paid by the hour fixDelete the file. Commit. Push. Add the file again. Commit. Push.This probably wasn't your problem, but this page has a high Google rank for the error:Git doesn't like renames where the source and destination differ only by case. (Windows-specific) SeeHow do I commit case-sensitive only filename changes in Git?for solutions.This is not a proper way to solve the problem, but it's a workaround that may help others...Do this in your terminal:git commit -m ""<message>"" <project dir>Replace  with your message, and  with the directory of your project.This is similar to tf.alves answer, but normally I do agit commit -a -m ""comment""I've found that if I forget the -a and -m parameters that I get the error: pathspec message mentioned above."
"You aren't setting up any remotes when you initialize an empty repository and issue a git pull.If you want to use any/all of the remote branches in your repository, you should be using git clone <remote> to create a local clone of the repo, rather than git init; git pull <remote> which simply gives you a copy of the default branch from the remote.Once you've properly cloned the repository, assuming there is a remote branch origin/mybranch, you can check out a local copy which will track the remote through your command:git checkout mybranchIf you're creating a new brach, use eithergit checkout -b rvm-upgradeAlso, there's no need to put the branch name in quotes.If you expect the branch to already exist, run    git branch -aand it should be in the list.  If it's not in the list, it doesn't exist yet."
"Git tries to resolve git checkout test like this:If there is a local branch named ""test"", then checkout thatIf there is a remote branch named ""test"", for example origin/test, then create a local branch from it and checkout (equivalent to git checkout -b test origin/testIf there is a file or directory named ""test"", then checkout that, which will undo uncommitted (but unstaged) changes to that file/directoryIf none of the above match, then Git gives the error:error: pathspec 'test' did not match any file(s) known to git.I'm not sure what you were trying to do here. If you wanted to checkout the ""test"" branch, it seems it doesn't exist. Check what branches you have with git branch -a. If you wanted to checkout a file/dir, it doesn't exist. Check what files you have with git ls-files."
"Most Git repositories use master as the main (and default) branch - if you initialize a new Git repo via git init, it will have master checked out by default.However, if you clone a repository, the default branch you have is whatever the remote's HEAD points to (HEAD is actually a symbolic ref that points to a branch name). So if the repository you cloned had a HEAD pointed to, say, foo, then your clone will just have a foo branch.The remote you cloned from might still have a master branch (you could check with git ls-remote origin master), but you wouldn't have created a local version of that branch by default, because git clone only checks out the remote's HEAD.To checkout branch which not exists locally but is in the remote repo you could use this command: git checkout -t -b master origin/mastermaster is just the name of a branch, there's nothing magic about it except it's created by default when a new repository is created.You can add it back with git checkout -b master.I actually had the same problem with a completely new repository. I had even tried creating one with git checkout -b master, but it would not create the branch. I then realized if I made some changes and committed them, git created my master branch.if it is a new repo you've cloned, it may still be empty, in which case:  git push -u origin master should likely sort it out.  (did in my case.  not sure this is the same issue, thought i should post this just incase. might help others.)In my case there was a develop branch but no master branch. Therefore I cloned the repository pointing the newly created HEAD to the existing branch. Then I created the missing master branch and update HEAD to point to the new master branch.git clone git:repositoryname --branch otherbranchgit checkout -b mastergit update-ref HEAD mastergit push --set-upstream origin masterI ran into the same issue and figured out the problem. When you initialize a repository there aren't actually any branches. When you start a project run git add . and then git commit and the master branch will be created.Without checking anything in you have no master branch. In that case you need to follow the steps other people here have suggested."
"The command line arguments are separated by space. If you want provide an argument with a space in it, you should quote it. So use git commit -m ""initial commit"".I would just like to add-- In windows the commit message should be in double quotes, as I spent about an hour,just to figure out that single quote is not working in windows.Had this happen to me when committing from Xcode 6, after I had added a directory of files and subdirectories to the project folder.  The problem was that, in the Commit sheet, in the left sidebar, I had checkmarked not only the root directory that I had added, but all of its descendants too.  To solve the problem, I checkmarked only the root directory.  This also committed all of the descendants, as desired, with no error.In my case, this error was due to special characters what I was considering double quotes as I copied the command from a web page."
"You don't have files named config_files*, as you wan't to add the content of config_files directory you must do : git add config_files/then a git status will show :new file : config_files/file1new file : config_files/file2and so on...then you can commit with :git commit -m ""commit message"""
"Your file .idea/workspace.xml is not under git version control. You have either not added it yet (check git status/Untracked files) or ignored it (using .gitignore or .git/info/exclude files)You can verify it using following git command, that lists all ignored files:git ls-files --others -i --exclude-standard"
"So after some back and forth in the comments, I think we've come to a solution here.  As it turns out, GIT does support the concept of checking out only subtrees of a given repository, through a process called 'sparse checkout' which you can find more information about here.The concept is to initialize a new, clean git repository, add your remotes, turn on the setting 'core.sparsecheckout,' and finally to check out your folders."
"The files don't exist, so they cannot be added. Make sure the files have been created first.D:\temp\hi>git initInitialized empty Git repository in D:/temp/hi/.git/D:\temp\hi>dir Volume in drive D is Data Volume Serial Number is 744F-7845 Directory of D:\temp\hi2013-11-25  12:59 AM    <DIR>          .2013-11-25  12:59 AM    <DIR>          ..               0 File(s)              0 bytes               2 Dir(s)  1,331,387,256,832 bytes freeD:\temp\hi>git add hi.txtfatal: pathspec 'hi.txt' did not match any filesD:\temp\hi>echo hello > hi.txtD:\temp\hi>git add hi.txtD:\temp\hi>dir Volume in drive D is Data Volume Serial Number is 744F-7845 Directory of D:\temp\hi2013-11-25  12:59 AM    <DIR>          .2013-11-25  12:59 AM    <DIR>          ..2013-11-25  12:59 AM                 8 hi.txt               1 File(s)              8 bytes               2 Dir(s)  1,331,387,256,832 bytes freeNote: you shouldn't see this particular error message in git 1.9/2.0 (Q1 2014). See commit 64ed07c by Nguy‡ÈÉn ThÌÁi Ng‡Èçc Duy (pclouds):add: don't complain when adding empty project rootThis behavior was added in 07d7bed (add: don't complain when addingempty project root - 2009-04-28, git 1.6.3.2)then broken by 84b8b5d (remove match_pathspec() in favor of match_pathspec_depth() - 2013-07-14, git 1.8.5). Reinstate it.The idea is:We try to warn the user if one of their pathspecs caused no matches, as it may have been a typo. However, we disable the warning if the pathspec points to an existing file, since  that means it is not a typo but simply an empty directory.Unfortunately, the file_exists() test was broken for one special case: the pathspec of the project root is just """".  This patch detects this special case and acts as if the file exists (which it must, since it is the project root).The user-visible effect is that this:$ mkdir repo && cd repo && git init && git add .used to complain like:fatal: pathspec '' did not match any filesbut now is a silent no-op.It is again a silent no-op in upcoming git 1.9/2.0 (Q1 2014)In order to add a file to git it has to exist. git add does not create a file, but tells git to add it to the current branch you are on and track it.Currently, you have no tracked files, as you can see from your git status command. In order to track all files from the my-project directory, do a git add my-project/*. This will add all the files from that directory.Next, if you do not have the desired file.txt, just create a text file and run git status. It should show you that you have an untracked file.txt file, which you can afterwards add to git using git add file.txt."
"git checkout only operates inside the ""working tree"".  To do what you want, change Git's idea of what the working tree is.  There are a few different ways to do this:option 1:  run from the Git repositorycd /path/to/repository# git automatically locates the .git directory as usualgit --work-tree=C:/file/path/temp/versionX checkout master~Xoption 2:  run from the destination directorycd C:/file/path/temp/versionX# if --git-dir is specified, Git assumes the working tree is .git --git-dir=/path/to/repository/.git checkout master~Xoption 3:  run from some other directorycd /some/arbitrary/path# need to specify both the path to .git and the destination directorygit --git-dir=/path/to/repository/.git \    --work-tree=C:/file/path/temp/versionX \    checkout master~X"
"I think you might've forgotten the step$ git add .gitignorebefore trying to commit, or then you mistyped, when you shoud've given$ git commit -m ""Add credentials.yml to .gitignore""Process advised is highly dangerous [for the repo contents], so one must be really careful to follow all the steps in detail."
"Doh.  The commit that deleted those files would necessarily not have them anymore.  Thus, I need to go one commit further back.  Running:git checkout <sha of deleting commit>^ path/to/my/fileworks perfectly"
"When I run git branch, it only shows *master, not the remaining two branches.git branch doesn't list test_branch, because no such local branch exist in your local repo, yet. When cloning a repo, only one local branch (master, here) is created and checked out in the resulting clone, irrespective of the number of branches that exist in the remote repo that you cloned from. At this stage, test_branch only exist in your repo as a remote-tracking branch, not as a local branch.And when I rungit checkout test-branchI get the following error [...]You must be using an ""old"" version of Git. In more recent versions (from v1.7.0-rc0 onwards), If <branch> is not found but there does exist a tracking branch in  exactly one remote (call it <remote>) with a matching name, treat [git checkout <branch>] as  equivalent to$ git checkout -b <branch> --track <remote>/<branch>Simply run git checkout -b test_branch --track origin/test_branchinstead. Or update to a more recent version of Git.My friend, you need to create those corresponding branches locally first, in order to check-out to those other two branches, using this line of codegit branch test-branch  and  git branch change-the-titlethen only you will be able to do git checkout to those branchesAlso after creating each branch, take latest changes of those particular branches by using git pull origin branch_name   as shown in below codegit branch test-branchgit checkout test-branchgit pull origin test-branchand for other branch named change-the-title  run following code =>git branch change-the-titlegit checkout change-the-titlegit pull origin change-the-titleHappy programming :)"
"I eventually found a fix. I tweaked the git config file.I changedfetch = +refs/heads/master:refs/remotes/origin/masterto fetch = +refs/heads/*:refs/remotes/origin/*Then, $ git fetch --all worked for the changes.Fetching originPassword for 'https://myusername@bitbucket.org':remote: Counting objects: 993, done.remote: Compressing objects: 100% (581/581), done.Receiving objects: 100% (966/966), 723.76 KiB | 8.00 KiB/s, done.emote: Total 966 (delta 324), reused 964 (delta 322)Resolving deltas:   0% (0/32Resolving deltas: 100% (324/324), completed with 21 local objects.From https://bitbucket.org/myusername/myproj * [new branch]      etc/schema_note -> origin/etc/schema_note * [new branch]      feature/sampledata -> origin/feature/sampledata * [new branch]      fix/cleanup -> origin/fix/cleanupNow, $ git branch -a started to list all remote branches;* master  remotes/origin/HEAD -> origin/master  remotes/origin/etc/schema_note  remotes/origin/feature/sampledata  remotes/origin/fix/cleanup  remotes/origin/masterFinally, I checkout for every branch.TPP@SITHU /d/xampp/htdocs/myproj (master)$ git checkout etc/schema_noteBranch etc/schema_note set up to track remote branch etc/schema_note from origin.Switched to a new branch 'etc/schema_note'TPP@SITHU /d/xampp/htdocs/myproj (etc/schema_note)$ git checkout feature/sampledataBranch feature/sampledata set up to track remote branch feature/sampledata fromorigin.Switched to a new branch 'feature/sampledata'TPP@SITHU /d/xampp/htdocs/myproj (feature/sampledata)$ git checkout fix/cleanupBranch fix/cleanup set up to track remote branch fix/cleanup from origin.Switched to a new branch 'fix/cleanup'Here is my final repo branch list:$ git branch -a  etc/schema_note  feature/sampledata* fix/cleanup  master  remotes/origin/HEAD -> origin/master  remotes/origin/etc/schema_note  remotes/origin/feature/sampledata  remotes/origin/fix/cleanup  remotes/origin/master"
"This is likely because you or someone on your team has changes in your submodule that are unpublished (committed, but not pushed to the remote server). They then published the superproject with references to the git commit in the submodule which does not exist on the git server. So git is trying to pull down a specific submodule git commit ID that it can't find.This would be the case if the changes are in a repository elsewhere on your machine or on another machine.To resolve, go to that repository that references that commit and publish (push) the submodule changes to the server. Or change the submodule to point to a different commit ID.I also received this error using TortoiseGit while trying to update submodules that aren't in the index.  That is, they exist in .gitmodules but have not been correctly added to the repository.The solution is to manually re-add them using the paths specified in .gitmodules.  You can use the TortoiseGit UI or run this on the command line for each module...git submodule add <url> <path>(I realise this is probably not the solution for the original poster, but hopefully it helps others Googling this.)In order to get new submodules into other repositories, I believe you need to run git submodule init once before starting to run git submodule update; this will register the new submodule from .gitmodules in .git/config."
"This is the error you get when you attempt to rungit commit <file>but <file> hasn't been staged yet; in other words, Git hasn't been told about it, yet. This is most likely what's happening here. Rungit add application/libraries/Funder.phpthen try to commit.The reason why this error happens is pointed in this post: http://stackoverflow.com/a/29485441/2769415Solution:Rename the file back to the original one, then rename it to a different name, then back to the one with the correct capitalization. Git will not throw the bug anymore.Example:Created FOOBar class.Renamed it to FooBar and then got the error.Rename it back to FOOBar.Rename to FooBarTest.Rename to FooBar.Git works now.I had the same problem in Android Studio after renaming some activities. I tried adding (git add) and moving (git mv) the files but never helped and I was getting the same message again and again.Finally I decided to backup the classes in the package that had the problematic file in a separate folder in my HDD, then I removed the files from the original folder and in the terminal I did:rm app/src/main/java/com/path/to/package/with/problematic/files/Then recreated the deleted package via Android Studio and copied and pasted my classes back there. After that I was able to commit without any issues.I had this failing commit scenario due to a renamed directory.This was the originally created directory with a capitalization mistake:application/Templates/lists/index.htmlWithin the IDE, I had agreed to add this file to the existing git repo.In later testing, I discovered I had a case-sensitive path issue with the capitalization of ""Templates"".  Within the IDE, I simply renamed the directory to ""templates"" (changed to lower-case).  I did not record the actual sequence of events around this, but later when my commit failed with the following message, I had a hunch this was this issue.  Apparently, the IDE did not fully handle this case of renaming a directory.The IDE commit error message:  Commit failed with error: pathspec  ""application/templates/lists/index.html"" did not match any file(s)  known to git.After doing some reading, my strategy was to take the file back out and then add it again.  I unstaged the suspect filegit reset HEAD lists/Templates/lists/index.htmlNote, git status only showed the directory here... Not the file.Untracked files:  (use ""git add <file>..."" to include in what will be committed)    lists/templates/Then, I added back with the corrected directory name (I only used the path for the add, following the lead from git status).git add lists/templates/After this, my commit succeeded.  I'm not sure if this was the ideal technique, but it resolved the commit error in my case.Here's a concise answer on the quickest way to resolve this issue. Similar to @cmbind55 post but to the point.Problem: I have added a file that I later renamed.Solution:Un-add the old file namegit reset HEAD oldFileName.fileNow, add the new file namegit add newFileName.fileCommit and be happyi had the same issue with the word ""certificate"" as a package name... when i rename the Package to ""certificates"" it just work... strange .."
"Your alias doesn't need to be run through the shell, you should be able to do this:[alias]    back=checkout HEAD^ --Git will automatically append the alias' arguments, meaning this:$ git back afile bfile cfilewill turn into this:$ git checkout HEAD^ -- afile bfile cfileBonus: Note the use of the double hyphen ""--"", this tells checkout that the remaining arguments are all files, otherwise it may mistakenly interpret a file as an existing branch or other ref.To address the poster's requirement of using a shell command alias, the catch is that the subshell will have it's working directory set to the repository's root directory. Here's what git help config has to say:alias.*    [...] Note that shell commands will be executed from the    top-level directory of a repository, which may not necessarily be    the current directory.  GIT_PREFIX is set as returned by     running git rev-parse --show-prefix from the original current directory.The good news is the GIT_PREFIX variable that you can use in your command like so:back1=!sh -uc 'git checkout HEAD^ -- ""$GIT_PREFIX/$1""' -"
"git clone --depth 1 implicitly carries a --single-branch option, which defaults to the primary branch, which is origin/master by default.If you want to clone a different branch, tell git which one you want to clone.git clone --depth 1  --branch <branch> urlYou can directly fetch anything you want:git fetch -depth 1 origin flaggedrevs:flaggedrevs  #  `origin` can be a URL tooThat will create a normal (albeit shallow) branch from what you fetched.  To get more conventional results, git fetch --depth 1 origin flaggedrevs:refs/remotes/origin/flaggedrevs. ""copy origin's flaggedrevs to my refs/remotes/origin/flaggedrevs"".Haul up .git/config and look at it, or say git config --get-regexp fetch.  If you don't explicitly tell it what to fetch, that's what it fetches."
Okay I fixed it. It was a problem at the beginning when I created the git repo in the server. I used the command git init to create the repo. That caused some permission problems and thus pushed branches could not be added properly. What I should have done was create the repo with git init --share. I created a new repo with this and now it seems to work perfectly.
"A git checkout can delete one of your ignored, untracked files. That could happen if someone else tracked the file in a different branch. ForensicsOne way to determine whether someone tracked a file they shouldn't have tracked is to run git log with a limit by file name.git log --follow -- filename.extIf you don't need to track renames, you can use a simplified search. git log -- filename.txtBoth will display commits that impacted the filename.ext file. The first one (with --follow) will also detect renames. When searching by path, the -- is necessary before the filename.ext, to inform git that it's a file name.Scenario / ExampleHere is a scenario in PowerShell with git in which someone may have added an ignored file.Create and initialize local git reponew-item -type directory ""repo""cd repogit initAdd a gitignore and a test.txt file to ignorenew-item -type file "".gitignore""add-content .gitignore ""*.txt"" new-item -type file ""test.txt""git add -A;git commit -m ""Add gitignore"";At this point, git is NOT tracking test.txt, because it is ignored.Force add the test.txt filegit add -f test.txtgit commit -n ""Force add test.txt""Git is now tracking test.txt, and a checkout of HEAD~1 will erase it, even though it is in your .gitignore. Checkout your previous commit to delete the ignored test.txtgit checkout HEAD~1# this will delete the ""ignored"" file.Similarly, if another person (force) added the test.txt file, a checkout of their branch may have deleted your ignored, untracked file.I found out the reason: git was used to track the file in a branch that was merge commited, leaving no trace in the main branch's log. Looking into the log of the merged branch showed the operations on the file."
"Are you sure branch labs does not already exist (as in this thread)?You can't have both a file, and a directory with the same name.You're trying to get git to do basically this:% cd .git/refs/heads% ls -ltotal 0-rw-rw-r-- 1 jhe jhe 41 2009-11-14 23:51 labs-rw-rw-r-- 1 jhe jhe 41 2009-11-14 23:51 master% mkdir labsmkdir: cannot create directory 'labs': File existsYou're getting the equivalent of the ""cannot create directory"" error.  When you have a branch with slashes in it, it gets stored as a  directory hierarchy under .git/refs/heads.It is possible to have hierarchical branch names (branch names with slash).  For example in my repository I have such branch(es).  One caveat is that you can't have both branch 'foo' and branch 'foo/bar' in repository.Your problem is not with creating branch with slash in name.$ git branch foo/barerror: unable to resolve reference refs/heads/labs/feature: Not a directoryfatal: Failed to lock ref for update: Not a directoryThe above error message talks about 'labs/feature' branch, not 'foo/bar' (unless it is a mistake in copy'n'paste, i.e you edited parts of session).  What is the result of git branch or git rev-parse --symbolic-full-name HEAD?Sometimes that problem occurs if you already have a branch with the base name.I tried this:git checkout -b features/aName origin/features/aNameUnfortunately, I already had a branch named features, and I got the exception of the question asker.Removing the branch features resolved the problem, the above command worked.I my case I forgot that there was already an unused labs branch. Deleting it solved the problem:git branch -d labsgit checkout -b labs/featureExplanation: You can only have a branch name as parent for other sub-branches or as a normal branch. So the branches labs and labs/feature at the same time is not possible in git.The reason is that the branches are stored in the file system and there you also can't have a file labs and a directory labs at the same level."
"You have to do:git commit -m ""$desc""In the current script, test is going as commit message and commit and script are being treated as next arguments.Here's a merge of the last two answers - chaining together the add -u is awesome, but the embedded read command was causing me troubles. I went with (last line used for my heroku push, change to 'git push origin head' if that's your method):#!/bin/bashread -p ""Commit description: "" descgit add . && \git add -u && \git commit -m ""$desc"" && \git push heroku masterit is helpful to remove from the index the files that have actually been deleted.  git add -u takes care of this.  Also, you may want to consider chaining these commands together like this:git add . && \git add -u && \git commit -m ""$(read -p 'Commit description: ')"" && \git push origin HEADIf any command fails, it will stop evaluating the remaining commands.Just food for thought (untested food).Thanks!"
"Assuming you're wanting to undo the effects of 'git rm ' or 'rm ' followed by 'git add -A' or something similar:# this restores the file status in the indexgit reset -- <file># then check out a copy from the indexgit checkout -- <file>To undo 'git add ', the first line above suffices, assuming you haven't committed yet.Both questions are answered in git status.To unstage adding a new file use git rm --cached# Changes to be committed:#   (use ""git rm --cached <file>..."" to unstage)##   new file:   testTo unstage deleting a file use git reset HEAD# Changes to be committed:#   (use ""git reset HEAD <file>..."" to unstage)##   deleted:    testIn the other hand, git checkout -- never unstage, it just discards non-staged changes.The answers to your two questions are related.  I'll start with the second:Once you have staged a file (often with git add, though some other commands implicitly stage the changes as well, like git rm) you can back out that change with git reset -- <file>.In your case you must have used git rm to remove the file, which is equivalent to simply removing it with rm and then staging that change.  If you first unstage it with git reset -- <file> you can then recover it with git checkout -- <file>."
"If the git submodule deinit fails (maybe because the .gitmodules doesn't list that submodule), try to remove at least the special entry in the index:git rm --cached submodule-namegit commit -m ""Remove submodule entry""git pushThe gray folder should then be gone on GitHub side.This worked http://stackoverflow.com/a/1789374/1798394 :git rm --cached path/to/submodulerm -rf path/to/submodule"
"As ever, Git is right, it just has a quirky way of saying it: when you create a repository, the master branch actually doesn't exist yet because there's nothing for it to point to.Have you tried committing something after your git init? Adding a remote and pulling from it will also work, of course."
"Fundamentally, what filter-branch does is this‰ÛÓeverything else is optimization and/or edge-cases:1For each commit in the listed revision(s):check out that commit;apply the filter(s);create a new commit, which may or may not be the same as the old commit depending on step 2 (i.e., this new copy is a modified version of the old one, unless it's bit-for-bit identical, in which case the ""created new"" commit is actually just the old commit after all).For each ""positive"" ref on the command line, rewrite it to point to the new commit made in step 3 wherever it pointed to an old commit checked out in step 1.Now let's consider your desired action, but I'm going to emphasize a different word:filter all commits in [a] range ... to have all changes in an arbitrary set of files ... discardedI emphasize ""changes"" here because each commit is a complete, stand-alone entity.  Commits don't have ""changes"", they just have files.  The only way to see changes is to compare one specific commit against another specific commit: git diff commitA commitB for example.Thus, when you say ""changes to some file(s)"", the immediate obvious question should be: changes with respect to what?In most cases, people who talk about ""changes in a commit"" mean ""changes in this commit with respect to its immediate ancestor"": for simple (non-merge) commits, the patch you'd get with git show or git log -p.  (Usually they have not thought about what they mean if the commit is a merge, and therefore has multiple parents.  For these, git show generally shows a combined diff of the merge commit against all its parents, but that may not match the user's intent here; see the git-show documentation for details.)When using git filter-branch, you will have to define this (changes with respect to what) yourself.  The filter-branch command gives you the SHA-1 ID of the checked-out commit‰ÛÓeven if it's only ""virtually"" checked out in step 1, rather than actually stuffed into an on-disk tree‰ÛÓin the environment variable $GIT_COMMIT.  So, if your definition of ""with respect to what"" is ""with respect to first parent"", you can use gitrevisions syntax to refer to the parent: ${GIT_COMMIT}^ is the first-parent, even when ${GIT_COMMIT} is a raw SHA-1.A very crude and un-optimized --tree-filter that simply extracts the parent versions of each such file goes like this:2for path in ...list-of-paths...; do    git checkout -q ${GIT_COMMIT}^ -- $path 2>/dev/nulldoneexit 0 # in case the last ""git checkout"" failed, override its statuswhich simply asks git to retrieve the parent commit's version of the file, discarding any error message that occurs because the file does not exist in the parent version.  But this may not match your intent either: it's not clear whether you want to remove the file if it is not in the parent.  Moreover, if a file is added or removed somewhere in the sequence of commits in your range, comparing each original commit only to its (single) original parent commit may mis-fire.  For instance, if file foo does not exist in commit C5, does exist in C6, and remains unchanged in C7, the comparison between C7 and C6 says ""file unchanged"" while the earlier comparison of C5-to-C6 says ""file added"".  If your new (altered) C6‰ÛÓlet's call it C6' to tell them apart‰ÛÓremoves foo because it was not in C5, presumably your C7' should also omit file foo.Another alternative is to compare each commit to the (single) commit just before the entire range.  If your range covers commits C1, C2, C3, ..., C9, we can call the single previous commit C0.  Then, instead of comparing C1 to C1^, C2 to C2^, and so on, we can compare C1 to C0, C2 to C0, C3 to C0, and so on.  Depending on your definition of ""changes"", this may be exactly what you want, because ""undoing a change"" may be transitive: we remove foo in our new C6, therefore we must remove foo in our new C7 as well; we add back bar in the new C7, therefore we must add it back in the new C8 as well, and so on.A less-crude version of the comparison script goes like this (this can be optimized for --index-filter as well, although I will leave the work up to someone else since this is meant for illustration):# Note: I haven't tested this either, not sure how it behaves if# used inside git filter-branch.  As a --tree-filter you would not# really want to ""git rm"" anything, just to ""rm"" it.  As an# --index-filter you would want to ""git rm --cached"".  For# checkout, as a tree filter you want to extract the file into# the working tree, and as an index filter you want to extract# the file into the index.git diff --name-status --no-renames $WITH_RESPECT_TO $GIT_COMMIT \    -- ...paths... |while read status path; do    # note: $path may have embedded white space, so we    # quote it below to protect it from breaking into words    case $status in    A) git rm -- ""$path"";; # file was added, rm it to undo    D|M) git checkout $WITH_RESPECT_TO -- ""$path"";; # deleted or modified    *) echo ""file $path has strange status $status, help!"" 1>&2; exit 1;;    esacdoneExplanation: the above assumes you're filtering a (maybe linear, maybe branch-y) series of commits C1, C2, ..., Cn.  You want them to ""not alter the contents or even existence"" of some set of paths, with respect to some parent-of-C1 commit.  You must set an appropriate specifier into $WITH_RESPECT_TO.  (This can come from the environment, or just be hard-coded into an actual script.  Note that for your --index-filter or --tree-filter, you can have the shell run a script, rather than trying to do it all in line.)For instance, if you're filtering X..Y, which means ""all commits reachable from label Y excluding all commits reachable from label X"", it's possible that the appropriate value for $WITH_RESPECT_TO is simply X, but it is more likely the merge-base of X and Y.  If X and Y are branches that look something like this:...-o-o-o-o-o-o   <-- master     \      *-o-o       <-- X       \        o-o-o-o   <-- Ythen you're filtering the commits on the bottom row, and the first commit to be filtered should probably be ""unchanged with respect to some paths as seen in commit *"" (the commit I marked with an asterisk).  That's the commit that git merge-base X Y would come up with.If you're working with raw SHA-1 IDs, you might be able to use something like:WITH_RESPECT_TO=676699a0e0cdfd97521f3524c763222f1c30a094 \git filter-branch ... (filter-branch arguments go here) ... --676699a0e0cdfd97521f3524c763222f1c30a094..branchwhere the raw SHA-1 is the ID of commit *, as it were.As for the git diff itself, let's look at the sort of output it produces:$ git diff --name-status --no-renames \>  2cd861672e1021012f40597b9b68cc3a9af62e10 \>  7bbc4e8fdb33e0a8e42e77cc05460d4c4f615f4dM       Documentation/RelNotes/1.8.5.4.txtA       Documentation/RelNotes/1.8.5.5.txtM       Documentation/git.txtM       GIT-VERSION-GENM       RelNotes(this is actual output of git diff on the source tree for git itself).  Between those two revisions, one release-notes text file was modified, one was added, Documentation/git.txt was modified, and so on.  Now let's try that again but restricting it to one real pathname and one fake one:$ git diff --name-status --no-renames \>  2cd861672e1021012f40597b9b68cc3a9af62e10 \>  7bbc4e8fdb33e0a8e42e77cc05460d4c4f615f4d \>  -- Documentation/RelNotes/1.8.5.5.txt NoSuchFileA       Documentation/RelNotes/1.8.5.5.txtNow we find out about the one added file, but there is no complaint about the nonexistent file.  So it's OK to give ""nonexistent"" paths; they simply won't occur in the output.If diffing commit $WITH_RESPECT_TO against some later commit C says that path p is added in commit C, we know that it does not exist in $WITH_RESPECT_TO and does in C, so we want to remove it so that it's ""unchanged"".  (This is the case for status-letter A.)IF the diff says that path p is deleted in C, we know that it does exist in the first, and must be restored to remain ""unchanged"".  (This is the case for status-letter D.)If the diff says that path p exists in both, but the contents of the file differ in C, the contents must be restored to remain ""unchanged"".  (This is the case for status-letter M.)Other diff status letters are C, R, T, U, X, and B, but some cannot occur (we exclude C, R, and B by specifying appropriate git diff options; U only occurs during incomplete merges; and X should never occur: see What do the Git ‰ÛÏpairing broken‰Ûù and ‰ÛÏunknown‰Ûù statuses mean, and when do they occur?).  The T case is possibly cause to abort the filtering (regular file changed to symlink, or vice versa, for instance; or something replaced with a submodule).If, after thinking about the issue for a while, you decide that ""with respect to"" should use parent commit(s), you can use git diff-tree, which‰ÛÓgiven a single commit‰ÛÓcompares the tree of the commit with those of its parents.  (But again, note its behavior on merge commits, and make sure that's what you want.)1When using --tree-filter, it actually does the full blown check-everything-out part.  With --index-filter it writes the commit into the index, but not actually into the file system, and lets you make all the changes within the index.  With --env-filter, --msg-filter, --parent-filter, and --commit-filter, it lets you change the text, author, and/or parents of each commit.  The --tag-name-filter lets you alter the tag names if needed, and causes the new names to point to the new commits instead of the old ones (hence --tag-name-filter cat leaves the names unchanged and makes those that pointed to the old commits, now point to the new ones).The --prune-empty covers an edge case: if you have a chain of commits C1 <- C2 <- C3, and your C2' (your copy of C2) has the same underlying tree as your C1', comparing the trees of C2' and C1' produces an empty diff.  The filter-branch operation normally keeps these, but omits them if you use --prune-empty: your new chain will then be C1' <- C3'.  But note that the original chain may have ""empty"" commits; in this case, filter-branch will prune those even if the copies are actually the same as the originals.2These scripts are written as if in script files.  If you turn them into one-liners you will need to add semicolons as necessary, and perhaps also turn exit into return, since you don't want the whole thing to exit when evaled."
"Try the following to force git to re-add the submodule:git submodule add --force git://github.com/ShareKit/ShareKit.git Submodules/ShareKitNote the --force after add.If you'd want to remove version handling altogether, simply remove .git and .gitmodules.iveqy's comment did the trick for me, posting it as an answer so that it is more visible.Simply delete the following folder (adjust with your submodule's path):.git/modules/Submodules/ShareKitYou can delete it with rm path -rf under unix, or to be safe just move it to /tmp (it should be erased on next boot, but gives you time to change your mind if you deleted the wrong folder):mv .git/modules/Submodules/ShareKit /tmp/ShareKit-deleted"
"Don't use merge tool, because it's confusing to you. Please take a backup your current code and revert your changes in current branch. Then checkout your master (dev), get latest then rewrite your changes, then push.First you need to type gitk --all  in your github for which branch will currently open by shown top sidethen you need to revert that or rebase your code with your server latest code:then check type the followings for push your branch to server master. git statusgit add .git statusgit commit -a -m ""Comments""git push origin yourbranchnameThat's all..."
"The conflict message:CONFLICT (delete/modify): res/layout/dialog_item.xml deleted in dialog and modified in HEADmeans that res/layout/dialog_item.xml was deleted in the 'dialog' branch you are merging, but was modified in HEAD (in the branch you are merging to).  So you have to decide whetherremove file using ""git rm res/layout/dialog_item.xml""oraccept version from HEAD (perhaps after editing it) with ""git add res/layout/dialog_item.xml""Then you finalize merge with ""git commit"".Note that git will warn you that you are creating a merge commit, in the (rare) case where it is something you don't want. Probably remains from the days where said case was less rare."
"Your git status shows that you‰Ûªre already in the middle of a merge; you‰Ûªll need to abort that merge before trying again. Run git merge --abort, then check git status again and clean up anything there, then pull."
"Are you working in an environment with hundreds people working on the same project? I didn't feel like you do, therefore the blind use of the branching model git flow refers to is a huge overkill. You don't have to jump from branch to branch just for the sake of using branches. Use branches when you need them. So first I'd recommend to drop the flow tool and use just git.In a solo project you can easily develop in the develop branch directly and branch out features only in case if you need to do something else in parallel.In case if you do use feature branch, here is the sequence that should do the trick:git checkout -b myfeature develop # creating branch from develop and checking outcommit, commit, commit...git rebase myfeature develop # resolve conflicts if anygit checkout developgit merge myfeature # fast-forwardgit checkout mastergit merge develop # fast-forwardgit push # or git push <remote_name> masterThis seems to be way more clear and less verbose.From the latest updates of the OP it is clear that initially he was not finishing the rebase operation properly in case of conflicts. In case of conflicts during rebase you should do:    `git status` #will provide the the list of conflicting files marking them as both modified, so edit them to remove conflicts    `git add {files}` # to tell git that the conflicts are resolved and you can continue with rebase    `git rebase --continue` # continue rebase operation, by applying next patch in line.depending on the way you resolved conflicts the next patch may cause another set of conflicts if the same piece of code was touched."
"If you want to choose your local files over the remote files, do:git checkout --ours wsgi.pygit checkout --ours .openshift/markers/README.mdgit checkout --ours .openshift/cron/README.crongit commit -a"
"It's worth understanding what those error messages mean - needs merge and error: you need to resolve your current index first indicate that a merge failed, and that there are conflicts in those files.  If you've decided that whatever merge you were trying to do was a bad idea after all, you can put things back to normal with:git reset --mergeHowever, otherwise you should resolve those merge conflicts, as described in the git manual.Once you've dealt with that by either technique you should be able to checkout the 9-sign-in-out branch.  The problem with just renaming your 9-sign-in-out to master, as suggested in wRAR's answer is that if you've shared your previous master branch with anyone, this will create problems for them, since if the history of the two branches diverged, you'll be publishing rewritten history.Essentially what you want to do is to merge your topic branch 9-sign-in-out into master but exactly keep the versions of the files in the topic branch.  You could do this with the following steps:# Switch to the topic branch:git checkout 9-sign-in-out# Create a merge commit, which looks as if it's merging in from master, but is# actually discarding everything from the master branch and keeping everything# from 9-sign-in-out:git merge -s ours master# Switch back to the master branch:git checkout master# Merge the topic branch into master - this should now be a fast-forward# that leaves you with master exactly as 9-sign-in-out was:git merge 9-sign-in-outgit checkout -f 9-sign-in-out # change branch, discarding all local modificationsgit branch -M master # rename the current branch to master, discarding current master"
"Try: git reset README.mdI had a similar issue and this was the only thing that solved it.Do this:git merge --abortgit pull (to be sure you're up-to-date)Now replace the contents of the README.md file with what you want it to say.  If you don't want it at all, do git rm README.mdThen if you replaced the contents, commit and push those contents with:    git add README.md    git commit -m ""comment""    git push"
"Conflicts must be manually resolved.In general, the process looks something like this:Search the file(s) identified as containing conflicts for <<<<<<<, ======= and >>>>>>> markers. These will indicate the conflicting sections, with one set of changes between <<<<<<< and =======, and the other between the same ======= and >>>>>>>.Fix these conflicts. This may mean picking one or the other version, or it may mean something more. Conflicts can take any number of forms, which is why manual resolution is required. A human who understands the code must choose how to fix it.In either case, remove the conflict markers when you are done.git add the files where you resolved conflicts to mark those files as resolved.Once all conflicts are resolved, commit the result.Pro Git discusses this in more detail.When conflicts appear, you can use git mergetool for resolve it.Also, you can integrate GUI (for example, DiffMerge).For more info: http://gitguru.com/2009/02/22/integrating-git-with-a-visual-merge-tool/"
"All you should need to do is:# if the file in the right place isn't already checked ingit add <path to desired file># remove the ""both deleted"" file from the indexgit rm --cached ../public/images/originals/dog.aigit commit         # commit the mergeAnother way of dealing with this situation if your files ARE already checked in, and your files have been merged (but not committed, so the merge conflicts are inserted into the file) is to run:git resetThis will switch to HEAD, and tell git to forget any merge conflicts, and leave the working directory as is. Then you can edit the files in question (search for the ""Updated upstream"" notices). Once you've dealt with the conflicts, you can run git add -pwhich will allow you to interactively select which changes you want to add to the index. Once the index looks good (git diff --cached), you can commit, and then git reset --hardto destroy all the unwanted changes in your working directory."
"What read-tree is doing in this case is just adding to a directory in your current tree the contents of another tree. This contents are added just like regular file and directories being created and added, there is no history carried over. All these files will be treated as if you created them.When you try to merge the process fails since it sees that sub_branch history created the data file, and the target directory also contain a different data file created by you.The page you are using is missing a very important step to make subtree works properly, so that you can actually be able to pull updates to it.The proper example can be seen in both these pages:https://www.kernel.org/pub/software/scm/git/docs/howto/using-merge-subtree.htmlhttps://help.github.com/articles/working-with-subtree-mergeWhat it is missing in your case is to properly link the history when you create the subtree:# create the merge record but not change anything in your tree yetgit merge -s ours --no-commit sub_branch# bring the changes and place them in the proper subdirectorygit read-tree --prefix=sub/ -u sub_branchAfter this your main repository will contain the history of the sub repository. Calls to the merge that was failing should now work properly. Calling git log --graph will let you see how the different commits are being merged."
"Not sure what's causing the problem, but I've determined a better solution for what I'm trying to accomplish:bower install git@bitbucket.org:username/my_repo.git --saveSo I'll just be using bower for sharing stuff between repos. I didn't realize you could use a git repository url for a bower component. Pretty sweet I say. Unfortunately this doesn't allow me to make upstream changes from the repo I'm using, but at least I have a super easy way to do it :)UpdateI posted this method on Google+ and Rob Becker mentioned that you could make it even simpler by using a bower symlink:Try adding in ""bower link"" to reduce all that copying.You can simply have your shared code in separate repos and set up as bower components as you already have. Then do$ bower linkin bs-js-commonThis sets up the link. Then in your main project where you have a bower dependency on bs-js-common just do:$ bower link bs-js-commonYou will then have a filesystem link from your main projects bower_components/bs-js-common folder to where the actual project repo lives. This lets you see live changes in both places."
"git stash is perfectly legitimate, though as Greg said, for some reason fixing the conflicts can get strange. But they are still fixable, you won't actually fubar anything. The command as I know to re-apply the stash is git stash apply, though pop may be an alternative that I'm not aware of (or it could do something different, I don't know, so you probably want to use apply.) Is there a reason you don't want to commit those changes before merging? Generally that's the right thing to do. Another option is:git stashgit checkout -b newworkgit stash applygit commit ...This creates a new branch, which will allow you to get your master up to date without conflicts, (checkout master again, then pull or fetch + merge).  Then you can merge your branch back with (while still on master)  git merge newwork. You can resolve the conflicts on master, while still retaining the work on newwork without any conflicts.  This is a bit safer if you are worried about conflicts really screwing things up, but generally, conflicts are just part of the process, so don't worry too much about them.It's good practice to always commit any local changes before pulling (merging) new code. If you don't commit, then Git doesn't know how you want to manage your local changes. Merge only with a clean working tree.There may be conflicts in the merge, due to the same files being changed locally and by somebody else. In my experience, resolving conflicts from an actual merge operation is slightly simpler than resolving the same conflict from a stash pop operation.First you should: git checkout -- public_html/sites/filegit checkout -- public_html/sites/file1.txtgit checkout -- public_html/sites/file2.txtNext step: git pull origin masterI have another solution:git reset --hard FETCH_HEADIt works in almost cases."
"You can get contents of file with conflict markers using git checkout --conflict=merge -- file, but if you have cleaned up index by using git add file (or if GUI did that for you) it wouldn't work.There is git update-index --unresolve, but it is hacky, and does not work very reliably.  I think the state it restores would be not enough for git-mergetool.You would probably have to redo merge, or use git update-index --cacheinfo to manually set stages version... git-stash can help you preserve correctly resolved conflicts.The most elegant solution would be to prevent this problem from the very beginning:git config --global mergetool.[tool].cmd [command-line call]git config --global mergetool.[tool].trustExitCode falseAs far as I know, you won't be able to commit while a file still contain conflict markers in it.... which is not exactly true:The OP mentions that you can (I copy here his pastbin), but that won't be enough for the mergetool to be trigger again:Auto-merged READMECONFLICT (content): Merge conflict in READMEAutomatic merge failed; fix conflicts and then commit the result.lynx:~/test_clone$ lsREADMElynx:~/test_clone$ git add READMElynx:~/test_clone$ git commit -aCreated commit 46ee062: It works!lynx:~/test_clone$ lsREADMElynx:~/test_clone$ cat README<<<<<<< HEAD:READMEtestingtesting=======hmm>>>>>>> 881d60f5f738bc5716f5c9a9384e262b535717fd:READMElynx:~/test_clone$As Charles Bailey comments, and illustrates in this SO answer, the mergetool is queried because there are 3 instances of the same file in the index:For an unmerged file in a conflict git makes available the common base, local and remote versions of the file in the index. (This is where they are read from for use in a 3-way diff tool by git mergetool.) You can use git show to view them:# common base:git show :1:afile.txt# 'ours'git show :2:afile.txt# 'theirs'git show :3:afile.txtgit add (with whatever content, including conflict markers) will automatically removes 2 of them, ensuring the mergetool won't be called again.@VonC: I did not create an account at first (I have now), so I could not post a comment.Invoking git mergetool does not detect it, it seems:Auto-merged READMECONFLICT (content): Merge conflict in READMEAutomatic merge failed; fix conflicts and then commit the result.lynx:~/test_clone$ lsREADMElynx:~/test_clone$ git add READMElynx:~/test_clone$ git commit -aCreated commit 46ee062: It works!lynx:~/test_clone$ lsREADMElynx:~/test_clone$ cat README>>>>>> 881d60f5f738bc5716f5c9a9384e262b535717fd:READMElynx:~/test_clone$ git mergetoolmerge tool candidates:  opendiff emerge vimdiffNo files need merginglynx:~/test_clone$git mergetool can accept a file name, but that does not work either:Auto-merged READMECONFLICT (content): Merge conflict in READMEAutomatic merge failed; fix conflicts and then commit the result.caracal:~/test_clone2$ git mergetoolmerge tool candidates:  opendiff emerge vimdiffMerging the files: READMENormal merge conflict for 'README':  {local}: modified  {remote}: modifiedHit return to start merge resolution tool (emerge): caracal:~/test_clone2$ ls#*merge*#145962bz#  README  README~  README.origcaracal:~/test_clone2$ git mergetoolmerge tool candidates:  opendiff emerge vimdiffNo files need mergingcaracal:~/test_clone2$ git mergetool READMEmerge tool candidates:  opendiff emerge vimdiffREADME: file does not need mergingcaracal:~/test_clone2$ ls#*merge*#145962bz#  README  README~  README.origcaracal:~/test_clone2$ Note here also that I did not commit after exiting git mergetool."
"If you mean you want the pull to overwrite local changes, doing the merge as if the working tree were clean, well, clean the working tree:git reset --hardgit pullIf there are untracked local files you could use git clean to remove them. Use git clean -f to remove untracked files, -df to remove untracked files and directories, and -xdf to remove untracked or ignored files or directories.If on the other hand you want to keep the local modifications somehow, you'd use stash to hide them away before pulling, then reapply them afterwards:git stashgit pullgit stash popI don't think it makes any sense to literally ignore the changes, though - half of pull is merge, and it needs to merge the committed versions of content with the versions it fetched.For me the following worked:(1) First fetch all changes:$ git fetch --all(2) Then reset the master:$ git reset --hard origin/master(3) Pull/update:$ git pullLook at git stash to put all of your local changes into a ""stash file"" and revert to the last commit. At that point, you can apply your stashed changes, or discard them.If you are on Linux:git fetchfor file in `git diff origin/master..HEAD --name-only`; do rm -f ""$file""; donegit pullThe for loop will delete all tracked files which are changed in the local repo, so git pull will work without any problems.The nicest thing about this is that only the tracked files will be overwritten by the files in the repo, all other files will be left untouched.The command bellow wont work always. If you do just:$ git checkout thebranchAlready on 'thebranch'Your branch and 'origin/thebranch' have diverged,and have 23 and 7 different commits each, respectively.$ git reset --hardHEAD is now at b05f611 Here the commit message bla, bla$ git pullAuto-merging thefile1.cCONFLICT (content): Merge conflict in thefile1.cAuto-merging README.mdCONFLICT (content): Merge conflict in README.mdAutomatic merge failed; fix conflicts and then commit the result.and so on...To really start over, downloading thebranch and overwriting all your local changes, just do:$ git checkout thebranch$ git reset --hard origin/thebranchThis will work just fine.$ git checkout thebranchAlready on 'thebranch'Your branch and 'origin/thebranch' have diverged,and have 23 and 7 different commits each, respectively.$ git reset --hard origin/thebranchHEAD is now at 7639058 Here commit message again...$ git status# On branch thebranchnothing to commit (working directory clean)$ git checkout thebranchAlready on 'thebranch'"
"If you want to choose your local files over the remote files, do:git checkout --ours wsgi.pygit checkout --ours .openshift/markers/README.mdgit checkout --ours .openshift/cron/README.crongit commit -a"
"git merge --abort might be what you're looking for.Modern Git:git merge --abortOlder:git reset --mergeOld-school (warning: will discard all your local changes):git reset --hardBut actually, it is worth noticing that git merge --abort is only equivalent to git reset --merge given that MERGE_HEAD is present. This can be read in the git help for merge command.git merge --abort is equivalent to git reset --merge when MERGE_HEAD is present.After a failed merge, when there is no MERGE_HEAD, the failed merge can be undone with git reset --merge but not necessarily with git merge --abort, so they are not only old and new syntax for the same thing. Personally I find git reset --merge much more useful in everyday work."
"No history has been lost: The change to README made on the experimental branch is still contained in commit 210fdc1. That it is not part of the merge commit 909139f is solely because you explicitly reverted it before finalizing the merge.You didn‰Ûªt say what you expected to happen, so I can only guess what exactly surprised you here. I‰Ûªll just point out two likely candidates.A merge commit isn‰Ûªt limited to modifying just the files touched since the merge base, or even only the files that have conflicting changes. In fact, it can be completely different from all its parents.‰ÛÏCompletely different‰Ûù of course isn‰Ûªt what one would recommend, because it would break everyone‰Ûªs assumptions about what a merge does. However, it can make perfect sense to extend documentation files in a merge commit, and resolving certain merge conflicts may require changing additional files.When you call git log -- some_path, a process called history simplification is invoked. As the man page describes it, git log will try to display only those commits ‰ÛÏthat are enough to explain how the files that match the specified paths came to be‰Ûù. In your case, the initial commit is enough to explain the current state of README (because README has still, or again, the same content), so it is all that is shown.You may want to use --full-history, possibly together with --simplify-merges, or some other history simplification options. They, as well as the exact rules for including commits (which are more complicated than implied above), are described in the git log man page, with an extended example.You have not actually lost the changes, you just have not checked in the changes to file README yet, so they are not in any commit shown by your git log commands:*   9b8ede8 (HEAD, master) Merge branch 'experiment'|\  | * 210fdc1 (experiment) Experimental* | d0c1637 Master changes|/  * b558d42 Initial commit(my SHA's are of course different) and:$ git status# On branch master# Changes not staged for commit:#   (use ""git add <file>..."" to update what will be committed)#   (use ""git checkout -- <file>..."" to discard changes in working directory)##   modified:   README## Untracked files:#   (use ""git add <file>..."" to include in what will be committed)##   conflict_file.origno changes added to commit (use ""git add"" and/or ""git commit -a"")As @Chronial noted in comments, you explicitly told git to do a git reset --mixed (--mixed is the default) of file README to the then-HEAD, which was (in your case) ad8b68e.Had you run git status in the middle of your conflicted merge (before git mergetool), you would have seen this:$ git status# On branch master# You have unmerged paths.#   (fix conflicts and run ""git commit"")## Changes to be committed:##   modified:   README## Unmerged paths:#   (use ""git add <file>..."" to mark resolution)##   both modified:      conflict_file#The git mergetool step resolves the conflict, moving conflict_file into the same ready-to-commit state as README above -- but after the reset --mixed, README moves from ""changes to be committed"" to ""changes not staged for commit""."
"You have a merge conflict which happens when two sides both modified the same file.First, make sure to commit your local changes. Then git pull. When there are merge conflicts that can't be automatically resolved, you'll have to open the respective files in a text editor and manually choose which lines you want from which side. This is how this will look.<<<<<<< HEADText added locally=======Text added on the remote>>>>>>> masterAfter you corrected the line and removed the separators added by git, git add the file and finish the merge with git commit. Since you committed your local changes before, you can always rollback in case that you messed up the conflicting files.For further information, I suggest to read the Github guide about resolving merge conflicts."
"I have worked on iPhone applications full time since the SDK launch, most of that time spent working on teams with multiple developers.The truth is that it's way more harmful to disallow merging of that .pbxproj file than it is helpful.  As you say, when you add a file unless other people get that file, they have to also add it to their project - in an application of any size, that sucks and it also takes away a huge benefit of source code control in that you cannot really revert to a complete earlier project state just through git.The .pbxproj file is simply a property list (similar to XML).  From experience, just about the ONLY merge conflict you were ever get is if two people have added files at the same time.  The solution in 99% of the merge conflict cases is to keep both sides of the merge, which for git at least simply involves removing any >>>>, <<<<, and ==== lines.  In fact this is so common that I have created a simple shell script to fix a .pbxproj file in a merge state from git, I run this from within the project directory (at the Classes level):#!/bin/sh    projectfile=`find -d . -name 'project.pbxproj'`    projectdir=`echo *.xcodeproj`    projectfile=""${projectdir}/project.pbxproj""    tempfile=""${projectdir}/project.pbxproj.out""    savefile=""${projectdir}/project.pbxproj.mergesave""    cat $projectfile | grep -v ""<<<<<<< HEAD"" | grep -v ""======="" | grep -v ""^>>>>>>> "" > $tempfile    cp $projectfile $savefile    mv $tempfile $projectfileWorst case if it fails (you ask XCode to load the project and it fails to load), you simply delete the .pbxproj file, check out the master from git, and re-add your files.  But I've never had that happen in many months of use with this script, again working full time on iPhone applications with several other developers.Another option (pointed out in comments below) that you can try using in place of the script, is to add this line to a .gitattributes file:*.pbxproj text -crlf -diff -merge=unionThen git will always take both sides of a merge for the .pbxproject files, having the same effect as the script I provided only without any extra work.Lastly, here is my complete .gitignore file, showing what I do have it set to ignore as there are a few things you don't want - in my case really just emacs remnants and the whole build directory:# xcode noisebuild/**.pbxuser*.mode1v3*~# old skool.svn# osx noise.DS_StoreprofileThis works for me in Xcode 4.6 and Git 1.7.5. Add and commit .gitattributes file with this:*.pbxproj binary merge=unionI've tested this with another team member and works great.Taken from:http://robots.thoughtbot.com/post/33796217972/xcode-and-git-bridging-the-gapThe short answer is that even if you don't include that line in .gitattributes, you may not be able to easily merge two modified versions of a .pbxproj.  It's better for git to treat it as a binary.  See here for details: Git and pbxprojUpdate: Even though the git book still agrees with this answer, I no longer do. I version control my .pbxproj just like any other non-binary source file.I did create a Python script that can handle merge conflicts in XCode Project files.If you want to try it, you can check it out here: https://github.com/simonwagner/mergepbxYou will have to install it as a merge driver, so it gets called automatically when you have a merge conflict in your project file (the README.md will tell you how to do that).It should work much better than using merge=union as mergepbx understands the semantics of your project file and therefore will resolve the conflict correctly.However the project is still alpha, don't expect it to understand every project file that is out there.Frankly, the existing answers are misleading.If you never delete or rename files, then using the merge=union strategy, which just combines the differences in different commits directly, is a good idea. However, in the real world, we do need to delete or rename files sometimes. Merging the differences without any modification would make a lot of problems under these situations, and these problems usually lead to the ""Workspace Integrity - Couldn't load project"" issue, which makes you even not able to run the project.The best solution I got so far:1) Design the project well and add all the needed files at the beginning, so you would seldom need to change the project.pbxproj.2) Make your features tiny. Don't do too many things in a branch.3) For any reason, if you need to modify the file structure and get conflicts in project.pbxproj, use your favorite text editor to solve them manually. As you make your tasks tiny, the conflicts might be easy to solve."
".pbxproj will change when you add new files to the project. There will be conflicts if two or more collaborators add files at the same time (without getting one another's changes first). We are avoiding this in my project by following these steps before and after adding new files:Before adding a file, commit your changes, then pull from the master so that you have the latest.If someone has added a file, you now have the latest .pbxprojAdd your file(s).Immediately commit and push your changes up to the master (hopefully, before another collaborator has added another file).It's wimpy, but we don't relish manually resolving .pbxproj conflicts. Also, see this Stack Overflow question with excellent responses: How to use Git properly with XCode?In most case, you can fix the merge by following code, remove the lines which git adds:#!/bin/bashFILE={PRODUCT_NAME}.xcodeproj/project.pbxprojsed '/======/d' $FILE | sed '/<<<<</d' | sed '/>>>>>/d' > tempcat temp > $FILErm tempbut if you rename the group of your project and it leads to conflicts, you will manually delete the extra lines of your original group."
"Note that, because the merge commit doesn't exist yet, you won't be able to use git log or git show with the %P format specifier (which corresponds to parent hashes) to access the parents of that future merge commit.Simple mergeIn case of a simple merge of one branch into another, you can rungit log -n 1 --pretty=format:""%H""git log -n 1 --pretty=format:""%H"" MERGE_HEADwhich will print the full SHAs ofthe tip of the current branch, andthe branch being merged in,respectively.Octopus mergeIf any conflict arises during an octopus merge, which involves merging more than one branch into another, Git will abort the merge; therefore, your question wouldn't normally apply to that case. As pointed out by Andrew in his comment, though, the --no-commit flag can be used to intentionally interrupt the merge, even if it's free of conflicts. However, in that case, runninggit log -n 1 --pretty=format:""%H"" MERGE_HEADwill only print the SHA of one of the branches being merged in; it won't list the SHAs of all of those branches.Everything's not lost, though; there is a way of printing all of them. It turns out that the .git/MERGE_HEAD file contains the SHAs of all the branches being merged; therefore, a more robust approach consists in simply dumping the contents of that file:cat .git/MERGE_HEADTo fix ideas, here is a (voluntarily contrived) example of an interrupted octopus merge:# set things up$ mkdir test_octopuss$ cd test_octopuss$ git init# create an initial commit$ printf ""foo\n"" > README.md$ git add README.md$ git commit -m ""add 'foo' in README""# create three different commits on branches whose tips count the root commit as parent$ printf ""bar\n"" >> README.md $ git commit -am ""add 'bar' in README""$ git checkout -b another master^$ printf ""bar\n"" >> README.md $ git commit -am ""add 'bar' in README""$ git checkout -b yetanother master^$ printf ""bar\n"" >> README.md $ git commit -am ""add 'bar' in README""# get our bearings$ git log --oneline --graph --all --decorate* 93e4667 (HEAD, yetanother) add 'bar' in README| * a114920 (another) add 'bar' in README|/  | * 7adc927 (master) add 'bar' in README|/  * bc400cd add 'foo' in README# merge using the --no-commit flag (to pretend that the merge failed)$ git merge --no-commit master anotherTrying simple merge with masterTrying simple merge with anotherAutomatic merge went well; stopped before committing as requested# the following command fails to list all the heads being merged in$ git log -n 1 --pretty=format:""%H"" MERGE_HEAD7adc927d9f7a0c8864d0ff784c0c53b0ded00616# list of all the heads being merged in the current branch$ cat .git/MERGE_HEAD7adc927d9f7a0c8864d0ff784c0c53b0ded00616a114920072210417a1fa6c9b2b33b5729097ee93"
"Try: git reset README.mdI had a similar issue and this was the only thing that solved it.Do this:git merge --abortgit pull (to be sure you're up-to-date)Now replace the contents of the README.md file with what you want it to say.  If you don't want it at all, do git rm README.mdThen if you replaced the contents, commit and push those contents with:    git add README.md    git commit -m ""comment""    git push"
"Is there any way to do that?Simply leave your current repo as it is.Go elsewhere and try a different approach.First make sure your config user.name and user.email are properly set locally.Then clone the remote repo first:git clone https://<yourUserName>@github.com/<yourUserName>/<yourRepo>cd <yourRepo>Once that is done, you should be in the master branch (check with a git status, and a git branch -avvv)Finally, report the files you had created or modified from the old local repo to this one (simply copy), do a git add .; git commit -m ""First implementation""; git push."
"Let's say project is a name of the branch to be merged, and README.md is a name of the file that keep branch specific information.I would suggest the following steps:Merge project branch, but make sure changes are not committed, and not fast-forwarded$ git merge --no-commit --no-ff projectUnstage README.md file and checkout its current branch version$ git checkout HEAD -- README.mdComplete merge$ git commitAlso, it makes sense to install merge driver that will keep branch specific version of a file in case of merge conflict. In such case, you will never need to resolve conflicts in branch specific files manually.Such merge driver is usually called ours and defined as:$ git config --global merge.ours.driver trueNow, you can specify in .gitattributes file, when this merger should be used.In our case, it is needed to add the following rule to .gitattributes and commit it:README.md merge=ours"
"I don't know what version of git you were using back in '11, but right now I'm on 1.7.7.4.It appears to me that doing an add to mark the conflict resolved does add the file to the stage; so my approach is:git add <filename>git reset HEAD <filename>You could also create a custom git command that does this for you. I created an executable file named git-resolve (no extension) in a directory on my path (I like to put stuff like this in ~/.bin) and put this in it:git add $@git reset HEAD $@Then from the command line, after I've resolved my conflicts, I can do:$ git resolve <filename>"
Git was simple and easy to pick up they said; forgetting to mention the part about losing your mind
"Take the approach that is described in the Pro Git book:On the Bootstrap branch, merge the upstream changes:$ git checkout bootstrap-upstream$ git pullThen, on your master branch, subtree merge the Bootstrap subtree with the --squash option:$ git checkout master$ git merge --squash -s subtree --no-commit bootstrap-upstreamThe key here is the use of the subtree merge strategy, which takes all the changes from Bootstrap wholesale and puts it in their place (sub-directory).Commit and write your commit message:$ git commitThis will avoid having all the history of bootstrap-upstream in your master branch, and you won't have to use git rebase."
"As the message that you quote suggests, you could do git pull before pushing. This will ensure that your checkout knows of all commits on the repository."
"From what I understand, you'd have to switch to your local copy of gh-pages. Merge in master, and then push gh-pagesgit checkout gh-pagesgit merge mastergit push origin gh-pagesIf I understand you correctly it seems that you created the dummy Readme and the other files on your local master branch but intended to have them on the gh-pages branch. If thats the case, the safest option is to merge your master branch into the gh-pages branch (assuming you dont have other files on master you would rather not have on the gh-pages branch). The command suggested git push -f origin master:gh-pages will push your local master branch to the gh-pages branch. I'm not really sure what you mean but into vs onto, as branch names are just pointers in git."
"A single branch of another repository can be easily placed under a subdirectory retaining its history. For example:git subtree add --prefix=rails git://github.com/rails/rails.git masterThis will appear as a single commit where all files of Rails master branch are added into ""rails"" directory.However the commit's title contains a reference to the old history tree.Add 'rails/' from commit <rev>Where <rev> is a SHA-1 commit hash. You can still see the history, blame some changes.git log <rev>git blame <rev> -- README.mdNote that you can't see the directory prefix from here since this is an actual old branch left intact.You should treat this like a usual file move commit: you will need an extra jump when reaching it.# finishes with all files added at once commitgit log rails/README.md# then continue from original treegit log <rev> -- README.mdThere are more complex solutions like doing this manually or rewriting the history as described in other answers.The git-subtree command is a part of official git-contrib, some packet managers install it by default (OS X Homebrew).But you might have to install it by yourself in addition to git.There are two possible solutions:SubmodulesEither copy repository A into separate directory in larger project B, or (perhaps better) clone repository A into subdirectory in project B.  Then use git submodule to make this repository a submodule of a repository B.This is a good solution for loosely-coupled repositories, where development in repository A continues, and major portion of development is separate stand-alone development in A.  See also SubmoduleSupport and GitSubmoduleTutorial pages on Git Wiki.Subtree mergeYou can merge repository A into a subdirectory of a project B using the subtree merge strategy. This is described in Subtree Merging and You by Markus Prinz.git remote add -f Bproject /path/to/Bgit merge -s ours --no-commit Bproject/mastergit read-tree --prefix=dir-B/ -u Bproject/mastergit commit -m ""Merge B project as our subdirectory""git pull -s subtree Bproject masterOr you can use git subtree tool (repository on github) by apenwarr (Avery Pennarun), announced for example in his blog post A new alternative to git submodules: git subtree.I think in your case (A is to be part of larger project B) the correct solution would be to use subtree merge"
"As mentioned in "".gitattributes & individual merge strategy for a file"":The merge driver is only called in non-trivial cases, i.e. if both master and test have touched setup (and you need to define the merge driver ours first).You can see an example of concurrent modification (ie modification in both branches) in ""How do I tell git to always select my local version for conflicted merges on a specific file?"".So if your merges didn't involve modifications of the same files within cache/ folder in both branches, your merge driver was never called.But in your case, for files with different settings, I would recommend not using a merge driver, but a content filter driver, as in ""Keep settings in branch""That allows you to keep in version control:template file for the settings in the cache/ foldera script able to take a template file and replace the value placeholders with the right value depending on the branch checked out.Easy fix once I knew what I was doing: I missed adding the merge strategy with git config --global merge.ours.driver true in my local environment."