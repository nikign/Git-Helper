time,userCmd,isGitCommand,gitCommand,isError,result,hasSolution,satisfy
29 Feb 2016 04:22:59,git pull,True,pull,True,"U	README.md
U	menu.py
U	test.py
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
",True,
29 Feb 2016 04:23:03,git status,True,status,False,"On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commit each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
You have unmerged paths.
  (fix conflicts and run ""git commit"")

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)

	both modified:   README.md
	both modified:   menu.py
	both modified:   test.py

Untracked files:
  (use ""git add <file>..."" to include in what will be committed)

	log.csv

no changes added to commit (use ""git add"" and/or ""git commit -a"")
",,
29 Feb 2016 04:23:06,q,False,,,,,
29 Feb 2016 21:13:48,git pull,True,pull,True,"U	README.md
U	menu.py
U	test.py
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
",True,yes
29 Feb 2016 21:14:12,git status,True,status,False,"On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commit each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
You have unmerged paths.
  (fix conflicts and run ""git commit"")

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)

	both modified:   README.md
	both modified:   menu.py
	both modified:   test.py

Untracked files:
  (use ""git add <file>..."" to include in what will be committed)

	log.csv

no changes added to commit (use ""git add"" and/or ""git commit -a"")
",,
29 Feb 2016 21:14:18,git diff,True,diff,False,"diff --cc README.md
index 5578e01,2127b53..0000000
--- a/README.md
+++ b/README.md
@@@ -1,4 -1,2 +1,9 @@@
++<<<<<<< HEAD
 +# Here is a conflict!!!
 +Try to, again and again and again, create a conflict!
 +
 +
++=======
+ # Here is a you know it!!!
+ Try to, again, no conflict at all.create a conflict!
++>>>>>>> 3223870142a80440a0c18382f75b43b54f0df8b0
diff --cc menu.py
index 83a61ff,788e2ba..0000000
--- a/menu.py
+++ b/menu.py
@@@ -1,70 -1,3 +1,7 @@@
  import sys, os
++<<<<<<< HEAD
 +from wolegequ import Repo
++=======
+ from haha import Repo
++>>>>>>> 3223870142a80440a0c18382f75b43b54f0df8b0
  repo = Repo('/Users/ray/Documents/Project/Conflict')
- 
- menu_actions = {}
- def main_menu():
-     os.system('clear')
- 
-     print ""Welcome,\n""
-     print ""Choose:""
-     print ""1.Check Git Status""
-     print ""2.Check Git Log""
-     print ""\n0. Quit""
-     choice = raw_input("" >> "")
-     exec_menu(choice)
-     return
- 
- def exec_menu(choice):
-     os.system('clear')
-     ch = choice.lower()
-     if ch == '':
-         menu_actions['main_menu']()
-     else:
-         try:
-             menu_actions[ch]()
-         except KeyError:
-             print ""Invalid slection, please try again.\n""
-             menu_actions['main_menu']()
-     return
- 
- def menu1():
-     print ""check git status""
-     print ""untacked files:""
-     print repo.untracked_files
-     #print repo.index.diff(repo.head)
-     print ""9.Back""
-     print ""0.Quit""
-     choice = raw_input("" >> "")
-     exec_menu(choice)
-     return
- 
- def menu2():
-     print ""check git log""
-     head = repo.head
-     master = head.reference
-     master.commit
-     log  = master.log()
-     print log
-     print ""9.Back""
-     print ""0.Quit""
-     choice = raw_input("" >> "")
-     exec_menu(choice)
-     return
- 
- def back():
-     menu_actions['main_menu']()
- 
- def exit():
-     sys.exit()
- 
- menu_actions = {
-         'main_menu': main_menu,
-         '1': menu1,
-         '2': menu2,
-         '9': back,
-         '0': exit,
- }
- 
- if __name__ == ""__main__"":
-     main_menu()
diff --cc test.py
index de01d69,7550a20..0000000
--- a/test.py
+++ b/test.py
@@@ -1,8 -1,4 +1,14 @@@
  from git import Repo
++<<<<<<< HEAD
 +repo = Repo('what the hell is this?')
 +assert not repo.bare
 +
 +assert not repo.is_dirty()
 +print repo.untracked_files
 +
 +
++=======
+ yese
+ assert not rego.is_dirty()
+ print rego.untracked_files
++>>>>>>> 3223870142a80440a0c18382f75b43b54f0df8b0
",,
29 Feb 2016 21:14:35,git branch,True,branch,False,"* master
",,
29 Feb 2016 21:14:44,q,False,,,,,yes
29 Feb 2016 23:09:34,git pull,True,pull,True,"U	README.md
U	menu.py
U	test.py
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
",True,yes
29 Feb 2016 23:09:41,q,False,,,,,yes
01 Mar 2016 01:37:57,ls,False,,False,"README.md
log.csv
menu.py
read.txt
test.py
",,
01 Mar 2016 01:38:02,cd ..,False,,False,,,
01 Mar 2016 01:38:05,cd Conflict,False,,False,,,
01 Mar 2016 01:38:08,git status,True,status,False,"On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commit each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
You have unmerged paths.
  (fix conflicts and run ""git commit"")

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)

	both modified:   README.md
	both modified:   menu.py
	both modified:   test.py

Untracked files:
  (use ""git add <file>..."" to include in what will be committed)

	log.csv

no changes added to commit (use ""git add"" and/or ""git commit -a"")
",,
01 Mar 2016 01:38:19,clear,False,,False,[H[J,,
01 Mar 2016 01:38:42,mkdir sample,False,,False,,,
01 Mar 2016 01:38:43,ls,False,,False,"README.md
log.csv
menu.py
read.txt
sample
test.py
",,
01 Mar 2016 01:38:49,cd sample,False,,False,,,
01 Mar 2016 01:39:00,touch sample.txt,False,,False,,,
01 Mar 2016 01:39:02,ls,False,,False,"sample.txt
",,
01 Mar 2016 01:39:07,git status,True,status,False,"On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commit each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
You have unmerged paths.
  (fix conflicts and run ""git commit"")

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)

	both modified:   ../README.md
	both modified:   ../menu.py
	both modified:   ../test.py

Untracked files:
  (use ""git add <file>..."" to include in what will be committed)

	../log.csv
	./

no changes added to commit (use ""git add"" and/or ""git commit -a"")
",,
01 Mar 2016 01:39:27,cd ..,False,,False,,,
01 Mar 2016 01:39:28,git status,True,status,False,"On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commit each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
You have unmerged paths.
  (fix conflicts and run ""git commit"")

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)

	both modified:   README.md
	both modified:   menu.py
	both modified:   test.py

Untracked files:
  (use ""git add <file>..."" to include in what will be committed)

	log.csv
	sample/

no changes added to commit (use ""git add"" and/or ""git commit -a"")
",,
01 Mar 2016 01:39:48,git add sample,True,add,False,,,
01 Mar 2016 01:40:00,"git commit -m ""added sample""",True,commit,True,"error: commit is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm <file>'
hint: as appropriate to mark resolution and make a commit.
U	README.md
U	menu.py
U	test.py
fatal: Exiting because of an unresolved conflict.
",,
01 Mar 2016 01:40:20,git pull,True,pull,True,"U	README.md
U	menu.py
A	sample/sample.txt
U	test.py
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
",True,yes
01 Mar 2016 01:44:27,q,False,,,,,yes
01 Mar 2016 01:47:45,git pull,True,pull,True,"U	README.md
U	menu.py
A	sample/sample.txt
U	test.py
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
",True,yes
01 Mar 2016 01:49:29,q,False,,,,,yes
01 Mar 2016 01:49:46,git pull,True,pull,True,"U	README.md
U	menu.py
A	sample/sample.txt
U	test.py
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
",True,yes
01 Mar 2016 01:50:33,q,False,,,,,no
01 Mar 2016 01:50:43,git pull,True,pull,True,"U	README.md
U	menu.py
A	sample/sample.txt
U	test.py
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
",True,yes
01 Mar 2016 01:52:02,q,False,,,,,no
01 Mar 2016 01:52:07,git pull,True,pull,True,"U	README.md
U	menu.py
A	sample/sample.txt
U	test.py
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
",True,yes
01 Mar 2016 01:53:37,q,False,,,,,yes
15 Mar 2016 13:10:37,q,False,,,,,yes
decision_tree,19 Mar 2016 02:50:02,git status,True,status,True,[Errno 2] No such file or directory,,
decision_tree,19 Mar 2016 02:50:15,git,True,git,True,"usage: git [--version] [--help] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty Git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

'git help -a' and 'git help -g' lists available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
",,no
decision_tree,19 Mar 2016 02:51:00,q,False,,,,,no
